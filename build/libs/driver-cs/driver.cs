// Dafny program Driver.dfy compiled into C#
// To recompile, you will need the libraries
//     System.Runtime.Numerics.dll System.Collections.Immutable.dll
// but the 'dotnet' tool in net6.0 should pick those up automatically.
// Optionally, you may want to include compiler switches like
//     /debug /nowarn:162,164,168,183,219,436,1717,1718

using System;
using System.Numerics;
using System.Collections;
[assembly: DafnyAssembly.DafnySourceAttribute(@"// dafny 4.9.0.0
// Command-line arguments: build --no-verify --target cs --output build/libs/driver-cs/driver --function-syntax 4 --quantifier-syntax 4 src/dafny/Driver.dfy
// Driver.dfy


module Driver {
  method {:verify true} {:print} {:timeLimitMultiplier 7} {:main} /*{:_timeLimit 70}*/ Main(args: seq<string>)
    decreases args
  {
    var optionParser := new ArgumentParser(""<string>"");
    optionParser.AddOption(""-d"", ""--dis"", 0, ""Disassemble <string>"");
    optionParser.AddOption(""-p"", ""--proof"", 1, ""Generate proof object to verify/use the CFG for <string>"");
    optionParser.AddOption(""-e"", ""--refine"", 1, ""Generate proof object with distinct segments <string>"");
    optionParser.AddOption(""-s"", ""--segment"", 0, ""Print segment of <string>"");
    optionParser.AddOption(""-l"", ""--lib"", 1, ""The path to the Dafny-EVM source code. Used to add includes files in the proof object. "");
    optionParser.AddOption(""-c"", ""--cfg"", 1, ""Max depth. Control flow graph in DOT format"");
    optionParser.AddOption(""-r"", ""--raw"", 0, ""Display non-minimised and minimised CFGs"");
    optionParser.AddOption(""-z"", ""--size"", 1, ""The max size of segments. Default is upto terminal instructions or JUMPDEST."");
    optionParser.AddOption(""-n"", ""--notable"", 0, ""Don't use tables to pretty-print DOT file. Reduces size of the DOT file."");
    optionParser.AddOption(""-t"", ""--title"", 1, ""The name of the program."");
    optionParser.AddOption(""-i"", ""--info"", 0, ""The stats of the program (size, segments)."");
    if |args| < 2 || args[1] == ""--help"" {
      print ""Not enough arguments\n"";
      optionParser.PrintHelp();
    } else if |args| == 2 {
      if |args[1]| == 0 {
        print ""String must be non empty \n"";
      } else if |args[1]| % 2 != 0 {
        print ""String must be non empty and have even length, length is "", |args[1]|, ""\n"";
      } else if Hex.IsHexString(if args[1][..2] == ""0x"" then args[1][2..] else args[1]) {
        assert |args| > 1;
        assert |args[1]| >= 2;
        var x := Disassemble(if args[1][..2] == ""0x"" then args[1][2..] else args[1]);
        print ""Disassembled code:\n"";
        PrintInstructions(x);
        print ""--------------- Disassembled ---------------------\n"";
      } else {
        print ""String must be hexadecimal\n"";
      }
    } else if args[1] == ""--help"" || args[1] == ""-h"" {
      optionParser.PrintHelp();
    } else {
      assert |args| > 2;
      var stringToProcess := args[|args| - 1];
      if |stringToProcess| == 0 {
        print ""String must be non empty \n"";
      } else if |stringToProcess| % 2 != 0 {
        print ""String must have even length, length is "", |stringToProcess|, ""\n"";
      } else if !Hex.IsHexString(if stringToProcess[..2] == ""0x"" then stringToProcess[2..] else stringToProcess) {
        print ""String must be hexadecimal\n"";
      } else {
        var x := Disassemble(if stringToProcess[..2] == ""0x"" then stringToProcess[2..] else stringToProcess);
        var optArgs := args[1 .. |args| - 1];
        var disOpt: bool := if optionParser.GetArgs(""--dis"", optArgs).Success? then true else false;
        var segmentOpt: bool := if optionParser.GetArgs(""--segment"", optArgs).Success? then true else false;
        var proofOpt: bool := if optionParser.GetArgs(""--proof"", optArgs).Success? then true else false;
        var proofRefine: bool := if optionParser.GetArgs(""--refine"", optArgs).Success? then true else false;
        var libOpt: string := match optionParser.GetArgs(""--lib"", optArgs) case Success(p) => p[0] case Failure(_ /* _v0 */) => """";
        var cfgDepthOpt: nat := match optionParser.GetArgs(""--cfg"", optArgs) case Success(args) => (if |args[0]| >= 1 && IsNatNumber(args[0]) then StringToNat(args[0]) else 0) case Failure(_ /* _v1 */) => 0;
        var rawOpt := if optionParser.GetArgs(""--raw"", optArgs).Success? then true else false;
        var noTable := if optionParser.GetArgs(""--notable"", optArgs).Success? then true else false;
        var info := if optionParser.GetArgs(""--info"", optArgs).Success? then true else false;
        var maxSegSize := match optionParser.GetArgs(""--size"", optArgs) case Success(args) => (if |args[0]| >= 1 && IsNatNumber(args[0]) then Some(StringToNat(args[0])) else None) case Failure(_ /* _v2 */) => None;
        var name: string := match optionParser.GetArgs(""--title"", optArgs) case Success(args) => args[0] case Failure(_ /* _v3 */) => ""Name not set"";
        if disOpt {
          print ""Disassembled code:\n"";
          PrintInstructions(x);
          print ""--------------- Disassembled ---------------------\n"";
        }
        var y := SplitUpToTerminal(x, maxSegSize);
        var prog := EVMObj(y);
        if info {
          print ""-------- Program Stats ---------\n"";
          prog.PrintByteCodeInfo();
          print ""-------- End Program Stats ---------\n"";
          print ""-------- Segment Stats ---------\n"";
          prog.PrintSegmentInfo();
          print ""-------- End Segment Stats ---------\n"";
        }
        if segmentOpt {
          print ""Segments:\n"";
          PrintSegments(y);
          print ""----------------- Segments -------------------\n"";
        }
        if cfgDepthOpt > 0 && |y| > 0 && y[0].StartAddress() == 0 {
          var a1, s1 := prog.BuildCFG(maxDepth := cfgDepthOpt, minimise := !rawOpt);
          assert a1.IsValid();
          var cfgObj := CFGObj(prog, cfgDepthOpt, a1, !rawOpt, s1);
          assert cfgObj.IsValid();
          if proofOpt {
            if cfgObj.HasNoErrorState() {
              cfgObj.CFGCheckerToDafny(pathToEVMDafny := libOpt);
            } else {
              print ""The CFG has some error states and the Dafny proof object cannot be generated\n"";
            }
          } else if proofRefine {
            if cfgObj.HasNoErrorState() {
              cfgObj.CFGRefineToDafny(pathToEVMDafny := libOpt);
            } else {
              print ""The CFG has some error states and the Dafny proof object cannot be generated\n"";
            }
          } else {
            cfgObj.ToDot(noTable, name);
          }
        }
      }
    }
  }

  import opened BinaryDecoder

  import opened Splitter

  import opened PrettyPrinters

  import opened EVMObject

  import opened ArgParser

  import opened MiscTypes

  import opened Int

  import opened Statistics

  import opened CFGObject

  import opened ProofObject
}

module ProofObject {

  import opened MiscTypes

  import opened LinSegments

  import opened Int

  import opened Hex

  import opened Instructions

  import opened StackElement

  import opened CFGState
  datatype StackResolver = StackResolver(sp: map<nat, Either<string, nat>>)

  datatype ProofObj = JUMP(s: ValidLinSeg, wpOp: nat, wpCap: nat, tgt: Either<StackElem, nat>, stacks: StackResolver := StackResolver(map[])) | CONT(s: ValidLinSeg, wpOp: nat, wpCap: nat, stacks: StackResolver := StackResolver(map[])) | TERMINAL(s: ValidLinSeg, wpOp: nat, wpCap: nat, stacks: StackResolver := StackResolver(map[])) {
    predicate IsValid()
      decreases this
    {
      match this
      case JUMP(_ /* _v0 */, _ /* _v1 */, _ /* _v2 */, _ /* _v3 */, _ /* _v4 */) =>
        s.JUMPSeg? || s.JUMPISeg?
      case CONT(_ /* _v5 */, _ /* _v6 */, _ /* _v7 */, _ /* _v8 */) =>
        s.CONTSeg?
      case TERMINAL(_ /* _v9 */, _ /* _v10 */, _ /* _v11 */, _ /* _v12 */) =>
        s.RETURNSeg? || s.STOPSeg? || s.INVALIDSeg?
    }

    function CollectJumpDest(): seq<nat>
      decreases this
    {
      s.CollectJumpDest()
    }

    function StackEffect(): int
      decreases this
    {
      s.StackEffect()
    }
  }
}

module StackElement {
  function StackToString(s: seq<StackElem>): string
    decreases s
  {
    if |s| == 0 then
      ""Ã˜""
    else
      s[0].ToString() + "","" + StackToString(s[1..])
  }

  import opened Int

  import opened Hex

  datatype StackElem = Value(v: u256) | Random(s: string := """") {
    function ToString(): string
      decreases this
    {
      match this
      case Value(v) =>
        NatToString(v as nat) + ""(0x"" + NatToHex(v as nat) + "")""
      case Random(_ /* _v0 */) =>
        ""?""
    }

    function ToHTML(): string
      decreases this
    {
      match this
      case Value(v) =>
        ""(0x"" + NatToHex(v as nat) + "")""
      case Random(_ /* _v1 */) =>
        ""?""
    }

    function Extract(): u256
      requires this.Value?
      decreases this
    {
      this.v
    }
  }
}

module Hex {
  predicate IsHexString(s: string)
    decreases s
  {
    forall k: int {:trigger s[k]} :: 
      0 <= k < |s| ==>
        IsHex(s[k])
  }

  function HexToU8(s: string): Option<u8>
    requires |s| == 2
    decreases s
  {
    match (HexVal(s[0]), HexVal(s[1]))
    case (None(), _ /* _v0 */) =>
      None
    case (_ /* _v1 */, None()) =>
      None
    case (Some(v1), Some(v2)) =>
      Some((TWO_4 * v1 as nat + v2 as nat) as u8)
  }

  function HexToU16(s: string): Option<u16>
    requires |s| == 4
    decreases s
  {
    match (HexToU8(s[..2]), HexToU8(s[2..]))
    case (None(), _ /* _v2 */) =>
      None
    case (_ /* _v3 */, None()) =>
      None
    case (Some(v1), Some(v2)) =>
      Some((TWO_8 * v1 as nat + v2 as nat) as u16)
  }

  function HexToU32(s: string): Option<u32>
    requires |s| == 8
    decreases s
  {
    match (HexToU16(s[..4]), HexToU16(s[4..]))
    case (None(), _ /* _v4 */) =>
      None
    case (_ /* _v5 */, None()) =>
      None
    case (Some(v1), Some(v2)) =>
      Some((TWO_16 * v1 as nat + v2 as nat) as u32)
  }

  function HexToU64(s: string): Option<u64>
    requires |s| == 16
    ensures (forall k: int {:trigger s[k]} :: 0 <= k < |s| ==> IsHex(s[k])) ==> HexToU64(s).Some?
    decreases s
  {
    match (HexToU32(s[..8]), HexToU32(s[8..]))
    case (None(), _ /* _v6 */) =>
      None
    case (_ /* _v7 */, None()) =>
      None
    case (Some(v1), Some(v2)) =>
      Some((TWO_32 * v1 as nat + v2 as nat) as u64)
  }

  function HexToU128(s: string): Option<u128>
    requires |s| == 32
    ensures (forall k: int {:trigger s[k]} :: 0 <= k < |s| ==> IsHex(s[k])) ==> HexToU128(s).Some?
    decreases s
  {
    match (HexToU64(s[..16]), HexToU64(s[16..]))
    case (None(), _ /* _v8 */) =>
      None
    case (_ /* _v9 */, None()) =>
      None
    case (Some(v1), Some(v2)) =>
      Some((TWO_64 * v1 as nat + v2 as nat) as u128)
  }

  function HexToU256(s: string): Option<u256>
    requires |s| == 64
    ensures (forall k: int {:trigger s[k]} :: 0 <= k < |s| ==> IsHex(s[k])) ==> HexToU256(s).Some?
    decreases s
  {
    match (HexToU128(s[..32]), HexToU128(s[32..]))
    case (None(), _ /* _v10 */) =>
      None
    case (_ /* _v11 */, None()) =>
      None
    case (Some(v1), Some(v2)) =>
      Some((TWO_128 * v1 as nat + v2 as nat) as u256)
  }

  function U8ToHex(n: u8): string
    ensures |U8ToHex(n)| == 2
    decreases n
  {
    [DecToHex(n as nat / TWO_4)] + [DecToHex(n as nat % TWO_4)]
  }

  function {:tailrecursion true} HexHelper(s: seq<u8>): string
    requires |s| <= 32
    ensures |HexHelper(s)| % 2 == 0
    ensures |HexHelper(s)| == 2 * |s| <= 64
    ensures IsHexString(HexHelper(s))
    decreases s
  {
    if |s| == 0 then
      """"
    else
      U8ToHex(s[0]) + HexHelper(s[1..])
  }

  function U16ToHex(n: u16): string
    ensures |U16ToHex(n)| == 4
    decreases n
  {
    U8ToHex((n as nat / TWO_8) as u8) + U8ToHex((n as nat % TWO_8) as u8)
  }

  function U32ToHex(n: u32): string
    ensures |U32ToHex(n)| == 8
    decreases n
  {
    U16ToHex((n as nat / TWO_16) as u16) + U16ToHex((n as nat % TWO_16) as u16)
  }

  function U64ToHex(n: u64): string
    ensures |U64ToHex(n)| == 16
    decreases n
  {
    U32ToHex((n as nat / TWO_32) as u32) + U32ToHex((n as nat % TWO_32) as u32)
  }

  function U128ToHex(n: u128): string
    ensures |U128ToHex(n)| == 32
    decreases n
  {
    U64ToHex((n as nat / TWO_64) as u64) + U64ToHex((n as nat % TWO_64) as u64)
  }

  function U256ToHex(n: u256): string
    ensures |U256ToHex(n)| == 64
    decreases n
  {
    U128ToHex((n as nat / TWO_128) as u128) + U128ToHex((n as nat % TWO_128) as u128)
  }

  function NatToHex(n: nat): string
    decreases n
  {
    if n < 16 then
      [DecToHex(n)]
    else
      NatToHex(n / 16) + [DecToHex(n % 16)]
  }

  function HexVal(c: char): Option<u8>
    ensures IsHex(c) ==> HexVal(c).Some?
    ensures HexVal(c).Some? ==> HexVal(c).v <= 15
    decreases c
  {
    match c
    case '0' =>
      Some(0)
    case '1' =>
      Some(1)
    case '2' =>
      Some(2)
    case '3' =>
      Some(3)
    case '4' =>
      Some(4)
    case '5' =>
      Some(5)
    case '6' =>
      Some(6)
    case '7' =>
      Some(7)
    case '8' =>
      Some(8)
    case '9' =>
      Some(9)
    case 'a' =>
      Some(10)
    case 'A' =>
      Some(10)
    case 'b' =>
      Some(11)
    case 'B' =>
      Some(11)
    case 'c' =>
      Some(12)
    case 'C' =>
      Some(12)
    case 'd' =>
      Some(13)
    case 'D' =>
      Some(13)
    case 'e' =>
      Some(14)
    case 'E' =>
      Some(14)
    case 'f' =>
      Some(15)
    case 'F' =>
      Some(15)
    case _ /* _v12 */ =>
      None
  }

  function DecToHex(n: nat): char
    requires 0 <= n < 16
    ensures '0' <= DecToHex(n) <= '9' || 'a' <= DecToHex(n) <= 'f'
    decreases n
  {
    match n
    case 0 =>
      '0'
    case 1 =>
      '1'
    case 2 =>
      '2'
    case 3 =>
      '3'
    case 4 =>
      '4'
    case 5 =>
      '5'
    case 6 =>
      '6'
    case 7 =>
      '7'
    case 8 =>
      '8'
    case 9 =>
      '9'
    case 10 =>
      'a'
    case 11 =>
      'b'
    case 12 =>
      'c'
    case 13 =>
      'd'
    case 14 =>
      'e'
    case 15 =>
      'f'
  }

  predicate IsHex(c: char)
    decreases c
  {
    '0' <= c <= '9' || 'a' <= c <= 'f' || 'A' <= c <= 'F'
  }

  import opened MiscTypes

  import opened Int
}

module Int {
  const TWO_4: nat := 16
  const TWO_8: nat := 256
  const TWO_16: nat := 65536
  const TWO_32: nat := 4294967296
  const TWO_64: nat := 18446744073709551616
  const TWO_128: nat := 340282366920938463463374607431768211456
  const TWO_256: nat := 115792089237316195423570985008687907853269984665640564039457584007913129639936
  const MAX_U8: nat := TWO_8 - 1
  const MAX_U16: nat := TWO_16 - 1
  const MAX_U32: nat := TWO_32 - 1
  const MAX_U64: nat := TWO_64 - 1
  const MAX_U128: nat := TWO_128 - 1
  const MAX_U256: nat := TWO_256 - 1

  function Abs(x: int): nat
    decreases x
  {
    if x >= 0 then
      x
    else
      -x
  }

  function Max(i1: int, i2: int): int
    decreases i1, i2
  {
    if i1 >= i2 then
      i1
    else
      i2
  }

  function Min(i1: int, i2: int): int
    decreases i1, i2
  {
    if i1 < i2 then
      i1
    else
      i2
  }

  function NatToString(n: nat): string
    decreases n
  {
    if n < 10 then
      [DigitToString(n)]
    else
      NatToString(n / 10) + [DigitToString(n % 10)]
  }

  function IntToString(n: int): string
    decreases n
  {
    if n == 0 then
      ""0""
    else if n > 0 then
      ""+"" + NatToString(n)
    else
      ""-"" + NatToString(-n)
  }

  function DigitToString(n: nat): char
    requires 0 <= n < 10
    ensures '0' <= DigitToString(n) <= '9'
    decreases n
  {
    match n
    case 0 =>
      '0'
    case 1 =>
      '1'
    case 2 =>
      '2'
    case 3 =>
      '3'
    case 4 =>
      '4'
    case 5 =>
      '5'
    case 6 =>
      '6'
    case 7 =>
      '7'
    case 8 =>
      '8'
    case 9 =>
      '9'
  }

  function CharToDigit(c: char): (r: Option<nat>)
    ensures r.Some? ==> 0 <= r.v <= 9
    decreases c
  {
    match c
    case '0' =>
      Some(0)
    case '1' =>
      Some(1)
    case '2' =>
      Some(2)
    case '3' =>
      Some(3)
    case '4' =>
      Some(4)
    case '5' =>
      Some(5)
    case '6' =>
      Some(6)
    case '7' =>
      Some(7)
    case '8' =>
      Some(8)
    case '9' =>
      Some(9)
    case _ /* _v0 */ =>
      None
  }

  predicate IsNatNumber(s: string)
    requires |s| >= 1
    ensures IsNatNumber(s) <==> forall k: int {:trigger s[k]} :: 0 <= k < |s| ==> CharToDigit(s[k]).Some?
    decreases s
  {
    if |s| == 1 then
      CharToDigit(s[0]).Some?
    else
      match CharToDigit(s[0]) case Some(v) => IsNatNumber(s[1..]) case None() => false
  }

  function {:tailrecursion false} StringToNat(s: string, lastVal: nat := 0): nat
    requires |s| > 0
    requires IsNatNumber(s)
    decreases s, lastVal
  {
    if |s| == 1 then
      CharToDigit(s[0]).v
    else
      var v: nat := CharToDigit(s[|s| - 1]).v; v + 10 * StringToNat(s[..|s| - 1])
  }

  import opened MiscTypes

  newtype u8 = i: nat
    | 0 <= i <= MAX_U8

  newtype u16 = i: nat
    | 0 <= i <= MAX_U16

  newtype u32 = i: nat
    | 0 <= i <= MAX_U32

  newtype u64 = i: nat
    | 0 <= i <= MAX_U64

  newtype u128 = i: nat
    | 0 <= i <= MAX_U128

  newtype u256 = i: nat
    | 0 <= i <= MAX_U256
}

module MiscTypes {
  predicate Foobar(f: Foo)
  {
    foo101(f);
    assert forall x: nat {:trigger f(x)} :: x < 2 ==> f(x) == 0;
    true
  }

  lemma {:axiom} foo101(f: Foo)
    ensures forall x: nat {:trigger f(x)} :: x < 2 ==> f(x) == 0

  lemma {:axiom} Foo101<K(!new)>(f: WellDefined<K>)
    ensures forall x: K, xs: seq<K> {:trigger f(x, xs)} :: f(x, xs).Some? ==> f(x, xs).v in xs

  lemma {:axiom} Foo102<K(!new)>(f: WellDefined2<K>)
    ensures forall x: K, xs: seq<K> {:trigger f(x, xs)} :: f(x, xs).Some? ==> f(x, xs).v < |xs|

  function Last<T>(x: seq<T>): T
    requires |x| > 0
    decreases x
  {
    x[|x| - 1]
  }

  function Drop<T>(x: seq<T>, n: nat): seq<T>
    requires n <= |x|
    ensures |Drop(x, n)| == |x| - n
    decreases x, n
  {
    x[n..]
  }

  function Init<T>(x: seq<T>): seq<T>
    requires 1 <= |x|
    ensures |Init(x)| == |x| - 1
    decreases x
  {
    x[..|x| - 1]
  }

  function {:tailrecursion true} Zip<U, V>(u: seq<U>, v: seq<V>): seq<(U, V)>
    requires |u| == |v|
    decreases u, v
  {
    seq(|u|, (i: int) requires 0 <= i < |u| => (u[i], v[i]))
  }

  function {:tailrecursion true} UnZip<U, V>(x: seq<(U, V)>): (seq<U>, seq<V>)
    ensures |UnZip(x).0| == |UnZip(x).1| == |x|
    ensures forall k: int {:trigger UnZip(x).1[k]} {:trigger x[k]} {:trigger UnZip(x).0[k]} :: (0 <= k < |x| ==> UnZip(x).0[k] == x[k].0) && (0 <= k < |x| ==> UnZip(x).1[k] == x[k].1)
    decreases x
  {
    var x0: seq<U> := seq(|x|, (i: int) requires 0 <= i < |x| => x[i].0);
    var x1: seq<V> := seq(|x|, (i: int) requires 0 <= i < |x| => x[i].1);
    (x0, x1)
  }

  function {:tailrecursion true} Filter<U(!new)>(u: seq<U>, f: U --> bool): (r: seq<U>)
    requires forall x: U {:trigger f.requires(x)} {:trigger x in u} :: x in u ==> f.requires(x)
    ensures |r| <= |u|
    ensures forall x: U {:trigger f(x)} {:trigger x in u} {:trigger x in r} :: x in r <==> x in u && f(x)
    ensures forall k: int {:trigger r[k]} :: 0 <= k < |r| ==> f(r[k])
    ensures forall x: U {:trigger f(x)} {:trigger x in r} :: x in r ==> f(x)
    decreases u
  {
    if |u| == 0 then
      []
    else if f(u[0]) then
      [u[0]] + Filter(u[1..], f)
    else
      Filter(u[1..], f)
  }

  predicate {:tailrecursion true} Exists<T>(xs: seq<T>, f: T -> bool)
    ensures !Exists(xs, f) ==> forall k: T {:trigger f(k)} {:trigger k in xs} :: k in xs ==> !f(k)
    ensures !Exists(xs, f) ==> forall k: int {:trigger xs[k]} :: 0 <= k < |xs| ==> !f(xs[k])
    decreases xs
  {
    if |xs| == 0 then
      false
    else if f(xs[0]) then
      true
    else
      Exists(xs[1..], f)
  }

  function Flatten<T>(x: seq<seq<T>>): seq<T>
    decreases x
  {
    if |x| == 0 then
      []
    else
      x[0] + Flatten(x[1..])
  }

  function Map<T, U>(t: seq<T>, f: T -> U): seq<U>
    ensures |t| == |Map(t, f)|
    ensures forall i: int {:trigger t[i]} {:trigger Map(t, f)[i]} :: 0 <= i < |t| ==> Map(t, f)[i] == f(t[i])
    decreases t
  {
    seq(|t|, (i: int) requires 0 <= i < |t| => f(t[i]))
  }

  function MapP<T, U>(t: seq<T>, f: T --> U): seq<U>
    requires forall i: int {:trigger t[i]} :: 0 <= i < |t| ==> f.requires(t[i])
    ensures |t| == |MapP(t, f)|
    ensures forall i: int {:trigger t[i]} {:trigger MapP(t, f)[i]} :: 0 <= i < |t| ==> MapP(t, f)[i] == f(t[i])
    decreases t
  {
    seq(|t|, (i: int) requires 0 <= i < |t| => f(t[i]))
  }

  function FoldLeft<T, U>(t: seq<T>, u0: U, f: (U, T) -> U): U
    decreases t
  {
    if |t| == 0 then
      u0
    else
      FoldLeft(t[1..], f(u0, t[0]), f)
  }

  function SeqToSet<T(!new)>(t: seq<T>): set<T>
    ensures |SeqToSet(t)| <= |t|
    ensures forall x: T {:trigger x in t} {:trigger x in SeqToSet(t)} :: x in SeqToSet(t) <==> x in t
    decreases t
  {
    if |t| == 0 then
      {}
    else
      {t[0]} + SeqToSet(t[1..])
  }

  function {:opaque} Find<T(==)>(x: seq<T>, t: T): Option<nat>
    ensures Find(x, t).Some? <==> t in x
    ensures Find(x, t).Some? ==> Find(x, t).Extract() < |x|
    ensures Find(x, t).Some? ==> x[Find(x, t).Extract()] == t
    ensures Find(x, t).None? <==> t !in x
    decreases x
  {
    FindRec(x, t)
  }

  function {:tailrecursion true} {:opaque} FindRec<T(==)>(x: seq<T>, t: T, i: nat := 0, ghost c: seq<T> := x): Option<nat>
    requires |c| == i + |x|
    requires c[i..] == x
    ensures FindRec(x, t, i, c).Some? ==> t in c
    ensures FindRec(x, t, i, c).Some? ==> FindRec(x, t, i, c).Extract() < |c|
    ensures FindRec(x, t, i, c).Some? ==> c[FindRec(x, t, i, c).Extract()] == t
    ensures FindRec(x, t, i, c).None? <==> t !in x
    decreases |x|
  {
    if |x| == 0 then
      None
    else if x[0] == t then
      Some(i)
    else
      FindRec(x[1..], t, i + 1, c)
  }

  ghost function UnFlatIndex<T>(r: seq<seq<set<T>>>, r': seq<set<T>>, j: nat): (n: (nat, nat))
    requires r' == Flatten(r)
    requires j < |r'|
    ensures 0 <= n.0 < |r|
    ensures 0 <= n.1 < |r[n.0]|
    ensures r'[j] == r[n.0][n.1]
    decreases r, r', j
  {
    if |r| == 0 then
      (0, 0)
    else if j < |r[0]| then
      (0, j)
    else
      ghost var i: (nat, nat) := UnFlatIndex(r[1..], r'[|r[0]|..], j - |r[0]|); (i.0 + 1, i.1)
  }

  function AddKeyVal<T(==)>(m: map<T, seq<T>>, key: T, val: T): (m': map<T, seq<T>>)
    requires key in m
    ensures m'.Keys == m.Keys
    ensures forall k: T {:trigger m'[k]} {:trigger m[k]} {:trigger k in m} :: k in m && k != key ==> m[k] == m'[k]
    ensures m'[key] == m[key] + [val]
    decreases m
  {
    m[key := m[key] + [val]]
  }

  lemma ExtendByOneGoodIsGood<T>(index: nat, js: seq<T>, p: T -> bool)
    requires index < |js|
    requires forall j: int {:trigger js[j]} :: 0 <= j < index ==> p(js[j])
    requires p(js[index])
    ensures forall j: int {:trigger js[j]} :: 0 <= j < index + 1 ==> p(js[j])
    decreases index, js
  {
  }

  lemma ReverseAddKeyValPreservesReverseMaps<T(!new)>(m: map<T, seq<T>>, m': map<T, seq<T>>, i: T, j: T)
    requires i in m
    requires j in m'
    requires IsReverseMap(m, m')
    ensures IsReverseMap(AddKeyVal(m, i, j), AddKeyVal(m', j, i))
    decreases m, m'
  {
  }

  lemma ReverseMapsIsCongruent<T(!new)>(m1: map<T, seq<T>>, m1': map<T, seq<T>>, m2: map<T, seq<T>>, m2': map<T, seq<T>>)
    requires m1 == m2
    requires m1' == m2'
    requires IsReverseMap(m1, m1')
    ensures IsReverseMap(m2, m2')
    decreases m1, m1', m2, m2'
  {
  }

  ghost predicate IsReverseMap<T(!new)>(m: map<T, seq<T>>, m': map<T, seq<T>>)
    decreases m, m'
  {
    forall src: T, tgt: T {:trigger m'[tgt], m[src]} {:trigger m'[tgt], src in m} {:trigger tgt in m', m[src]} {:trigger tgt in m', src in m} :: 
      src in m && tgt in m[src] <==> tgt in m' && src in m'[tgt]
  }

  lemma /*{:_induction r, r', j, j'}*/ FlatDistinctImpliesUnFlatDistinct(r: seq<seq<set<nat>>>, r': seq<set<nat>>, j: nat, j': nat)
    requires r' == Flatten(r)
    requires 0 <= j < j' < |r'|
    ensures UnFlatIndex(r, r', j) != UnFlatIndex(r, r', j')
    decreases r, r', j, j'
  {
    if |r| == 0 {
    } else if j < |r[0]| && j' < |r[0]| {
      assert UnFlatIndex(r, r', j) == (0, j);
      assert UnFlatIndex(r, r', j') == (0, j');
      assert j != j';
    } else if j < |r[0]| && j' >= |r[0]| {
      assert UnFlatIndex(r, r', j) == (0, j);
      assert UnFlatIndex(r, r', j').0 >= 1;
    } else if j >= |r[0]| && j' < |r[0]| {
      assert UnFlatIndex(r, r', j) == (1, j - |r[0]|);
      assert UnFlatIndex(r, r', j') == (0, j');
      assert j != j';
    } else {
      FlatDistinctImpliesUnFlatDistinct(r[1..], r'[|r[0]|..], j - |r[0]|, j' - |r[0]|);
    }
  }

  lemma /*{:_induction r}*/ MinSizeOfFlattenForAllNonEmpty(r: seq<seq<set<nat>>>)
    requires forall i: int {:trigger r[i]} :: 0 <= i < |r| ==> |r[i]| >= 1
    ensures |Flatten(r)| >= |r|
    decreases r
  {
  }

  datatype Try<T> = Success(v: T) | Failure(msg: string)

  datatype Option<T> = None | Some(v: T) {
    function Extract(): T
      requires this.Some?
      decreases this
    {
      this.v
    }
  }

  datatype Either<T, U> = Left(l: T) | Right(r: U) {
    function Left(): T
      requires this.Left?
      decreases this
    {
      this.l
    }

    function Right(): U
      requires this.Right?
      decreases this
    {
      this.r
    }
  }

  type WellDefined<!K(!new)> = f: (K, seq<K>) -> Option<K>
    | forall x: K, xs: seq<K> {:triggers f(x, xs)} :: f(x, xs).Some? ==> f(x, xs).v in xs
    witness (x: K, xs: seq<K>) => None

  type WellDefined2<!K(!new)> = f: (K, seq<K>) -> Option<nat>
    | forall x: K, xs: seq<K> {:triggers f(x, xs)} :: f(x, xs).Some? ==> f(x, xs).v < |xs|
    witness (x: K, xs: seq<K>) => None

  type Foo = f: nat -> nat
    | forall x: nat :: x < 2 ==> f(x) == 0
    witness (x: nat) => 0
}

module CFGState {
  const DEFAULT_GSTATE: GState := EGState(0, [])

  import opened StackElement

  import Int

  datatype GState = EGState(segNum: nat, st: seq<StackElem>) | ErrorGState(msg: string := """") {
    function ToString(): string
      decreases this
    {
      match this
      case EGState(segNum, st) =>
        ""("" + Int.NatToString(segNum) + "", ["" + StackToString(st) + ""])""
      case ErrorGState(msg) =>
        ""ErrorGState("" + msg + "")""
    }

    function StackToHTML(): string
      requires this.EGState?
      decreases this
    {
      if |st| == 0 then
        """"
      else
        var o: string := StackToHTMLHelper(st); o[..|o| - 1]
    }

    static function StackToHTMLHelper(s: seq<StackElem>): string
      decreases s
    {
      if |s| == 0 then
        """"
      else
        s[0].ToHTML() + "","" + StackToHTMLHelper(s[1..])
    }

    predicate IsBounded(n: nat)
      decreases this, n
    {
      this.ErrorGState? || (this.EGState? && this.segNum < n)
    }
  }
}

module LinSegments {
  function {:tailrecursion true} {:opaque} StackEffectHelper(xs: seq<Instruction>): int
    decreases xs
  {
    if |xs| == 0 then
      0
    else
      xs[0].StackEffect() + StackEffectHelper(xs[1..])
  }

  ghost function StackEffectHelperReverse(xs: seq<Instruction>): int
    decreases xs
  {
    if |xs| == 0 then
      0
    else
      StackEffectHelperReverse(xs[..|xs| - 1]) + xs[|xs| - 1].StackEffect()
  }

  lemma /*{:_induction xs}*/ StackEffectHelpersEquiv(xs: seq<Instruction>)
    ensures StackEffectHelper(xs) == StackEffectHelperReverse(xs)
    decreases xs
  {
    reveal_StackEffectHelper();
    if |xs| == 0 {
    } else {
      calc == {
        StackEffectHelper(xs);
        {
          assert xs == xs[..|xs| - 1] + [xs[|xs| - 1]];
        }
        StackEffectHelper(xs[..|xs| - 1] + [xs[|xs| - 1]]);
        {
          CommuteStackEffect(xs[..|xs| - 1], [xs[|xs| - 1]]);
        }
        StackEffectHelper([xs[|xs| - 1]] + xs[..|xs| - 1]);
      }
    }
  }

  lemma /*{:_induction xs1, xs2}*/ DistribStackEffect(xs1: seq<Instruction>, xs2: seq<Instruction>)
    ensures StackEffectHelper(xs1 + xs2) == StackEffectHelper(xs1) + StackEffectHelper(xs2)
    decreases xs1, xs2
  {
    reveal_StackEffectHelper();
    if |xs1| == 0 {
      assert xs1 + xs2 == xs2;
    } else {
      DistribStackEffect(xs1[1..], xs2);
      assert (xs1 + xs2)[1..] == xs1[1..] + xs2;
    }
  }

  lemma /*{:_induction xs1, xs2}*/ CommuteStackEffect(xs1: seq<Instruction>, xs2: seq<Instruction>)
    ensures StackEffectHelper(xs1 + xs2) == StackEffectHelper(xs2 + xs1)
    decreases xs1, xs2
  {
    DistribStackEffect(xs1, xs2);
    DistribStackEffect(xs2, xs1);
  }

  function {:opaque} WeakestPreCapacityHelper(xs: seq<Instruction>, postCond: nat := 0): nat
    decreases |xs|
  {
    if |xs| == 0 then
      postCond
    else
      var lastI: Instruction := xs[|xs| - 1]; var e: nat := lastI.WeakestPreCapacity(postCond); WeakestPreCapacityHelper(xs[..|xs| - 1], e)
  }

  function {:opaque} RunIns(xs: seq<ValidInstruction>, s: ValidState, jumpDests: seq<nat>): AState
    decreases xs, s, jumpDests
  {
    if |xs| == 0 then
      s
    else
      var next: AState := xs[0].NextState(s, jumpDests, 0); match next case Error(_ /* _v64 */) => next case EState(_ /* _v65 */, _ /* _v66 */) => RunIns(xs[1..], next, jumpDests)
  }

  function {:opaque} WPreIns(xs: seq<ValidInstruction>, c: ValidCond): ValidCond
    decreases xs, c
  {
    if |xs| == 0 then
      c
    else if !c.StCond? then
      c
    else
      assert c.StCond?; var c1: ValidCond := xs[|xs| - 1].WPre(c); WPreIns(xs[..|xs| - 1], c1)
  }

  function {:opaque} WPreSeqSegs(path: seq<nat>, exits: seq<nat>, c: ValidCond, xs: seq<ValidLinSeg>, tgtPC: nat): ValidCond
    requires |path| == |exits|
    requires forall k: int {:trigger k in path} :: k in path ==> k < |xs|
    requires forall i: int {:trigger path[i]} :: 0 <= i < |path| ==> path[i] < |xs|
    requires forall i: int {:trigger exits[i]} :: 0 <= i < |exits| ==> exits[i] <= 1
    requires forall i: int {:trigger path[i]} {:trigger exits[i]} :: 0 <= i < |exits| ==> exits[i] < xs[path[i]].NumberOfExits()
    decreases path, exits, c, xs, tgtPC
  {
    if |path| == 0 then
      c
    else
      assert |path| > 0; var w1: ValidCond := xs[path[|path| - 1]].WPre(c); ValidExitLemma(xs[path[|path| - 1]], exits[|exits| - 1]); var wp2: ValidCond := xs[path[|path| - 1]].LeadsTo(tgtPC, exits[|exits| - 1]); WPreSeqSegs(path[..|path| - 1], exits[..|exits| - 1], w1.And(wp2), xs, xs[path[|path| - 1]].StartAddress())
  }

  lemma ValidExitLemma(s: ValidLinSeg, k: nat)
    requires s.IsValid()
    requires k <= s.NumberOfExits() - 1
    ensures s.IsValidExit(k)
    decreases s, k
  {
  }

  predicate EquivSeg(s1: ValidLinSeg, s2: ValidLinSeg)
    decreases s1, s2
  {
    match s1
    case JUMPSeg(_ /* _v67 */, _ /* _v68 */, _ /* _v69 */) =>
      s2.JUMPSeg? &&
      |s1.Ins()| == |s2.Ins()| >= 2 &&
      EVMConstants.PUSH1 <= s1.ins[|s1.ins| - 1].op.opcode == s2.ins[|s1.ins| - 1].op.opcode <= EVMConstants.PUSH32 &&
      forall i: int {:trigger s2.ins[i]} {:trigger s1.ins[i]} :: 
        0 <= i < |s1.ins| - 1 ==>
          s1.ins[i].Equiv(s2.ins[i])
    case JUMPISeg(_ /* _v70 */, _ /* _v71 */, _ /* _v72 */) =>
      s2.JUMPISeg? &&
      |s1.Ins()| == |s2.Ins()| >= 2 &&
      EVMConstants.PUSH1 <= s1.ins[|s1.ins| - 1].op.opcode == s2.ins[|s1.ins| - 1].op.opcode <= EVMConstants.PUSH32 &&
      forall i: int {:trigger s2.ins[i]} {:trigger s1.ins[i]} :: 
        0 <= i < |s1.ins| - 1 ==>
          s1.ins[i].Equiv(s2.ins[i])
    case RETURNSeg(_ /* _v73 */, _ /* _v74 */, _ /* _v75 */) =>
      s2.RETURNSeg? &&
      |s1.Ins()| == |s2.Ins()| &&
      forall i: int {:trigger s2.Ins()[i]} {:trigger s1.Ins()[i]} :: 
        0 <= i < |s1.Ins()| ==>
          s1.Ins()[i].Equiv(s2.Ins()[i])
    case STOPSeg(_ /* _v76 */, _ /* _v77 */, _ /* _v78 */) =>
      s2.STOPSeg? &&
      |s1.Ins()| == |s2.Ins()| &&
      forall i: int {:trigger s2.Ins()[i]} {:trigger s1.Ins()[i]} :: 
        0 <= i < |s1.Ins()| ==>
          s1.Ins()[i].Equiv(s2.Ins()[i])
    case CONTSeg(_ /* _v79 */, _ /* _v80 */, _ /* _v81 */) =>
      s2.CONTSeg? &&
      |s1.Ins()| == |s2.Ins()| &&
      forall i: int {:trigger s2.Ins()[i]} {:trigger s1.Ins()[i]} :: 
        0 <= i < |s1.Ins()| ==>
          s1.Ins()[i].Equiv(s2.Ins()[i])
    case INVALIDSeg(_ /* _v82 */, _ /* _v83 */, _ /* _v84 */) =>
      s2.INVALIDSeg? &&
      |s1.Ins()| == |s2.Ins()| &&
      forall i: int {:trigger s2.Ins()[i]} {:trigger s1.Ins()[i]} :: 
        0 <= i < |s1.Ins()| ==>
          s1.Ins()[i].Equiv(s2.Ins()[i])
  }

  import opened EVMOpcodes

  import opened MiscTypes

  import opened Instructions

  import opened EVMConstants

  import opened State

  import opened WeakPre

  type ValidLinSeg = s: LinSeg
    | s.IsValid()
    witness CONTSeg([], Instruction(ArithOp(""ADD"", ADD)))

  datatype LinSeg = JUMPSeg(ins: seq<ValidInstruction>, lastIns: ValidInstruction, netOpEffect: int := StackEffectHelper(ins + [lastIns])) | JUMPISeg(ins: seq<ValidInstruction>, lastIns: ValidInstruction, netOpEffect: int := StackEffectHelper(ins + [lastIns])) | RETURNSeg(ins: seq<ValidInstruction>, lastIns: ValidInstruction, netOpEffect: int := StackEffectHelper(ins + [lastIns])) | STOPSeg(ins: seq<ValidInstruction>, lastIns: ValidInstruction, netOpEffect: int := StackEffectHelper(ins + [lastIns])) | CONTSeg(ins: seq<ValidInstruction>, lastIns: ValidInstruction, netOpEffect: int := StackEffectHelper(ins + [lastIns])) | INVALIDSeg(ins: seq<ValidInstruction>, lastIns: ValidInstruction, netOpEffect: int := StackEffectHelper(ins + [lastIns])) {
    ghost predicate IsValid()
      decreases this
    {
      netOpEffect == StackEffectHelper(Ins()) &&
      (forall i: int {:trigger Ins()[i]} :: 
        1 <= i < |Ins()| ==>
          Ins()[i].op.opcode != JUMPDEST) &&
      match this case JUMPSeg(_ /* _v0 */, _ /* _v1 */, _ /* _v2 */) => lastIns.op.opcode == JUMP case JUMPISeg(_ /* _v3 */, _ /* _v4 */, _ /* _v5 */) => lastIns.op.opcode == JUMPI case RETURNSeg(_ /* _v6 */, _ /* _v7 */, _ /* _v8 */) => lastIns.op.opcode == RETURN case STOPSeg(_ /* _v9 */, _ /* _v10 */, _ /* _v11 */) => lastIns.op.opcode == STOP || lastIns.op.opcode == REVERT case CONTSeg(_ /* _v12 */, _ /* _v13 */, _ /* _v14 */) => lastIns.op.opcode != INVALID && lastIns.op.opcode != JUMPI case INVALIDSeg(_ /* _v15 */, _ /* _v16 */, _ /* _v17 */) => lastIns.op.opcode == INVALID
    }

    function Ins(): seq<ValidInstruction>
      ensures |Ins()| >= 1
      decreases this
    {
      this.ins + [this.lastIns]
    }

    function {:opaque} Size(xi: seq<ValidInstruction> := Ins()): nat
      decreases this, xi
    {
      if |xi| == 0 then
        0
      else
        xi[0].Size() + Size(xi[1..])
    }

    function StartAddress(): nat
      decreases this
    {
      Ins()[0].address
    }

    function NetOpEffect(): int
      decreases this
    {
      netOpEffect
    }

    function NetCapEffect(): int
      decreases this
    {
      -netOpEffect
    }

    function StackEffect(): int
      decreases this
    {
      netOpEffect
    }

    function {:opaque} StartAddressNextSeg(): nat
      requires |this.lastIns.arg| % 2 == 0
      decreases this
    {
      this.lastIns.address + 1 + |this.lastIns.arg| / 2
    }

    ghost function CollectAllJumpDest(rest: seq<Instruction>): seq<nat>
      decreases this, rest
    {
      if |rest| == 0 then
        []
      else if rest[0].op.opcode == JUMPDEST then
        [rest[0].address] + CollectAllJumpDest(rest[1..])
      else
        CollectAllJumpDest(rest[1..])
    }

    function {:opaque} CollectJumpDest(): (r: seq<nat>)
      requires this.IsValid()
      ensures |r| <= 1
      decreases this
    {
      if Ins()[0].op.opcode == JUMPDEST then
        [Ins()[0].address]
      else
        []
    }

    lemma /*{:_induction this}*/ CollectOnlyFirst()
      requires this.IsValid()
      ensures CollectJumpDest() == CollectAllJumpDest(Ins())
      decreases this
    {
      reveal_CollectJumpDest();
      CollectIsEmpty(Ins()[1..]);
    }

    lemma /*{:_induction this, x}*/ CollectIsEmpty(x: seq<Instruction>)
      requires this.IsValid()
      requires forall i: int {:trigger x[i]} :: 0 <= i < |x| ==> x[i].op.opcode != JUMPDEST
      ensures CollectAllJumpDest(x) == []
      decreases this, x
    {
    }

    function {:opaque} WeakestPreOperands(xs: seq<Instruction> := Ins(), postCond: nat := 0): nat
      decreases |xs|
    {
      if |xs| == 0 then
        postCond
      else
        var lastI: Instruction := xs[|xs| - 1]; var e: nat := lastI.WeakestPreOperands(postCond); WeakestPreOperands(xs[..|xs| - 1], e)
    }

    function {:opaque} FastWeakestPreOperands(k: nat, wpre0: nat): nat
      requires this.IsValid()
      requires wpre0 == WeakestPreOperands()
      ensures FastWeakestPreOperands(k, wpre0) == WeakestPreOperands(Ins(), k)
      decreases this, k, wpre0
    {
      assert netOpEffect == StackEffectHelper(Ins());
      FastWeakestPreOperandsCorrect(this.Ins(), k);
      if k <= StackEffect() then
        wpre0
      else
        Int.Max(wpre0, k - StackEffect())
    }

    lemma /*{:_induction this, xs, k, k'}*/ WeakestPreMonotonic(xs: seq<Instruction>, k: nat, k': nat, wpre0: nat)
      requires this.IsValid()
      requires wpre0 == WeakestPreOperands()
      requires k' >= k
      ensures WeakestPreOperands(xs, k') >= WeakestPreOperands(xs, k) >= WeakestPreOperands(xs, 0)
      ensures FastWeakestPreOperands(k', wpre0) >= FastWeakestPreOperands(k, wpre0)
      decreases this, xs, k, k', wpre0
    {
      reveal_WeakestPreOperands();
      reveal_FastWeakestPreOperands();
      FastWeakestPreOperandsCorrect(xs, k);
      FastWeakestPreOperandsCorrect(xs, k');
    }

    lemma /*{:_induction this, xs, k}*/ FastWeakestpreOperandsReverse(xs: seq<Instruction>, k: nat)
      ensures k <= StackEffectHelperReverse(xs) ==> WeakestPreOperands(xs, k) == WeakestPreOperands(xs, 0)
      ensures k > StackEffectHelperReverse(xs) ==> WeakestPreOperands(xs, k) == Int.Max(WeakestPreOperands(xs, 0), k - StackEffectHelperReverse(xs))
      decreases this, xs, k
    {
      reveal_WeakestPreOperands();
    }

    lemma /*{:_induction this, xs, k}*/ FastWeakestPreOperandsCorrect(xs: seq<Instruction>, k: nat)
      ensures k <= StackEffectHelper(xs) ==> WeakestPreOperands(xs, k) == WeakestPreOperands(xs, 0)
      ensures k > StackEffectHelper(xs) ==> WeakestPreOperands(xs, k) == Int.Max(WeakestPreOperands(xs, 0), k - StackEffectHelper(xs))
      decreases this, xs, k
    {
      FastWeakestpreOperandsReverse(xs, k);
      StackEffectHelpersEquiv(xs);
    }

    function WeakestPreCapacity(n: nat := 0): nat
      decreases this, n
    {
      WeakestPreCapacityHelper(this.Ins(), n)
    }

    function {:opaque} Run(s: ValidState, exit: nat, jumpDests: seq<nat>): AState
      requires this.IsValid()
      requires exit == 0 || (this.JUMPISeg? && exit == 1)
      decreases this, s, exit, jumpDests
    {
      var s': AState := RunIns(ins, s, jumpDests);
      if s'.Error? then
        s'
      else
        lastIns.NextState(s', jumpDests, exit)
    }

    function WPre(c: ValidCond): ValidCond
      decreases this, c
    {
      WPreIns(Ins(), c)
    }

    function NumberOfExits(): nat
      ensures NumberOfExits() <= 2
      decreases this
    {
      match this
      case JUMPISeg(_ /* _v18 */, _ /* _v19 */, _ /* _v20 */) =>
        2
      case JUMPSeg(_ /* _v21 */, _ /* _v22 */, _ /* _v23 */) =>
        1
      case CONTSeg(_ /* _v24 */, _ /* _v25 */, _ /* _v26 */) =>
        1
      case _ /* _v27 */ =>
        0
    }

    predicate IsJump()
      requires this.IsValid()
      decreases this
    {
      this.JUMPSeg? || this.JUMPISeg?
    }

    function {:opaque} LeadsTo(k: nat, exit: nat): ValidCond
      requires this.IsValid()
      requires exit <= 1
      requires IsValidExit(exit)
      requires exit == 0 || (this.JUMPISeg? && exit == 1)
      decreases this, k, exit
    {
      if k >= Int.TWO_256 then
        StFalse()
      else
        match this case JUMPSeg(_ /* _v28 */, _ /* _v29 */, _ /* _v30 */) => (if exit == 0 then var c: Cond := StCond([0], [k as Int.u256]); WPreIns(ins, c) else StFalse()) case JUMPISeg(_ /* _v31 */, _ /* _v32 */, _ /* _v33 */) => (if exit == 1 then var c: Cond := StCond([0], [k as Int.u256]); WPreIns(ins, c) else if k == this.StartAddressNextSeg() then StTrue() else StFalse()) case CONTSeg(_ /* _v34 */, _ /* _v35 */, _ /* _v36 */) => (if exit == 0 && k == this.StartAddressNextSeg() then StTrue() else StFalse()) case RETURNSeg(_ /* _v37 */, _ /* _v38 */, _ /* _v39 */) => StTrue() case STOPSeg(_ /* _v40 */, _ /* _v41 */, _ /* _v42 */) => StTrue() case INVALIDSeg(_ /* _v43 */, _ /* _v44 */, _ /* _v45 */) => StFalse()
    }

    ghost predicate IsValidExit(k: nat)
      requires this.IsValid()
      decreases this, k
    {
      k == 0 || (this.JUMPISeg? && k == 1)
    }

    function SegTypeName(): string
      decreases this
    {
      match this
      case JUMPSeg(_ /* _v46 */, _ /* _v47 */, _ /* _v48 */) =>
        ""JUMP Segment""
      case JUMPISeg(_ /* _v49 */, _ /* _v50 */, _ /* _v51 */) =>
        ""JUMPI Segment""
      case RETURNSeg(_ /* _v52 */, _ /* _v53 */, _ /* _v54 */) =>
        ""RETURN Segment""
      case STOPSeg(_ /* _v55 */, _ /* _v56 */, _ /* _v57 */) =>
        ""STOP Segment""
      case CONTSeg(_ /* _v58 */, _ /* _v59 */, _ /* _v60 */) =>
        ""CONT Segment""
      case INVALIDSeg(_ /* _v61 */, _ /* _v62 */, _ /* _v63 */) =>
        ""INVALID Segment""
    }
  }
}

module WeakPre {
  function {:opaque} StackToCond(xs: seq<StackElem>): (c: ValidCond)
    ensures c.IsValid()
    decreases xs
  {
    var r: (seq<nat>, seq<u256>) := StackToCondHelper(xs);
    if |r.0| == 0 then
      StTrue()
    else
      StCond(r.0, r.1)
  }

  function StackToCondHelper(xs: seq<StackElem>, c: (seq<nat>, seq<u256>) := ([], []), index: nat := 0): (r: (seq<nat>, seq<u256>))
    requires index <= |xs|
    requires |c.0| == |c.1|
    requires forall k: int, k': int {:trigger c.0[k'], c.0[k]} :: 0 <= k < k' < |c.0| ==> c.0[k] < c.0[k']
    requires forall k: int {:trigger c.0[k]} :: 0 <= k < |c.0| ==> c.0[k] < index
    ensures |r.0| == |r.1|
    ensures forall k: int, k': int {:trigger r.0[k'], r.0[k]} :: 0 <= k < k' < |r.0| ==> r.0[k] < r.0[k']
    ensures forall k: int, k': int {:trigger r.0[k'], r.0[k]} :: 0 <= k < k' < |r.0| ==> r.0[k] != r.0[k']
    decreases |xs| - index
  {
    if |xs| == index then
      c
    else if xs[index].Value? then
      var c': (seq<nat>, seq<u256>) := (c.0 + [index], c.1 + [xs[index].v]);
      StackToCondHelper(xs, c', index + 1)
    else
      StackToCondHelper(xs, c, index + 1)
  }

  function Merge(c1: ValidCond, c2: ValidCond): (r: Cond)
    requires c1.StCond? && c2.StCond?
    ensures r.IsValid()
    decreases c2.Size()
  {
    if c2.Size() == 0 then
      c1
    else if c2.Size() == 1 then
      if c2.trackedPos[0] in c1.trackedPos then
        var i: nat := FindVal(c2.trackedPos[0], c1.trackedPos);
        if c1.trackedVals[i] == c2.trackedVals[0] then
          c1
        else
          StFalse()
      else
        StCond(c1.trackedPos + [c2.trackedPos[0]], c1.trackedVals + [c2.trackedVals[0]])
    else
      assert c2.Size() > 1; if c2.trackedPos[0] in c1.trackedPos then Merge(c1, StCond(c2.trackedPos[1..], c2.trackedVals[1..])) else var p: seq<nat> := c1.trackedPos + [c2.trackedPos[0]]; var v: seq<u256> := c1.trackedVals + [c2.trackedVals[0]]; Merge(StCond(p, v), StCond(c2.trackedPos[1..], c2.trackedVals[1..]))
  }

  function FindVal<T(==)>(x: T, xs: seq<T>, index: nat := 0): (n: nat)
    requires x in xs
    requires index < |xs|
    requires x !in xs[..index]
    ensures n < |xs|
    decreases |xs| - index
  {
    if |xs| == 1 then
      assert xs[index] == x;
      index
    else if xs[index] == x then
      index
    else
      FindVal(x, xs, index + 1)
  }

  import opened Int

  import opened MiscTypes

  import opened StackElement

  type ValidCond = c: Cond
    | c.IsValid()
    witness StCond([1], [0])

  datatype Cond = StTrue | StFalse | StCond(trackedPos: seq<nat>, trackedVals: seq<u256>) {
    predicate IsValid()
      decreases this
    {
      this.StCond? ==>
        |trackedPos| == |trackedVals| > 0 &&
        forall k: int, k': int {:trigger trackedPos[k'], trackedPos[k]} :: 
          0 <= k < k' < |trackedPos| ==>
            trackedPos[k] != trackedPos[k']
    }

    function Size(): nat
      decreases this
    {
      if this.StCond? then
        |trackedPos|
      else
        0
    }

    function {:opaque} And(c: ValidCond): ValidCond
      requires this.IsValid()
      decreases this, c
    {
      match (this, c)
      case (StFalse(), _ /* _v0 */) =>
        StFalse()
      case (_ /* _v1 */, StFalse()) =>
        StFalse()
      case (StTrue(), cond) =>
        cond
      case (c1, StTrue()) =>
        c1
      case (c1, c2) =>
        Merge(c1, c2)
    }

    function TrackedPos(): seq<nat>
      requires IsValid()
      requires StCond?
      decreases this
    {
      trackedPos
    }

    function TrackedVals(): seq<u256>
      requires IsValid()
      requires StCond?
      decreases this
    {
      trackedVals
    }

    function TrackedPosAt(i: nat): nat
      requires IsValid()
      requires StCond?
      requires i < this.Size()
      decreases this, i
    {
      trackedPos[i]
    }

    function TrackedValAt(i: nat): u256
      requires IsValid()
      requires StCond?
      requires i < this.Size()
      decreases this, i
    {
      trackedVals[i]
    }

    function Tail(): ValidCond
      requires this.IsValid()
      requires this.Size() > 1
      decreases this
    {
      this.(trackedPos := trackedPos[1..], trackedVals := trackedVals[1..])
    }

    function Add(pos: u256, val: u256): (c': Cond)
      requires IsValid()
      ensures c'.IsValid()
      decreases this, pos, val
    {
      this
    }

    function BuildStack(r: seq<StackElem> := [], index: nat := 0): (s: seq<StackElem>)
      requires this.StCond?
      requires this.IsValid()
      requires index <= |trackedPos|
      decreases |trackedPos| - index
    {
      if index == |trackedPos| then
        r
      else if trackedPos[index] < |r| then
        BuildStack(r[trackedPos[index] := Value(trackedVals[index])], index + 1)
      else
        var suf: seq<StackElem> := seq(trackedPos[index] - |r|, (_ /* _v2 */: int) => Random()); assert |r + suf + [Value(trackedVals[index])]| == trackedPos[index] + 1; BuildStack(r + suf + [Value(trackedVals[index])], index + 1)
    }
  }
}

module State {
  const DEFAULT_VALIDSTATE := EState(0, [])

  predicate checkPos(s: ValidState, pos: nat, val: u256)
    decreases s, pos, val
  {
    if |s.stack| <= pos then
      false
    else
      s.stack[pos] == Value(val)
  }

  function BuildInitState(c: ValidCond, initpc: nat := 0): (s: ValidState)
    requires !c.StFalse?
    decreases c, initpc
  {
    var s0: AState := DEFAULT_VALIDSTATE;
    if c.StCond? then
      s0.(stack := c.BuildStack(), pc := initpc)
    else
      s0.(pc := initpc)
  }

  import opened Int

  import opened Hex

  import opened StackElement

  import opened WeakPre

  type ValidState = s: AState
    | s.EState?
    witness DEFAULT_VALIDSTATE

  datatype AState = EState(pc: nat, stack: seq<StackElem>) | Error(msg: string := ""Error"") {
    function ToString(): string
      decreases this
    {
      match this
      case EState(pc, stack) =>
        ""(pc=0x"" + NatToHex(pc) + "" stack:["" + StackToString(stack) + ""])""
      case Error(m) =>
        ""ErrorState "" + m
    }

    function Size(): nat
      requires this.EState?
      decreases this
    {
      |this.stack|
    }

    function PC(): nat
      requires this.EState?
      decreases this
    {
      pc
    }

    function Skip(n: nat): AState
      requires this.EState?
      decreases this, n
    {
      this.(pc := this.pc + n)
    }

    function Goto(tgt: nat): AState
      requires this.EState?
      decreases this, tgt
    {
      this.(pc := tgt)
    }

    function Peek(k: nat): StackElem
      requires this.EState?
      requires this.Size() > k
      decreases this, k
    {
      this.stack[k]
    }

    function Pop(): AState
      requires this.EState?
      requires this.Size() >= 1
      decreases this
    {
      this.PopN(1)
    }

    function PopN(n: nat): AState
      requires this.EState?
      requires this.Size() >= n
      decreases this, n
    {
      this.(stack := this.stack[n..])
    }

    function Push(v: StackElem): AState
      requires this.EState?
      decreases this, v
    {
      this.(stack := [v] + this.stack)
    }

    function PushNRandom(n: nat): AState
      requires this.EState?
      decreases this, n
    {
      var xr: seq<StackElem> := seq(n, (_ /* _v0 */: int) => Random());
      this.(stack := xr + this.stack)
    }

    function Dup(n: nat): AState
      requires this.EState?
      requires 1 <= n <= 16
      requires this.Size() >= n > 0
      decreases this, n
    {
      var nth: StackElem := this.stack[n - 1];
      this.(stack := [nth] + this.stack)
    }

    function Swap(n: nat): AState
      requires this.EState?
      requires 1 <= n <= 16
      requires this.Size() > n > 0
      decreases this, n
    {
      var nth: StackElem := this.stack[n];
      var top: StackElem := this.stack[0];
      this.(stack := this.stack[0 := nth][n := top])
    }

    predicate Sat(c: ValidCond)
      requires this.EState?
      requires c.StCond?
      decreases c.Size()
    {
      if c.Size() == 1 then
        checkPos(this, c.trackedPos[0], c.trackedVals[0])
      else
        assert c.Size() >= 2; checkPos(this, c.trackedPos[0], c.trackedVals[0]) && Sat(c.Tail())
    }
  }
}

module Instructions {
  function {:opaque} GetArgValuePush(xc: seq<char>): u256
    requires |xc| <= 64
    requires forall k: int {:trigger xc[k]} :: 0 <= k < |xc| ==> _default.IsHex(xc[k])
    decreases xc
  {
    var pad: seq<char> := seq(64 - |xc|, (_ /* _v149 */: int) => '0');
    assert Hex.HexToU256(pad + xc).Some?;
    Hex.HexToU256(pad + xc).Extract()
  }

  function {:tailrecursion true} {:opaque} ToDot(xi: seq<ValidInstruction>): string
    decreases xi
  {
    if |xi| == 0 then
      """"
    else
      xi[0].ToHTML() + ToDot(xi[1..])
  }

  function {:opaque} Colours(i: ValidInstruction): (string, string)
    decreases i
  {
    match i.op
    case ArithOp(_ /* _v150 */, _ /* _v151 */, _ /* _v152 */, _ /* _v153 */, _ /* _v154 */, _ /* _v155 */) =>
      (""#316152"", ""#c6eb76"")
    case CompOp(_ /* _v156 */, _ /* _v157 */, _ /* _v158 */, _ /* _v159 */, _ /* _v160 */, _ /* _v161 */) =>
      (""darkgoldenrod"", ""bisque"")
    case BitwiseOp(_ /* _v162 */, _ /* _v163 */, _ /* _v164 */, _ /* _v165 */, _ /* _v166 */, _ /* _v167 */) =>
      (""orange"", ""#f3f383"")
    case KeccakOp(_ /* _v168 */, _ /* _v169 */, _ /* _v170 */, _ /* _v171 */, _ /* _v172 */, _ /* _v173 */) =>
      (""grey"", ""linen"")
    case EnvOp(_ /* _v174 */, _ /* _v175 */, _ /* _v176 */, _ /* _v177 */, _ /* _v178 */, _ /* _v179 */) =>
      (""darkslategrey"", ""lightgrey"")
    case MemOp(_ /* _v180 */, _ /* _v181 */, _ /* _v182 */, _ /* _v183 */, _ /* _v184 */, _ /* _v185 */) =>
      (""sienna"", ""wheat"")
    case StorageOp(_ /* _v186 */, _ /* _v187 */, _ /* _v188 */, _ /* _v189 */, _ /* _v190 */, _ /* _v191 */) =>
      (""fuchsia"", ""mistyrose"")
    case JumpOp(_ /* _v192 */, _ /* _v193 */, _ /* _v194 */, _ /* _v195 */, _ /* _v196 */, _ /* _v197 */) =>
      (""purple"", ""thistle"")
    case RunOp(_ /* _v198 */, _ /* _v199 */, _ /* _v200 */, _ /* _v201 */, _ /* _v202 */, _ /* _v203 */) =>
      (""sienna"", ""tan"")
    case StackOp(_ /* _v204 */, _ /* _v205 */, _ /* _v206 */, _ /* _v207 */, _ /* _v208 */, _ /* _v209 */) =>
      (""royalblue"", ""powderblue"")
    case LogOp(_ /* _v210 */, _ /* _v211 */, _ /* _v212 */, _ /* _v213 */, _ /* _v214 */, _ /* _v215 */) =>
      (""cornflowerblue"", ""lavender"")
    case SysOp(_ /* _v216 */, opcode, _ /* _v217 */, _ /* _v218 */, _ /* _v219 */, _ /* _v220 */) =>
      if opcode == STOP || opcode == REVERT then
        (""brown"", ""lightsalmon"")
      else if opcode == RETURN then
        (""teal"", ""greenyellow"")
      else if opcode == CALL || opcode == CALLCODE || opcode == DELEGATECALL || opcode == STATICCALL then
        (""sienna"", ""tan"")
      else
        (""brown"", ""salmon"")
  }

  import opened Int

  import Hex

  import opened MiscTypes

  import opened EVMOpcodes

  import opened EVMConstants

  import opened StackElement

  import opened State

  import opened WeakPre

  import opened EVMToolTips

  type ValidInstruction = i: Instruction
    | i.IsValid()
    witness Instruction(SysOp(""STOP"", STOP), [], 0)

  datatype Instruction = Instruction(op: ValidOpcode, arg: seq<char> := [], address: nat := 0) {
    ghost predicate IsValid()
      decreases this
    {
      op.opcode == INVALID || ((PUSH0 <= op.opcode <= PUSH32 ==> |arg| == 2 * (op.opcode - PUSH0) as nat && forall k: int {:trigger arg[k]} :: 0 <= k < |arg| ==> _default.IsHex(arg[k])) && (!(PUSH0 <= op.opcode <= PUSH32) ==> |arg| == 0))
    }

    function Size(): nat
      requires this.IsValid()
      decreases this
    {
      1 + |arg| / 2
    }

    function {:opaque} ToString(): string
      decreases this
    {
      var x: string := arg;
      if op.opcode == INVALID then
        op.Name() + "" "" + x
      else
        op.Name() + if |x| > 0 then "" 0x"" + x else """"
    }

    predicate Equiv(i: ValidInstruction)
      decreases this, i
    {
      op == i.op &&
      arg == i.arg
    }

    function {:opaque} ToHTML(): string
      requires this.IsValid()
      decreases this
    {
      var x: string := arg;
      var cols: (string, string) := Colours(this);
      var formattedAddress: seq<char> := seq(|Hex.NatToHex(address)| % 2, (_ /* _v0 */: int) => '0') + Hex.NatToHex(address);
      var insText: seq<char> := if op.opcode == INVALID then ""<FONT color=\"""" + cols.0 + ""\"">"" + op.Name() + ""</FONT>"" + "" "" + x else ""<FONT color=\"""" + cols.0 + ""\"">"" + op.Name() + ""</FONT>"" + if |x| > 0 then "" 0x"" + x else """";
      ""0x"" + formattedAddress + "":"" + insText + "" <BR ALIGN=\""LEFT\""/>\n""
    }

    function {:opaque} ToHTMLTable(entryPortTag: string := """", exitPortTag: string := """"): string
      requires this.IsValid()
      decreases this, entryPortTag, exitPortTag
    {
      var cols: (string, string) := Colours(this);
      var formattedAddress: seq<char> := seq(|Hex.NatToHex(address)| % 2, (_ /* _v1 */: int) => '0') + Hex.NatToHex(address);
      var gasLine: string := ""&#9981; "";
      var oplineTD: seq<char> := ""<TD width=\""7\"" fixedsize=\""false\"" align=\""left\"" cellpadding=\""1\"" tooltip=\""Gas: "" + Gas(op.opcode) + "" \"" "" + ""target=\""_blank\"" href=\"""" + gasRefLine + ""\"""" + "">"" + gasLine + ""</TD>"" + ""<TD width=\""1\"" fixedsize=\""false\"" align=\""left\"" cellpadding=\""1\"" "" + entryPortTag + "">"" + ""0x"" + formattedAddress + "" </TD>\n"" + ""<TD width=\""1\"" fixedsize=\""true\"" style=\""Rounded\"" BORDER=\""0\"" BGCOLOR=\"""" + cols.1 + ""\"" align=\""left\"" cellpadding=\""3\"" "" + exitPortTag + "" href=\"""" + bytecodeRefLine + NatToString(ToolTip(op.opcode).1) + ""\"" target=\""_blank\"" "" + "" tooltip=\"""" + ToolTip(op.opcode).0 + ""\"" "" + "">"" + ""<FONT color=\"""" + cols.0 + ""\"">"" + op.Name() + ""</FONT>"" + ""</TD>"";
      var arglineTD: seq<char> := if |arg| > 0 then ""<TD width=\""1\"" fixedsize=\""true\"" align=\""left\"">"" + ""  0x"" + arg + ""</TD>"" else """";
      var lineTR: seq<char> := ""<TR>"" + oplineTD + arglineTD + ""</TR>"";
      var itemTable: seq<char> := ""<TABLE  border=\""0\"" cellpadding=\""0\"" cellborder=\""0\"" CELLSPACING=\""1\"">"" + lineTR + ""</TABLE>"";
      itemTable
    }

    predicate IsTerminal()
      decreases this
    {
      this.op.IsTerminal()
    }

    predicate IsJumpDest()
      decreases this
    {
      this.op.IsJumpDest()
    }

    predicate IsJump()
      decreases this
    {
      this.op.IsJump()
    }

    function StackEffect(): int
      decreases this
    {
      op.StackEffect()
    }

    function WeakestPreOperands(post: nat := 0): (r: nat)
      decreases this, post
    {
      op.WeakestPreOperands(post)
    }

    lemma /*{:_induction this}*/ WeakestPreOperandsSimpleComp(k: nat)
      ensures k <= StackEffect() ==> WeakestPreOperands(k) == WeakestPreOperands(0)
      ensures k > StackEffect() ==> WeakestPreOperands(k) == Max(WeakestPreOperands(0), k - op.StackEffect())
      decreases this, k
    {
    }

    lemma /*{:_induction this}*/ WeakestPreOperandsMonotonic(k: nat, k': nat)
      requires k <= k'
      ensures WeakestPreOperands(k) <= WeakestPreOperands(k')
      decreases this, k, k'
    {
    }

    function WeakestPreCapacity(post: nat := 0): (r: nat)
      decreases this, post
    {
      op.WeakestPreCapacity(post)
    }

    function {:opaque} StackPosBackWardTracker(pos': nat := 0): Either<StackElem, nat>
      requires this.op.IsValid()
      requires this.IsValid()
      decreases this, pos'
    {
      match this.op
      case ArithOp(_ /* _v2 */, _ /* _v3 */, _ /* _v4 */, _ /* _v5 */, pushes, pops) =>
        assert pushes == 1; assert pops == 2; if pos' >= 1 then assert pos' + pops - pushes == pos' + 1; Right(pos' + 1) else Left(Random(""More than one predecessor. Arithmetic operator with target 0""))
      case CompOp(_ /* _v6 */, _ /* _v7 */, _ /* _v8 */, _ /* _v9 */, pushes, pops) =>
        if pos' >= 1 then
          Right(pos' + pops - pushes)
        else
          Left(Random(""More than one predecessor. Comparison operator with target 0""))
      case BitwiseOp(_ /* _v10 */, _ /* _v11 */, _ /* _v12 */, _ /* _v13 */, pushes, pops) =>
        if pos' >= 1 then
          Right(pos' + pops - pushes)
        else
          Left(Random(""More than one predecessor. Bitwise operator with target 0""))
      case KeccakOp(_ /* _v14 */, _ /* _v15 */, _ /* _v16 */, _ /* _v17 */, pushes, pops) =>
        assert pops == 2 && pushes == 1; if pos' >= 1 then Right(pos' + 1) else Left(Random(""More than one predecessor. Keccak operator with target 0""))
      case EnvOp(_ /* _v18 */, _ /* _v19 */, _ /* _v20 */, _ /* _v21 */, pushes, pops) =>
        if pushes == 1 && pops == 0 then
          if pos' == 0 then
            Left(Random(""More than one predecessor. Env operator with target 0""))
          else
            Right(pos' - 1)
        else if pushes == 1 && pops == 1 then
          if pos' == 0 then
            Left(Random(""More than one predecessor. Env operator with target 0""))
          else
            Right(pos')
        else
          (assert pushes == 0 && 3 <= pops <= 4; Right(pos' + pops - pushes))
      case MemOp(_ /* _v22 */, _ /* _v23 */, _ /* _v24 */, _ /* _v25 */, pushes, pops) =>
        if pushes == 0 then
          assert pops == 2;
          Right(pos' + 2)
        else
          (assert pushes == pops == 1; if pos' == 0 then Left(Random(""More than one predecessor. Mem operator with target 0"")) else Right(pos'))
      case StorageOp(_ /* _v26 */, _ /* _v27 */, _ /* _v28 */, _ /* _v29 */, pushes, pops) =>
        if pushes == 0 then
          assert pops == 2;
          Right(pos' + 2)
        else
          (assert pushes == pops == 1; if pos' == 0 then Left(Random(""More than one predecessor. Storage operator with target 0"")) else Right(pos'))
      case JumpOp(_ /* _v30 */, opcode, _ /* _v31 */, _ /* _v32 */, _ /* _v33 */, _ /* _v34 */) =>
        if opcode == JUMPDEST then
          Right(pos')
        else if JUMP <= opcode <= JUMPI then
          var k: u8 := opcode - JUMP + 1;
          Right(pos' + k as nat)
        else
          (assert JUMPDEST < opcode <= RJUMPV; Left(Random(""Not implemented"")))
      case RunOp(_ /* _v35 */, _ /* _v36 */, _ /* _v37 */, _ /* _v38 */, pushes, pops) =>
        if pos' == 0 then
          Left(Random(""More than one predecessor. Run operator with target 0""))
        else
          (assert pushes == 1 && pops == 0; Right(pos' - 1))
      case StackOp(_ /* _v39 */, opcode, _ /* _v40 */, _ /* _v41 */, _ /* _v42 */, _ /* _v43 */) =>
        if PUSH0 <= opcode <= PUSH32 then
          if pos' == 0 then
            Left(Value(GetArgValuePush(this.arg)))
          else
            Right(pos' - 1)
        else if DUP1 <= opcode <= DUP16 then
          Right(if pos' == 0 then (opcode - DUP1) as nat else pos' - 1)
        else if SWAP1 <= opcode <= SWAP16 then
          var k: nat := (opcode - SWAP1) as nat + 1;
          Right(if pos' == 0 then k else if pos' == k then 0 else pos')
        else
          (assert opcode == POP; Right(pos' + 1))
      case LogOp(_ /* _v44 */, _ /* _v45 */, _ /* _v46 */, _ /* _v47 */, pushes, pops) =>
        assert pushes == 0 && 2 <= pops <= 6; Right(pos' + pops)
      case SysOp(_ /* _v48 */, _ /* _v49 */, _ /* _v50 */, _ /* _v51 */, pushes, pops) =>
        if pushes == 0 then
          Right(pos' + pops)
        else
          assert pushes == 1; if pos' == 0 then Left(Random(""More than one predecessor. Sys operator with target 0"")) else Right(pos' + pops)
    }

    function {:opaque} NextState(s: ValidState, jumpDests: seq<nat>, exit: nat := 0): AState
      requires this.IsValid()
      requires exit == 0 || (this.op.opcode == JUMPI && exit <= 1)
      requires this.op.IsValid()
      decreases this, s, jumpDests, exit
    {
      match this.op
      case ArithOp(_ /* _v52 */, _ /* _v53 */, _ /* _v54 */, _ /* _v55 */, pushes, pops) =>
        if s.Size() >= pops then
          assert pops == 2;
          assert pushes == 1;
          s.PopN(pops).PushNRandom(pushes).Skip(1)
        else
          Error(""Stack underflow"")
      case CompOp(_ /* _v56 */, _ /* _v57 */, _ /* _v58 */, _ /* _v59 */, pushes, pops) =>
        if s.Size() >= pops then
          s.PopN(pops).PushNRandom(pushes).Skip(1)
        else
          Error(""Stack underflow"")
      case BitwiseOp(_ /* _v60 */, _ /* _v61 */, _ /* _v62 */, _ /* _v63 */, pushes, pops) =>
        if s.Size() >= pops then
          s.PopN(pops).PushNRandom(pushes).Skip(1)
        else
          Error(""Stack underflow"")
      case KeccakOp(_ /* _v64 */, _ /* _v65 */, _ /* _v66 */, _ /* _v67 */, pushes, pops) =>
        if s.Size() >= 2 then
          assert pushes == 1;
          assert pops == 2;
          s.PopN(2).Push(Random()).Skip(1)
        else
          Error(""Stack underflow"")
      case EnvOp(_ /* _v68 */, _ /* _v69 */, _ /* _v70 */, _ /* _v71 */, pushes, pops) =>
        if s.Size() >= pops then
          s.PopN(pops).PushNRandom(pushes).Skip(1)
        else
          Error(""EnvOp error"")
      case MemOp(_ /* _v72 */, _ /* _v73 */, _ /* _v74 */, _ /* _v75 */, pushes, pops) =>
        if s.Size() >= pops then
          s.PopN(pops).PushNRandom(pushes).Skip(1)
        else
          Error(""MemOp error"")
      case StorageOp(_ /* _v76 */, _ /* _v77 */, _ /* _v78 */, _ /* _v79 */, pushes, pops) =>
        if s.Size() >= pops then
          s.PopN(pops).PushNRandom(pushes).Skip(1)
        else
          Error(""Storage Op error"")
      case JumpOp(_ /* _v80 */, opcode, _ /* _v81 */, _ /* _v82 */, pushes, pops) =>
        assert pushes == 0; if opcode == JUMPDEST then s.Skip(1) else if opcode == JUMP then if s.Size() >= 1 then match s.Peek(0) case Value(v) => s.Pop().Goto(v as nat) case Random(_ /* _v83 */) => Error(""Jump to Random() unknown PC error"") else Error(""Cannot execute JUMP/exit false or stack underflow"") else if opcode == JUMPI then if s.Size() >= 2 then match s.Peek(0) case Value(v) => (if exit >= 1 then s.PopN(2).Goto(v as nat) else s.PopN(2).Skip(1)) case Random(_ /* _v84 */) => Error(""JumpI to Random() error"") else Error(""Cannot execute JUMPI/strack underflow"") else assert RJUMP <= opcode <= RJUMPV; Error(""RJUMPs not implemented"")
      case RunOp(_ /* _v85 */, _ /* _v86 */, _ /* _v87 */, _ /* _v88 */, pushes, pops) =>
        assert pops == 0; assert pushes == 1; s.Push(Random()).Skip(1)
      case StackOp(_ /* _v89 */, opcode, _ /* _v90 */, _ /* _v91 */, pushes, pops) =>
        if opcode == POP && s.Size() >= 1 then
          assert pushes == 0 && pops == 1;
          s.Pop().Skip(1)
        else if PUSH0 <= opcode <= PUSH32 then
          assert pushes == 1;
          assert pops == 0;
          var valToPush: StackElem := if GetArgValuePush(arg) as nat in jumpDests then Value(GetArgValuePush(arg)) else Random();
          s.Push(valToPush).Skip(1 + (opcode - PUSH0) as nat)
        else if DUP1 <= opcode <= DUP16 && s.Size() >= (opcode - DUP1) as nat + 1 then
          assert pushes == 1 && pops == 0;
          s.Dup((opcode - DUP1) as nat + 1).Skip(1)
        else if SWAP1 <= opcode <= SWAP16 && s.Size() > (opcode - SWAP1) as nat + 1 then
          assert pushes == pops == 0;
          s.Swap((opcode - SWAP1) as nat + 1).Skip(1)
        else
          Error(""Stack Op error"")
      case LogOp(_ /* _v92 */, _ /* _v93 */, _ /* _v94 */, _ /* _v95 */, pushes, pops) =>
        assert pushes == 0; if s.Size() >= pops then s.PopN(pops).Skip(1) else Error(""LogOp error"")
      case SysOp(_ /* _v96 */, op, _ /* _v97 */, _ /* _v98 */, pushes, pops) =>
        if op == INVALID || op == STOP || op == REVERT then
          Error(""SysOp error"")
        else if s.Size() >= pops then
          s.PopN(pops).PushNRandom(pushes).Skip(1)
        else
          Error(""SysOp error"")
    }

    function {:opaque} WPre(c: ValidCond): ValidCond
      requires this.IsValid()
      requires c.StCond?
      decreases this, c
    {
      match this.op
      case ArithOp(_ /* _v99 */, _ /* _v100 */, _ /* _v101 */, _ /* _v102 */, pushes, pops) =>
        assert pushes == 1; assert pops == 2; if 0 in c.TrackedPos() then StFalse() else var shiftByOne: seq<nat> := Map(c.TrackedPos(), (pos: nat) => pos + 1); StCond(shiftByOne, c.TrackedVals())
      case CompOp(_ /* _v103 */, _ /* _v104 */, _ /* _v105 */, _ /* _v106 */, pushes, pops) =>
        if 0 in c.TrackedPos() then
          StFalse()
        else
          (var shiftBy: seq<int> := Map(c.TrackedPos(), (pos: int) => pos + pops - pushes); StCond(shiftBy, c.TrackedVals()))
      case BitwiseOp(_ /* _v107 */, _ /* _v108 */, _ /* _v109 */, _ /* _v110 */, pushes, pops) =>
        if 0 in c.TrackedPos() then
          StFalse()
        else
          (assert pops - pushes >= 0; var shiftBy: seq<int> := Map(c.TrackedPos(), (pos: int) => pos + pops - pushes); StCond(shiftBy, c.TrackedVals()))
      case KeccakOp(_ /* _v111 */, _ /* _v112 */, _ /* _v113 */, _ /* _v114 */, pushes, pops) =>
        assert pops == 2 && pushes == 1; if 0 in c.TrackedPos() then StFalse() else var shiftByOne: seq<nat> := Map(c.TrackedPos(), (pos: nat) => pos + 1); StCond(shiftByOne, c.TrackedVals())
      case EnvOp(_ /* _v115 */, _ /* _v116 */, _ /* _v117 */, _ /* _v118 */, pushes, pops) =>
        if pushes == 1 && pops == 0 then
          if 0 in c.TrackedPos() then
            StFalse()
          else
            var shiftByOne: seq<int> := Map(c.TrackedPos(), (pos: nat) => pos - 1); StCond(shiftByOne, c.TrackedVals())
        else if pushes == 1 && pops == 1 then
          if 0 in c.TrackedPos() then
            StFalse()
          else
            c
        else
          (assert pushes == 0 && 3 <= pops <= 4; var shiftBy: seq<int> := Map(c.TrackedPos(), (pos: int) => pos + pops - pushes); StCond(shiftBy, c.TrackedVals()))
      case MemOp(_ /* _v119 */, _ /* _v120 */, _ /* _v121 */, _ /* _v122 */, pushes, pops) =>
        if pushes == 0 then
          assert pops == 2;
          var shiftByTwo: seq<nat> := Map(c.TrackedPos(), (pos: nat) => pos + 2);
          StCond(shiftByTwo, c.TrackedVals())
        else
          (assert pushes == pops == 1; if 0 in c.TrackedPos() then StFalse() else c)
      case StorageOp(_ /* _v123 */, _ /* _v124 */, _ /* _v125 */, _ /* _v126 */, pushes, pops) =>
        if pushes == 0 then
          assert pops == 2;
          var shiftByTwo: seq<nat> := Map(c.TrackedPos(), (pos: nat) => pos + 2);
          StCond(shiftByTwo, c.TrackedVals())
        else
          (assert pushes == pops == 1; if 0 in c.TrackedPos() then StFalse() else c)
      case JumpOp(_ /* _v127 */, opcode, _ /* _v128 */, _ /* _v129 */, _ /* _v130 */, _ /* _v131 */) =>
        if opcode == JUMPDEST then
          c
        else if JUMP <= opcode <= JUMPI then
          var k: u8 := opcode - JUMP + 1;
          var shiftBy: seq<int> := Map(c.TrackedPos(), (pos: int) => pos + k as nat);
          StCond(shiftBy, c.TrackedVals())
        else
          StFalse()
      case RunOp(_ /* _v132 */, opcode, _ /* _v133 */, _ /* _v134 */, _ /* _v135 */, _ /* _v136 */) =>
        if 0 in c.TrackedPos() then
          StFalse()
        else
          (var shiftByOne: seq<int> := Map(c.TrackedPos(), (pos: nat) => pos - 1); StCond(shiftByOne, c.TrackedVals()))
      case StackOp(_ /* _v137 */, opcode, _ /* _v138 */, _ /* _v139 */, _ /* _v140 */, _ /* _v141 */) =>
        if PUSH0 <= opcode <= PUSH32 then
          match Find(c.TrackedPos(), 0)
          case None() =>
            var shiftByMinusOne: seq<int> := Map(c.TrackedPos(), (pos: nat) => pos - 1);
            StCond(shiftByMinusOne, c.TrackedVals())
          case Some(i) =>
            var argVal: Option<u256> := Hex.HexToU256(seq(64 - |arg|, (_ /* _v142 */: int) => '0') + arg);
            assert argVal.Some?;
            if c.TrackedValAt(i) == argVal.Extract() then
              var filtered: seq<nat> := c.TrackedPos()[..i] + c.TrackedPos()[i + 1..];
              assert forall k: int {:trigger c.TrackedPos()[k]} :: 0 <= k < |c.TrackedPos()[..i]| ==> c.TrackedPos()[k] != c.TrackedPosAt(i);
              assert forall k: int {:triggers filtered[k]} {:trigger filtered[k]} :: 0 <= k < |c.TrackedPos()[i + 1..]| ==> c.TrackedPos()[i + 1 + k] != c.TrackedPosAt(i);
              assert c.TrackedPosAt(i) == 0;
              assert forall k: int {:trigger filtered[k]} :: 0 <= k < |filtered| ==> filtered[k] != c.TrackedPosAt(i);
              assert forall k: int {:trigger filtered[k]} :: 0 <= k < |filtered| ==> filtered[k] != 0;
              if |filtered| == 0 then
                StTrue()
              else
                var shiftByMinusOne: seq<int> := Map(filtered, (pos: nat) => pos - 1); StCond(shiftByMinusOne, c.TrackedVals()[..i] + c.TrackedVals()[i + 1..])
            else
              StFalse()
        else if DUP1 <= opcode <= DUP16 then
          match Find(c.TrackedPos(), 0)
          case None() =>
            assert forall k: int {:trigger c.TrackedPos()[k]} :: 0 <= k < |c.TrackedPos()| ==> c.TrackedPos()[k] != 0; var shiftByMinusOneButZero: seq<int> := Map(c.TrackedPos(), (pos: nat) => pos - 1); assert forall k: int, k': int {:trigger shiftByMinusOneButZero[k'], shiftByMinusOneButZero[k]} :: 0 <= k < k' < |shiftByMinusOneButZero| ==> shiftByMinusOneButZero[k] != shiftByMinusOneButZero[k']; StCond(shiftByMinusOneButZero, c.TrackedVals())
          case Some(index0) =>
            match Find(c.TrackedPos(), (opcode - DUP1) as nat + 1)
            case Some(index) =>
              if c.TrackedValAt(index0) == c.TrackedValAt(index) then
                var filtered: seq<nat> := c.TrackedPos()[..index0] + c.TrackedPos()[index0 + 1..];
                assert forall k: int {:trigger filtered[k]} :: 0 <= k < |filtered| ==> filtered[k] != 0;
                var shiftByMinusOne: seq<int> := Map(filtered, (pos: nat) => pos - 1);
                assert forall k: int, k': int {:trigger shiftByMinusOne[k'], shiftByMinusOne[k]} :: 0 <= k < k' < |shiftByMinusOne| ==> shiftByMinusOne[k] != shiftByMinusOne[k'];
                StCond(shiftByMinusOne, c.TrackedVals()[..index0] + c.TrackedVals()[index0 + 1..])
              else
                StFalse()
            case None() =>
              assert Find(c.TrackedPos(), (opcode - DUP1) as nat + 1) == None;
              assert forall k: int {:trigger c.TrackedPosAt(k)} :: 0 <= k < |c.TrackedPos()| ==> c.TrackedPosAt(k) != (opcode - DUP1) as nat + 1;
              var shiftByMinusOneButZero: seq<int> := Map(c.TrackedPos(), (pos: nat) => if pos == 0 then (opcode - DUP1) as nat else pos - 1);
              assert forall k: int, k': int {:trigger shiftByMinusOneButZero[k'], shiftByMinusOneButZero[k]} :: 0 <= k < k' < |shiftByMinusOneButZero| ==> shiftByMinusOneButZero[k] != shiftByMinusOneButZero[k'];
              StCond(shiftByMinusOneButZero, c.TrackedVals())
        else if SWAP1 <= opcode <= SWAP16 then
          var k: nat := (opcode - SWAP1) as nat + 1;
          var swapZeroAndk: seq<int> := Map(c.TrackedPos(), (pos: nat) => if pos == 0 then k as nat else if pos == k then 0 else pos);
          StCond(swapZeroAndk, c.TrackedVals())
        else
          (assert opcode == POP; var shiftByOne: seq<nat> := Map(c.TrackedPos(), (i: nat) => i + 1); StCond(shiftByOne, c.TrackedVals()))
      case LogOp(_ /* _v143 */, opcode, _ /* _v144 */, _ /* _v145 */, pushes, pops) =>
        assert pushes == 0 && 2 <= pops <= 6; var shiftBy: seq<int> := Map(c.TrackedPos(), (pos: int) => pos + pops); StCond(shiftBy, c.TrackedVals())
      case SysOp(_ /* _v146 */, opcode, _ /* _v147 */, _ /* _v148 */, pushes, pops) =>
        if pushes == 0 then
          var shiftBy: seq<int> := Map(c.TrackedPos(), (pos: int) => pos + pops);
          StCond(shiftBy, c.TrackedVals())
        else
          assert pushes == 1; if 0 in c.TrackedPos() then StFalse() else var shiftBy: seq<int> := Map(c.TrackedPos(), (pos: int) => pos + pops); StCond(shiftBy, c.TrackedVals())
    }
  }
}

module EVMToolTips {
  const bytecodeRefLine := ""https://github.com/Consensys/evm-dafny/blob/60bce44ee75978a4c97b9eab8e03424c9c233bbd/src/dafny/bytecode.dfy#L""
  const gasRefLine := ""https://github.com/Consensys/evm-dafny/blob/60bce44ee75978a4c97b9eab8e03424c9c233bbd/src/dafny/evm.dfy#L103""

  function ToolTip(op: u8): (string, nat)
    decreases op
  {
    match op
    case STOP =>
      (""Halts the machine without return output data"", 32)
    case ADD =>
      (""Unsigned integer addition modulo TWO_256"", 40)
    case MUL =>
      (""Unsigned integer multiplication modulo TWO_256"", 61)
    case SUB =>
      (""Unsigned integer subtraction modulo TWO_256"", 81)
    case DIV =>
      (""Unsigned integer division modulo TWO_256. Div by 0 yields 0"", 154)
    case SDIV =>
      (""Signed integer division modulo TWO_256. Div by 0 yields 0"", 173)
    case MOD =>
      (""Unsigned modulo remainder"", 195)
    case SMOD =>
      (""Signed modulo remainder"", 211)
    case ADDMOD =>
      (""Unsigned integer addition modulo"", 230)
    case MULMOD =>
      (""Unsigned integer multiplication modulo"", 250)
    case EXP =>
      (""Exponential"", 272)
    case SIGNEXTEND =>
      (""Extend length of two's complement signed integer"", 291)
    case LT =>
      (""Unsigned Less than"", 314)
    case GT =>
      (""Unsigned Greater than"", 336)
    case SLT =>
      (""Signed less than"", 358)
    case SGT =>
      (""Signed greater than"", 380)
    case EQ =>
      (""equal"", 402)
    case ISZERO =>
      (""Is equal to zero"", 424)
    case AND =>
      (""Bitwise AND"", 445)
    case OR =>
      (""Bitwise OR"", 464)
    case XOR =>
      (""Bitwise XOR"", 484)
    case NOT =>
      (""Bitwise NOT"", 504)
    case BYTE =>
      (""Extract a byte from a word."", 522)
    case SHL =>
      (""Left shift"", 541)
    case SHR =>
      (""Right shift"", 560)
    case SAR =>
      (""Arithmetic (signed) right shift operation"", 579)
    case KECCAK256 =>
      (""Keccak 256 hash"", 598)
    case ADDRESS =>
      (""Address of current executing account"", 640)
    case BALANCE =>
      (""Balance of a given account"", 655)
    case ORIGIN =>
      (""Originator's address"", 676)
    case CALLER =>
      (""Caller address"", 692)
    case CALLVALUE =>
      (""Value deposited by function call"", 707)
    case CALLDATALOAD =>
      (""Input data for this call"", 723)
    case CALLDATASIZE =>
      (""Size of the input data"", 742)
    case CALLDATACOPY =>
      (""Copy input data to memory"", 759)
    case CODESIZE =>
      (""Size of the code of this contract"", 783)
    case CODECOPY =>
      (""Copy the executing code to memory"", 799)
    case GASPRICE =>
      (""Gas price in current block"", 824)
    case EXTCODESIZE =>
      (""Size of the calling account's code"", 839)
    case EXTCODECOPY =>
      (""Copy account's code to memory"", 866)
    case RETURNDATASIZE =>
      (""Size of return data from previous call"", 920)
    case RETURNDATACOPY =>
      (""Copy return data from previous call to memory"", 937)
    case EXTCODEHASH =>
      (""Hash of account's code"", 895)
    case BLOCKHASH =>
      (""Hash of current block"", 626)
    case COINBASE =>
      (""Current block's beneficiay address"", 970)
    case TIMESTAMP =>
      (""Current block's timestamp"", 985)
    case NUMBER =>
      (""Current block's number"", 1000)
    case DIFFICULTY =>
      (""Current block's difficulty"", 1015)
    case GASLIMIT =>
      (""Current block's gas limit"", 1030)
    case CHAINID =>
      (""Chain ID"", 1045)
    case SELFBALANCE =>
      (""Balance of currently executing account"", 1060)
    case BASEFEE =>
      (""Base fee for the currently executing block"", 1080)
    case POP =>
      (""Pop top of stack"", 1097)
    case MLOAD =>
      (""Read a word from memory"", 1133)
    case MSTORE =>
      (""Store a word to memory"", 1165)
    case MSTORE8 =>
      (""Store a byte to memory"", 1195)
    case SLOAD =>
      (""Read a word from storage"", 1214)
    case SSTORE =>
      (""Store a word to storage"", 1233)
    case JUMP =>
      (""Uncoditional Jump"", 1255)
    case JUMPI =>
      (""Conditional Jump"", 1277)
    case RJUMP =>
      (""Static relative jump using a given offset"", 1343)
    case RJUMPI =>
      (""Conditional Static relative jump using a given offset"", 1363)
    case RJUMPV =>
      (""Relative jump via a jump table of one or more relative offsets"", 1392)
    case PC =>
      (""Value of program counter"", 1302)
    case MSIZE =>
      (""Size of allocated memory"", 1113)
    case GAS =>
      (""Amount of available gas"", 1318)
    case JUMPDEST =>
      (""A valid destination for a jump"", 1334)
    case PUSH0 =>
      (""Push 0 on stack"", 1428)
    case PUSH1 =>
      (""Push 1 byte"", 1479)
    case PUSH2 =>
      (""Push 2 bytes"", 1486)
    case PUSH3 =>
      (""Push 3 bytes"", 1493)
    case PUSH4 =>
      (""Push 4 bytes"", 1500)
    case PUSH5 =>
      (""Push 5 bytes"", 1507)
    case PUSH6 =>
      (""Push 6 bytes"", 1514)
    case PUSH7 =>
      (""Push 7 bytes"", 1521)
    case PUSH8 =>
      (""Push 8 bytes"", 1528)
    case PUSH9 =>
      (""Push 9 bytes"", 1535)
    case PUSH10 =>
      (""Push 10 bytes"", 1535)
    case PUSH11 =>
      (""Push 11 bytes"", 1535)
    case PUSH12 =>
      (""Push 12 bytes"", 1535)
    case PUSH13 =>
      (""Push 13 bytes"", 1535)
    case PUSH14 =>
      (""Push 14 bytes"", 1535)
    case PUSH15 =>
      (""Push 15 bytes"", 1535)
    case PUSH16 =>
      (""Push 16 bytes"", 1535)
    case PUSH17 =>
      (""Push 17 bytes"", 1535)
    case PUSH18 =>
      (""Push 18 bytes"", 1535)
    case PUSH19 =>
      (""Push 19 bytes"", 1535)
    case PUSH20 =>
      (""Push 20 bytes"", 1535)
    case PUSH21 =>
      (""Push 21 bytes"", 1535)
    case PUSH22 =>
      (""Push 22 bytes"", 1535)
    case PUSH23 =>
      (""Push 23 bytes"", 1535)
    case PUSH24 =>
      (""Push 24 bytes"", 1535)
    case PUSH25 =>
      (""Push 25 bytes"", 1535)
    case PUSH26 =>
      (""Push 26 bytes"", 1535)
    case PUSH27 =>
      (""Push 27 bytes"", 1535)
    case PUSH28 =>
      (""Push 28 bytes"", 1535)
    case PUSH29 =>
      (""Push 29 bytes"", 1535)
    case PUSH30 =>
      (""Push 30 bytes"", 1535)
    case PUSH31 =>
      (""Push 31 bytes"", 1535)
    case PUSH32 =>
      (""Push 32 bytes"", 1535)
    case DUP1 =>
      (""Duplicate 1st element on top of the stack"", 1568)
    case DUP2 =>
      (""Duplicate 2nd element on top of the stack"", 1568)
    case DUP3 =>
      (""Duplicate 3rd element on top of the stack"", 1568)
    case DUP4 =>
      (""Duplicate 4-th element on top of the stack"", 1568)
    case DUP5 =>
      (""Duplicate 5-th element on top of the stack"", 1568)
    case DUP6 =>
      (""Duplicate 6-th element on top of the stack"", 1568)
    case DUP7 =>
      (""Duplicate 7-th element on top of the stack"", 1568)
    case DUP8 =>
      (""Duplicate 8-th element on top of the stack"", 1568)
    case DUP9 =>
      (""Duplicate 9-th element on top of the stack"", 1568)
    case DUP10 =>
      (""Duplicate 10-th element on top of the stack"", 1568)
    case DUP11 =>
      (""Duplicate 11-th element on top of the stack"", 1568)
    case DUP12 =>
      (""Duplicate 12-th element on top of the stack"", 1568)
    case DUP13 =>
      (""Duplicate 13-th element on top of the stack"", 1568)
    case DUP14 =>
      (""Duplicate 14-th element on top of the stack"", 1568)
    case DUP15 =>
      (""Duplicate 15-th element on top of the stack"", 1568)
    case DUP16 =>
      (""Duplicate 16-th element on top of the stack"", 1568)
    case SWAP1 =>
      (""Swap top and 2nd element of the stack"", 1577)
    case SWAP2 =>
      (""Swap top and 3rd element of the stack"", 1577)
    case SWAP3 =>
      (""Swap top and 4-th element of the stack"", 1577)
    case SWAP4 =>
      (""Swap top and 5-th element of the stack"", 1577)
    case SWAP5 =>
      (""Swap top and 6-th element of the stack"", 1577)
    case SWAP6 =>
      (""Swap top and 7-th element of the stack"", 1577)
    case SWAP7 =>
      (""Swap top and 8-th element of the stack"", 1577)
    case SWAP8 =>
      (""Swap top and 9-th element of the stack"", 1577)
    case SWAP9 =>
      (""Swap top and 10-th element of the stack"", 1577)
    case SWAP10 =>
      (""Swap top and 11-th element of the stack"", 1577)
    case SWAP11 =>
      (""Swap top and 12-th element of the stack"", 1577)
    case SWAP12 =>
      (""Swap top and 13-th element of the stack"", 1577)
    case SWAP13 =>
      (""Swap top and 14-th element of the stack"", 1577)
    case SWAP14 =>
      (""Swap top and 15-th element of the stack"", 1577)
    case SWAP15 =>
      (""Swap top and 16-th element of the stack"", 1577)
    case SWAP16 =>
      (""Swap top and 17-th element of the stack"", 1577)
    case LOG0 =>
      (""Append log with 0 topics"", 1600)
    case LOG1 =>
      (""Append log with 1 topics"", 1600)
    case LOG2 =>
      (""Append log with 2 topics"", 1600)
    case LOG3 =>
      (""Append log with 3 topics"", 1600)
    case LOG4 =>
      (""Append log with 4 topics"", 1600)
    case CREATE =>
      (""Create a new account with associated code"", 1629)
    case CALL =>
      (""Message-call into an account"", 1674)
    case CALLCODE =>
      (""Message-call into this account with another account's code"", 1711)
    case RETURN =>
      (""Halt execution and return data"", 1742)
    case DELEGATECALL =>
      (""Message-call into this account with an alternative account's code"", 1764)
    case CREATE2 =>
      (""Create a new account with associated code"", 1799)
    case STATICCALL =>
      (""Static Message-call into an account"", 1844)
    case REVERT =>
      (""Revert execution and return data"", 1874)
    case SELFDESTRUCT =>
      (""Delete this account"", 1896)
    case INVALID =>
      (""Equivalent to STOP"", 32)
    case _ /* _v0 */ =>
      (""N/A"", 0)
  }

  const G_ZERO: nat := 0
  const G_JUMPDEST: nat := 1
  const G_BASE: nat := 2
  const G_VERYLOW: nat := 3
  const G_LOW: nat := 5
  const G_MID: nat := 8
  const G_HIGH: nat := 10
  const G_WARMACCESS: nat := 100
  const G_COLDACCOUNTACCESS: nat := 2600
  const G_COLDSLOAD: nat := 2100
  const G_SSET: nat := 20000
  const G_SRESET: nat := 2900
  const R_SCLEAR: nat := 15000
  const R_SELFDESTRUCT: nat := 24000
  const G_SELFDESTRUCT: nat := 5000
  const G_CREATE: nat := 32000
  const G_CODEDEPOSIT: nat := 200
  const G_CALLVALUE: nat := 9000
  const G_CALLSTIPEND: nat := 2300
  const G_NEWACCOUNT: nat := 25000
  const G_EXP: nat := 10
  const G_EXPBYTE: nat := 50
  const G_MEMORY: nat := 3
  const G_TXCREATE: nat := 32000
  const G_TXDATAZERO: nat := 4
  const G_TXDATANONZERO: nat := 16
  const G_TRANSACTION: nat := 21000
  const G_LOG: nat := 375
  const G_LOGDATA: nat := 8
  const G_LOGTOPIC: nat := 375
  const G_KECCAK256: nat := 30
  const G_KECCAK256WORD: nat := 6
  const G_COPY: nat := 3
  const G_BLOCKHASH: nat := 20

  function Gas(op: u8): string
    decreases op
  {
    match op
    case STOP =>
      NatToString(G_ZERO)
    case ADD =>
      NatToString(G_VERYLOW)
    case MUL =>
      NatToString(G_LOW)
    case SUB =>
      NatToString(G_VERYLOW)
    case DIV =>
      NatToString(G_LOW)
    case SDIV =>
      NatToString(G_LOW)
    case MOD =>
      NatToString(G_LOW)
    case SMOD =>
      NatToString(G_LOW)
    case ADDMOD =>
      NatToString(G_MID)
    case MULMOD =>
      NatToString(G_MID)
    case EXP =>
      ""Depends on memory expansion""
    case SIGNEXTEND =>
      NatToString(G_LOW)
    case LT =>
      NatToString(G_VERYLOW)
    case GT =>
      NatToString(G_VERYLOW)
    case SLT =>
      NatToString(G_VERYLOW)
    case SGT =>
      NatToString(G_VERYLOW)
    case EQ =>
      NatToString(G_VERYLOW)
    case ISZERO =>
      NatToString(G_VERYLOW)
    case AND =>
      NatToString(G_VERYLOW)
    case OR =>
      NatToString(G_VERYLOW)
    case XOR =>
      NatToString(G_VERYLOW)
    case NOT =>
      NatToString(G_VERYLOW)
    case BYTE =>
      NatToString(G_VERYLOW)
    case SHL =>
      NatToString(G_VERYLOW)
    case SHR =>
      NatToString(G_VERYLOW)
    case SAR =>
      NatToString(G_VERYLOW)
    case KECCAK256 =>
      ""Depends on memory expansion""
    case ADDRESS =>
      NatToString(G_BASE)
    case ORIGIN =>
      NatToString(G_BASE)
    case CALLER =>
      NatToString(G_BASE)
    case CALLVALUE =>
      NatToString(G_BASE)
    case CALLDATALOAD =>
      NatToString(G_VERYLOW)
    case CALLDATASIZE =>
      NatToString(G_BASE)
    case CALLDATACOPY =>
      ""Depends on memory expansion""
    case CODESIZE =>
      NatToString(G_BASE)
    case CODECOPY =>
      ""Depends on memory expansion""
    case GASPRICE =>
      NatToString(G_BASE)
    case EXTCODESIZE =>
      ""Depends on memory expansion""
    case EXTCODECOPY =>
      ""Depends on memory expansion""
    case RETURNDATASIZE =>
      NatToString(G_BASE)
    case RETURNDATACOPY =>
      ""Depends on memory expansion""
    case EXTCODEHASH =>
      ""Depends on memory expansion""
    case BLOCKHASH =>
      NatToString(G_BLOCKHASH)
    case COINBASE =>
      NatToString(G_BASE)
    case TIMESTAMP =>
      NatToString(G_BASE)
    case NUMBER =>
      NatToString(G_BASE)
    case DIFFICULTY =>
      NatToString(G_BASE)
    case GASLIMIT =>
      NatToString(G_BASE)
    case CHAINID =>
      NatToString(G_BASE)
    case SELFBALANCE =>
      NatToString(G_LOW)
    case BASEFEE =>
      NatToString(G_BASE)
    case POP =>
      NatToString(G_BASE)
    case MLOAD =>
      ""Depends on memory expansion""
    case MSTORE =>
      ""Depends on memory expansion""
    case MSTORE8 =>
      ""Depends on memory expansion""
    case SLOAD =>
      ""Depends on memory expansion""
    case SSTORE =>
      ""Depends on memory expansion""
    case JUMP =>
      NatToString(G_MID)
    case JUMPI =>
      NatToString(G_HIGH)
    case PC =>
      NatToString(G_BASE)
    case MSIZE =>
      NatToString(G_BASE)
    case GAS =>
      NatToString(G_BASE)
    case JUMPDEST =>
      NatToString(G_JUMPDEST)
    case PUSH0 =>
      NatToString(G_VERYLOW)
    case PUSH1 =>
      NatToString(G_VERYLOW)
    case PUSH2 =>
      NatToString(G_VERYLOW)
    case PUSH3 =>
      NatToString(G_VERYLOW)
    case PUSH4 =>
      NatToString(G_VERYLOW)
    case PUSH5 =>
      NatToString(G_VERYLOW)
    case PUSH6 =>
      NatToString(G_VERYLOW)
    case PUSH7 =>
      NatToString(G_VERYLOW)
    case PUSH8 =>
      NatToString(G_VERYLOW)
    case PUSH9 =>
      NatToString(G_VERYLOW)
    case PUSH10 =>
      NatToString(G_VERYLOW)
    case PUSH11 =>
      NatToString(G_VERYLOW)
    case PUSH12 =>
      NatToString(G_VERYLOW)
    case PUSH13 =>
      NatToString(G_VERYLOW)
    case PUSH14 =>
      NatToString(G_VERYLOW)
    case PUSH15 =>
      NatToString(G_VERYLOW)
    case PUSH16 =>
      NatToString(G_VERYLOW)
    case PUSH17 =>
      NatToString(G_VERYLOW)
    case PUSH18 =>
      NatToString(G_VERYLOW)
    case PUSH19 =>
      NatToString(G_VERYLOW)
    case PUSH20 =>
      NatToString(G_VERYLOW)
    case PUSH21 =>
      NatToString(G_VERYLOW)
    case PUSH22 =>
      NatToString(G_VERYLOW)
    case PUSH23 =>
      NatToString(G_VERYLOW)
    case PUSH24 =>
      NatToString(G_VERYLOW)
    case PUSH25 =>
      NatToString(G_VERYLOW)
    case PUSH26 =>
      NatToString(G_VERYLOW)
    case PUSH27 =>
      NatToString(G_VERYLOW)
    case PUSH28 =>
      NatToString(G_VERYLOW)
    case PUSH29 =>
      NatToString(G_VERYLOW)
    case PUSH30 =>
      NatToString(G_VERYLOW)
    case PUSH31 =>
      NatToString(G_VERYLOW)
    case PUSH32 =>
      NatToString(G_VERYLOW)
    case DUP1 =>
      NatToString(G_VERYLOW)
    case DUP2 =>
      NatToString(G_VERYLOW)
    case DUP3 =>
      NatToString(G_VERYLOW)
    case DUP4 =>
      NatToString(G_VERYLOW)
    case DUP5 =>
      NatToString(G_VERYLOW)
    case DUP6 =>
      NatToString(G_VERYLOW)
    case DUP7 =>
      NatToString(G_VERYLOW)
    case DUP8 =>
      NatToString(G_VERYLOW)
    case DUP9 =>
      NatToString(G_VERYLOW)
    case DUP10 =>
      NatToString(G_VERYLOW)
    case DUP11 =>
      NatToString(G_VERYLOW)
    case DUP12 =>
      NatToString(G_VERYLOW)
    case DUP13 =>
      NatToString(G_VERYLOW)
    case DUP14 =>
      NatToString(G_VERYLOW)
    case DUP15 =>
      NatToString(G_VERYLOW)
    case DUP16 =>
      NatToString(G_VERYLOW)
    case SWAP1 =>
      NatToString(G_VERYLOW)
    case SWAP2 =>
      NatToString(G_VERYLOW)
    case SWAP3 =>
      NatToString(G_VERYLOW)
    case SWAP4 =>
      NatToString(G_VERYLOW)
    case SWAP5 =>
      NatToString(G_VERYLOW)
    case SWAP6 =>
      NatToString(G_VERYLOW)
    case SWAP7 =>
      NatToString(G_VERYLOW)
    case SWAP8 =>
      NatToString(G_VERYLOW)
    case SWAP9 =>
      NatToString(G_VERYLOW)
    case SWAP10 =>
      NatToString(G_VERYLOW)
    case SWAP11 =>
      NatToString(G_VERYLOW)
    case SWAP12 =>
      NatToString(G_VERYLOW)
    case SWAP13 =>
      NatToString(G_VERYLOW)
    case SWAP14 =>
      NatToString(G_VERYLOW)
    case SWAP15 =>
      NatToString(G_VERYLOW)
    case SWAP16 =>
      NatToString(G_VERYLOW)
    case LOG0 =>
      ""Depends on memory expansion""
    case LOG1 =>
      ""Depends on memory expansion""
    case LOG2 =>
      ""Depends on memory expansion""
    case LOG3 =>
      ""Depends on memory expansion""
    case LOG4 =>
      ""Depends on memory expansion""
    case CREATE =>
      ""Depends on memory expansion""
    case CALL =>
      ""Depends on memory expansion""
    case CALLCODE =>
      ""Depends on memory expansion""
    case RETURN =>
      ""Depends on memory expansion""
    case DELEGATECALL =>
      ""Depends on memory expansion""
    case CREATE2 =>
      ""Depends on memory expansion""
    case STATICCALL =>
      ""Depends on memory expansion""
    case REVERT =>
      ""Depends on memory expansion""
    case SELFDESTRUCT =>
      ""Depends on memory expansion""
    case INVALID =>
      NatToString(G_VERYLOW)
    case _ /* _v1 */ =>
      ""Unknown opcode""
  }

  import opened Int

  import opened EVMOpcodes

  import opened EVMConstants
}

module EVMOpcodes {

  import opened Int

  import opened MiscTypes

  import opened EVMConstants
  type ValidOpcode = x: Opcode
    | x.IsValid()
    witness SysOp(""STOP"", STOP)

  datatype Opcode = ArithOp(name: string, opcode: u8, minCapacity: nat := 0, minOperands: nat := 2, pushes: nat := 1, pops: nat := 2) | CompOp(name: string, opcode: u8, minCapacity: nat := 0, minOperands: nat := 2, pushes: nat := 1, pops: nat := 2) | BitwiseOp(name: string, opcode: u8, minCapacity: nat, minOperands: nat, pushes: nat, pops: nat) | KeccakOp(name: string, opcode: u8, minCapacity: nat, minOperands: nat, pushes: nat, pops: nat) | EnvOp(name: string, opcode: u8, minCapacity: nat, minOperands: nat, pushes: nat, pops: nat) | MemOp(name: string, opcode: u8, minCapacity: nat, minOperands: nat, pushes: nat, pops: nat) | StorageOp(name: string, opcode: u8, minCapacity: nat, minOperands: nat, pushes: nat, pops: nat) | JumpOp(name: string, opcode: u8, minCapacity: nat := 0, minOperands: nat := 0, pushes: nat := 0, pops: nat := 0) | RunOp(name: string, opcode: u8, minCapacity: nat, minOperands: nat, pushes: nat, pops: nat) | StackOp(name: string, opcode: u8, minCapacity: nat := 0, minOperands: nat := 0, pushes: nat := 0, pops: nat := 0) | LogOp(name: string, opcode: u8, minCapacity: nat, minOperands: nat, pushes: nat, pops: nat) | SysOp(name: string, opcode: u8, minCapacity: nat := 0, minOperands: nat := 0, pushes: nat := 0, pops: nat := 0) {
    predicate IsValid()
      decreases this
    {
      match this
      case ArithOp(_ /* _v0 */, _ /* _v1 */, _ /* _v2 */, _ /* _v3 */, _ /* _v4 */, _ /* _v5 */) =>
        ADD <= opcode <= SIGNEXTEND &&
        pops == 2 &&
        pushes == 1
      case CompOp(_ /* _v6 */, _ /* _v7 */, _ /* _v8 */, _ /* _v9 */, _ /* _v10 */, _ /* _v11 */) =>
        LT <= opcode <= ISZERO &&
        pops >= pushes
      case BitwiseOp(_ /* _v12 */, _ /* _v13 */, _ /* _v14 */, _ /* _v15 */, _ /* _v16 */, _ /* _v17 */) =>
        AND <= opcode <= SAR &&
        pops >= pushes
      case KeccakOp(_ /* _v18 */, _ /* _v19 */, _ /* _v20 */, _ /* _v21 */, _ /* _v22 */, _ /* _v23 */) =>
        opcode == KECCAK256 &&
        pops == 2 &&
        pushes == 1
      case EnvOp(_ /* _v24 */, _ /* _v25 */, _ /* _v26 */, _ /* _v27 */, _ /* _v28 */, _ /* _v29 */) =>
        ADDRESS <= opcode <= BASEFEE &&
        ((pushes == 1 && pops == 0) || (pushes == 1 && pops == 1) || (pushes == 0 && pops == 3) || (pushes == 0 && pops == 4))
      case MemOp(_ /* _v30 */, _ /* _v31 */, _ /* _v32 */, _ /* _v33 */, _ /* _v34 */, _ /* _v35 */) =>
        (opcode == MLOAD && pushes == pops == 1) || (MSTORE <= opcode <= MSTORE8 && pushes == 0 && pops == 2)
      case StorageOp(_ /* _v36 */, _ /* _v37 */, _ /* _v38 */, _ /* _v39 */, _ /* _v40 */, _ /* _v41 */) =>
        (SLOAD == opcode && pushes == pops == 1) || (opcode == SSTORE && pushes == 0 && pops == 2)
      case JumpOp(_ /* _v42 */, _ /* _v43 */, _ /* _v44 */, _ /* _v45 */, _ /* _v46 */, _ /* _v47 */) =>
        (JUMP <= opcode <= JUMPI || JUMPDEST <= opcode <= RJUMPV) &&
        pushes == 0
      case RunOp(_ /* _v48 */, _ /* _v49 */, _ /* _v50 */, _ /* _v51 */, _ /* _v52 */, _ /* _v53 */) =>
        PC <= opcode <= GAS &&
        pops == 0 &&
        pushes == 1
      case StackOp(_ /* _v54 */, _ /* _v55 */, _ /* _v56 */, _ /* _v57 */, _ /* _v58 */, _ /* _v59 */) =>
        (opcode == POP && pushes == 0 && pops == 1) || (PUSH0 <= opcode <= DUP16 && pushes == 1 && pops == 0) || (SWAP1 <= opcode <= SWAP16 && pushes == pops == 0)
      case LogOp(_ /* _v60 */, _ /* _v61 */, _ /* _v62 */, _ /* _v63 */, _ /* _v64 */, _ /* _v65 */) =>
        LOG0 <= opcode <= LOG4 &&
        pushes == 0 &&
        pops == (opcode - LOG0) as nat + 2
      case SysOp(_ /* _v66 */, _ /* _v67 */, _ /* _v68 */, _ /* _v69 */, _ /* _v70 */, _ /* _v71 */) =>
        (opcode == STOP || opcode == EOF || CREATE <= opcode <= SELFDESTRUCT) &&
        pushes <= 1
    }

    function Args(): nat
      ensures 0 <= Args() <= 32
      decreases this
    {
      if PUSH1 <= opcode <= PUSH32 then
        (opcode - PUSH0) as nat
      else
        0
    }

    predicate IsTerminal()
      decreases this
    {
      match this.opcode
      case STOP =>
        true
      case JUMP =>
        true
      case JUMPI =>
        true
      case RJUMP =>
        true
      case RJUMPI =>
        true
      case RJUMPV =>
        true
      case RETURN =>
        true
      case REVERT =>
        true
      case INVALID =>
        true
      case _ /* _v72 */ =>
        false
    }

    predicate IsJump()
      requires IsValid()
      decreases this
    {
      match this.opcode
      case JUMP =>
        true
      case JUMPI =>
        true
      case _ /* _v73 */ =>
        false
    }

    predicate IsJumpDest()
      requires IsValid()
      decreases this
    {
      this.opcode == JUMPDEST
    }

    predicate IsRevertStop()
      requires IsValid()
      decreases this
    {
      this.opcode == REVERT || this.opcode == STOP
    }

    predicate IsReturn()
      requires IsValid()
      decreases this
    {
      this.opcode == RETURN
    }

    predicate IsInvalid()
      requires IsValid()
      decreases this
    {
      this.opcode == INVALID
    }

    function Name(): string
      decreases this
    {
      name
    }

    function StackEffect(): int
      decreases this
    {
      pushes - pops
    }

    function WeakestPreOperands(post: nat := 0): (r: nat)
      decreases this, post
    {
      Max(minOperands, post - StackEffect())
    }

    function WeakestPreCapacity(post: nat := 0): (r: nat)
      decreases this, post
    {
      Max(minCapacity, post + StackEffect())
    }
  }
}

module EVMConstants {
  const STOP: u8 := 0
  const ADD: u8 := 1
  const MUL: u8 := 2
  const SUB: u8 := 3
  const DIV: u8 := 4
  const SDIV: u8 := 5
  const MOD: u8 := 6
  const SMOD: u8 := 7
  const ADDMOD: u8 := 8
  const MULMOD: u8 := 9
  const EXP: u8 := 10
  const SIGNEXTEND: u8 := 11
  const LT: u8 := 16
  const GT: u8 := 17
  const SLT: u8 := 18
  const SGT: u8 := 19
  const EQ: u8 := 20
  const ISZERO: u8 := 21
  const AND: u8 := 22
  const OR: u8 := 23
  const XOR: u8 := 24
  const NOT: u8 := 25
  const BYTE: u8 := 26
  const SHL: u8 := 27
  const SHR: u8 := 28
  const SAR: u8 := 29
  const KECCAK256: u8 := 32
  const ADDRESS: u8 := 48
  const BALANCE: u8 := 49
  const ORIGIN: u8 := 50
  const CALLER: u8 := 51
  const CALLVALUE: u8 := 52
  const CALLDATALOAD: u8 := 53
  const CALLDATASIZE: u8 := 54
  const CALLDATACOPY: u8 := 55
  const CODESIZE: u8 := 56
  const CODECOPY: u8 := 57
  const GASPRICE: u8 := 58
  const EXTCODESIZE: u8 := 59
  const EXTCODECOPY: u8 := 60
  const RETURNDATASIZE: u8 := 61
  const RETURNDATACOPY: u8 := 62
  const EXTCODEHASH: u8 := 63
  const BLOCKHASH: u8 := 64
  const COINBASE: u8 := 65
  const TIMESTAMP: u8 := 66
  const NUMBER: u8 := 67
  const DIFFICULTY: u8 := 68
  const GASLIMIT: u8 := 69
  const CHAINID: u8 := 70
  const SELFBALANCE: u8 := 71
  const BASEFEE: u8 := 72
  const POP: u8 := 80
  const MLOAD: u8 := 81
  const MSTORE: u8 := 82
  const MSTORE8: u8 := 83
  const SLOAD: u8 := 84
  const SSTORE: u8 := 85
  const JUMP: u8 := 86
  const JUMPI: u8 := 87
  const PC: u8 := 88
  const MSIZE: u8 := 89
  const GAS: u8 := 90
  const JUMPDEST: u8 := 91
  const RJUMP: u8 := 92
  const RJUMPI: u8 := 93
  const RJUMPV: u8 := 94
  const PUSH0: u8 := 95
  const PUSH1: u8 := 96
  const PUSH2: u8 := 97
  const PUSH3: u8 := 98
  const PUSH4: u8 := 99
  const PUSH5: u8 := 100
  const PUSH6: u8 := 101
  const PUSH7: u8 := 102
  const PUSH8: u8 := 103
  const PUSH9: u8 := 104
  const PUSH10: u8 := 105
  const PUSH11: u8 := 106
  const PUSH12: u8 := 107
  const PUSH13: u8 := 108
  const PUSH14: u8 := 109
  const PUSH15: u8 := 110
  const PUSH16: u8 := 111
  const PUSH17: u8 := 112
  const PUSH18: u8 := 113
  const PUSH19: u8 := 114
  const PUSH20: u8 := 115
  const PUSH21: u8 := 116
  const PUSH22: u8 := 117
  const PUSH23: u8 := 118
  const PUSH24: u8 := 119
  const PUSH25: u8 := 120
  const PUSH26: u8 := 121
  const PUSH27: u8 := 122
  const PUSH28: u8 := 123
  const PUSH29: u8 := 124
  const PUSH30: u8 := 125
  const PUSH31: u8 := 126
  const PUSH32: u8 := 127
  const DUP1: u8 := 128
  const DUP2: u8 := 129
  const DUP3: u8 := 130
  const DUP4: u8 := 131
  const DUP5: u8 := 132
  const DUP6: u8 := 133
  const DUP7: u8 := 134
  const DUP8: u8 := 135
  const DUP9: u8 := 136
  const DUP10: u8 := 137
  const DUP11: u8 := 138
  const DUP12: u8 := 139
  const DUP13: u8 := 140
  const DUP14: u8 := 141
  const DUP15: u8 := 142
  const DUP16: u8 := 143
  const SWAP1: u8 := 144
  const SWAP2: u8 := 145
  const SWAP3: u8 := 146
  const SWAP4: u8 := 147
  const SWAP5: u8 := 148
  const SWAP6: u8 := 149
  const SWAP7: u8 := 150
  const SWAP8: u8 := 151
  const SWAP9: u8 := 152
  const SWAP10: u8 := 153
  const SWAP11: u8 := 154
  const SWAP12: u8 := 155
  const SWAP13: u8 := 156
  const SWAP14: u8 := 157
  const SWAP15: u8 := 158
  const SWAP16: u8 := 159
  const LOG0: u8 := 160
  const LOG1: u8 := 161
  const LOG2: u8 := 162
  const LOG3: u8 := 163
  const LOG4: u8 := 164
  const EOF: u8 := 239
  const CREATE: u8 := 240
  const CALL: u8 := 241
  const CALLCODE: u8 := 242
  const RETURN: u8 := 243
  const DELEGATECALL: u8 := 244
  const CREATE2: u8 := 245
  const STATICCALL: u8 := 250
  const REVERT: u8 := 253
  const INVALID: u8 := 254
  const SELFDESTRUCT: u8 := 255

  import opened Int
}

module {:disableNonlinearArithmetic} CFGObject {

  import opened MiscTypes

  import opened LinSegments

  import opened Instructions

  import opened State

  import opened StackElement

  import opened Automata

  import opened CFGState

  import opened EVMObject

  import opened Statistics

  import opened PrettyIns
  datatype CFGObj = CFGObj(prog: ValidEVMObj, maxDepth: nat, a: ValidAuto<GState>, minimised: bool, stats: Stats) {
    ghost predicate IsValid()
      decreases this
    {
      |prog.xs| >= 1 &&
      forall s: GState {:trigger s.IsBounded(|prog.xs|)} {:trigger s in a.states} :: 
        s in a.states ==>
          s.IsBounded(|prog.xs|)
    }

    predicate HasNoErrorState()
      decreases this
    {
      prog.HasNoErrorState(a)
    }

    method {:print} ToDot(noTable: bool, name: string)
      requires this.IsValid()
      decreases this, noTable, name
    {
      print ""/*\n"";
      print ""maxDepth is:"", maxDepth, ""\n"";
      print stats.PrettyPrint();
      print ""# of reachable invalid segments is: "", |ReachableInvalidSegs()|, ""\n"";
      if !minimised {
        print ""Size of CFG: "", a.SSize(), "" nodes, "", a.TSize(), "" edges\n"";
        print ""Raw CFG\n"";
        print ""*/\n"";
      } else {
        print ""Size of non minimised CFG: "", stats.nonMinimisedSize.0, "" nodes, "", stats.nonMinimisedSize.1, "" edges\n"";
        print ""Size of minimised CFG: "", a.SSize(), "" nodes, "", a.TSize(), "" edges\n"";
        print ""Minimised CFG\n"";
        print ""*/\n"";
      }
      a.ToDot(nodeToString := (s: GState, k: int) requires s in a.states && 0 <= k => prog.ToHTML(s, !noTable, if s.ErrorGState? then None else Some(|s.st|), k as nat), labelToString := (s: GState, l: int, _ /* _v0 */: GState) requires s in a.states && 0 <= l => prog.DotLabel(s, l), prefix := ""graph[labelloc=\""t\"", labeljust=\""l\"", label=<"" + MakeTitle(name, a.SSize(), a.TSize(), maxDepth, stats.maxDepthReached) + "">]\n"" + ""node [shape=none, fontname=arial, style=\""rounded, filled\"", fillcolor= \""whitesmoke\""]\nedge [fontname=arial]\nranking=TB"");
      if !minimised {
        print ""//----------------- Raw CFG -------------------\n"";
      } else {
        print ""//----------------- Minimised CFG -------------------\n"";
      }
    }

    function ReachableInvalidSegs(): (r: seq<GState>)
      requires this.IsValid()
      ensures forall s: GState {:trigger s.segNum} {:trigger s.IsBounded(|prog.xs|)} {:trigger s.EGState?} {:trigger s in a.states} {:trigger s in r} :: s in r <==> s in a.states && s.EGState? && s.IsBounded(|prog.xs|) && prog.xs[s.segNum].INVALIDSeg?
      decreases this
    {
      Filter(a.states, (s: GState) requires s in a.states => s.EGState? && s.IsBounded(|prog.xs|) && prog.xs[s.segNum].INVALIDSeg?)
    }

    function MakeTitle(name: string, numNodes: nat, numEdges: nat, maxDepth: nat, reached: bool): string
      decreases this, name, numNodes, numEdges, maxDepth, reached
    {
      ""<B>Program Name: </B> "" + name + ""<BR ALIGN=\""left\""/>"" + ""<B>Control Flow Graph Info: </B><BR ALIGN=\""left\""/>"" + ""Max depth: "" + Int.NatToString(maxDepth) + "" ["" + (if reached then ""Was reached"" else ""Was not reached"") + ""]"" + ""<BR ALIGN=\""left\""/>"" + Int.NatToString(numNodes) + "" nodes/"" + Int.NatToString(numEdges) + "" edges<BR ALIGN=\""left\""/>""
    }

    method {:print} ToDafny(name: string := ""EVMProofObject"", pathToEVMDafny: string := """")
      requires this.IsValid()
      requires this.HasNoErrorState()
      decreases this, name, pathToEVMDafny
    {
      if |pathToEVMDafny| > 0 {
        print ""\n"";
      }
      print ""include \""./src/dafny/AbstractSemantics/AbstractSemantics.dfy\"""", ""\n\n"";
      print ""module "" + name + "" {"", ""\n\n"";
      print ""import opened AbstractSemantics"", ""\n"";
      print ""import opened AbstractState"", ""\n"";
      PrintProofObjectBody();
      print ""}"", ""\n"";
    }

    method {:print} CFGCheckerToDafny(name: string := ""EVMProofObject"", pathToEVMDafny: string := """")
      requires this.IsValid()
      requires this.HasNoErrorState()
      decreases this, name, pathToEVMDafny
    {
      print ""include \""../../../src/dafny/AbstractSemantics/AbstractSemantics.dfy\"""", ""\n\n"";
      print ""module  {:disableNonlinearArithmetic} "" + name + "" {"", ""\n\n"";
      print ""import opened AbstractSemantics"", ""\n"";
      print ""import opened AbstractState"", ""\n"";
      PrintCFGVerifierBody();
      print ""}"", ""\n"";
    }

    method {:print} CFGRefineToDafny(name: string := ""EVMProofObject"", pathToEVMDafny: string := """")
      requires this.IsValid()
      requires this.HasNoErrorState()
      decreases this, name, pathToEVMDafny
    {
      print ""include "" + ""\"""" + pathToEVMDafny + ""/src/dafny/state.dfy\"""", ""\n"";
      print ""include "" + ""\"""" + pathToEVMDafny + ""/src/dafny/bytecode.dfy\"""", ""\n"";
      print ""module {:disableNonlinearArithmetic} "" + name + "" {"", ""\n\n"";
      print ""import EvmState"", ""\n"";
      print ""import opened Bytecode"", ""\n"";
      print ""function SafeJump(s: EvmState.State): (s': EvmState.State)"", ""\n"";
      PrintProofObjectBody();
      print ""}"", ""\n"";
    }

    method PrintProofObjectBody(index: nat := 0)
      requires this.IsValid()
      requires this.HasNoErrorState()
      requires index <= |a.states|
      decreases |a.states| - index
    {
      if index < |a.states| {
        var currentState := a.states[index];
        var startAddress := prog.StartAddress(currentState.segNum);
        print ""\n/** Node "", index, ""\n"";
        print ""* Segment Id for this node is: "", currentState.segNum, ""\n"";
        print ""* Starting at 0x"", Hex.NatToHex(startAddress), ""\n"";
        print ""* Segment type is: "", prog.xs[currentState.segNum].SegTypeName(), ""\n"";
        print ""* Minimum stack size for this segment to prevent stack underflow: "", prog.WpOp(currentState.segNum), ""\n"";
        var minCap := prog.WpCap(currentState.segNum);
        print ""* Minimum capacity for this segment to prevent stack overflow: "", minCap, ""\n"";
        var netStackEffect := prog.StackEffect(currentState.segNum);
        print ""* Net Stack Effect: "", if netStackEffect >= 0 then ""+"" else """", netStackEffect, ""\n"";
        var netCapEffect := prog.CapEffect(currentState.segNum);
        print ""* Net Capacity Effect: "", if netCapEffect >= 0 then ""+"" else """", netCapEffect, ""\n"";
        print ""*/\n"";
        print ""function ExecuteFromCFGNode_s"", index, ""(s0: EvmState.State): (s': EvmState.State)\n"";
        print ""  // Writes permission for this segment."", ""\n"";
        print ""  // PC requirement for this node."", ""\n"";
        print ""  requires s0.EXECUTING?"", ""\n"";
        print ""  requires s0.WritesPermitted()"", ""\n"";
        print ""  requires s0.PC() == 0x"", Hex.NatToHex(startAddress), "" as nat\n"";
        print ""  // Stack requirements for this node."", ""\n"";
        print ""  requires s0.Operands()"", if index == 0 then "" == "" else "" >= "", |currentState.st|, ""\n"";
        print ""  requires s0.Capacity() >= "", minCap, ""\n"";
        for k: int := 0 to |currentState.st| {
          if currentState.st[k].Value? {
            print ""\n  requires s0.Peek("", k, "") == "", ""0x"" + Hex.NatToHex(currentState.st[k].Extract() as nat), ""\n"";
          }
        }
        print ""\n"";
        print match prog.xs[currentState.segNum] case STOPSeg(_ /* _v1 */, _ /* _v2 */, _ /* _v3 */) => ""  ensures  s'.ERROR?\n"" case _ /* _v4 */ => ""  ensures  s'.EXECUTING??\n"";
        var nodeInstructions := prog.xs[currentState.segNum].ins;
        print ""{\n"";
        PrintInstructionsToDafny(nodeInstructions, EState(startAddress, currentState.st));
        print ""   "", PrintInstructionToDafny(prog.xs[currentState.segNum].lastIns, |nodeInstructions|, |nodeInstructions| + 1), ""\n"";
        print ""  s"", |nodeInstructions| + 1, ""\n"";
        print ""}\n"";
        PrintProofObjectBody(index + 1);
      }
    }

    method {:print} PrintCFGVerifierBody(index: nat := 0)
      requires this.IsValid()
      requires this.HasNoErrorState()
      requires index <= |a.states|
      decreases |a.states| - index
    {
      if index < |a.states| {
        var currentState := a.states[index];
        var startAddress := prog.StartAddress(currentState.segNum);
        print ""\n/** Node "", index, ""\n"";
        print ""* Segment Id for this node is: "", currentState.segNum, ""\n"";
        print ""* Starting at 0x"", Hex.NatToHex(startAddress), ""\n"";
        print ""* Segment type is: "", prog.xs[currentState.segNum].SegTypeName(), ""\n"";
        print ""* Minimum stack size for this segment to prevent stack underflow: "", prog.WpOp(currentState.segNum), ""\n"";
        var minCap := prog.WpCap(currentState.segNum);
        print ""* Minimum capacity for this segment to prevent stack overflow: "", minCap, ""\n"";
        var netStackEffect := prog.StackEffect(currentState.segNum);
        print ""* Net Stack Effect: "", if netStackEffect >= 0 then ""+"" else """", netStackEffect, ""\n"";
        var netCapEffect := prog.CapEffect(currentState.segNum);
        print ""* Net Capacity Effect: "", if netCapEffect >= 0 then ""+"" else """", netCapEffect, ""\n"";
        print ""*/\n"";
        print ""function {:opaque} {:verify true} ExecuteFromCFGNode_s"", index, ""(s0: EState, gas: nat): (s': EState)\n"";
        print ""  // PC requirement for this node."", ""\n"";
        print ""  requires s0.pc == 0x"", Hex.NatToHex(startAddress), "" as nat\n"";
        print ""  // Stack requirements for this node."", ""\n"";
        print ""  requires s0.Operands()"", if index == 0 then "" >= "" else "" >= "", |currentState.st|, ""\n"";
        for k: int := 0 to |currentState.st| {
          if currentState.st[k].Value? {
            print ""\n  requires s0.stack["", k, ""] == "", ""0x"" + Hex.NatToHex(currentState.st[k].Extract() as nat), ""\n"";
          }
        }
        print ""\n"";
        print ""  decreases gas\n"";
        var nodeInstructions := prog.xs[currentState.segNum].ins;
        print ""{\n"";
        print ""if gas == 0 then s0"", ""\n"";
        print ""else\n"";
        PrintInstructionsToDafny(nodeInstructions, EState(startAddress, currentState.st));
        print ""  "", PrintInstructionToDafny(prog.xs[currentState.segNum].lastIns, |nodeInstructions|, |nodeInstructions| + 1), ""\n"";
        if |a.SuccNat(index)| == 0 {
          print ""  // Segment is terminal (Revert, Stop or Return)\n"";
          print ""  s"", |nodeInstructions| + 1, ""\n"";
        } else if |a.SuccNat(index)| == 1 {
          var commLine := match prog.xs[currentState.segNum] case CONTSeg(_ /* _v5 */, _ /* _v6 */, _ /* _v7 */) => ""//  Go to the next instruction at pc + 1"" case JUMPSeg(_ /* _v8 */, _ /* _v9 */, _ /* _v10 */) => ""//  JUMP to the target at Peek(0)"" case _ /* _v11 */ => ""// Segment has one successor but is not a JUMP nor a CONT"";
          print ""  "", commLine, ""\n"";
          print ""  ExecuteFromCFGNode_s"", a.SuccNat(index)[0], ""(s"", |nodeInstructions| + 1, "", gas - 1)\n"";
        } else {
          print ""  // This is a JUMPI segment, determine next pc using second top-most element of stack\n"";
          print ""  if s"", |nodeInstructions|, "".stack[1] > 0 then\n"";
          print ""   ExecuteFromCFGNode_s"", a.SuccNat(index)[1], ""(s"", |nodeInstructions| + 1, "", gas - 1)\n"";
          print ""  else\n"";
          print ""    ExecuteFromCFGNode_s"", a.SuccNat(index)[0], ""(s"", |nodeInstructions| + 1, "", gas - 1)"", ""\n"";
        }
        print ""}\n"";
        PrintCFGVerifierBody(index + 1);
      }
    }

    method PrintInstructionsToDafny(xs: seq<ValidInstruction>, currentState: AState, pos: nat := 0)
      decreases this, xs, currentState, pos
    {
      if |xs| > 0 {
        var k := PrintInstructionToDafny(xs[0], pos, pos + 1);
        print ""  "", k, ""\n"";
        var newState := if currentState.EState? then xs[0].NextState(currentState, prog.jumpDests, 0) else currentState;
        if newState.EState? && pos > 0 && pos % 10 == 0 {
          for j: int := 0 to |newState.stack| {
            if newState.stack[j].Value? {
              print ""   assert s"", pos + 1, "".Peek("", j, "") == "", ""0x"" + Hex.NatToHex(newState.stack[j].Extract() as nat), "";\n"";
            }
          }
        }
        PrintInstructionsToDafny(xs[1..], newState, pos + 1);
      }
    }
  }
}

module PrettyIns {
  function PrintInstructionToDafny(i: Instruction, src: nat, tgt: nat): string
    decreases i, src, tgt
  {
    match i.op.opcode
    case STOP =>
      ""var s"" + DecToString(tgt) + "" := Stop(s"" + DecToString(src) + "");""
    case ADD =>
      ""var s"" + DecToString(tgt) + "" := Add(s"" + DecToString(src) + "");""
    case MUL =>
      ""var s"" + DecToString(tgt) + "" := Mul(s"" + DecToString(src) + "");""
    case SUB =>
      ""var s"" + DecToString(tgt) + "" := Sub(s"" + DecToString(src) + "");""
    case DIV =>
      ""var s"" + DecToString(tgt) + "" := Div(s"" + DecToString(src) + "");""
    case SDIV =>
      ""var s"" + DecToString(tgt) + "" := SDiv(s"" + DecToString(src) + "");""
    case MOD =>
      ""var s"" + DecToString(tgt) + "" := Mod(s"" + DecToString(src) + "");""
    case SMOD =>
      ""var s"" + DecToString(tgt) + "" := SMod(s"" + DecToString(src) + "");""
    case ADDMOD =>
      ""var s"" + DecToString(tgt) + "" := AddMod(s"" + DecToString(src) + "");""
    case MULMOD =>
      ""var s"" + DecToString(tgt) + "" := MulMod(s"" + DecToString(src) + "");""
    case EXP =>
      ""var s"" + DecToString(tgt) + "" := Exp(s"" + DecToString(src) + "");""
    case SIGNEXTEND =>
      ""var s"" + DecToString(tgt) + "" := SignExtended(s"" + DecToString(src) + "");""
    case LT =>
      ""var s"" + DecToString(tgt) + "" := Lt(s"" + DecToString(src) + "");""
    case GT =>
      ""var s"" + DecToString(tgt) + "" := Gt(s"" + DecToString(src) + "");""
    case SLT =>
      ""var s"" + DecToString(tgt) + "" := SLt(s"" + DecToString(src) + "");""
    case SGT =>
      ""var s"" + DecToString(tgt) + "" := SGt(s"" + DecToString(src) + "");""
    case EQ =>
      ""var s"" + DecToString(tgt) + "" := Eq(s"" + DecToString(src) + "");""
    case ISZERO =>
      ""var s"" + DecToString(tgt) + "" := IsZero(s"" + DecToString(src) + "");""
    case AND =>
      ""var s"" + DecToString(tgt) + "" := And(s"" + DecToString(src) + "");""
    case OR =>
      ""var s"" + DecToString(tgt) + "" := Or(s"" + DecToString(src) + "");""
    case XOR =>
      ""var s"" + DecToString(tgt) + "" := Xor(s"" + DecToString(src) + "");""
    case NOT =>
      ""var s"" + DecToString(tgt) + "" := Not(s"" + DecToString(src) + "");""
    case BYTE =>
      ""var s"" + DecToString(tgt) + "" := Byte(s"" + DecToString(src) + "");""
    case SHL =>
      ""var s"" + DecToString(tgt) + "" := Shl(s"" + DecToString(src) + "");""
    case SHR =>
      ""var s"" + DecToString(tgt) + "" := Shr(s"" + DecToString(src) + "");""
    case SAR =>
      ""var s"" + DecToString(tgt) + "" := Sar(s"" + DecToString(src) + "");""
    case KECCAK256 =>
      ""var s"" + DecToString(tgt) + "" := Keccak256(s"" + DecToString(src) + "");""
    case ADDRESS =>
      ""var s"" + DecToString(tgt) + "" := Address(s"" + DecToString(src) + "");""
    case BALANCE =>
      ""var s"" + DecToString(tgt) + "" := Balance(s"" + DecToString(src) + "");""
    case ORIGIN =>
      ""var s"" + DecToString(tgt) + "" := Origin(s"" + DecToString(src) + "");""
    case CALLER =>
      ""var s"" + DecToString(tgt) + "" := Caller(s"" + DecToString(src) + "");""
    case CALLVALUE =>
      ""var s"" + DecToString(tgt) + "" := CallValue(s"" + DecToString(src) + "");""
    case CALLDATALOAD =>
      ""var s"" + DecToString(tgt) + "" := CallDataLoad(s"" + DecToString(src) + "");""
    case CALLDATASIZE =>
      ""var s"" + DecToString(tgt) + "" := CallDataSize(s"" + DecToString(src) + "");""
    case CALLDATACOPY =>
      ""var s"" + DecToString(tgt) + "" := CallDataCopy(s"" + DecToString(src) + "");""
    case CODESIZE =>
      ""var s"" + DecToString(tgt) + "" := CodeSize(s"" + DecToString(src) + "");""
    case CODECOPY =>
      ""var s"" + DecToString(tgt) + "" := CodeCopy(s"" + DecToString(src) + "");""
    case GASPRICE =>
      ""var s"" + DecToString(tgt) + "" := GasPrice(s"" + DecToString(src) + "");""
    case EXTCODESIZE =>
      ""var s"" + DecToString(tgt) + "" := ExtCodeSize(s"" + DecToString(src) + "");""
    case EXTCODECOPY =>
      ""var s"" + DecToString(tgt) + "" := ExtCodeCopy(s"" + DecToString(src) + "");""
    case RETURNDATASIZE =>
      ""var s"" + DecToString(tgt) + "" := ReturnDataSize(s"" + DecToString(src) + "");""
    case RETURNDATACOPY =>
      ""var s"" + DecToString(tgt) + "" := ReturnDataCopy(s"" + DecToString(src) + "");""
    case EXTCODEHASH =>
      ""var s"" + DecToString(tgt) + "" := ExtCodeHash(s"" + DecToString(src) + "");""
    case BLOCKHASH =>
      ""var s"" + DecToString(tgt) + "" := BlockHash(s"" + DecToString(src) + "");""
    case COINBASE =>
      ""var s"" + DecToString(tgt) + "" := CoinBase(s"" + DecToString(src) + "");""
    case TIMESTAMP =>
      ""var s"" + DecToString(tgt) + "" := TimeStamp(s"" + DecToString(src) + "");""
    case NUMBER =>
      ""var s"" + DecToString(tgt) + "" := Number(s"" + DecToString(src) + "");""
    case DIFFICULTY =>
      ""var s"" + DecToString(tgt) + "" := Difficulty(s"" + DecToString(src) + "");""
    case GASLIMIT =>
      ""var s"" + DecToString(tgt) + "" := GasLimit(s"" + DecToString(src) + "");""
    case CHAINID =>
      ""var s"" + DecToString(tgt) + "" := ChainID(s"" + DecToString(src) + "");""
    case SELFBALANCE =>
      ""var s"" + DecToString(tgt) + "" := SelfBalance(s"" + DecToString(src) + "");""
    case BASEFEE =>
      ""var s"" + DecToString(tgt) + "" := BaseFee(s"" + DecToString(src) + "");""
    case POP =>
      ""var s"" + DecToString(tgt) + "" := Pop(s"" + DecToString(src) + "");""
    case MLOAD =>
      ""var s"" + DecToString(tgt) + "" := MLoad(s"" + DecToString(src) + "");""
    case MSTORE =>
      ""var s"" + DecToString(tgt) + "" := MStore(s"" + DecToString(src) + "");""
    case MSTORE8 =>
      ""var s"" + DecToString(tgt) + "" := MStore8(s"" + DecToString(src) + "");""
    case SLOAD =>
      ""var s"" + DecToString(tgt) + "" := SLoad(s"" + DecToString(src) + "");""
    case SSTORE =>
      ""var s"" + DecToString(tgt) + "" := SStore(s"" + DecToString(src) + "");""
    case JUMP =>
      ""var s"" + DecToString(tgt) + "" := Jump(s"" + DecToString(src) + "");""
    case JUMPI =>
      ""var s"" + DecToString(tgt) + "" := JumpI(s"" + DecToString(src) + "");""
    case RJUMP =>
      ""var s"" + DecToString(tgt) + "" := RJump(s"" + DecToString(src) + "");""
    case RJUMPI =>
      ""var s"" + DecToString(tgt) + "" := RJumpI(s"" + DecToString(src) + "");""
    case RJUMPV =>
      ""var s"" + DecToString(tgt) + "" := RJumpV(s"" + DecToString(src) + "");""
    case PC =>
      ""var s"" + DecToString(tgt) + "" := PC(s"" + DecToString(src) + "");""
    case MSIZE =>
      ""var s"" + DecToString(tgt) + "" := MSize(s"" + DecToString(src) + "");""
    case GAS =>
      ""var s"" + DecToString(tgt) + "" := Gas(s"" + DecToString(src) + "");""
    case JUMPDEST =>
      ""var s"" + DecToString(tgt) + "" := JumpDest(s"" + DecToString(src) + "");""
    case PUSH0 =>
      ""var s"" + DecToString(tgt) + "" := Push0(s"" + DecToString(src) + "");""
    case PUSH1 =>
      ""var s"" + DecToString(tgt) + "" := Push1(s"" + DecToString(src) + "", 0x"" + i.arg + "");""
    case PUSH2 =>
      ""var s"" + DecToString(tgt) + "" := Push2(s"" + DecToString(src) + "", 0x"" + i.arg + "");""
    case PUSH3 =>
      ""var s"" + DecToString(tgt) + "" := Push3(s"" + DecToString(src) + "", 0x"" + i.arg + "");""
    case PUSH4 =>
      ""var s"" + DecToString(tgt) + "" := Push4(s"" + DecToString(src) + "", 0x"" + i.arg + "");""
    case PUSH5 =>
      ""var s"" + DecToString(tgt) + "" := PushN(s"" + DecToString(src) + "", 5, 0x"" + i.arg + "");""
    case PUSH6 =>
      ""var s"" + DecToString(tgt) + "" := PushN(s"" + DecToString(src) + "", 6, 0x"" + i.arg + "");""
    case PUSH7 =>
      ""var s"" + DecToString(tgt) + "" := PushN(s"" + DecToString(src) + "", 7, 0x"" + i.arg + "");""
    case PUSH8 =>
      ""var s"" + DecToString(tgt) + "" := Push8(s"" + DecToString(src) + "", 0x"" + i.arg + "");""
    case PUSH9 =>
      ""var s"" + DecToString(tgt) + "" := PushN(s"" + DecToString(src) + "", 9, 0x"" + i.arg + "");""
    case PUSH10 =>
      ""var s"" + DecToString(tgt) + "" := PushN(s"" + DecToString(src) + "", 10, 0x"" + i.arg + "");""
    case PUSH11 =>
      ""var s"" + DecToString(tgt) + "" := PushN(s"" + DecToString(src) + "", 11, 0x"" + i.arg + "");""
    case PUSH12 =>
      ""var s"" + DecToString(tgt) + "" := PushN(s"" + DecToString(src) + "", 12, 0x"" + i.arg + "");""
    case PUSH13 =>
      ""var s"" + DecToString(tgt) + "" := PushN(s"" + DecToString(src) + "", 13, 0x"" + i.arg + "");""
    case PUSH14 =>
      ""var s"" + DecToString(tgt) + "" := PushN(s"" + DecToString(src) + "", 14, 0x"" + i.arg + "");""
    case PUSH15 =>
      ""var s"" + DecToString(tgt) + "" := PushN(s"" + DecToString(src) + "", 15, 0x"" + i.arg + "");""
    case PUSH16 =>
      ""var s"" + DecToString(tgt) + "" := PushN(s"" + DecToString(src) + "", 16, 0x"" + i.arg + "");""
    case PUSH17 =>
      ""var s"" + DecToString(tgt) + "" := PushN(s"" + DecToString(src) + "", 17, 0x"" + i.arg + "");""
    case PUSH18 =>
      ""var s"" + DecToString(tgt) + "" := PushN(s"" + DecToString(src) + "", 18, 0x"" + i.arg + "");""
    case PUSH19 =>
      ""var s"" + DecToString(tgt) + "" := PushN(s"" + DecToString(src) + "", 19, 0x"" + i.arg + "");""
    case PUSH20 =>
      ""var s"" + DecToString(tgt) + "" := Push20(s"" + DecToString(src) + "", 0x"" + i.arg + "");""
    case PUSH21 =>
      ""var s"" + DecToString(tgt) + "" := PushN(s"" + DecToString(src) + "", 21, 0x"" + i.arg + "");""
    case PUSH22 =>
      ""var s"" + DecToString(tgt) + "" := PushN(s"" + DecToString(src) + "", 22, 0x"" + i.arg + "");""
    case PUSH23 =>
      ""var s"" + DecToString(tgt) + "" := PushN(s"" + DecToString(src) + "", 23, 0x"" + i.arg + "");""
    case PUSH24 =>
      ""var s"" + DecToString(tgt) + "" := PushN(s"" + DecToString(src) + "", 24, 0x"" + i.arg + "");""
    case PUSH25 =>
      ""var s"" + DecToString(tgt) + "" := PushN(s"" + DecToString(src) + "", 25, 0x"" + i.arg + "");""
    case PUSH26 =>
      ""var s"" + DecToString(tgt) + "" := PushN(s"" + DecToString(src) + "", 26, 0x"" + i.arg + "");""
    case PUSH27 =>
      ""var s"" + DecToString(tgt) + "" := PushN(s"" + DecToString(src) + "", 27, 0x"" + i.arg + "");""
    case PUSH28 =>
      ""var s"" + DecToString(tgt) + "" := PushN(s"" + DecToString(src) + "", 28, 0x"" + i.arg + "");""
    case PUSH29 =>
      ""var s"" + DecToString(tgt) + "" := PushN(s"" + DecToString(src) + "", 29, 0x"" + i.arg + "");""
    case PUSH30 =>
      ""var s"" + DecToString(tgt) + "" := PushN(s"" + DecToString(src) + "", 30, 0x"" + i.arg + "");""
    case PUSH31 =>
      ""var s"" + DecToString(tgt) + "" := PushN(s"" + DecToString(src) + "", 31, 0x"" + i.arg + "");""
    case PUSH32 =>
      ""var s"" + DecToString(tgt) + "" := Push32(s"" + DecToString(src) + "", 0x"" + i.arg + "");""
    case DUP1 =>
      ""var s"" + DecToString(tgt) + "" := Dup1(s"" + DecToString(src) + "");""
    case DUP2 =>
      ""var s"" + DecToString(tgt) + "" := Dup2(s"" + DecToString(src) + "");""
    case DUP3 =>
      ""var s"" + DecToString(tgt) + "" := Dup3(s"" + DecToString(src) + "");""
    case DUP4 =>
      ""var s"" + DecToString(tgt) + "" := Dup4(s"" + DecToString(src) + "");""
    case DUP5 =>
      ""var s"" + DecToString(tgt) + "" := Dup5(s"" + DecToString(src) + "");""
    case DUP6 =>
      ""var s"" + DecToString(tgt) + "" := Dup6(s"" + DecToString(src) + "");""
    case DUP7 =>
      ""var s"" + DecToString(tgt) + "" := Dup7(s"" + DecToString(src) + "");""
    case DUP8 =>
      ""var s"" + DecToString(tgt) + "" := Dup8(s"" + DecToString(src) + "");""
    case DUP9 =>
      ""var s"" + DecToString(tgt) + "" := Dup9(s"" + DecToString(src) + "");""
    case DUP10 =>
      ""var s"" + DecToString(tgt) + "" := Dup10(s"" + DecToString(src) + "");""
    case DUP11 =>
      ""var s"" + DecToString(tgt) + "" := Dup11(s"" + DecToString(src) + "");""
    case DUP12 =>
      ""var s"" + DecToString(tgt) + "" := Dup12(s"" + DecToString(src) + "");""
    case DUP13 =>
      ""var s"" + DecToString(tgt) + "" := Dup13(s"" + DecToString(src) + "");""
    case DUP14 =>
      ""var s"" + DecToString(tgt) + "" := Dup14(s"" + DecToString(src) + "");""
    case DUP15 =>
      ""var s"" + DecToString(tgt) + "" := Dup15(s"" + DecToString(src) + "");""
    case DUP16 =>
      ""var s"" + DecToString(tgt) + "" := Dup16(s"" + DecToString(src) + "");""
    case SWAP1 =>
      ""var s"" + DecToString(tgt) + "" := Swap1(s"" + DecToString(src) + "");""
    case SWAP2 =>
      ""var s"" + DecToString(tgt) + "" := Swap2(s"" + DecToString(src) + "");""
    case SWAP3 =>
      ""var s"" + DecToString(tgt) + "" := Swap3(s"" + DecToString(src) + "");""
    case SWAP4 =>
      ""var s"" + DecToString(tgt) + "" := Swap4(s"" + DecToString(src) + "");""
    case SWAP5 =>
      ""var s"" + DecToString(tgt) + "" := Swap5(s"" + DecToString(src) + "");""
    case SWAP6 =>
      ""var s"" + DecToString(tgt) + "" := Swap6(s"" + DecToString(src) + "");""
    case SWAP7 =>
      ""var s"" + DecToString(tgt) + "" := Swap7(s"" + DecToString(src) + "");""
    case SWAP8 =>
      ""var s"" + DecToString(tgt) + "" := Swap(s"" + DecToString(src) + "", 8);""
    case SWAP9 =>
      ""var s"" + DecToString(tgt) + "" := Swap(s"" + DecToString(src) + "", 9);""
    case SWAP10 =>
      ""var s"" + DecToString(tgt) + "" := Swap(s"" + DecToString(src) + "", 10);""
    case SWAP11 =>
      ""var s"" + DecToString(tgt) + "" := Swap(s"" + DecToString(src) + "", 11);""
    case SWAP12 =>
      ""var s"" + DecToString(tgt) + "" := Swap(s"" + DecToString(src) + "", 12);""
    case SWAP13 =>
      ""var s"" + DecToString(tgt) + "" := Swap(s"" + DecToString(src) + "", 13);""
    case SWAP14 =>
      ""var s"" + DecToString(tgt) + "" := Swap(s"" + DecToString(src) + "", 14);""
    case SWAP15 =>
      ""var s"" + DecToString(tgt) + "" := Swap(s"" + DecToString(src) + "", 15);""
    case SWAP16 =>
      ""var s"" + DecToString(tgt) + "" := Swap(s"" + DecToString(src) + "", 16);""
    case LOG0 =>
      ""var s"" + DecToString(tgt) + "" := Log0(s"" + DecToString(src) + "");""
    case LOG1 =>
      ""var s"" + DecToString(tgt) + "" := Log1(s"" + DecToString(src) + "");""
    case LOG2 =>
      ""var s"" + DecToString(tgt) + "" := Log2(s"" + DecToString(src) + "");""
    case LOG3 =>
      ""var s"" + DecToString(tgt) + "" := Log3(s"" + DecToString(src) + "");""
    case LOG4 =>
      ""var s"" + DecToString(tgt) + "" := Log4(s"" + DecToString(src) + "");""
    case CREATE =>
      ""var s"" + DecToString(tgt) + "" := Create(s"" + DecToString(src) + "");""
    case CALL =>
      ""var s"" + DecToString(tgt) + "" := Call(s"" + DecToString(src) + "");""
    case CALLCODE =>
      ""var s"" + DecToString(tgt) + "" := CallCode(s"" + DecToString(src) + "");""
    case RETURN =>
      ""var s"" + DecToString(tgt) + "" := Return(s"" + DecToString(src) + "");""
    case DELEGATECALL =>
      ""var s"" + DecToString(tgt) + "" := DelegateCall(s"" + DecToString(src) + "");""
    case CREATE2 =>
      ""var s"" + DecToString(tgt) + "" := Create2(s"" + DecToString(src) + "");""
    case STATICCALL =>
      ""var s"" + DecToString(tgt) + "" := StaticCall(s"" + DecToString(src) + "");""
    case REVERT =>
      ""var s"" + DecToString(tgt) + "" := Revert(s"" + DecToString(src) + "");""
    case SELFDESTRUCT =>
      ""var s"" + DecToString(tgt) + "" := SelfDestruct(s"" + DecToString(src) + "");""
    case INVALID =>
      ""var s"" + DecToString(tgt) + "" := Stop(s"" + DecToString(src) + ""); // Invalid instruction:\n""
    case _ /* _v0 */ =>
      ""Unknown instruction:"" + i.op.name
  }

  function DecToChar(n: nat): char
    requires 0 <= n < 10
    ensures '0' <= DecToChar(n) <= '9'
    decreases n
  {
    match n
    case 0 =>
      '0'
    case 1 =>
      '1'
    case 2 =>
      '2'
    case 3 =>
      '3'
    case 4 =>
      '4'
    case 5 =>
      '5'
    case 6 =>
      '6'
    case 7 =>
      '7'
    case 8 =>
      '8'
    case 9 =>
      '9'
  }

  function DecToString(n: nat): string
    decreases n
  {
    if n < 10 then
      [DecToChar(n)]
    else
      DecToString(n / 10) + [DecToChar(n % 10)]
  }

  import EVMOpcodes

  import opened Instructions

  import opened EVMConstants
}

module Statistics {
  const DEFAULT_STATS := Stats()

  import Int

  datatype Stats = Stats(maxDepthReached: bool := false, visitedStates: nat := 0, wPreInvSuccess: nat := 0, errorState: nat := 0, nonMinimisedSize: (nat, nat) := (0, 0)) {
    function SetMaxDepth(): Stats
      decreases this
    {
      this.(maxDepthReached := true)
    }

    function IncVisited(): Stats
      decreases this
    {
      this.(visitedStates := this.visitedStates + 1)
    }

    function IncWpre(): Stats
      decreases this
    {
      this.(wPreInvSuccess := this.wPreInvSuccess + 1)
    }

    function IncError(): Stats
      decreases this
    {
      this.(errorState := this.errorState + 1)
    }

    function PrettyPrint(): string
      decreases this
    {
      ""MaxDepth reached:"" + (if maxDepthReached then ""true"" else ""false"") + ""\n"" + ""ErrorStates reached:"" + Int.NatToString(errorState) + ""\n"" + ""States seen:"" + Int.NatToString(visitedStates) + ""\n"" + ""WPre success:"" + Int.NatToString(wPreInvSuccess) + ""\n""
    }
  }
}

module EVMObject {
  function {:opaque} CollectJumpDests(xs: seq<ValidLinSeg>): seq<nat>
    decreases xs
  {
    if |xs| == 0 then
      []
    else
      xs[0].CollectJumpDest() + CollectJumpDests(xs[1..])
  }

  function {:opaque} CollectThem(xs: seq<ValidLinSeg>): (r: map<nat, nat>)
    requires forall i: int, i': int {:trigger xs[i'], xs[i]} :: 0 <= i < i' < |xs| ==> xs[i].StartAddress() < xs[i'].StartAddress()
    ensures forall k: int {:trigger xs[k]} :: (0 <= k < |xs| ==> xs[k].StartAddress() in r) && (0 <= k < |xs| ==> r[xs[k].StartAddress()] == k)
    ensures forall k: int {:trigger r[k]} {:trigger k in r} :: (k in r ==> r[k] < |xs|) && (k in r ==> xs[r[k]].StartAddress() == k)
    decreases xs
  {
    CollectPCToSeg(xs)
  }

  function {:opaque} CollectPCToSeg(xs: seq<ValidLinSeg>, m: map<nat, nat> := map[], index: nat := 0): (r: map<nat, nat>)
    requires index <= |xs|
    requires forall i: int, i': int {:trigger xs[i'], xs[i]} :: 0 <= i < i' < |xs| ==> xs[i].StartAddress() < xs[i'].StartAddress()
    requires forall k: int {:trigger xs[k]} :: 0 <= k < index ==> xs[k].StartAddress() in m
    requires forall k: int {:trigger xs[k]} :: 0 <= k < index ==> m[xs[k].StartAddress()] == k
    requires forall k: int {:trigger m[k]} {:trigger k in m} :: (k in m ==> m[k] < |xs|) && (k in m ==> xs[m[k]].StartAddress() == k)
    ensures forall k: int {:trigger xs[k]} :: (0 <= k < |xs| ==> xs[k].StartAddress() in r) && (0 <= k < |xs| ==> r[xs[k].StartAddress()] == k)
    ensures forall k: int {:trigger r[k]} {:trigger k in r} :: (k in r ==> r[k] < |xs|) && (k in r ==> xs[r[k]].StartAddress() == k)
    decreases |xs| - index
  {
    if index == |xs| then
      m
    else
      CollectPCToSeg(xs, m[xs[index].StartAddress() := index], index + 1)
  }

  import opened LinSegments

  import opened CFGState

  import opened State

  import opened MiscTypes

  import Instructions

  import Int

  import SegBuilder

  import Hex

  import opened Automata

  import opened PartitionMod

  import opened GStateMinimiser

  import opened WeakPre

  import opened StackElement

  import opened Statistics

  import opened HTML

  datatype Path<T(!new)> = Path(states: seq<T>, exits: seq<nat>)

  type ValidSeqValidLinSeg = xs: seq<ValidLinSeg>
    | forall i: int, i': int :: 0 <= i < i' < |xs| ==> xs[i].StartAddress() < xs[i'].StartAddress()

  type ValidEVMObj = e: EVMObj
    | e.IsValid()
    witness EVMObj([], [])

  datatype EVMObj = EVMObj(xs: ValidSeqValidLinSeg, jumpDests: seq<nat> := CollectJumpDests(xs), PCToSegMap: map<nat, nat> := CollectThem(xs)) {
    ghost predicate IsValid()
      decreases this
    {
      (forall i: int, i': int {:trigger xs[i'], xs[i]} :: 
        0 <= i < i' < |xs| ==>
          xs[i].StartAddress() < xs[i'].StartAddress()) &&
      forall k: int {:trigger PCToSegMap[k]} {:trigger k in PCToSegMap} :: 
        (k in PCToSegMap ==>
          PCToSegMap[k] < |xs|) &&
        (k in PCToSegMap ==>
          xs[PCToSegMap[k]].StartAddress() == k)
    }

    function StartAddress(i: nat): nat
      requires i < |xs|
      decreases this, i
    {
      xs[i].StartAddress()
    }

    function StackEffect(i: nat): int
      requires i < |xs|
      decreases this, i
    {
      xs[i].StackEffect()
    }

    function CapEffect(i: nat): int
      requires i < |xs|
      decreases this, i
    {
      xs[i].NetCapEffect()
    }

    function WpOp(i: nat): nat
      requires i < |xs|
      decreases this, i
    {
      xs[i].WeakestPreOperands()
    }

    predicate IsJump(i: nat)
      requires i < |xs|
      decreases this, i
    {
      xs[i].IsJump()
    }

    function WpCap(i: nat): nat
      requires i < |xs|
      decreases this, i
    {
      xs[i].WeakestPreCapacity(0)
    }

    function Size(ls: seq<ValidLinSeg> := xs): nat
      decreases this, ls
    {
      if |ls| == 0 then
        0
      else
        ls[0].Size() + Size(ls[1..])
    }

    function {:opaque} NextG(s: GState): (r: seq<GState>)
      requires this.IsValid()
      requires s.IsBounded(|xs|)
      ensures forall k: int {:trigger r[k]} :: 0 <= k < |r| ==> r[k].IsBounded(|xs|)
      ensures |r| > 0 ==> s.EGState?
      ensures s.EGState? ==> |r| == xs[s.segNum].NumberOfExits()
      ensures s.ErrorGState? ==> |r| == 0
      decreases this, s
    {
      match s
      case ErrorGState(_ /* _v0 */) =>
        []
      case EGState(segNum, st) =>
        var srcSeg: LinSeg := xs[segNum];
        var src: AState := EState(srcSeg.StartAddress(), st);
        var successors: seq<AState> := seq(srcSeg.NumberOfExits(), (i: nat) requires srcSeg.IsValidExit(i) => srcSeg.Run(src, i, jumpDests));
        var succGStates: seq<GState> := Map(successors, (s': AState) => match s' case Error(msg) => ErrorGState(msg) case EState(pc, st) => if pc in PCToSegMap then EGState(PCToSegMap[pc], s'.stack) else ErrorGState(""NextG:  "" + Int.NatToString(pc) + "" not defined""));
        succGStates
    }

    function {:opaque} RunAll(exits: seq<nat>, s: AState): AState
      requires this.IsValid()
      requires s.EState?
      decreases this, exits, s
    {
      if |exits| == 0 then
        s
      else if s.pc in PCToSegMap then
        var seg: nat := PCToSegMap[s.pc];
        if xs[seg].NumberOfExits() > exits[0] then
          ValidExitLemma(xs[seg], exits[0]);
          var s': AState := xs[seg].Run(s, exits[0], jumpDests);
          if s'.EState? then
            RunAll(exits[1..], s')
          else
            Error(""Successor state of "" + s.ToString() + "" is not an EState"")
        else
          Error(""Exit does not exist"")
      else
        Error(""No segment found for state "" + s.ToString())
    }

    predicate {:opaque} PreservesCond(c: ValidCond, exits: seq<nat>, initpc: nat)
      requires this.IsValid()
      requires c.StCond?
      decreases this, c, exits, initpc
    {
      var initState: AState := BuildInitState(c).(pc := initpc);
      var endState: AState := RunAll(exits, initState);
      if endState.EState? then
        endState.Sat(c)
      else
        false
    }

    function {:opaque} {:timeLimitMultiplier 3} /*{:_timeLimit 30}*/ SafeLoopFound(i: nat, pStates: seq<GState>, pExits: seq<nat>): (r: Option<nat>)
      requires this.IsValid()
      requires i < |xs|
      requires |pStates| == |pExits|
      requires forall s: GState {:trigger s.IsBounded(|xs|)} {:trigger s.EGState?} {:trigger s in pStates} :: (s in pStates ==> s.EGState?) && (s in pStates ==> s.IsBounded(|xs|))
      requires forall k: int {:trigger pStates[k]} {:trigger pExits[k]} :: 0 <= k < |pExits| ==> pExits[k] < |NextG(pStates[k])|
      ensures r.Some? ==> r.v < |pStates|
      decreases |pStates|
    {
      match FindFirstNodeWithSegIndex(i, pStates)
      case Some(index) =>
        assert index < |pStates|; assert pStates[index].segNum == i; var pathFromIndex: seq<GState> := pStates[index..]; assert pathFromIndex[0].segNum == i; var exitsFromIndex: seq<int> := pExits[index..]; var segmentsOnPathFromIndex: seq<int> := seq(|pathFromIndex|, (i: int) requires 0 <= i < |pathFromIndex| => pathFromIndex[i].segNum); var tgtCond: ValidCond := xs[Last(pStates).segNum].LeadsTo(xs[i].StartAddress(), Last(pExits)); var w1: ValidCond := WPreSeqSegs(segmentsOnPathFromIndex, exitsFromIndex, tgtCond.And(StackToCond(pStates[index].st)), xs, xs[i].StartAddress()); if w1.StTrue? then Some(index) else if w1.StFalse? then None else if PreservesCond(w1, exitsFromIndex, xs[i].StartAddress()) then Some(index) else if 0 < |pathFromIndex| then assert forall i: int {:trigger pathFromIndex[i]} {:trigger exitsFromIndex[i]} :: 0 <= i < |exitsFromIndex| ==> exitsFromIndex[i] < |NextG(pathFromIndex[i])|; SafeLoopFound(i, pathFromIndex[1..], exitsFromIndex[1..]) else None
      case None() =>
        None
    }

    function {:opaque} FindFirstNodeWithSegIndex(i: nat, gs: seq<GState>, index: nat := 0): (r: Option<nat>)
      requires index <= |gs|
      requires forall s: GState {:trigger s.EGState?} {:trigger s in gs} :: s in gs ==> s.EGState?
      ensures r.Some? ==> r.v < |gs| && gs[r.v].segNum == i
      decreases |gs| - index
    {
      if |gs| == index then
        None
      else
        match gs[index] case EGState(i', st) => (if i' == i then Some(index) else FindFirstNodeWithSegIndex(i, gs, index + 1)) case ErrorGState(m) => None
    }

    method {:print} {:timeLimitMultiplier 10} {:isolate_assertions} {:disableNonlinearArithmetic} /*{:_timeLimit 100}*/ DFS(p: Path<GState>, a: ValidAuto<GState>, maxDepth: nat := 0, debugInfo: bool := false, stats: Stats := Stats())
        returns (a': ValidAuto<T>, stats': Stats)
      requires this.IsValid()
      requires |p.states| == |p.exits| + 1
      requires forall s: GState {:trigger s in a.states} {:trigger s in p.states} :: s in p.states ==> s in a.states
      requires forall s: GState {:trigger s.IsBounded(|xs|)} {:trigger s in a.states} :: s in a.states ==> s.IsBounded(|xs|)
      requires forall s: GState {:trigger s.EGState?} {:trigger s in p.states} :: s in p.states ==> s.EGState?
      requires forall k: int {:trigger p.states[k]} {:trigger p.exits[k]} :: 0 <= k < |p.exits| ==> p.exits[k] < |NextG(p.states[k])|
      requires forall k: int, _t#0: int {:trigger p.exits[k], p.states[_t#0]} {:trigger p.states[k], p.states[_t#0]} | _t#0 == k + 1 :: 0 <= k && k < |p.exits| ==> p.states[_t#0] == NextG(p.states[k])[p.exits[k]]
      ensures forall s: GState {:trigger s in a'.states} {:trigger s in p.states} :: s in p.states ==> s in a'.states
      ensures forall s: CFGState.GState {:trigger s.IsBounded(|xs|)} {:trigger s in a'.states} :: s in a'.states ==> s.IsBounded(|xs|)
      decreases maxDepth
    {
      var lastOnPath := Last(p.states);
      if maxDepth == 0 || lastOnPath.ErrorGState? {
        var stats' := if maxDepth == 0 then stats.SetMaxDepth() else stats;
        return a, stats';
      } else {
        a' := a;
        stats' := stats;
        for i: int := 0 to |NextG(lastOnPath)|
          invariant a'.IsValid()
          invariant forall s: GState {:trigger NextG.requires(s)} {:trigger s in a'.states} :: s in a'.states ==> NextG.requires(s)
          invariant forall s: GState {:trigger s in a'.states} {:trigger s in p.states} :: s in p.states ==> s in a'.states
        {
          var i_th_succ := NextG(lastOnPath)[i];
          if i_th_succ.ErrorGState? {
            a', stats' := a'.AddEdge(lastOnPath, i_th_succ), stats'.IncError();
          } else if i_th_succ in a'.indexOf {
            a', stats' := a'.AddEdge(lastOnPath, a'.states[a'.indexOf[i_th_succ]]), stats'.IncVisited();
          } else if !xs[lastOnPath.segNum].IsJump() {
            var j: ValidAuto<GState> := a'.AddEdge(lastOnPath, i_th_succ);
            PathHelperLemma(p, i_th_succ, i);
            var p' := Path(p.states + [i_th_succ], p.exits + [i]);
            assert |p'.exits| + 1 == |p'.states|;
            a', stats' := DFS(p', j, maxDepth - 1, debugInfo, stats');
          } else {
            PathHelperLemma(p, i_th_succ, i);
            assert i_th_succ.EGState?;
            match SafeLoopFound(i_th_succ.segNum, p.states, p.exits + [i]) {
              case {:split false} Some(index) =>
                a', stats' := a'.AddEdge(lastOnPath, p.states[index]), stats'.IncWpre();
              case {:split false} None() =>
                a', stats' := DFS(Path(p.states + [i_th_succ], p.exits + [i]), a'.AddEdge(lastOnPath, i_th_succ), maxDepth - 1, debugInfo, stats');
            }
          }
        }
      }
    }

    lemma {:timeLimitMultiplier 10} {:isolate_assertions} /*{:_timeLimit 100}*/ /*{:_induction this}*/ PathHelperLemma(p: Path<GState>, i_th_succ: GState, i: nat)
      requires this.IsValid()
      requires |p.states| == |p.exits| + 1
      requires forall k: int {:trigger p.states[k]} :: 0 <= k < |p.states| ==> p.states[k].IsBounded(|xs|)
      requires forall k: int {:trigger p.states[k]} {:trigger p.exits[k]} :: 0 <= k < |p.exits| ==> p.exits[k] < |NextG(p.states[k])|
      requires forall k: int, _t#0: int {:trigger p.exits[k], p.states[_t#0]} {:trigger p.states[k], p.states[_t#0]} | _t#0 == k + 1 :: 0 <= k && k < |p.exits| ==> p.states[_t#0] == NextG(p.states[k])[p.exits[k]]
      requires i < |NextG(Last(p.states))|
      requires i_th_succ == NextG(Last(p.states))[i]
      ensures ghost var p': Path<GState> := Path(p.states + [i_th_succ], p.exits + [i]); (forall k: int {:trigger p'.states[k]} {:trigger p'.exits[k]} :: 0 <= k < |p'.exits| ==> p'.exits[k] < |NextG(p'.states[k])|) && forall k: int, _t#0: int {:trigger p'.exits[k], p'.states[_t#0]} {:trigger p'.states[k], p'.states[_t#0]} | _t#0 == k + 1 :: 0 <= k && k < |p'.exits| ==> p'.states[_t#0] == NextG(p'.states[k])[p'.exits[k]]
      decreases this, p, i_th_succ, i
    {
      ghost var p' := Path(p.states + [i_th_succ], p.exits + [i]);
      forall k: int | 0 <= k < |p'.exits|
        ensures p'.exits[k] < |NextG(p'.states[k])|
      {
        if k == |p'.exits| - 1 {
          assert p'.exits[k] < |NextG(p'.states[k])|;
        }
      }
      forall k: int | 0 <= k < |p'.exits|
        ensures p'.states[k + 1] == NextG(p'.states[k])[p'.exits[k]]
      {
        if k == |p'.exits| - 1 {
          assert p'.states[k + 1] == NextG(p'.states[k])[p'.exits[k]];
        }
        assert p'.states[k + 1] == NextG(p'.states[k])[p'.exits[k]];
      }
    }

    method {:opaque} BuildCFG(maxDepth: nat := 100, minimise: bool := true)
        returns (a: Automata.ValidAuto<GState>, stats: Stats)
      requires this.IsValid()
      requires |xs| >= 1
      ensures forall s: GState {:trigger s.segNum} {:trigger s.EGState?} {:trigger s in a.states} :: s in a.states && s.EGState? ==> s.segNum < |xs|
      decreases this, maxDepth, minimise
    {
      var a1, s1 := DFS(Path([DEFAULT_GSTATE], []), Automata.Auto().AddState(DEFAULT_GSTATE), maxDepth, true);
      if !minimise || a1.SSize() == 0 {
        return a1, s1;
      } else {
        var p1: ValidPartition := PartitionMod.MakeInit(a1.SSize());
        var e := (x: nat, y: nat) requires 0 <= x < a1.SSize() && 0 <= y < a1.SSize() => if x == y then true else match (a1.states[x], a1.states[y]) case (EGState(s1, _ /* _v1 */), EGState(s2, _ /* _v2 */)) => s1 == s2 case (_ /* _v3 */, _ /* _v4 */) => false;
        assert IsEquivRel(e, a1.SSize());
        var p2 := p1.ComputeFinest(e);
        var vp: GStateMinimiser.Pair := Pair(a1, p2);
        var a2 := vp.Minimise();
        return a2, s1.(nonMinimisedSize := (a1.SSize(), a1.TSize()));
      }
    }

    function {:opaque} ToHTML(a: GState, withTable: bool := false, minStackSizeForState: Option<nat> := None, index: nat := 0): string
      requires this.IsValid()
      requires a.IsBounded(|xs|)
      decreases this, a, withTable, minStackSizeForState, index
    {
      if a.ErrorGState? then
        ""<ErrorEnd <BR ALIGN=\""CENTER\""/>>""
      else if withTable then
        ""<"" + DOTSegTable(xs[a.segNum], a, minStackSizeForState, index) + "">""
      else
        ""<"" + DOTSeg(xs[a.segNum], a.segNum, minStackSizeForState, index).0 + "">""
    }

    function DotLabel(s: GState, exit: nat): string
      requires this.IsValid()
      requires s.IsBounded(|xs|)
      decreases this, s, exit
    {
      var lab: seq<char> := if s.ErrorGState? then ""Error"" else if s.EGState? && exit < xs[s.segNum].NumberOfExits() then if xs[s.segNum].IsJump() && exit == xs[s.segNum].NumberOfExits() - 1 then ""tooltip=\""Jump\"",style=dashed"" else ""tooltip=\""Next\"""" else ""Error Number of exits"";
      "" ["" + lab + ""]""
    }

    function {:timeLimitMultiplier 3} /*{:_timeLimit 30}*/ Fix(a: ValidAuto<GState>, wpre0: seq<nat>, xu: set<nat>, xc: seq<nat>, maxIter: nat): (r: Either<seq<nat>, seq<nat>>)
      requires a.IsValid()
      requires HasNoErrorState(a)
      requires forall s: GState {:trigger s.IsBounded(|this.xs|)} {:trigger s in a.states} :: s in a.states ==> s.IsBounded(|this.xs|)
      requires |wpre0| == |xc| == |a.states|
      requires forall x: int {:trigger x in xu} :: (x in xu ==> 0 <= x) && (x in xu ==> x < |a.states|)
      requires forall k: int {:trigger a.states[k]} :: 0 <= k < |xc| ==> a.states[k].segNum < |xs|
      requires forall k: int {:trigger a.states[k]} {:trigger wpre0[k]} :: 0 <= k < |wpre0| ==> wpre0[k] == xs[a.states[k].segNum].WeakestPreOperands()
      ensures r.Left? ==> |r.l| == |xc|
      ensures r.Right? ==> |r.r| == |xc|
      decreases maxIter
    {
      if xu == {} then
        Left(xc)
      else if maxIter == 0 then
        Right(xc)
      else
        var newV: (seq<nat>, set<nat>) := UpdateValues(a, wpre0, xc, xu); Fix(a, wpre0, newV.1, newV.0, maxIter - 1)
    }

    function {:timeLimitMultiplier 2} /*{:_timeLimit 20}*/ UpdateValues(a: ValidAuto<GState>, wpre0: seq<nat>, xc: seq<nat>, xu: set<nat>, newxc: seq<nat> := [], newxu: set<nat> := {}, index: nat := 0): (r: (seq<nat>, set<nat>))
      requires a.IsValid()
      requires HasNoErrorState(a)
      requires index <= |xc|
      requires forall s: GState {:trigger s.IsBounded(|this.xs|)} {:trigger s in a.states} :: s in a.states ==> s.IsBounded(|this.xs|)
      requires forall x: int {:trigger x in xu} :: (x in xu ==> 0 <= x) && (x in xu ==> x < |a.states|)
      requires forall k: int {:trigger k in newxu} :: k in newxu ==> k < |a.states|
      requires |wpre0| == |xc| == |a.states|
      requires |newxc| == index
      requires forall k: int {:trigger a.states[k]} {:trigger wpre0[k]} :: 0 <= k < |wpre0| ==> wpre0[k] == xs[a.states[k].segNum].WeakestPreOperands()
      ensures |r.0| == |a.states|
      ensures forall k: int {:trigger k in r.1} :: k in r.1 ==> k < |a.states|
      decreases |xc| - index
    {
      if |xc| == index then
        (newxc, newxu)
      else
        var n: (nat, set<nat>) := if index in xu then var seg: LinSeg := xs[a.states[index].segNum]; assert forall k: int {:trigger k in a.SuccNat(index)} :: k in a.SuccNat(index) ==> k < |xc|; assert forall i: int {:trigger a.SuccNat(index)[i]} :: 0 <= i < |a.SuccNat(index)| ==> a.SuccNat(index)[i] < |xc|; var succWPre: seq<nat> := seq(|a.SuccNat(index)|, (i: int) requires 0 <= i < |a.SuccNat(index)| => xc[a.SuccNat(index)[i]]); var m: nat := MaxNatSeq(succWPre); assert xs[a.states[index].segNum].WeakestPreOperands() == wpre0[index]; var d: nat := seg.FastWeakestPreOperands(m, wpre0[index]); (d, if d > xc[index] then SeqToSet(a.PredNat(index)) else {}) else (xc[index], {}); UpdateValues(a, wpre0, xc, xu, newxc + [n.0], newxu + n.1, index + 1)
    }

    static function MaxNat(a: nat, b: nat): nat
      decreases a, b
    {
      if a > b then
        a
      else
        b
    }

    static function MaxNatSeq(xs: seq<nat>): (r: nat)
      ensures forall k: int {:trigger xs[k]} :: 0 <= k < |xs| ==> xs[k] <= r
      ensures forall k: int {:trigger k in xs} :: k in xs ==> k <= r
      decreases xs
    {
      if |xs| == 0 then
        0
      else
        MaxNat(xs[0], MaxNatSeq(xs[1..]))
    }

    function {:timeLimitMultiplier 2} /*{:_timeLimit 20}*/ ComputeWPreOperands(a: ValidAuto<GState>): (r: Either<seq<nat>, seq<nat>>)
      requires a.IsValid()
      requires HasNoErrorState(a)
      requires forall s: GState {:trigger s.IsBounded(|this.xs|)} {:trigger s in a.states} :: s in a.states ==> s.IsBounded(|this.xs|)
      ensures r.Left? ==> |r.l| == |a.states|
      ensures r.Right? ==> |r.r| == |a.states|
      decreases this, a
    {
      var wpre0: seq<nat> := MapP(seq(|a.states|, (i: int) => i), (i: int) requires 0 <= i < |a.states| => xs[a.states[i].segNum].WeakestPreOperands());
      Fix(a, wpre0, set z: int {:nowarn} | 0 <= z < |a.states|, wpre0, |a.states| + 1)
    }

    predicate HasNoErrorState(a: ValidAuto<GState>)
      decreases this, a
    {
      forall s: GState {:trigger s.EGState?} {:trigger s in a.states} :: 
        s in a.states ==>
          s.EGState?
    }

    method {:print} PrintByteCodeInfo()
      decreases this
    {
      var listIns: seq<Instructions.ValidInstruction> := Flatten(Map(xs, (s: ValidLinSeg) => s.Ins()));
      print ""Bytecode Size: "", Size(), "" Bytes\n"";
      print ""Number of instructions: "", |listIns|, ""\n"";
      print ""Arithmetic opcodes: "", |Filter(listIns, (i: Instructions.ValidInstruction) => i.op.ArithOp?)|, ""\n"";
      print ""Comparison opcodes: "", |Filter(listIns, (i: Instructions.ValidInstruction) => i.op.CompOp?)|, ""\n"";
      print ""Bitwise opcodes: "", |Filter(listIns, (i: Instructions.ValidInstruction) => i.op.BitwiseOp?)|, ""\n"";
      print ""Keccak opcodes: "", |Filter(listIns, (i: Instructions.ValidInstruction) => i.op.KeccakOp?)|, ""\n"";
      print ""Environmental opcodes: "", |Filter(listIns, (i: Instructions.ValidInstruction) => i.op.EnvOp?)|, ""\n"";
      print ""Storage opcodes: "", |Filter(listIns, (i: Instructions.ValidInstruction) => i.op.StorageOp?)|, ""\n"";
      print ""Memory opcodes: "", |Filter(listIns, (i: Instructions.ValidInstruction) => i.op.MemOp?)|, ""\n"";
      print ""Stack opcodes: "", |Filter(listIns, (i: Instructions.ValidInstruction) => i.op.StackOp?)|, ""\n"";
      print ""Jump opcodes: "", |Filter(listIns, (i: Instructions.ValidInstruction) => i.op.JumpOp?)|, ""\n"";
      print ""Log opcodes: "", |Filter(listIns, (i: Instructions.ValidInstruction) => i.op.LogOp?)|, ""\n"";
      print ""Revert/stop opcodes: "", |Filter(listIns, (i: Instructions.ValidInstruction) => i.op.SysOp? && i.op.IsRevertStop())|, ""\n"";
      print ""Return opcodes: "", |Filter(listIns, (i: Instructions.ValidInstruction) => i.op.SysOp? && i.op.IsReturn())|, ""\n"";
      print ""Invalid opcodes: "", |Filter(listIns, (i: Instructions.ValidInstruction) => i.op.SysOp? && i.op.IsInvalid())|, ""\n"";
      print ""Other Systems opcodes: "", |Filter(listIns, (i: Instructions.ValidInstruction) => i.op.SysOp? && !i.op.IsInvalid() && !i.op.IsRevertStop() && !i.op.IsReturn())|, ""\n"";
    }

    method PrintSegmentInfo()
      decreases this
    {
      print ""Total number of segments: "", |xs|, ""\n"";
      print ""# of JUMP segments: "", |Filter(xs, (s: ValidLinSeg) => s.JUMPSeg?)|, ""\n"";
      print ""# of JUMPI segments: "", |Filter(xs, (s: ValidLinSeg) => s.JUMPISeg?)|, ""\n"";
      print ""# of RETURN segments: "", |Filter(xs, (s: ValidLinSeg) => s.RETURNSeg?)|, ""\n"";
      print ""# of STOP segments: "", |Filter(xs, (s: ValidLinSeg) => s.STOPSeg?)|, ""\n"";
      print ""# of CONT segments: "", |Filter(xs, (s: ValidLinSeg) => s.CONTSeg?)|, ""\n"";
      print ""# of INVALID segments: "", |Filter(xs, (s: ValidLinSeg) => s.INVALIDSeg?)|, ""\n"";
    }
  }
}

module HTML {
  const INFO_SYMBOL := ""&#8505;&#65039;""
  const LARGER_OR_EQ_SYMBOL := ""&#8805;""
  const DELTA_SYMBOL := ""&#916;""
  const WHITE_SPACE_SYMBOL := ""&#160;""
  const LINE_FEED_SYMBOL := ""&#10;""

  function Font(s: string, colour: string := """"): string
    decreases s, colour
  {
    ""<FONT"" + (if colour != """" then "" COLOR=\"""" + colour + ""\""> "" else ""> "") + s + ""</FONT>""
  }

  function RowTR(s: string): string
    decreases s
  {
    ""<TR>"" + s + ""</TR>\n""
  }

  function CellTD(body: string, align: string := ""left"", fixedsize: bool := false, width: string := """", border: string := ""0"", sides: string := """", colspan: string := ""0"", rowspan: string := ""1"", bgcolour: string := """", cellspacing: string := ""0"", cellpadding: string := ""0"", href: string := """", tooltip: string := """"): string
    decreases body, align, fixedsize, width, border, sides, colspan, rowspan, bgcolour, cellspacing, cellpadding, href, tooltip
  {
    ""<TD "" + ""ALIGN=\"""" + align + ""\"" "" + ""fixedsize=\"""" + (if fixedsize then ""true"" else ""false"") + ""\"" "" + (if width != """" then ""WIDTH=\"""" + width + ""\"" "" else """") + ""BORDER=\"""" + border + ""\"" "" + ""SIDES=\"""" + sides + ""\"" "" + (if bgcolour != """" then ""BGCOLOR=\"""" + bgcolour + ""\"" "" else """") + ""CELLPADDING=\"""" + cellpadding + ""\"" "" + ""CELLSPACING=\"""" + cellspacing + ""\"" "" + (if colspan != ""0"" then ""COLSPAN=\"""" + colspan + ""\"" "" else """") + (if rowspan != ""1"" then ""ROWSPAN=\"""" + rowspan + ""\"" "" else """") + ""href=\"""" + href + ""\"" "" + (if tooltip != """" then ""tooltip=\"""" + tooltip + ""\"" "" else """") + "">"" + body + ""</TD>\n""
  }

  function Table(body: string, align: string := ""left"", colour: string := ""black"", bgcolour: string := """", cellborder: string := ""0"", border: string := ""0"", cellpadding: string := ""0"", cellspacing: string := ""0""): string
    decreases body, align, colour, bgcolour, cellborder, border, cellpadding, cellspacing
  {
    ""<TABLE "" + ""ALIGN=\"""" + align + ""\"" "" + ""BORDER=\"""" + border + ""\"" "" + ""CELLBORDER=\"""" + cellborder + ""\"" "" + ""CELLPADDING=\"""" + cellpadding + ""\"" "" + ""CELLSPACING=\"""" + cellspacing + ""\"" "" + (if bgcolour != """" then ""BGCOLOR=\"""" + bgcolour + ""\"" "" else """") + ""COLOR=\"""" + colour + ""\"" "" + "">"" + body + ""</TABLE>\n""
  }

  function {:opaque} DOTSeg(s: ValidLinSeg, numSeg: nat, minStackSize: Option<nat>, index: nat): (string, string)
    decreases s, numSeg, minStackSize, index
  {
    var jumpTip: seq<char> := if s.JUMPSeg? || s.JUMPISeg? then var r: Either<StackElem, nat> := SegBuilder.JUMPResolver(s); match r { case Left(v) => match v { case Value(address) => LINE_FEED_SYMBOL + ""Exit Jump target: Constant 0x"" + Hex.NatToHex(address as nat) case Random(msg) => LINE_FEED_SYMBOL + ""Exit Jump target: Unknown"" } case Right(stackPos) => LINE_FEED_SYMBOL + ""Exit Jump target: Stack on Entry.Peek("" + Int.NatToString(stackPos) + "")"" } else """";
    var stackSizeEffect: seq<char> := ""Stack Size "" + DELTA_SYMBOL + "" : "" + Int.IntToString(s.StackEffect());
    var minNumOpe: seq<char> := LINE_FEED_SYMBOL + ""Stack Size on Entry for this segment "" + LARGER_OR_EQ_SYMBOL + "" "" + Int.NatToString(s.WeakestPreOperands());
    var minNumOpAtNode: seq<char> := if minStackSize.Some? then LINE_FEED_SYMBOL + ""Stack Size on Entry for this segment at this node "" + LARGER_OR_EQ_SYMBOL + "" "" + Int.NatToString(minStackSize.v) else """";
    var prefix: seq<char> := ""<B>Segment "" + ""#"" + Int.NatToString(index) + ""|"" + Int.NatToString(numSeg) + "" [0x"" + Hex.NatToHex(s.StartAddress()) + ""]</B><BR ALIGN=\""CENTER\""/>\n"";
    var body: string := Instructions.ToDot(s.Ins());
    (prefix + body, stackSizeEffect + jumpTip + minNumOpe + minNumOpAtNode)
  }

  function DOTSegTable(s: ValidLinSeg, a: GState, minStackSize: Option<nat>, index: nat): string
    requires a.EGState?
    decreases s, a, minStackSize, index
  {
    var jumpTip: seq<char> := if s.JUMPSeg? || s.JUMPISeg? then var r: Either<StackElem, nat> := SegBuilder.JUMPResolver(s); match r { case Left(v) => match v { case Value(address) => ""Exit Jump target: Constant 0x"" + Hex.NatToHex(address as nat) case Random(msg) => ""Exit Jump target: Unknown"" } case Right(stackPos) => ""Exit Jump target: Stack on Entry.Peek("" + Int.NatToString(stackPos) + "")"" } else """";
    var gasSymbol: string := ""&#9981; "";
    Table(cellspacing := ""1"", body := RowTR(CellTD(""#"" + Int.NatToString(index) + ""|"" + ""Segment "" + Int.NatToString(a.segNum) + "" [0x"" + Hex.NatToHex(s.StartAddress()) + ""]"") + CellTD(body := Font(INFO_SYMBOL), tooltip := ""Stack Size "" + DELTA_SYMBOL + "": "" + Int.IntToString(s.StackEffect()) + LINE_FEED_SYMBOL + ""Abstract stack at this node: ["" + a.StackToHTML() + ""]"" + (if minStackSize.Some? then LINE_FEED_SYMBOL + ""Stack Size on Entry at this node "" + LARGER_OR_EQ_SYMBOL + "" "" + Int.NatToString(minStackSize.v) else """") + LINE_FEED_SYMBOL + ""Stack Size on Entry for this segment "" + LARGER_OR_EQ_SYMBOL + "" "" + Int.NatToString(s.WeakestPreOperands()) + if jumpTip != """" then LINE_FEED_SYMBOL + jumpTip else """") + CellTD(gasSymbol, tooltip := ""lots of gas!"")) + ""<HR/>"" + DOTInsTable(s.Ins()))
  }

  function DOTInsTable(xi: seq<Instructions.ValidInstruction>, isFirst: bool := true): string
    decreases xi, isFirst
  {
    if |xi| == 0 then
      """"
    else
      var prefix: string := ""<TR><TD width=\""1\"" fixedsize=\""true\"" align=\""left\"">\n""; var suffix: string := ""</TD></TR>\n""; var exitPortTag: seq<char> := if xi[0].IsJump() then ""PORT=\""exit\"""" else """"; var entryPortTag: seq<char> := if isFirst then ""PORT=\""entry\"""" else """"; var a: string := xi[0].ToHTMLTable(entryPortTag, exitPortTag); prefix + a + suffix + DOTInsTable(xi[1..], false)
  }

  import opened LinSegments

  import opened MiscTypes

  import opened Instructions

  import SegBuilder

  import Hex

  import opened Statistics

  import opened CFGState
}

module SegBuilder {
  function JUMPResolver(s: ValidLinSeg): Either<StackElem, nat>
    requires s.JUMPSeg? || s.JUMPISeg?
    decreases s
  {
    assert forall i: int {:trigger s.ins[i]} :: 0 <= i < |s.ins| ==> s.ins[i].op.IsValid();
    StackPositionTracker(s.ins, 0)
  }

  function StackPositionTracker(xs: seq<ValidInstruction>, pos: nat := 0): Either<StackElem, nat>
    decreases xs, pos
  {
    if |xs| == 0 then
      Right(pos)
    else
      var x: Either<StackElem, nat> := xs[|xs| - 1].StackPosBackWardTracker(pos); match x case Left(v) => Left(v) case Right(v) => StackPositionTracker(xs[..|xs| - 1], v)
  }

  import opened EVMOpcodes

  import opened LinSegments

  import opened MiscTypes

  import opened Instructions

  import opened StackElement
}

module {:disableNonlinearArithmetic} GStateMinimiser refines Minimiser {
  const DEFAULT_STATE: T := CFGState.DEFAULT_GSTATE

  function MakeInit(aut: ValidAuto<T>, clazz: ValidPartition): ValidPair
    requires aut.SSize() == clazz.n
    ensures MakeInit(aut, clazz).IsValid()
    decreases aut, clazz
  {
    Pair(aut, clazz)
  }

  import opened CFGState

  type T = CFGState.GState

  import MiscTypes

  import opened PartitionMod

  import opened Automata

  type ValidPair = p: Pair
    | p.IsValid()
    witness Pair(Auto().AddState(DEFAULT_STATE), PartitionMod.MakeInit(1))

  datatype Pair = Pair(aut: ValidAuto<T>, clazz: ValidPartition) {
    ghost predicate IsValid()
      decreases this
    {
      aut.SSize() == clazz.n
    }

    function {:opaque} ClassSucc(x: nat): seq<nat>
      requires this.IsValid()
      requires x < aut.SSize()
      ensures forall k: int {:trigger k in ClassSucc(x)} :: k in ClassSucc(x) ==> k < |clazz.elem|
      decreases this, x
    {
      var l: seq<nat> := aut.SuccNat(x);
      seq(|l|, (z: int) requires 0 <= z < |l| => clazz.GetClass(l[z]))
    }

    function {:opaque} ClassSplitter(): (p': ValidPair)
      requires this.IsValid()
      ensures p'.clazz.n == this.clazz.n
      ensures p'.aut == this.aut
      ensures |p'.clazz.elem| >= |this.clazz.elem|
      decreases this
    {
      IsEquivRelF();
      this.(clazz := clazz.RefineAll(Splitter))
    }

    function {:opaque} Splitter(x: nat, y: nat): bool
      requires this.IsValid()
      requires x < aut.SSize() && y < aut.SSize()
      ensures Splitter(x, y) <==> ClassSucc(x) == ClassSucc(y)
      decreases this, x, y
    {
      ClassSucc(x) == ClassSucc(y)
    }

    function {:opaque} Minimise(): (a: ValidAuto<T>)
      requires this.IsValid()
      ensures forall s: CFGState.GState {:trigger s in this.aut.states} {:trigger s in a.states} :: s in a.states ==> s in this.aut.states
      decreases this
    {
      var p1: ValidPair := IterSplit(this);
      assert p1.aut == this.aut;
      p1.MapToClasses()
    }

    lemma /*{:_induction this}*/ IsEquivRelF()
      requires this.IsValid()
      ensures IsEquivRel(Splitter, aut.SSize())
      decreases this
    {
    }

    function {:timeLimitMultiplier 3} {:opaque} /*{:_timeLimit 30}*/ MapToClasses(acc: ValidAuto<T> := Auto(), index: nat := 0): (r: ValidAuto<T>)
      requires this.IsValid()
      requires index <= |aut.states|
      requires forall s: CFGState.GState {:trigger s in this.aut.states} {:trigger s in acc.states} :: s in acc.states ==> s in this.aut.states
      ensures forall s: CFGState.GState {:trigger s in this.aut.states} {:trigger s in r.states} :: s in r.states ==> s in this.aut.states
      decreases |aut.states| - index
    {
      if index == |aut.states| then
        acc
      else
        var succs: seq<CFGState.GState> := MiscTypes.MapP(clazz.GetClassRepOfSeqs(aut.transitionsNat[index]), (i: nat) requires 0 <= i < aut.SSize() => aut.states[i]); var a': ValidAuto<T> := MapToClasses(acc.AddEdges(aut.states[clazz.GetClassRepOf(index)], succs), index + 1); a'
    }

    static function {:opaque} IterSplit(pp: ValidPair): (r: ValidPair)
      ensures r.aut == pp.aut
      decreases pp.clazz.n - |pp.clazz.elem|
    {
      var p1: ValidPair := pp.ClassSplitter();
      if |p1.clazz.elem| == |pp.clazz.elem| then
        pp
      else
        IterSplit(p1)
    }
  }
}

abstract module Minimiser {
  const DEFAULT_STATE: T

  function MakeInit(aut: ValidAuto<T>, clazz: ValidPartition): ValidPair
    requires aut.SSize() == clazz.n
    ensures MakeInit(aut, clazz).IsValid()
    decreases aut, clazz
  {
    Pair(aut, clazz)
  }

  import MiscTypes

  import opened PartitionMod

  import opened Automata

  type T(==,!new)

  type ValidPair = p: Pair
    | p.IsValid()
    witness Pair(Auto().AddState(DEFAULT_STATE), PartitionMod.MakeInit(1))

  datatype Pair = Pair(aut: ValidAuto<T>, clazz: ValidPartition) {
    ghost predicate IsValid()
      decreases this
    {
      aut.SSize() == clazz.n
    }

    function {:opaque} ClassSucc(x: nat): seq<nat>
      requires this.IsValid()
      requires x < aut.SSize()
      ensures forall k: int {:trigger k in ClassSucc(x)} :: k in ClassSucc(x) ==> k < |clazz.elem|
      decreases this, x
    {
      var l: seq<nat> := aut.SuccNat(x);
      seq(|l|, (z: int) requires 0 <= z < |l| => clazz.GetClass(l[z]))
    }

    function {:opaque} ClassSplitter(): (p': ValidPair)
      requires this.IsValid()
      ensures p'.clazz.n == this.clazz.n
      ensures p'.aut == this.aut
      ensures |p'.clazz.elem| >= |this.clazz.elem|
      decreases this
    {
      IsEquivRelF();
      this.(clazz := clazz.RefineAll(Splitter))
    }

    function {:opaque} Splitter(x: nat, y: nat): bool
      requires this.IsValid()
      requires x < aut.SSize() && y < aut.SSize()
      ensures Splitter(x, y) <==> ClassSucc(x) == ClassSucc(y)
      decreases this, x, y
    {
      ClassSucc(x) == ClassSucc(y)
    }

    function {:opaque} Minimise(): (a: ValidAuto<T>)
      requires this.IsValid()
      ensures forall s: T {:trigger s in this.aut.states} {:trigger s in a.states} :: s in a.states ==> s in this.aut.states
      decreases this
    {
      var p1: ValidPair := IterSplit(this);
      assert p1.aut == this.aut;
      p1.MapToClasses()
    }

    lemma /*{:_induction this}*/ IsEquivRelF()
      requires this.IsValid()
      ensures IsEquivRel(Splitter, aut.SSize())
      decreases this
    {
    }

    function {:timeLimitMultiplier 3} {:opaque} /*{:_timeLimit 30}*/ MapToClasses(acc: ValidAuto<T> := Auto(), index: nat := 0): (r: ValidAuto<T>)
      requires this.IsValid()
      requires index <= |aut.states|
      requires forall s: T {:trigger s in this.aut.states} {:trigger s in acc.states} :: s in acc.states ==> s in this.aut.states
      ensures forall s: T {:trigger s in this.aut.states} {:trigger s in r.states} :: s in r.states ==> s in this.aut.states
      decreases |aut.states| - index
    {
      if index == |aut.states| then
        acc
      else
        var succs: seq<T> := MiscTypes.MapP(clazz.GetClassRepOfSeqs(aut.transitionsNat[index]), (i: nat) requires 0 <= i < aut.SSize() => aut.states[i]); var a': ValidAuto<T> := MapToClasses(acc.AddEdges(aut.states[clazz.GetClassRepOf(index)], succs), index + 1); a'
    }

    static function {:opaque} IterSplit(pp: ValidPair): (r: ValidPair)
      ensures r.aut == pp.aut
      decreases pp.clazz.n - |pp.clazz.elem|
    {
      var p1: ValidPair := pp.ClassSplitter();
      if |p1.clazz.elem| == |pp.clazz.elem| then
        pp
      else
        IterSplit(p1)
    }
  }
}

module Automata {

  import opened MiscTypes

  import opened Int

  import opened LinSegments
  type ValidAuto<!T(!new)> = a: Auto<T>
    | a.IsValid()
    witness Auto()

  datatype Auto<!T(==,!new)> = Auto(ghost transitions: map<T, seq<T>> := map[], transitionsNat: map<nat, seq<nat>> := map[], revTransitionsNat: map<nat, seq<nat>> := map[], states: seq<T> := [], indexOf: map<T, nat> := map[]) {
    predicate Equals(b: Auto<T>)
      decreases this, b
    {
      transitionsNat == b.transitionsNat &&
      states == b.states
    }

    function {:timeLimitMultiplier 10} {:opaque} {:verify true} /*{:_timeLimit 100}*/ AddState(i: T): (a: ValidAuto<T>)
      requires IsValid()
      ensures i in a.states
      ensures forall s: T {:trigger s in a.states} {:trigger s in states} :: s in states ==> s in a.states
      ensures forall s: T {:trigger s in states} {:trigger s in a.states} :: s in a.states ==> s in states || s == i
      ensures i in states ==> a == this
      ensures i !in states ==> a.SSize() == SSize() + 1
      ensures i !in states ==> (forall s: T {:trigger transitions[s]} {:trigger a.transitions[s]} {:trigger s in states} :: s in states ==> a.transitions[s] == transitions[s]) && a.transitions[i] == []
      ensures i !in states ==> a.transitionsNat[|states|] == []
      ensures i !in states ==> a.revTransitionsNat[|states|] == []
      ensures a.IsValid()
      decreases this
    {
      if i in states then
        this
      else
        assert i !in indexOf; assert (indexOf + map[i := |states|]).Values == indexOf.Values + {|states|}; assert indexOf[i := |states|] == indexOf + map[i := |states|]; assert i in states + [i]; this.(states := states + [i], indexOf := indexOf[i := |states|], transitions := transitions[i := []], transitionsNat := transitionsNat[|states| := []], revTransitionsNat := revTransitionsNat[|states| := []])
    }

    function {:opaque} {:verify true} AddStates(xs: seq<T>): (a: ValidAuto<T>)
      requires IsValid()
      ensures a.IsValid()
      ensures forall s: T {:trigger s in a.states} {:trigger s in states} :: s in states ==> s in a.states
      ensures forall j: int {:trigger xs[j]} :: 0 <= j < |xs| ==> xs[j] in a.states
      ensures forall s: T {:trigger s in xs} {:trigger s in states} {:trigger s in a.states} :: s in a.states ==> s in states || s in xs
      decreases |xs|
    {
      if |xs| == 0 then
        this
      else
        this.AddState(xs[0]).AddStates(xs[1..])
    }

    function {:timeLimitMultiplier 8} {:opaque} /*{:_timeLimit 80}*/ AddEdge(i: T, j: T): (a: ValidAuto<T>)
      requires IsValid()
      ensures i in a.states
      ensures j in a.states
      ensures forall s: T {:trigger s in a.states} {:trigger s in states} :: s in states ==> s in a.states
      ensures forall s: T {:trigger s in states} {:trigger s in a.states} :: s in a.states ==> s in states || s == i || s == j
      ensures forall s: T {:trigger s in a.transitions} {:trigger s in a.states} :: s in a.states && s != i && s != j ==> s in a.transitions
      ensures forall s: T {:trigger transitions[s]} {:trigger a.transitions[s]} {:trigger s in a.states} :: s in a.states && s != i && s != j ==> a.transitions[s] == transitions[s]
      ensures i in a.transitions
      ensures i in states ==> |a.transitions[i]| <= |transitions[i]| + 1
      ensures i !in states ==> a.transitions[i] == [j]
      decreases this
    {
      var a1: ValidAuto<T> := this.AddState(i).AddState(j);
      if a1.indexOf[j] in a1.transitionsNat[a1.indexOf[i]] then
        assert j in a1.transitions[i];
        a1
      else
        AddEdgeInTRandTrNatPreservesValid(a1, i, j); var w: Auto<T> := a1.(transitions := AddKeyVal(a1.transitions, i, j), transitionsNat := AddKeyVal(a1.transitionsNat, a1.indexOf[i], a1.indexOf[j]), revTransitionsNat := AddKeyVal(a1.revTransitionsNat, a1.indexOf[j], a1.indexOf[i])); w
    }

    static lemma {:timeLimitMultiplier 6} /*{:_timeLimit 60}*/ AddEdgeInTRandTrNatPreservesValid(a: ValidAuto<T>, i: T, j: T)
      requires a.IsValid()
      requires i in a.states
      requires j in a.states
      ensures a.(transitions := AddKeyVal(a.transitions, i, j)).(transitionsNat := AddKeyVal(a.transitionsNat, a.indexOf[i], a.indexOf[j])).(revTransitionsNat := AddKeyVal(a.revTransitionsNat, a.indexOf[j], a.indexOf[i])).IsValid()
      decreases a
    {
      ghost var a1 := a.(transitions := AddKeyVal(a.transitions, i, j));
      ReverseMapsIsCongruent(a.transitionsNat, a.revTransitionsNat, a1.transitionsNat, a1.revTransitionsNat);
    }

    function {:timeLimitMultiplier 6} {:opaque} /*{:_timeLimit 60}*/ AddEdges(i: T, js: seq<T>, index: nat := 0): (a: ValidAuto<T>)
      requires this.IsValid()
      requires index <= |js|
      requires forall j: int {:trigger js[j]} :: 0 <= j < index ==> js[j] in this.states
      ensures a.IsValid()
      ensures i in a.states
      ensures forall s: T {:trigger s in a.states} {:trigger s in this.states} :: s in this.states ==> s in a.states
      ensures forall j: int {:trigger js[j]} :: 0 <= j < |js| ==> js[j] in a.states
      ensures forall s: T {:trigger s in js} {:trigger s in this.states} {:trigger s in a.states} :: s in a.states ==> s in this.states || s == i || s in js
      decreases |js| - index
    {
      if |js| == index then
        this.AddState(i)
      else
        var a1: ValidAuto<T> := this.AddEdge(i, js[index]); assert i in a1.states; assert js[index] in a1.states; assert a1.IsValid(); assert forall j: int {:trigger js[j]} :: 0 <= j < index ==> js[j] in a1.states; assert js[index] in a1.states; ExtendByOneGoodIsGood(index, js, (i: T) => i in a1.states); assert forall j: int {:trigger js[j]} :: 0 <= j < index + 1 ==> js[j] in a1.states; var a2: ValidAuto<T> := a1.AddEdges(i, js, index + 1); a2
    }

    function SSize(): nat
      requires this.IsValid()
      decreases this
    {
      |states|
    }

    function {:opaque} TSize(index: nat := 0): nat
      requires this.IsValid()
      requires index <= |states|
      decreases |states| - index
    {
      if index == |states| then
        0
      else
        |transitionsNat[index]| + TSize(index + 1)
    }

    function {:opaque} Succ(s: T): (r: seq<T>)
      requires this.IsValid()
      requires s in states
      ensures r == transitions[s]
      decreases this
    {
      seq(|transitionsNat[indexOf[s]]|, (i: int) requires 0 <= i < |transitionsNat[indexOf[s]]| => states[transitionsNat[indexOf[s]][i]])
    }

    function {:opaque} SuccNat(i: nat): (r: seq<nat>)
      requires this.IsValid()
      requires i < |states|
      ensures forall j: nat {:trigger r[j]} :: 0 <= j < |r| ==> r[j] < |states|
      decreases this, i
    {
      transitionsNat[i]
    }

    function {:opaque} PredNat(i: nat): (r: seq<nat>)
      requires this.IsValid()
      requires i < |states|
      ensures forall j: nat {:trigger r[j]} :: 0 <= j < |r| ==> r[j] < |states|
      decreases this, i
    {
      revTransitionsIsBounded();
      assert forall j: nat {:trigger revTransitionsNat[i][j]} :: 0 <= j < |revTransitionsNat[i]| ==> revTransitionsNat[i][j] in revTransitionsNat[i];
      revTransitionsNat[i]
    }

    lemma {:timeLimitMultiplier 2} /*{:_timeLimit 20}*/ /*{:_induction this}*/ revTransitionsIsBounded()
      requires this.IsValid()
      ensures forall k: int, v: int {:trigger v in revTransitionsNat[k]} :: k in revTransitionsNat && v in revTransitionsNat[k] ==> v < |states|
      decreases this
    {
      forall k: int, v: int | k in revTransitionsNat.Keys && v in revTransitionsNat[k]
        ensures v < |states|
      {
        assert v in transitionsNat;
      }
    }

    method {:print} ToDot(nodeToString: (T, nat) --> string, labelToString: (T, nat, T) --> string, prefix: string := """", name: string := ""G"")
      requires this.IsValid()
      requires forall s: T, k: nat {:trigger nodeToString.requires(s, k)} :: s in states ==> nodeToString.requires(s, k)
      requires forall s: T, s': T, n: nat {:trigger labelToString.requires(s, n, s')} :: s in states && s' in states ==> labelToString.requires(s, n, s')
      decreases this, prefix, name
    {
      print ""// Number of states: "", SSize(), ""\n"";
      print ""// Number of transitions : "", TSize(), ""\n"";
      print ""digraph G {\n"";
      print prefix, ""\n"";
      for i: int := 0 to |states| {
        print ""s_"", i, "" [label="", nodeToString(states[i], i) + ""]\n"";
      }
      for i: int := 0 to |states| {
        for j: int := 0 to |transitionsNat[i]| {
          print ""s_"", i, "" -> "", ""s_"", transitionsNat[i][j], labelToString(states[i], j, states[transitionsNat[i][j]]), "";\n"";
        }
      }
      print ""}\n"";
    }

    ghost predicate IsValid()
      decreases this
    {
      StatesTransValid() &&
      IndexOfValid() &&
      TransNatTransIsValid() &&
      IsReverseMapValid()
    }

    ghost predicate StatesTransValid()
      decreases this
    {
      (forall i: T {:trigger i in transitions} {:trigger i in states} :: 
        i in states <==> i in transitions) &&
      (forall k: int, k': int {:trigger states[k'], states[k]} :: 
        0 <= k < k' < |states| ==>
          states[k] != states[k']) &&
      forall i: T, j: int {:trigger transitions[i][j]} :: 
        i in states &&
        0 <= j < |transitions[i]| ==>
          transitions[i][j] in states
    }

    ghost predicate IndexOfValid()
      decreases this
    {
      (forall s: T {:trigger s in indexOf} {:trigger s in states} :: 
        s in states <==> s in indexOf) &&
      (forall i: T {:trigger indexOf[i]} {:trigger i in indexOf} :: 
        (i in indexOf ==>
          indexOf[i] < |states|) &&
        (i in indexOf ==>
          states[indexOf[i]] == i)) &&
      (forall i: int {:trigger states[i]} :: 
        (0 <= i < |states| ==>
          states[i] in indexOf) &&
        (0 <= i < |states| ==>
          indexOf[states[i]] == i)) &&
      indexOf.Values == (set z: int {:nowarn} | 0 <= z < |states|) &&
      indexOf.Values == transitionsNat.Keys &&
      indexOf.Values == revTransitionsNat.Keys
    }

    ghost predicate TransNatTransIsValid()
      requires StatesTransValid()
      requires IndexOfValid()
      decreases this
    {
      (forall k: int {:trigger states[k]} {:trigger transitionsNat[k]} {:trigger k in transitionsNat} :: 
        k in transitionsNat ==>
          |transitionsNat[k]| == |transitions[states[k]]|) &&
      (forall k: T {:trigger indexOf[k]} {:trigger transitions[k]} {:trigger k in transitions} :: 
        k in transitions ==>
          |transitions[k]| == |transitionsNat[indexOf[k]]|) &&
      (forall i: int, j: int {:trigger transitionsNat[i][j]} :: 
        (0 <= i < |states| &&
        0 <= j < |transitionsNat[i]| ==>
          0 <= transitionsNat[i][j]) &&
        (0 <= i < |states| &&
        0 <= j < |transitionsNat[i]| ==>
          transitionsNat[i][j] < |states|)) &&
      (forall i: int, j: int {:trigger transitions[states[i]][j]} {:trigger transitionsNat[i][j]} :: 
        0 <= i < |states| &&
        0 <= j < |transitionsNat[i]| ==>
          states[transitionsNat[i][j]] == transitions[states[i]][j]) &&
      forall i: T, j: int {:trigger transitions[i][j]} :: 
        i in states &&
        0 <= j < |transitions[i]| ==>
          indexOf[transitions[i][j]] == indexOf[transitions[i][j]]
    }

    ghost predicate IsReverseMapValid()
      decreases this
    {
      true &&
      forall src: int, tgt: int {:trigger revTransitionsNat[tgt], transitionsNat[src]} {:trigger revTransitionsNat[tgt], src in transitionsNat} {:trigger tgt in revTransitionsNat, transitionsNat[src]} {:trigger tgt in revTransitionsNat, src in transitionsNat} :: 
        src in transitionsNat && tgt in transitionsNat[src] <==> tgt in revTransitionsNat && src in revTransitionsNat[tgt]
    }
  }
}

module {:disableNonlinearArithmetic} PartitionMod {
  function {:opaque} MakeInit(n: nat): (p: Partition)
    requires n > 0
    ensures p.IsValid()
    ensures |p.elem| == 1
    ensures p.n == n
    decreases n
  {
    var s: set<int> := set q: int {:nowarn} {:trigger q < n} {:trigger 0 <= q} | 0 <= q < n;
    assert {0} <= s;
    reveal_SetU();
    assert SetN([s], n);
    Partition(n, [s])
  }

  ghost predicate IsEquivRel(f: (nat, nat) --> bool, n: nat)
    requires forall x: int, y: int {:trigger f.requires(x, y)} :: 0 <= x < n && 0 <= y < n ==> f.requires(x, y)
    decreases n
  {
    (forall x: int {:trigger f(x, x)} :: 
      0 <= x < n ==>
        f(x, x)) &&
    (forall x: int, x': int {:trigger f(x', x)} {:trigger f(x, x')} :: 
      0 <= x < n &&
      0 <= x' < n ==>
        f(x, x') == f(x', x)) &&
    forall x: int, x': int, x'': int {:trigger f(x, x''), f(x', x'')} {:trigger f(x', x''), f(x, x')} :: 
      0 <= x < n &&
      0 <= x' < n &&
      0 <= x'' < n &&
      f(x, x') &&
      f(x', x'') ==>
        f(x, x'')
  }

  ghost predicate AllClassesAreEquiv(r: seq<set<nat>>, equiv: (nat, nat) --> bool, n: nat)
    requires forall i: set<nat>, i': int {:trigger i' in i} :: i in r && i' in i ==> i' < n
    requires forall x: int, y: int {:trigger equiv.requires(x, y)} :: 0 <= x < n && 0 <= y < n ==> equiv.requires(x, y)
    decreases r, n
  {
    forall x: set<nat>, y: nat, y': nat {:trigger equiv(y, y'), y' in x} {:trigger equiv(y, y'), x in r} {:trigger y' in x, y in x} :: 
      x in r &&
      y in x &&
      y' in x ==>
        equiv(y, y')
  }

  ghost predicate DisjointClassesAreNonEquiv(r: seq<set<nat>>, equiv: (nat, nat) --> bool, n: nat)
    requires forall i: set<nat>, i': int {:trigger i' in i} :: i in r && i' in i ==> i' < n
    requires forall x: int, y: int {:trigger equiv.requires(x, y)} :: 0 <= x < n && 0 <= y < n ==> equiv.requires(x, y)
    decreases r, n
  {
    forall i: int, i': int {:trigger r[i'], r[i]} :: 
      0 <= i < i' < |r| ==>
        forall x: nat, x': nat {:trigger equiv(x, x')} {:trigger x' in r[i'], x in r[i]} :: 
          x in r[i] &&
          x' in r[i'] ==>
            !equiv(x, x')
  }

  function {:timeLimitMultiplier 30} {:opaque} {:isolate_assertions} /*{:_timeLimit 300}*/ SplitTrueAndFalse(xs: set<nat>, equiv: (nat, nat) --> bool, n: nat): (r: seq<set<nat>>)
    requires forall x: int {:trigger x in xs} :: x in xs ==> x < n
    requires xs != {}
    requires forall x: int, y: int {:trigger equiv.requires(x, y)} :: 0 <= x < n && 0 <= y < n ==> equiv.requires(x, y)
    requires IsEquivRel(equiv, n)
    ensures 1 <= |r| <= |xs|
    ensures SetU(r) == xs
    ensures forall x: int {:trigger x in xs} {:trigger x in SetU(r)} :: (x in SetU(r) ==> x in xs) && (x in SetU(r) ==> x < n)
    ensures forall i: set<nat>, i': int {:trigger i' in i} :: i in r && i' in i ==> i' < n
    ensures AllNonEmpty(r)
    ensures DisjointAnyTwo(r)
    ensures forall x: set<nat> {:trigger x in r} :: x in r ==> forall y: nat, y': nat {:trigger equiv(y, y')} {:trigger y' in x, y in x} :: y in x && y' in x ==> equiv(y, y')
    ensures AllClassesAreEquiv(r, equiv, n)
    ensures forall i: int, i': int, x: nat, x': nat {:trigger equiv(x, x'), r[i'], r[i]} :: 0 <= i < i' < |r| && x in r[i] && x' in r[i'] ==> !equiv(x, x')
    ensures DisjointClassesAreNonEquiv(r, equiv, n)
    decreases xs, n
  {
    reveal_SetU();
    reveal_SetToSequence();
    var first: nat := SetToSequence(xs)[0];
    var xsTrue: set<nat> := set x: nat {:trigger equiv(first, x)} {:trigger x in xs} | x in xs && equiv(first, x);
    assert first in xsTrue;
    var xsFalse: set<nat> := xs - xsTrue;
    if xsFalse == {} then
      [xsTrue]
    else
      lem1(xsTrue, SplitTrueAndFalse(xsFalse, equiv, n)); lem2(xsTrue, SplitTrueAndFalse(xsFalse, equiv, n)); [xsTrue] + SplitTrueAndFalse(xsFalse, equiv, n)
  }

  lemma lem1<T>(xs: set<T>, r: seq<set<T>>)
    requires xs != {}
    requires AllNonEmpty(r)
    ensures AllNonEmpty([xs] + r)
    decreases xs, r
  {
  }

  lemma /*{:_induction r}*/ lem2<T>(xs: set<T>, r: seq<set<T>>)
    requires xs * SetU(r) == {}
    requires DisjointAnyTwo(r)
    ensures DisjointAnyTwo([xs] + r)
    decreases xs, r
  {
  }

  function {:opaque} SplitAllClasses(xs: seq<set<nat>>, equiv: (nat, nat) --> bool, n: nat): (r: seq<seq<set<nat>>>)
    requires forall x: set<nat>, i: int {:trigger i in x} :: x in xs && i in x ==> i < n
    requires AllNonEmpty(xs)
    requires forall x: int, y: int {:trigger equiv.requires(x, y)} :: 0 <= x < n && 0 <= y < n ==> equiv.requires(x, y)
    requires IsEquivRel(equiv, n)
    ensures |r| == |xs|
    ensures forall i: seq<set<nat>> {:trigger DisjointAnyTwo<nat>(i)} {:trigger AllNonEmpty<nat>(i)} {:trigger i in r} :: (i in r ==> AllNonEmpty(i)) && (i in r ==> DisjointAnyTwo(i))
    ensures forall i: int {:trigger xs[i]} {:trigger r[i]} :: 0 <= i < |r| ==> SetU(r[i]) == xs[i]
    ensures forall i: int {:trigger r[i]} :: 0 <= i < |r| ==> |r[i]| >= 1
    ensures |r| >= |xs|
    ensures forall i: int {:trigger r[i]} :: 0 <= i < |r| ==> forall x: set<int> {:trigger x in r[i]} :: x in r[i] ==> forall y: int {:trigger y in x} :: y in x ==> y < n
    ensures forall i: seq<set<nat>> {:trigger AllClassesAreEquiv(i, equiv, n)} {:trigger i in r} :: i in r ==> AllClassesAreEquiv(i, equiv, n)
    ensures forall i: seq<set<nat>> {:trigger DisjointClassesAreNonEquiv(i, equiv, n)} {:trigger i in r} :: i in r ==> DisjointClassesAreNonEquiv(i, equiv, n)
    decreases xs, n
  {
    seq(|xs|, (i: int) requires 0 <= i < |xs| => SplitTrueAndFalse(xs[i], equiv, n))
  }

  method PrintPartition(p: Partition)
    decreases p
  {
    for k: int := 0 to |p.elem| {
      var setToSeq := SetToSequence(p.elem[k]);
      print setToSeq, ""\n"";
    }
  }

  import opened SeqOfSets

  import opened MiscTypes

  type ValidPartition = x: Partition
    | x.IsValid()
    witness MakeInit(1)

  datatype Partition = Partition(n: nat, elem: seq<set<nat>>) {
    ghost predicate IsValid()
      decreases this
    {
      n > 0 &&
      AllNonEmpty(elem) &&
      DisjointAnyTwo(elem) &&
      SetN(elem, n) &&
      0 < |elem| <= n
    }

    function SplitIn2(f: nat -> bool): (p': Partition)
      requires this.IsValid()
      requires |elem| == 1
      ensures p'.IsValid()
      ensures |p'.elem| <= 2
      ensures p'.n == n
      decreases this
    {
      reveal_SetU();
      var sTrue: set<nat> := set q: nat {:trigger f(q)} {:trigger q in SetU(elem)} | q in SetU(elem) && f(q);
      var sFalse: set<nat> := SetU(elem) - sTrue;
      assert SetU(elem) != {};
      assert sTrue != {} || sFalse != {};
      var d: seq<set<nat>> := (if sTrue != {} then [sTrue] else []) + if sFalse != {} then [sFalse] else [];
      var e: Partition := this.(elem := d);
      assert sTrue + sFalse == SetU([sTrue]) + SetU([sFalse]);
      assert SetU(d) == sTrue + sFalse;
      assert e.IsValid();
      e
    }

    function {:timeLimitMultiplier 4} {:opaque} /*{:_timeLimit 40}*/ ComputeFinest(equiv: (nat, nat) --> bool): (p': ValidPartition)
      requires this.IsValid()
      requires |elem| == 1
      requires forall x: int, y: int {:trigger equiv.requires(x, y)} :: 0 <= x < n && 0 <= y < n ==> equiv.requires(x, y)
      requires IsEquivRel(equiv, n)
      ensures forall i: int {:trigger p'.elem[i]} :: 0 <= i < |p'.elem| ==> forall y: int {:trigger y in p'.elem[i]} :: y in p'.elem[i] ==> y < n
      ensures p'.n == this.n
      ensures AllClassesAreEquiv(p'.elem, equiv, n)
      ensures DisjointClassesAreNonEquiv(p'.elem, equiv, n)
      decreases this
    {
      SizeOfNatsUpToNBound(n, SetU(elem));
      var k: seq<set<nat>> := SplitTrueAndFalse(SetU(elem), equiv, n);
      AllBoundedBy(k, n);
      this.(elem := k)
    }

    function {:timeLimitMultiplier 2} {:opaque} /*{:_timeLimit 20}*/ RefineAll(equiv: (nat, nat) --> bool): (p': ValidPartition)
      requires this.IsValid()
      requires forall x: int, y: int {:trigger equiv.requires(x, y)} :: 0 <= x < n && 0 <= y < n ==> equiv.requires(x, y)
      requires IsEquivRel(equiv, n)
      ensures |p'.elem| >= |elem|
      ensures p'.n == n
      ensures p'.IsValid()
      decreases this
    {
      SizeOfNatsUpToNBound(n, SetU(elem));
      var k: seq<seq<set<nat>>> := SplitAllClasses(elem, equiv, n);
      assert |k| == |elem|;
      assert forall i: int {:trigger elem[i]} {:trigger k[i]} :: 0 <= i < |k| ==> SetU(k[i]) == elem[i];
      assert forall i: int {:trigger k[i]} :: 0 <= i < |k| ==> AllClassesAreEquiv(k[i], equiv, n);
      assert forall i: int {:trigger k[i]} :: 0 <= i < |k| ==> DisjointClassesAreNonEquiv(k[i], equiv, n);
      var d: seq<set<nat>> := Flatten(k);
      var e: Partition := this.(elem := d);
      MinSizeOfFlattenForAllNonEmpty(k);
      assert |e.elem| >= |elem|;
      FlattenAllNonEmpty(k, n);
      assert AllNonEmpty(e.elem);
      assert forall i: int {:trigger elem[i]} {:trigger k[i]} :: 0 <= i < |k| ==> SetU(k[i]) == elem[i];
      NonFlatDisjointImpliesFlatDisjoint(k, e.elem);
      assert DisjointAnyTwo(e.elem);
      FlattenPreservesSetU(elem, k);
      assert SetU(elem) == SetU(e.elem);
      MaxNumberOfClasses(e.elem, n);
      assert |e.elem| <= n;
      assert e.IsValid();
      e
    }

    function {:tailrecursion true} {:opaque} GetClass(x: nat, index: nat := 0): (c: nat)
      requires IsValid()
      requires 0 <= x < n
      requires index < |elem|
      requires forall k: int {:trigger elem[k]} :: 0 <= k < index ==> x !in elem[k]
      ensures c < |elem| <= n && x in elem[c]
      decreases |elem| - index
    {
      LessThanNIsInAClass(elem, n, x);
      assert exists i: int {:trigger elem[i]} :: 0 <= i < |elem| && x in elem[i];
      if x in elem[index] then
        index
      else
        GetClass(x, index + 1)
    }

    function {:opaque} GetClassRepOf(x: nat): (c: nat)
      requires IsValid()
      requires 0 <= x < n
      ensures c < n
      decreases this, x
    {
      var c: nat := GetClass(x);
      SetToSequence(elem[c])[0]
    }

    function {:opaque} GetClassRepOfSeqs(xs: seq<nat>): (c: seq<nat>)
      requires IsValid()
      requires forall i: int {:trigger xs[i]} :: (0 <= i < |xs| ==> 0 <= xs[i]) && (0 <= i < |xs| ==> xs[i] < n)
      ensures |xs| == |c|
      ensures forall i: int {:trigger c[i]} :: 0 <= i < |xs| ==> c[i] < n
      decreases this, xs
    {
      if |xs| == 0 then
        []
      else
        [GetClassRepOf(xs[0])] + GetClassRepOfSeqs(xs[1..])
    }
  }
}

module SeqOfSets {
  function {:tailrecursion true} {:opaque} SetU<T>(xs: seq<set<T>>): (r: set<T>)
    ensures forall k: int {:trigger xs[k]} :: 0 <= k < |xs| ==> xs[k] <= SetU(xs)
    decreases xs
  {
    if |xs| == 0 then
      {}
    else
      xs[0] + SetU(xs[1..])
  }

  function {:tailrecursion false} {:opaque} SetI<T>(xs: seq<set<T>>): (r: set<T>)
    decreases xs
  {
    if |xs| == 0 then
      {}
    else if |xs| == 1 then
      xs[0]
    else
      xs[0] * SetI(xs[1..])
  }

  ghost predicate AllNonEmpty<T>(xs: seq<set<T>>)
    decreases xs
  {
    forall k: int {:trigger xs[k]} :: 
      0 <= k < |xs| ==>
        xs[k] != {}
  }

  lemma AllNonEmptySubset<T>(r1: seq<set<T>>, r2: seq<set<T>>)
    requires AllNonEmpty(r1)
    requires AllNonEmpty(r2)
    ensures AllNonEmpty(r1 + r2)
    decreases r1, r2
  {
  }

  ghost predicate DisjointAnyTwo<T>(xs: seq<set<T>>)
    decreases xs
  {
    forall k: int, k': int {:trigger xs[k'], xs[k]} :: 
      0 <= k < k' < |xs| ==>
        xs[k] * xs[k'] == {}
  }

  ghost predicate SetN(xs: seq<set<nat>>, n: nat)
    decreases xs, n
  {
    reveal_SetU();
    SetU(xs) == set z: int {:nowarn} | 0 <= z < n
  }

  lemma EmptySubsetIntersection<T>(a: set<T>, b: set<T>, c: set<T>, d: set<T>)
    requires a * b == {}
    requires c <= a && d <= b
    ensures c * d == {}
    decreases a, b, c, d
  {
  }

  lemma /*{:_induction xs}*/ AllBoundedBy(xs: seq<set<nat>>, n: nat)
    requires SetN(xs, n)
    ensures forall k: set<nat>, e: int {:trigger e in k} :: (k in xs && e in k ==> 0 <= e) && (k in xs && e in k ==> e < n)
    ensures forall k: int, e: int {:trigger e in xs[k]} :: (0 <= k < |xs| && e in xs[k] ==> 0 <= e) && (0 <= k < |xs| && e in xs[k] ==> e < n)
    ensures forall e: int {:trigger e in SetU(xs)} :: 0 <= e < n <==> e in SetU(xs)
    decreases xs, n
  {
  }

  lemma LessThanNIsInAClass(xs: seq<set<nat>>, n: nat, k: nat)
    requires SetN(xs, n)
    requires 0 <= k < n
    ensures exists i: int {:trigger xs[i]} :: 0 <= i < |xs| && k in xs[i]
    decreases xs, n, k
  {
    if !exists i: int {:trigger xs[i]} :: 0 <= i < |xs| && k in xs[i] {
      SubLessThan(xs, k);
    }
  }

  lemma /*{:_induction xt}*/ SubLessThan<T>(xt: seq<set<T>>, t: T)
    requires t in SetU(xt)
    ensures exists k: int {:trigger xt[k]} :: 0 <= k < |xt| && t in xt[k]
    decreases xt
  {
    reveal_SetU();
  }

  lemma DisjointFirst<T>(xs: seq<set<T>>)
    requires DisjointAnyTwo(xs)
    requires |xs| >= 1
    ensures xs[0] * SetU(xs[1..]) == {}
    decreases xs
  {
    if xs[0] * SetU(xs[1..]) != {} {
      ghost var e :| e in xs[0] && e in SetU(xs[1..]);
      SubLessThan(xs[1..], e);
      ghost var k :| 0 <= k < |xs[1..]| && e in xs[1..][k];
      assert e in xs[k + 1];
      assert e in xs[0] * xs[k + 1];
      assert !DisjointAnyTwo(xs);
      assert false;
    }
  }

  lemma MaxNumberOfClasses(xs: seq<set<nat>>, n: nat)
    requires SetN(xs, n)
    requires DisjointAnyTwo(xs)
    requires AllNonEmpty(xs)
    ensures |xs| <= n
    decreases xs, n
  {
    if |xs| > n {
      SizeOfNatsUpToNBound(n, SetU(xs));
      MinNumberOfClasses(xs);
      assert |SetU(xs)| >= |xs|;
    }
  }

  lemma /*{:_induction xs}*/ MinNumberOfClasses<T>(xs: seq<set<T>>)
    requires DisjointAnyTwo(xs)
    requires AllNonEmpty(xs)
    ensures |SetU(xs)| >= |xs|
    decreases xs
  {
    reveal_SetU();
    if |xs| == 0 {
    } else {
      calc == {
        |SetU(xs)|;
        |xs[0] + SetU(xs[1..])|;
        {
          DisjointFirst(xs);
        }
        |xs[0]| + |SetU(xs[1..])|;
      >=
        {
          MinNumberOfClasses(xs[1..]);
        }
        |xs[0]| + |xs[1..]|;
      }
    }
  }

  function {:opaque} SplitSet(xs: set<nat>, f: nat --> bool): (r: (set<nat>, set<nat>))
    requires forall x: nat {:trigger f.requires(x)} {:trigger x in xs} :: x in xs ==> f.requires(x)
    ensures xs == r.0 + r.1
    ensures r.0 * r.1 == {}
    ensures forall x: nat {:trigger f(x)} {:trigger x in r.0} :: x in r.0 ==> f(x)
    ensures forall x: nat {:trigger f(x)} {:trigger x in r.1} :: x in r.1 ==> !f(x)
    decreases xs
  {
    var asSeq: seq<nat> := SetToSequence(xs);
    SplitSeqTail(asSeq, f)
  }

  function {:tailrecursion true} {:opaque} SplitSeqOfSet(xs: seq<set<nat>>, f: nat -> bool): (r: seq<(set<nat>, set<nat>)>)
    ensures |xs| == |r|
    ensures forall k: int {:trigger r[k]} :: 0 <= k < |r| ==> r[k].0 * r[k].1 == {}
    ensures forall k: int {:trigger xs[k]} {:trigger r[k]} :: 0 <= k < |r| ==> r[k].0 + r[k].1 == xs[k]
    decreases xs
  {
    if |xs| == 0 then
      []
    else
      [SplitSet(xs[0], f)] + SplitSeqOfSet(xs[1..], f)
  }

  function {:tailrecursion true} {:opaque} SetToSequence(s: set<nat>): (r: seq<nat>)
    ensures |s| == |r|
    ensures forall i: int {:trigger i in r} {:trigger i in s} :: i in s ==> i in r
    ensures forall i: int {:trigger r[i]} :: 0 <= i < |r| ==> r[i] in s
    decreases s
  {
    if s == {} then
      []
    else
      ThereIsAMinimum(s); var x: nat :| x in s && forall y: nat {:trigger y in s} :: y in s ==> x <= y; [x] + SetToSequence(s - {x})
  }

  lemma ThereIsAMinimum(s: set<nat>)
    requires s != {}
    ensures exists x: int {:trigger x in s} :: x in s && forall y: int {:trigger y in s} :: y in s ==> x <= y
    decreases s
  {
    ghost var x :| x in s;
    if s == {x} {
    } else {
      ghost var s' := s - {x};
      assert s == s' + {x};
      ThereIsAMinimum(s');
    }
  }

  lemma /*{:_induction a, b}*/ DistribUnion<T>(a: seq<set<T>>, b: seq<set<T>>)
    ensures SetU(a + b) == SetU(a) + SetU(b)
    decreases a, b
  {
    reveal_SetU();
    if |a| == 0 {
      assert [] + b == b;
      assert SetU(a) == {};
    } else {
      calc == {
        SetU(a + b);
        {
          assert a == [a[0]] + a[1..];
        }
        SetU([a[0]] + a[1..] + b);
        {
          assert ([a[0]] + a[1..] + b)[1..] == a[1..] + b;
        }
        a[0] + SetU(a[1..] + b);
      }
    }
  }

  lemma /*{:_induction a, b, c}*/ DistribUnion3<T>(a: seq<set<T>>, b: seq<set<T>>, c: seq<set<T>>)
    ensures SetU(a + b + c) == SetU(a) + SetU(b) + SetU(c)
    decreases a, b, c
  {
    DistribUnion(a + b, c);
    DistribUnion(a, b);
  }

  lemma /*{:_induction xs}*/ SplitUnion1<T>(xs: seq<set<T>>, index: nat)
    requires index < |xs|
    ensures SetU(xs[..index]) + xs[index] + SetU(xs[index + 1..]) == SetU(xs)
    decreases xs, index
  {
    reveal_SetU();
    calc == {
      SetU(xs);
      {
        assert xs == xs[..index] + [xs[index]] + xs[index + 1..];
      }
      SetU(xs[..index] + [xs[index]] + xs[index + 1..]);
      {
        DistribUnion(xs[..index] + [xs[index]], xs[index + 1..]);
      }
      SetU(xs[..index] + [xs[index]]) + SetU(xs[index + 1..]);
      {
        DistribUnion(xs[..index], [xs[index]]);
      }
      SetU(xs[..index]) + SetU([xs[index]]) + SetU(xs[index + 1..]);
      SetU(xs[..index]) + xs[index] + SetU(xs[index + 1..]);
    }
  }

  lemma SizeOfNatsUpToNBound(n: nat, Y: set<nat>)
    requires Y == set x: int {:nowarn} | 0 <= x < n
    ensures |Y| == n
    decreases n, Y
  {
    if n == 0 || Y == {} {
    } else if n - 1 in Y {
      ghost var X := Y - {n - 1};
      assert X + {n - 1} == Y;
      assert |Y| == |X + {n - 1}| <= |X| + |{n - 1}|;
      assert |Y| <= |X| + 1;
      SizeOfNatsUpToNBound(n - 1, X);
    } else {
      assert n - 1 !in Y;
      assert Y == set x: int {:nowarn} | 0 <= x < n - 1;
      SizeOfNatsUpToNBound(n - 1, Y);
    }
  }

  lemma SizeOfUnion<T>(a: set<T>, b: set<T>)
    requires a * b == {}
    ensures |a + b| == |a| + |b|
    decreases a, b
  {
  }

  function {:tailrecursion true} {:opaque} SplitSeqTail(xs: seq<nat>, f: nat --> bool, cTrue: set<nat> := {}, cFalse: set<nat> := {}, index: nat := 0): (r: (set<nat>, set<nat>))
    requires index <= |xs|
    requires forall k: nat {:trigger f.requires(k)} {:trigger k in xs} :: k in xs ==> f.requires(k)
    requires forall k: int {:trigger k in cTrue + cFalse} {:trigger k in xs[..index]} :: k in xs[..index] <==> k in cTrue + cFalse
    requires cTrue * cFalse == {}
    requires forall k: nat {:trigger f(k)} {:trigger k in cTrue} :: k in cTrue ==> f(k)
    requires forall k: nat {:trigger f(k)} {:trigger k in cFalse} :: k in cFalse ==> !f(k)
    ensures forall k: int {:trigger k in r.0 + r.1} {:trigger k in xs} :: k in xs <==> k in r.0 + r.1
    ensures r.0 * r.1 == {}
    ensures forall k: nat {:trigger f(k)} {:trigger k in r.0} :: k in r.0 ==> f(k)
    ensures forall k: nat {:trigger f(k)} {:trigger k in r.1} :: k in r.1 ==> !f(k)
    decreases |xs| - index
  {
    if |xs| == index then
      (cTrue, cFalse)
    else if f(xs[index]) then
      assert xs[..index + 1] == xs[..index] + [xs[index]];
      SplitSeqTail(xs, f, cTrue + {xs[index]}, cFalse, index + 1)
    else
      assert xs[..index + 1] == xs[..index] + [xs[index]]; SplitSeqTail(xs, f, cTrue, cFalse + {xs[index]}, index + 1)
  }

  ghost function {:tailrecursion false} SplitSeq(xs: seq<nat>, f: nat -> bool): (r: (set<nat>, set<nat>))
    ensures forall k: nat {:trigger f(k)} {:trigger k in r.0} :: k in r.0 ==> f(k)
    ensures forall k: nat {:trigger f(k)} {:trigger k in r.1} :: k in r.1 ==> !f(k)
    ensures r.0 * r.1 == {}
    ensures forall k: nat {:trigger k in r.0} {:trigger f(k)} {:trigger k in xs} :: k in xs && f(k) <==> k in r.0
    ensures forall k: nat {:trigger k in r.1} {:trigger f(k)} {:trigger k in xs} :: k in xs && !f(k) <==> k in r.1
    ensures forall k: int {:trigger k in r.0 + r.1} {:trigger k in xs} :: k in xs <==> k in r.0 + r.1
    decreases xs
  {
    if |xs| == 0 then
      ({}, {})
    else
      ghost var r: (set<nat>, set<nat>) := SplitSeq(xs[1..], f); if f(xs[0]) then (r.0 + {xs[0]}, r.1) else (r.0, r.1 + {xs[0]})
  }

  lemma /*{:_induction r}*/ NonFlatDisjointImpliesFlatDisjoint(r: seq<seq<set<nat>>>, r': seq<set<nat>>)
    requires r' == Flatten(r)
    requires forall i: int, i': int {:trigger r[i'], r[i]} :: 0 <= i < i' < |r| ==> SetU(r[i]) * SetU(r[i']) == {}
    requires forall i: int {:trigger r[i]} :: 0 <= i < |r| ==> DisjointAnyTwo(r[i])
    ensures DisjointAnyTwo(Flatten(r))
    decreases r, r'
  {
    forall i: int, i': int | 0 <= i < i' < |r'|
      ensures r'[i] * r'[i'] == {}
    {
      var (i1, k1) := UnFlatIndex(r, r', i);
      var (i2, k2) := UnFlatIndex(r, r', i');
      FlatDistinctImpliesUnFlatDistinct(r, r', i, i');
    }
  }

  lemma /*{:_induction xs, r}*/ FlattenPreservesSetU(xs: seq<set<nat>>, r: seq<seq<set<nat>>>)
    requires |xs| == |r|
    requires forall i: int {:trigger xs[i]} {:trigger r[i]} :: 0 <= i < |r| ==> SetU(r[i]) == xs[i]
    ensures SetU(Flatten(r)) == SetU(xs)
    decreases xs, r
  {
    reveal_SetU();
    if |xs| == 0 {
    } else {
      calc == {
        SetU(Flatten(r));
        SetU(r[0] + Flatten(r[1..]));
        {
          DistribUnion(r[0], Flatten(r[1..]));
        }
        SetU(r[0]) + SetU(Flatten(r[1..]));
        xs[0] + SetU(Flatten(r[1..]));
        {
          FlattenPreservesSetU(xs[1..], r[1..]);
        }
        xs[0] + SetU(xs[1..]);
      }
    }
  }

  lemma /*{:_induction r}*/ FlattenAllNonEmpty(r: seq<seq<set<nat>>>, n: nat)
    requires forall i: int {:trigger r[i]} :: 0 <= i < |r| ==> AllNonEmpty(r[i])
    requires forall i: int, k: int {:trigger r[i][k]} :: 0 <= i < |r| && 0 <= k < |r[i]| ==> forall x: int {:trigger x in r[i][k]} :: x in r[i][k] ==> x < n
    ensures forall i: set<nat> {:trigger i in Flatten(r)} :: i in Flatten(r) ==> i != {}
    ensures AllNonEmpty(Flatten(r))
    ensures forall i: set<int> {:trigger i in Flatten(r)} :: i in Flatten(r) ==> forall x: int {:trigger x in i} :: x in i ==> x < n
    decreases r, n
  {
  }

  import opened MiscTypes
}

module ArgParser {
  method {:test} Main()
  {
    print ""hello! Testing ArgParser!\n"";
    var cli := new ArgumentParser(""<filename>"");
    cli.AddOption(""-o"", ""--one"");
    cli.AddOption(""-tw"", ""--two"", 2, ""don't do that!"");
    var r := [""-one"", ""--two"", ""a1"", ""a2"", ""-unknwon""];
    match cli.GetArgs(""-o"", r) {
      case {:split false} Success(a) =>
        print ""Success -o! has arguments:"", a, ""\n"";
      case {:split false} Failure(m) =>
        print ""No -o! "", ""\n"";
    }
    match cli.GetArgs(""--two"", r) {
      case {:split false} Success(a) =>
        print ""Success -two! has arguments: "", a, ""\n"";
      case {:split false} Failure(m) =>
        print ""No --two! "", ""\n"";
    }
    cli.PrintHelp();
  }

  import opened MiscTypes

  import Int

  datatype CLIOption = CLIOption(name: string, numArgs: nat, desc: string)

  class ArgumentParser {
    var knownArgs: map<string, CLIOption>
    var knownNameArgs: map<string, string>
    var knownKeys: seq<string>
    ghost var registeredOptions: set<string>
    var usageSuffix: string

    ghost predicate Inv()
      reads this
      decreases {this}
    {
      multiset(knownArgs.Keys) == multiset(knownKeys) &&
      knownArgs.Keys + knownNameArgs.Keys == registeredOptions
    }

    constructor (s: string := """")
      ensures Inv()
      ensures forall k: string {:trigger Canonical(k)} {:trigger k in registeredOptions} :: k in registeredOptions ==> Canonical(k) in knownArgs.Keys
      ensures knownArgs.Keys == {""--help""}
      decreases s
    {
      usageSuffix := s;
      knownArgs := map[""--help"" := CLIOption(""-h"", 0, ""Display help and exit"")];
      knownNameArgs := map[""-h"" := ""--help""];
      knownKeys := [""--help""];
      registeredOptions := {""--help"", ""-h""};
    }

    method {:verify true} AddOption(opname: string, name: string, numArgs: nat := 0, help: string := ""No help provided"")
      requires Inv()
      requires name !in knownArgs.Keys
      modifies `knownArgs, `knownKeys, `knownNameArgs, `registeredOptions
      ensures Inv()
      ensures old(knownArgs.Keys) <= knownArgs.Keys
      ensures knownArgs.Keys == old(knownArgs.Keys) + {name}
      ensures forall k: seq<char> {:trigger old(knownArgs[k])} {:trigger knownArgs[k]} {:trigger k in knownArgs.Keys} {:trigger k in old(knownArgs.Keys)} :: (k in old(knownArgs.Keys) ==> k in knownArgs.Keys) && (k in old(knownArgs.Keys) ==> knownArgs[k] == old(knownArgs[k]))
      ensures name in knownArgs.Keys && knownArgs[name].numArgs == numArgs
      decreases opname, name, numArgs, help
    {
      knownArgs := knownArgs[name := CLIOption(opname, numArgs, help)];
      knownNameArgs := knownNameArgs[opname := name];
      if name !in knownKeys {
        knownKeys := knownKeys + [name];
      }
      registeredOptions := registeredOptions + {opname, name};
    }

    method {:verify true} PrintHelp()
      requires Inv()
      ensures Inv()
    {
      print ""usage: <this program> "";
      for i: int := 0 to |knownKeys| {
        assert knownKeys[i] in multiset(knownKeys);
        var k := knownArgs[knownKeys[i]];
        print "" ["", knownKeys[i], ""] "";
        for i: int := 0 to k.numArgs {
          print "" arg"", i;
        }
      }
      print "" "", usageSuffix;
      print ""\n\n"";
      print ""options"", ""\n"";
      var maxL := MaxValueFast(knownKeys);
      for i: int := 0 to |knownKeys| {
        assert knownKeys[i] in multiset(knownKeys);
        var k := knownArgs[knownKeys[i]];
        SameMax(knownKeys);
        print knownKeys[i], seq(maxL - |knownKeys[i]| + 2, (_ /* _v0 */: int) => ' '), "" ["", k.name, ""] "", k.desc;
        print ""\n"";
      }
    }

    function GetArgs(key: string, s: seq<string>): (r: Try<seq<string>>)
      requires Inv()
      reads this
      ensures Inv()
      ensures r.Success? ==> key in knownArgs.Keys && |r.v| == knownArgs[key].numArgs
      decreases {this}, key, s
    {
      if |s| == 0 then
        Failure(""Not found"")
      else if key !in knownArgs.Keys then
        Failure(""Not a key"")
      else if Canonical(s[0]) == key then
        var opt: CLIOption := knownArgs[key];
        var numArgs: nat := opt.numArgs;
        if |s[1..]| < numArgs then
          Failure(""argument "" + s[0] + "" needs more arguments"")
        else
          Success(s[1..][..numArgs])
      else
        GetArgs(key, s[1..])
    }

    function Canonical(s: string): string
      reads `knownNameArgs
      decreases {this}, s
    {
      if s in knownNameArgs then
        knownNameArgs[s]
      else
        s
    }

    ghost function MaxValue(s: seq<string>): (r: nat)
      ensures forall i: int {:trigger s[i]} :: 0 <= i < |s| ==> |s[i]| <= r
      decreases s
    {
      if |s| == 0 then
        0
      else
        Int.Max(|s[0]|, MaxValue(s[1..]))
    }

    function {:tailrecursion true} MaxValueFast(s: seq<string>, max: nat := 0): (r: nat)
      decreases s, max
    {
      if |s| == 0 then
        max
      else
        MaxValueFast(s[1..], Int.Max(|s[0]|, max))
    }

    lemma /*{:_induction this, s}*/ SameMax(s: seq<string>)
      ensures MaxValue(s) == MaxValueFast(s, 0)
      ensures forall i: int {:trigger s[i]} :: 0 <= i < |s| ==> |s[i]| <= MaxValueFast(s)
      decreases s
    {
      if |s| > 0 {
        SameMaxExtractFirst(s[1..], s[0]);
      }
    }

    lemma /*{:_induction this, s, e}*/ SameMaxExtractFirst(s: seq<string>, e: string)
      ensures MaxValue([e] + s) == MaxValueFast(s, |e|)
      decreases s, e
    {
    }
  }
}

module PrettyPrinters {
  method {:tailrec} PrintInstructions(s: seq<Instruction>)
    decreases s
  {
    if |s| > 0 {
      var formattedAddress := if s[0].address < Int.TWO_32 then Hex.U32ToHex(s[0].address as Int.u32) else ""OutofRange"";
      print formattedAddress, "": "", s[0].ToString(), ""\n"";
      PrintInstructions(s[1..]);
    }
  }

  method {:tailrec} PrintSegments(xs: seq<ValidLinSeg>, num: nat := 0)
    decreases xs, num
  {
    assert forall i: int {:trigger xs[i]} :: 0 <= i < |xs| ==> forall k: int {:trigger xs[i].Ins()[k]} :: 0 <= k < |xs[i].Ins()| ==> xs[i].Ins()[k].op.IsValid();
    if |xs| > 0 {
      print ""--------------------------------------------\n"";
      print ""Segment "", num, ""\n"";
      var k := xs[0].WeakestPreOperands();
      var l := xs[0].WeakestPreCapacity(0);
      if xs[0].JUMPSeg? || xs[0].JUMPISeg? {
        print ""JUMP/JUMPI: tgt address at the end: "";
        var r := SegBuilder.JUMPResolver(xs[0]);
        match r {
          case {:split false} Left(v) =>
            match v {
              case {:split false} Value(address) =>
                print ""0x"" + NatToHex(address as nat);
              case {:split false} Random(msg) =>
                print ""Could not determine stack value"";
            }
          case {:split false} Right(stackPos) =>
            print ""Peek("", stackPos, "")"";
        }
        print ""\n"";
      }
      if xs[0].CONTSeg? {
        if xs[0].lastIns.op.opcode != INVALID {
          var nextPC := xs[0].StartAddressNextSeg();
          print ""CONT: PC of instruction after last is: "" + "" 0x"" + NatToHex(nextPC) + ""\n"";
        } else {
          print ""CONT: has an invalid instruction"" + ""\n"";
        }
        print ""WeakestPre Operands:"", k, ""\n"";
        print ""WeakestPre Capacity:"", l, ""\n"";
        print ""Net Stack Effect:"", xs[0].StackEffect(), ""\n"";
      }
      PrintInstructions(xs[0].Ins());
      PrintSegments(xs[1..], num + 1);
    }
  }

  function {:tailrecursion true} CollectJumpDest(xs: seq<ProofObj>): seq<nat>
    decreases xs
  {
    if |xs| == 0 then
      []
    else
      xs[0].CollectJumpDest() + CollectJumpDest(xs[1..])
  }

  function {:tailrecursion true} CollectJumpDestAsString(xs: seq<nat>): string
    decreases xs
  {
    if |xs| == 0 then
      []
    else
      "" ensures s.IsJumpDest(0x"" + NatToHex(xs[0]) + "" as u256)\n"" + CollectJumpDestAsString(xs[1..])
  }

  method PrintProofObjectToDafny(xs: seq<ProofObj>, pathToEVMDafny: string := """")
    requires forall i: int {:trigger xs[i]} :: 0 <= i < |xs| ==> xs[i].IsValid()
    decreases xs, pathToEVMDafny
  {
    if |pathToEVMDafny| > 0 {
      print ""include \"""", pathToEVMDafny, ""/src/dafny/state.dfy\"""", ""\n"";
      print ""include \"""", pathToEVMDafny, ""/src/dafny/bytecode.dfy\"""", ""\n"";
      print ""\n"";
    }
    print ""module DafnyEVMProofObject {"", ""\n"";
    print ""import opened Int"", ""\n"";
    print ""import EvmState"", ""\n"";
    print ""import opened Bytecode"", ""\n"";
    var j := CollectJumpDestAsString(CollectJumpDest(xs));
    if |j| > 0 {
      print ""/** Lemma for Jumpdest */"", ""\n"";
      print ""lemma {:axiom} ValidJumpDest(s: EvmState.ExecutingState)"", ""\n"";
      print j;
      print ""\n"";
    }
    PrintProofObjectBody(xs);
    print ""}"", ""\n"";
  }

  method {:tailrec} PrintProofObjectBody(xs: seq<ProofObj>, num: nat := 0)
    requires forall i: int {:trigger xs[i]} :: 0 <= i < |xs| ==> xs[i].IsValid()
    decreases xs, num
  {
    if |xs| > 0 {
      var startAddress := NatToHex(xs[0].s.Ins()[0].address);
      print ""\n/** Code starting at 0x"", startAddress, "" */\n"";
      print ""function {:opaque} ExecuteFromTag_"", num, ""(s0: EvmState.ExecutingState): (s': EvmState.State)\n"";
      print ""  requires s0.PC() == 0x"", startAddress, "" as nat\n"";
      print ""  // Net Operands effect "";
      print xs[0].s.NetOpEffect();
      print ""\n"";
      print ""  requires s0.Operands() >= "";
      print xs[0].wpOp;
      print ""\n"";
      print ""  // Net Capacity effect "";
      print xs[0].s.NetCapEffect();
      print ""\n"";
      print ""  requires s0.Capacity() >= "";
      print xs[0].wpCap;
      print ""\n"";
      assert xs[0].s.IsValid();
      if xs[0].JUMP? && xs[0].s.lastIns.op.IsJump() {
        {
          match xs[0].tgt
          case {:split false} Right(v) =>
            print ""  requires s0.IsJumpDest(s0.Peek("", v, ""))\n"";
          case {:split false} _ /* _v0 */ =>
            print """";
        }
      }
      match xs[0] {
        case {:split false} JUMP(s, _ /* _v1 */, _ /* _v2 */, tgt, _ /* _v3 */) =>
          print ""  ensures s'.EXECUTING?\n"";
          print ""  ensures s'.PC() ==  "";
          {
            match tgt
            case {:split false} Left(xc) =>
              match xc {
                case {:split false} Value(v) =>
                  print ""0x"", NatToHex(xc.Extract() as nat);
                case {:split false} _ /* _v4 */ =>
                  print ""Could not extract value "";
              }
            case {:split false} Right(v) =>
              print ""s0.Peek("", v, "") as nat"";
          }
          if s.lastIns.op.opcode == JUMPI {
            print "" || s'.PC() == 0x"", NatToHex(s.lastIns.address + 1);
          }
          print ""\n"";
          var n := xs[0].StackEffect();
          print ""  ensures s'.Operands() == s0.Operands()"";
          if n >= 0 {
            print "" + "", n;
          } else {
            print "" - "", -n;
          }
          print ""\n"";
        case {:split false} CONT(s, _ /* _v5 */, _ /* _v6 */, _ /* _v7 */) =>
          print ""  ensures s'.EXECUTING?\n"";
          if s.lastIns.op.opcode != INVALID {
            var nextPC := s.StartAddressNextSeg();
            print ""  ensures s'.PC() == 0x"" + NatToHex(nextPC) + ""\n"";
            var n := xs[0].StackEffect();
            print ""  ensures s'.Operands() == s0.Operands()"";
            if n >= 0 {
              print "" + "", n;
            } else {
              print "" - "", -n;
            }
          } else {
            print ""  Last instruction is invalid"";
          }
          print ""\n"";
        case {:split false} TERMINAL(s, _ /* _v8 */, _ /* _v9 */, _ /* _v10 */) =>
          print ""  ensures s'.RETURNS?\n"";
      }
      print ""{\n"";
      print ""  ValidJumpDest(s0);\n"";
      PrintInstructionsToDafny(xs[0].s.Ins());
      print ""  s"", |xs[0].s.Ins()|, ""\n"";
      print ""}\n"";
      PrintProofObjectBody(xs[1..], num + 1);
    }
  }

  method PrintInstructionsToDafny(xs: seq<ValidInstruction>, pos: nat := 0)
    decreases xs, pos
  {
    if |xs| > 0 {
      var k := PrintInstructionToDafny(xs[0], pos, pos + 1);
      print ""  "", k, ""\n"";
      PrintInstructionsToDafny(xs[1..], pos + 1);
    }
  }

  import opened EVMOpcodes

  import opened Hex

  import opened Int

  import opened Instructions

  import opened LinSegments

  import SegBuilder

  import opened ProofObject

  import opened EVMConstants

  import opened PrettyIns
}

module Splitter {
  function BuildSeg(xs: seq<ValidInstruction>, lastInst: ValidInstruction): ValidLinSeg
    requires forall i: int {:trigger (xs + [lastInst])[i]} :: 1 <= i <= |xs| ==> (xs + [lastInst])[i].op.opcode != JUMPDEST
    decreases xs, lastInst
  {
    match lastInst.op.opcode
    case JUMP =>
      JUMPSeg(xs, lastInst)
    case JUMPI =>
      JUMPISeg(xs, lastInst)
    case RETURN =>
      RETURNSeg(xs, lastInst)
    case REVERT =>
      STOPSeg(xs, lastInst)
    case STOP =>
      STOPSeg(xs, lastInst)
    case INVALID =>
      INVALIDSeg(xs, lastInst)
    case _ /* _v0 */ =>
      CONTSeg(xs, lastInst)
  }

  function {:opaque} SplitUpToTerminal(xs: seq<ValidInstruction>, maxSegSize: Option<nat> := None, curseq: seq<ValidInstruction> := [], collected: seq<ValidLinSeg> := []): (r: seq<ValidLinSeg>)
    requires forall i: int, i': int {:trigger xs[i'], xs[i]} :: 0 <= i < i' < |xs| ==> xs[i].address < xs[i'].address
    requires forall i: int {:trigger curseq[i]} :: 1 <= i < |curseq| ==> curseq[i].op.opcode != JUMPDEST
    requires forall i: int {:trigger collected[i]} :: 0 <= i < |collected| ==> |collected[i].Ins()| > 0
    requires forall i: int, k: int {:trigger curseq[i], xs[k]} :: 0 <= i < |curseq| && 0 <= k < |xs| ==> xs[k].address > curseq[i].address
    requires forall i: int, k: int {:trigger collected[i], xs[k]} :: 0 <= i < |collected| && 0 <= k < |xs| ==> xs[k].address > collected[i].StartAddress()
    requires forall i: int, k: int {:trigger curseq[i], collected[k]} :: 0 <= i < |curseq| && 0 <= k < |collected| ==> collected[k].StartAddress() < curseq[i].address
    requires forall i: int, i': int {:trigger collected[i'], collected[i]} :: 0 <= i < i' < |collected| ==> collected[i].StartAddress() < collected[i'].StartAddress()
    ensures forall i: int {:trigger r[i]} :: 0 <= i < |r| ==> |r[i].Ins()| > 0
    ensures forall i: int, i': int {:trigger r[i'], r[i]} :: 0 <= i < i' < |r| ==> r[i].StartAddress() < r[i'].StartAddress()
    decreases xs, maxSegSize, curseq, collected
  {
    if |xs| == 0 then
      if |curseq| == 0 then
        collected
      else
        var newSeg: ValidLinSeg := BuildSeg(curseq[..|curseq| - 1], curseq[|curseq| - 1]); collected + [newSeg]
    else if xs[0].op.opcode == JUMPDEST then
      if |curseq| == 0 then
        SplitUpToTerminal(xs[1..], maxSegSize, [xs[0]], collected)
      else
        var newSeg: ValidLinSeg := BuildSeg(curseq[..|curseq| - 1], curseq[|curseq| - 1]); SplitUpToTerminal(xs[1..], maxSegSize, [xs[0]], collected + [newSeg])
    else if xs[0].IsTerminal() then
      assert xs[0].op.opcode != JUMPDEST;
      var newSeg: ValidLinSeg := BuildSeg(curseq, xs[0]);
      SplitUpToTerminal(xs[1..], maxSegSize, [], collected + [newSeg])
    else if maxSegSize.Some? && |curseq| >= maxSegSize.v then
      var newSeg: ValidLinSeg := BuildSeg(curseq, xs[0]);
      SplitUpToTerminal(xs[1..], maxSegSize, [], collected + [newSeg])
    else
      assert !xs[0].IsTerminal() && xs[0].op.opcode != JUMPDEST; SplitUpToTerminal(xs[1..], maxSegSize, curseq + [xs[0]], collected)
  }

  import opened EVMOpcodes

  import opened MiscTypes

  import opened Instructions

  import opened EVMConstants

  import opened LinSegments
}

module BinaryDecoder {
  function {:tailrecursion true} {:opaque} Disassemble(s: string, p: seq<ValidInstruction> := [], next: nat := 0): (r: seq<ValidInstruction>)
    requires forall i: int {:trigger p[i]} :: 0 <= i < |p| ==> p[i].address < next
    requires forall i: int, i': int {:trigger p[i'], p[i]} :: 0 <= i < i' < |p| ==> p[i].address < p[i'].address
    ensures forall i: int, i': int {:trigger r[i'], r[i]} :: 0 <= i < i' < |r| ==> r[i].address < r[i'].address
    decreases |s|
  {
    if |s| == 0 then
      p
    else if |s| == 1 then
      p + [Instruction(Decode(INVALID), ""Odd number of characters ending in "" + s, next)]
    else
      assert |s| >= 2; match HexToU8(s[..2]) case None() => p + [Instruction(Decode(INVALID), ""'"" + s[..2] + ""' is not an Hex number"", next)] case Some(v) => var op: Opcode := Decode(v); if op.Args() > 0 then if |s[2..]| < 2 * op.Args() || !IsHexString(s[2..][..2 * op.Args()]) then p + [Instruction(Decode(INVALID), ""not enough arguments for opcode "" + op.name, next)] else assert |s[2..][2 * op.Args()..]| < |s|; Disassemble(s[2..][2 * op.Args()..], p + [Instruction(op, s[2..][..2 * op.Args()], next)], next + 1 + op.Args()) else Disassemble(s[2..], p + [Instruction(op, [], next)], next + 1)
  }

  function {:tailrecursion true} {:opaque} DisassembleU8(s: seq<u8>, p: seq<ValidInstruction> := [], next: nat := 0): (r: seq<ValidInstruction>)
    requires forall i: int {:trigger p[i]} :: 0 <= i < |p| ==> p[i].address < next
    requires forall i: int, i': int {:trigger p[i'], p[i]} :: 0 <= i < i' < |p| ==> p[i].address < p[i'].address
    ensures forall i: int, i': int {:trigger r[i'], r[i]} :: 0 <= i < i' < |r| ==> r[i].address < r[i'].address
    decreases |s|
  {
    if |s| == 0 then
      p
    else
      var op: Opcode := Decode(s[0]); if op.Args() > 0 then if |s[1..]| < op.Args() then p + [Instruction(Decode(INVALID), ""not enough arguments for opcode "" + op.name, next)] else assert |s[1..][op.Args()..]| < |s|; DisassembleU8(s[1..][op.Args()..], p + [Instruction(op, HexHelper(s[1..][..op.Args()]), next)], next + 1 + op.Args()) else DisassembleU8(s[1..], p + [Instruction(op, [], next)], next + 1)
  }

  import opened OpcodeDecoder

  import opened EVMOpcodes

  import opened Hex

  import opened Int

  import opened EVMConstants

  import opened Instructions

  import opened MiscTypes
}

module OpcodeDecoder {
  function Decode(op: u8): Opcode
    ensures Decode(op).IsValid()
    decreases op
  {
    match op
    case STOP =>
      SysOp(""STOP"", STOP, 0, 0, 0, 0)
    case ADD =>
      ArithOp(""ADD"", ADD)
    case MUL =>
      ArithOp(""MUL"", MUL)
    case SUB =>
      ArithOp(""SUB"", SUB)
    case DIV =>
      ArithOp(""DIV"", DIV)
    case SDIV =>
      ArithOp(""SDIV"", SDIV)
    case MOD =>
      ArithOp(""MOD"", MOD)
    case SMOD =>
      ArithOp(""SMOD"", SMOD)
    case ADDMOD =>
      ArithOp(""ADDMOD"", ADDMOD)
    case MULMOD =>
      ArithOp(""MULMOD"", MULMOD)
    case EXP =>
      ArithOp(""EXP"", EXP)
    case SIGNEXTEND =>
      ArithOp(""SIGNEXTEND"", SIGNEXTEND)
    case LT =>
      CompOp(""LT"", LT)
    case GT =>
      CompOp(""GT"", GT)
    case SLT =>
      CompOp(""SLT"", SLT)
    case SGT =>
      CompOp(""SGT"", SGT)
    case EQ =>
      CompOp(""EQ"", EQ)
    case ISZERO =>
      CompOp(""ISZERO"", ISZERO, 0, 1, 1, 1)
    case AND =>
      BitwiseOp(""AND"", AND, 0, 2, 1, 2)
    case OR =>
      BitwiseOp(""OR"", OR, 0, 2, 1, 2)
    case XOR =>
      BitwiseOp(""XOR"", XOR, 0, 2, 1, 2)
    case NOT =>
      BitwiseOp(""NOT"", NOT, 0, 1, 1, 1)
    case BYTE =>
      BitwiseOp(""BYTE"", BYTE, 0, 2, 1, 2)
    case SHL =>
      BitwiseOp(""SHL"", SHL, 0, 2, 1, 2)
    case SHR =>
      BitwiseOp(""SHR"", SHR, 0, 2, 1, 2)
    case SAR =>
      BitwiseOp(""SAR"", SAR, 0, 2, 1, 2)
    case KECCAK256 =>
      KeccakOp(""KECCAK256"", KECCAK256, 0, 2, 1, 2)
    case ADDRESS =>
      EnvOp(""ADDRESS"", ADDRESS, 1, 0, 1, 0)
    case BALANCE =>
      EnvOp(""BALANCE"", BALANCE, 0, 1, 1, 1)
    case ORIGIN =>
      EnvOp(""ORIGIN"", ORIGIN, 1, 0, 1, 0)
    case CALLER =>
      EnvOp(""CALLER"", CALLER, 1, 0, 1, 0)
    case CALLVALUE =>
      EnvOp(""CALLVALUE"", CALLVALUE, 1, 0, 1, 0)
    case CALLDATALOAD =>
      EnvOp(""CALLDATALOAD"", CALLDATALOAD, 0, 1, 1, 1)
    case CALLDATASIZE =>
      EnvOp(""CALLDATASIZE"", CALLDATASIZE, 1, 0, 1, 0)
    case CALLDATACOPY =>
      EnvOp(""CALLDATACOPY"", CALLDATACOPY, 0, 3, 0, 3)
    case CODESIZE =>
      EnvOp(""CODESIZE"", CODESIZE, 1, 0, 1, 0)
    case CODECOPY =>
      EnvOp(""CODECOPY"", CODECOPY, 0, 3, 0, 3)
    case GASPRICE =>
      EnvOp(""GASPRICE"", GASPRICE, 1, 0, 1, 0)
    case EXTCODESIZE =>
      EnvOp(""EXTCODESIZE"", EXTCODESIZE, 0, 1, 1, 1)
    case EXTCODECOPY =>
      EnvOp(""EXTCODECOPY"", EXTCODECOPY, 0, 4, 0, 4)
    case RETURNDATASIZE =>
      EnvOp(""RETURNDATASIZE"", RETURNDATASIZE, 1, 0, 1, 0)
    case RETURNDATACOPY =>
      EnvOp(""RETURNDATACOPY"", RETURNDATACOPY, 0, 3, 0, 3)
    case EXTCODEHASH =>
      EnvOp(""EXTCODEHASH"", EXTCODEHASH, 0, 1, 1, 1)
    case BLOCKHASH =>
      EnvOp(""BLOCKHASH"", BLOCKHASH, 0, 1, 1, 1)
    case COINBASE =>
      EnvOp(""COINBASE"", COINBASE, 1, 0, 1, 0)
    case TIMESTAMP =>
      EnvOp(""TIMESTAMP"", TIMESTAMP, 1, 0, 1, 0)
    case NUMBER =>
      EnvOp(""NUMBER"", NUMBER, 1, 0, 1, 0)
    case DIFFICULTY =>
      EnvOp(""DIFFICULTY"", DIFFICULTY, 1, 0, 1, 0)
    case GASLIMIT =>
      EnvOp(""GASLIMIT"", GASLIMIT, 1, 0, 1, 0)
    case CHAINID =>
      EnvOp(""CHAINID"", CHAINID, 1, 0, 1, 0)
    case SELFBALANCE =>
      EnvOp(""SELFBALANCE"", SELFBALANCE, 1, 0, 1, 0)
    case BASEFEE =>
      EnvOp(""BASEFEE"", BASEFEE, 1, 0, 1, 0)
    case POP =>
      StackOp(""POP"", POP, 0, 1, 0, 1)
    case MLOAD =>
      MemOp(""MLOAD"", MLOAD, 0, 1, 1, 1)
    case MSTORE =>
      MemOp(""MSTORE"", MSTORE, 0, 2, 0, 2)
    case MSTORE8 =>
      MemOp(""MSTORE8"", MSTORE8, 0, 2, 0, 2)
    case SLOAD =>
      StorageOp(""SLOAD"", SLOAD, 0, 1, 1, 1)
    case SSTORE =>
      StorageOp(""SSTORE"", SSTORE, 0, 2, 0, 2)
    case JUMP =>
      JumpOp(""JUMP"", JUMP, 0, 1, 0, 1)
    case JUMPI =>
      JumpOp(""JUMPI"", JUMPI, 0, 2, 0, 2)
    case RJUMP =>
      JumpOp(""RJUMP"", RJUMP, 0, 1, 0, 1)
    case RJUMPI =>
      JumpOp(""RJUMPI"", RJUMPI, 0, 2, 0, 2)
    case RJUMPV =>
      JumpOp(""RJUMPV"", RJUMPV, 0, 2, 0, 2)
    case PC =>
      RunOp(""PC"", PC, 1, 0, 1, 0)
    case MSIZE =>
      RunOp(""MSIZE"", MSIZE, 1, 0, 1, 0)
    case GAS =>
      RunOp(""GAS"", GAS, 1, 0, 1, 0)
    case JUMPDEST =>
      JumpOp(""JUMPDEST"", JUMPDEST, 0, 0, 0, 0)
    case PUSH0 =>
      StackOp(""PUSH0"", PUSH0, 1, 0, 1, 0)
    case PUSH1 =>
      StackOp(""PUSH1"", PUSH1, 1, 0, 1, 0)
    case PUSH2 =>
      StackOp(""PUSH2"", PUSH2, 1, 0, 1, 0)
    case PUSH3 =>
      StackOp(""PUSH3"", PUSH3, 1, 0, 1, 0)
    case PUSH4 =>
      StackOp(""PUSH4"", PUSH4, 1, 0, 1, 0)
    case PUSH5 =>
      StackOp(""PUSH5"", PUSH5, 1, 0, 1, 0)
    case PUSH6 =>
      StackOp(""PUSH6"", PUSH6, 1, 0, 1, 0)
    case PUSH7 =>
      StackOp(""PUSH7"", PUSH7, 1, 0, 1, 0)
    case PUSH8 =>
      StackOp(""PUSH8"", PUSH8, 1, 0, 1, 0)
    case PUSH9 =>
      StackOp(""PUSH9"", PUSH9, 1, 0, 1, 0)
    case PUSH10 =>
      StackOp(""PUSH10"", PUSH10, 1, 0, 1, 0)
    case PUSH11 =>
      StackOp(""PUSH11"", PUSH11, 1, 0, 1, 0)
    case PUSH12 =>
      StackOp(""PUSH12"", PUSH12, 1, 0, 1, 0)
    case PUSH13 =>
      StackOp(""PUSH13"", PUSH13, 1, 0, 1, 0)
    case PUSH14 =>
      StackOp(""PUSH14"", PUSH14, 1, 0, 1, 0)
    case PUSH15 =>
      StackOp(""PUSH15"", PUSH15, 1, 0, 1, 0)
    case PUSH16 =>
      StackOp(""PUSH16"", PUSH16, 1, 0, 1, 0)
    case PUSH17 =>
      StackOp(""PUSH17"", PUSH17, 1, 0, 1, 0)
    case PUSH18 =>
      StackOp(""PUSH18"", PUSH18, 1, 0, 1, 0)
    case PUSH19 =>
      StackOp(""PUSH19"", PUSH19, 1, 0, 1, 0)
    case PUSH20 =>
      StackOp(""PUSH20"", PUSH20, 1, 0, 1, 0)
    case PUSH21 =>
      StackOp(""PUSH21"", PUSH21, 1, 0, 1, 0)
    case PUSH22 =>
      StackOp(""PUSH22"", PUSH22, 1, 0, 1, 0)
    case PUSH23 =>
      StackOp(""PUSH23"", PUSH23, 1, 0, 1, 0)
    case PUSH24 =>
      StackOp(""PUSH24"", PUSH24, 1, 0, 1, 0)
    case PUSH25 =>
      StackOp(""PUSH25"", PUSH25, 1, 0, 1, 0)
    case PUSH26 =>
      StackOp(""PUSH26"", PUSH26, 1, 0, 1, 0)
    case PUSH27 =>
      StackOp(""PUSH27"", PUSH27, 1, 0, 1, 0)
    case PUSH28 =>
      StackOp(""PUSH28"", PUSH28, 1, 0, 1, 0)
    case PUSH29 =>
      StackOp(""PUSH29"", PUSH29, 1, 0, 1, 0)
    case PUSH30 =>
      StackOp(""PUSH30"", PUSH30, 1, 0, 1, 0)
    case PUSH31 =>
      StackOp(""PUSH31"", PUSH31, 1, 0, 1, 0)
    case PUSH32 =>
      StackOp(""PUSH32"", PUSH32, 1, 0, 1, 0)
    case DUP1 =>
      StackOp(""DUP1"", DUP1, minCapacity := 1, minOperands := 1, pushes := 1, pops := 0)
    case DUP2 =>
      StackOp(""DUP2"", DUP2, minCapacity := 1, minOperands := 2, pushes := 1, pops := 0)
    case DUP3 =>
      StackOp(""DUP3"", DUP3, minCapacity := 1, minOperands := 3, pushes := 1, pops := 0)
    case DUP4 =>
      StackOp(""DUP4"", DUP4, minCapacity := 1, minOperands := 4, pushes := 1, pops := 0)
    case DUP5 =>
      StackOp(""DUP5"", DUP5, minCapacity := 1, minOperands := 5, pushes := 1, pops := 0)
    case DUP6 =>
      StackOp(""DUP6"", DUP6, minCapacity := 1, minOperands := 6, pushes := 1, pops := 0)
    case DUP7 =>
      StackOp(""DUP7"", DUP7, minCapacity := 1, minOperands := 7, pushes := 1, pops := 0)
    case DUP8 =>
      StackOp(""DUP8"", DUP8, minCapacity := 1, minOperands := 8, pushes := 1, pops := 0)
    case DUP9 =>
      StackOp(""DUP9"", DUP9, minCapacity := 1, minOperands := 9, pushes := 1, pops := 0)
    case DUP10 =>
      StackOp(""DUP10"", DUP10, minCapacity := 1, minOperands := 10, pushes := 1, pops := 0)
    case DUP11 =>
      StackOp(""DUP11"", DUP11, minCapacity := 1, minOperands := 11, pushes := 1, pops := 0)
    case DUP12 =>
      StackOp(""DUP12"", DUP12, minCapacity := 1, minOperands := 12, pushes := 1, pops := 0)
    case DUP13 =>
      StackOp(""DUP13"", DUP13, minCapacity := 1, minOperands := 13, pushes := 1, pops := 0)
    case DUP14 =>
      StackOp(""DUP14"", DUP14, minCapacity := 1, minOperands := 14, pushes := 1, pops := 0)
    case DUP15 =>
      StackOp(""DUP15"", DUP15, minCapacity := 1, minOperands := 15, pushes := 1, pops := 0)
    case DUP16 =>
      StackOp(""DUP16"", DUP16, minCapacity := 1, minOperands := 16, pushes := 1, pops := 0)
    case SWAP1 =>
      StackOp(""SWAP1"", SWAP1, minCapacity := 0, minOperands := 1 + 1)
    case SWAP2 =>
      StackOp(""SWAP2"", SWAP2, minCapacity := 0, minOperands := 2 + 1)
    case SWAP3 =>
      StackOp(""SWAP3"", SWAP3, minCapacity := 0, minOperands := 3 + 1)
    case SWAP4 =>
      StackOp(""SWAP4"", SWAP4, minCapacity := 0, minOperands := 4 + 1)
    case SWAP5 =>
      StackOp(""SWAP5"", SWAP5, minCapacity := 0, minOperands := 5 + 1)
    case SWAP6 =>
      StackOp(""SWAP6"", SWAP6, minCapacity := 0, minOperands := 6 + 1)
    case SWAP7 =>
      StackOp(""SWAP7"", SWAP7, minCapacity := 0, minOperands := 7 + 1)
    case SWAP8 =>
      StackOp(""SWAP8"", SWAP8, minCapacity := 0, minOperands := 8 + 1)
    case SWAP9 =>
      StackOp(""SWAP9"", SWAP9, minCapacity := 0, minOperands := 9 + 1)
    case SWAP10 =>
      StackOp(""SWAP10"", SWAP10, minCapacity := 0, minOperands := 10 + 1)
    case SWAP11 =>
      StackOp(""SWAP11"", SWAP11, minCapacity := 0, minOperands := 11 + 1)
    case SWAP12 =>
      StackOp(""SWAP12"", SWAP12, minCapacity := 0, minOperands := 12 + 1)
    case SWAP13 =>
      StackOp(""SWAP13"", SWAP13, minCapacity := 0, minOperands := 13 + 1)
    case SWAP14 =>
      StackOp(""SWAP14"", SWAP14, minCapacity := 0, minOperands := 14 + 1)
    case SWAP15 =>
      StackOp(""SWAP15"", SWAP15, minCapacity := 0, minOperands := 15 + 1)
    case SWAP16 =>
      StackOp(""SWAP16"", SWAP16, minCapacity := 0, minOperands := 16 + 1)
    case LOG0 =>
      LogOp(""LOG0"", LOG0, 0, 0 + 2, 0, 0 + 2)
    case LOG1 =>
      LogOp(""LOG1"", LOG1, 0, 1 + 2, 0, 1 + 2)
    case LOG2 =>
      LogOp(""LOG2"", LOG2, 0, 2 + 2, 0, 2 + 2)
    case LOG3 =>
      LogOp(""LOG3"", LOG3, 0, 3 + 2, 0, 3 + 2)
    case LOG4 =>
      LogOp(""LOG4"", LOG4, 0, 4 + 2, 0, 4 + 2)
    case CREATE =>
      SysOp(""CREATE"", CREATE, 1, 3, 1, 3)
    case CALL =>
      SysOp(""CALL"", CALL, 1, 7, 1, 7)
    case CALLCODE =>
      SysOp(""CALLCODE"", CALLCODE, 1, 7, 1, 7)
    case RETURN =>
      SysOp(""RETURN"", RETURN, 0, 2, 0, 2)
    case DELEGATECALL =>
      SysOp(""DELEGATECALL"", DELEGATECALL, 1, 6, 1, 6)
    case CREATE2 =>
      SysOp(""CREATE2"", CREATE2, 1, 4, 1, 4)
    case STATICCALL =>
      SysOp(""STATICCALL"", STATICCALL, 1, 6, 1, 6)
    case REVERT =>
      SysOp(""REVERT"", REVERT, 0, 2, 0, 2)
    case SELFDESTRUCT =>
      SysOp(""SELFDESTRUCT"", SELFDESTRUCT, 0, 1, 0, 1)
    case _ /* _v0 */ =>
      SysOp(""INVALID"", INVALID, 0, 0, 0, 0)
  }

  import opened Int

  import opened EVMOpcodes

  import opened EVMConstants
}
")]

//-----------------------------------------------------------------------------
//
// Copyright by the contributors to the Dafny Project
// SPDX-License-Identifier: MIT
//
//-----------------------------------------------------------------------------

// When --include-runtime is true, this file is directly prepended
// to the output program. We have to avoid these using directives in that case
// since they can only appear before any other declarations.
// The DafnyRuntime.csproj file is the only place that ISDAFNYRUNTIMELIB is defined,
// so these are only active when building the C# DafnyRuntime.dll library.
#if ISDAFNYRUNTIMELIB
using System; // for Func
using System.Numerics;
using System.Collections;
#endif

namespace DafnyAssembly {
  [AttributeUsage(AttributeTargets.Assembly)]
  public class DafnySourceAttribute : Attribute {
    public readonly string dafnySourceText;
    public DafnySourceAttribute(string txt) { dafnySourceText = txt; }
  }
}

namespace Dafny {
  using System.Collections.Generic;
  using System.Collections.Immutable;
  using System.Linq;

  // Similar to System.Text.Rune, which would be perfect to use
  // except that it isn't available in the platforms we support
  // (.NET Standard 2.0 and .NET Framework 4.5.2)
  public readonly struct Rune : IComparable, IComparable<Rune>, IEquatable<Rune> {

    private readonly uint _value;

    public Rune(int value)
      : this((uint)value) {
    }

    public Rune(uint value) {
      if (!(value < 0xD800 || (0xE000 <= value && value < 0x11_0000))) {
        throw new ArgumentException();
      }

      _value = value;
    }

    public static bool IsRune(BigInteger i) {
      return (0 <= i && i < 0xD800) || (0xE000 <= i && i < 0x11_0000);
    }

    public int Value => (int)_value;

    public bool Equals(Rune other) => this == other;

    public override bool Equals(object obj) => (obj is Rune other) && Equals(other);

    public override int GetHashCode() => Value;

    // Values are always between 0 and 0x11_0000, so overflow isn't possible
    public int CompareTo(Rune other) => this.Value - other.Value;

    int IComparable.CompareTo(object obj) {
      switch (obj) {
        case null:
          return 1; // non-null ("this") always sorts after null
        case Rune other:
          return CompareTo(other);
        default:
          throw new ArgumentException();
      }
    }

    public static bool operator ==(Rune left, Rune right) => left._value == right._value;

    public static bool operator !=(Rune left, Rune right) => left._value != right._value;

    public static bool operator <(Rune left, Rune right) => left._value < right._value;

    public static bool operator <=(Rune left, Rune right) => left._value <= right._value;

    public static bool operator >(Rune left, Rune right) => left._value > right._value;

    public static bool operator >=(Rune left, Rune right) => left._value >= right._value;

    public static explicit operator Rune(int value) => new Rune(value);
    public static explicit operator Rune(BigInteger value) => new Rune((uint)value);

    // Defined this way to be consistent with System.Text.Rune,
    // but note that Dafny will use Helpers.ToString(rune),
    // which will print in the style of a character literal instead.
    public override string ToString() {
      return char.ConvertFromUtf32(Value);
    }

    // Replacement for String.EnumerateRunes() from newer platforms
    public static IEnumerable<Rune> Enumerate(string s) {
      var sLength = s.Length;
      for (var i = 0; i < sLength; i++) {
        if (char.IsHighSurrogate(s[i])) {
          if (char.IsLowSurrogate(s[i + 1])) {
            yield return (Rune)char.ConvertToUtf32(s[i], s[i + 1]);
            i++;
          } else {
            throw new ArgumentException();
          }
        } else if (char.IsLowSurrogate(s[i])) {
          throw new ArgumentException();
        } else {
          yield return (Rune)s[i];
        }
      }
    }
  }

  public interface ISet<out T> {
    int Count { get; }
    long LongCount { get; }
    IEnumerable<T> Elements { get; }
    IEnumerable<ISet<T>> AllSubsets { get; }
    bool Contains<G>(G t);
    bool EqualsAux(ISet<object> other);
    ISet<U> DowncastClone<U>(Func<T, U> converter);
  }

  public class Set<T> : ISet<T> {
    readonly ImmutableHashSet<T> setImpl;
    readonly bool containsNull;
    Set(ImmutableHashSet<T> d, bool containsNull) {
      this.setImpl = d;
      this.containsNull = containsNull;
    }

    public static readonly ISet<T> Empty = new Set<T>(ImmutableHashSet<T>.Empty, false);

    private static readonly TypeDescriptor<ISet<T>> _TYPE = new Dafny.TypeDescriptor<ISet<T>>(Empty);
    public static TypeDescriptor<ISet<T>> _TypeDescriptor() {
      return _TYPE;
    }

    public static ISet<T> FromElements(params T[] values) {
      return FromCollection(values);
    }

    public static Set<T> FromISet(ISet<T> s) {
      return s as Set<T> ?? FromCollection(s.Elements);
    }

    public static Set<T> FromCollection(IEnumerable<T> values) {
      var d = ImmutableHashSet<T>.Empty.ToBuilder();
      var containsNull = false;
      foreach (T t in values) {
        if (t == null) {
          containsNull = true;
        } else {
          d.Add(t);
        }
      }

      return new Set<T>(d.ToImmutable(), containsNull);
    }

    public static ISet<T> FromCollectionPlusOne(IEnumerable<T> values, T oneMoreValue) {
      var d = ImmutableHashSet<T>.Empty.ToBuilder();
      var containsNull = false;
      if (oneMoreValue == null) {
        containsNull = true;
      } else {
        d.Add(oneMoreValue);
      }

      foreach (T t in values) {
        if (t == null) {
          containsNull = true;
        } else {
          d.Add(t);
        }
      }

      return new Set<T>(d.ToImmutable(), containsNull);
    }

    public ISet<U> DowncastClone<U>(Func<T, U> converter) {
      if (this is ISet<U> th) {
        return th;
      } else {
        var d = ImmutableHashSet<U>.Empty.ToBuilder();
        foreach (var t in this.setImpl) {
          var u = converter(t);
          d.Add(u);
        }

        return new Set<U>(d.ToImmutable(), this.containsNull);
      }
    }

    public int Count {
      get { return this.setImpl.Count + (containsNull ? 1 : 0); }
    }

    public long LongCount {
      get { return this.setImpl.Count + (containsNull ? 1 : 0); }
    }

    public IEnumerable<T> Elements {
      get {
        if (containsNull) {
          yield return default(T);
        }

        foreach (var t in this.setImpl) {
          yield return t;
        }
      }
    }

    /// <summary>
    /// This is an inefficient iterator for producing all subsets of "this".
    /// </summary>
    public IEnumerable<ISet<T>> AllSubsets {
      get {
        // Start by putting all set elements into a list, but don't include null
        var elmts = new List<T>();
        elmts.AddRange(this.setImpl);
        var n = elmts.Count;
        var which = new bool[n];
        var s = ImmutableHashSet<T>.Empty.ToBuilder();
        while (true) {
          // yield both the subset without null and, if null is in the original set, the subset with null included
          var ihs = s.ToImmutable();
          yield return new Set<T>(ihs, false);
          if (containsNull) {
            yield return new Set<T>(ihs, true);
          }

          // "add 1" to "which", as if doing a carry chain.  For every digit changed, change the membership of the corresponding element in "s".
          int i = 0;
          for (; i < n && which[i]; i++) {
            which[i] = false;
            s.Remove(elmts[i]);
          }

          if (i == n) {
            // we have cycled through all the subsets
            break;
          }

          which[i] = true;
          s.Add(elmts[i]);
        }
      }
    }

    public bool Equals(ISet<T> other) {
      if (ReferenceEquals(this, other)) {
        return true;
      }

      if (other == null || Count != other.Count) {
        return false;
      }

      foreach (var elmt in Elements) {
        if (!other.Contains(elmt)) {
          return false;
        }
      }

      return true;
    }

    public override bool Equals(object other) {
      if (other is ISet<T>) {
        return Equals((ISet<T>)other);
      }

      var th = this as ISet<object>;
      var oth = other as ISet<object>;
      if (th != null && oth != null) {
        // We'd like to obtain the more specific type parameter U for oth's type ISet<U>.
        // We do that by making a dynamically dispatched call, like:
        //     oth.Equals(this)
        // The hope is then that its comparison "this is ISet<U>" (that is, the first "if" test
        // above, but in the call "oth.Equals(this)") will be true and the non-virtual Equals
        // can be called. However, such a recursive call to "oth.Equals(this)" could turn
        // into infinite recursion. Therefore, we instead call "oth.EqualsAux(this)", which
        // performs the desired type test, but doesn't recurse any further.
        return oth.EqualsAux(th);
      } else {
        return false;
      }
    }

    public bool EqualsAux(ISet<object> other) {
      var s = other as ISet<T>;
      if (s != null) {
        return Equals(s);
      } else {
        return false;
      }
    }

    public override int GetHashCode() {
      var hashCode = 1;
      if (containsNull) {
        hashCode = hashCode * (Dafny.Helpers.GetHashCode(default(T)) + 3);
      }

      foreach (var t in this.setImpl) {
        hashCode = hashCode * (Dafny.Helpers.GetHashCode(t) + 3);
      }

      return hashCode;
    }

    public override string ToString() {
      var s = "{";
      var sep = "";
      if (containsNull) {
        s += sep + Dafny.Helpers.ToString(default(T));
        sep = ", ";
      }

      foreach (var t in this.setImpl) {
        s += sep + Dafny.Helpers.ToString(t);
        sep = ", ";
      }

      return s + "}";
    }
    public static bool IsProperSubsetOf(ISet<T> th, ISet<T> other) {
      return th.Count < other.Count && IsSubsetOf(th, other);
    }
    public static bool IsSubsetOf(ISet<T> th, ISet<T> other) {
      if (other.Count < th.Count) {
        return false;
      }
      foreach (T t in th.Elements) {
        if (!other.Contains(t)) {
          return false;
        }
      }
      return true;
    }
    public static bool IsDisjointFrom(ISet<T> th, ISet<T> other) {
      ISet<T> a, b;
      if (th.Count < other.Count) {
        a = th; b = other;
      } else {
        a = other; b = th;
      }
      foreach (T t in a.Elements) {
        if (b.Contains(t)) {
          return false;
        }
      }
      return true;
    }
    public bool Contains<G>(G t) {
      return t == null ? containsNull : t is T && this.setImpl.Contains((T)(object)t);
    }
    public static ISet<T> Union(ISet<T> th, ISet<T> other) {
      var a = FromISet(th);
      var b = FromISet(other);
      return new Set<T>(a.setImpl.Union(b.setImpl), a.containsNull || b.containsNull);
    }
    public static ISet<T> Intersect(ISet<T> th, ISet<T> other) {
      var a = FromISet(th);
      var b = FromISet(other);
      return new Set<T>(a.setImpl.Intersect(b.setImpl), a.containsNull && b.containsNull);
    }
    public static ISet<T> Difference(ISet<T> th, ISet<T> other) {
      var a = FromISet(th);
      var b = FromISet(other);
      return new Set<T>(a.setImpl.Except(b.setImpl), a.containsNull && !b.containsNull);
    }
  }

  public interface IMultiSet<out T> {
    bool IsEmpty { get; }
    int Count { get; }
    long LongCount { get; }
    BigInteger ElementCount { get; }
    IEnumerable<T> Elements { get; }
    IEnumerable<T> UniqueElements { get; }
    bool Contains<G>(G t);
    BigInteger Select<G>(G t);
    IMultiSet<T> Update<G>(G t, BigInteger i);
    bool EqualsAux(IMultiSet<object> other);
    IMultiSet<U> DowncastClone<U>(Func<T, U> converter);
  }

  public class MultiSet<T> : IMultiSet<T> {
    readonly ImmutableDictionary<T, BigInteger> dict;
    readonly BigInteger occurrencesOfNull;  // stupidly, a Dictionary in .NET cannot use "null" as a key
    MultiSet(ImmutableDictionary<T, BigInteger>.Builder d, BigInteger occurrencesOfNull) {
      dict = d.ToImmutable();
      this.occurrencesOfNull = occurrencesOfNull;
    }
    public static readonly MultiSet<T> Empty = new MultiSet<T>(ImmutableDictionary<T, BigInteger>.Empty.ToBuilder(), BigInteger.Zero);

    private static readonly TypeDescriptor<IMultiSet<T>> _TYPE = new Dafny.TypeDescriptor<IMultiSet<T>>(Empty);
    public static TypeDescriptor<IMultiSet<T>> _TypeDescriptor() {
      return _TYPE;
    }

    public static MultiSet<T> FromIMultiSet(IMultiSet<T> s) {
      return s as MultiSet<T> ?? FromCollection(s.Elements);
    }
    public static MultiSet<T> FromElements(params T[] values) {
      var d = ImmutableDictionary<T, BigInteger>.Empty.ToBuilder();
      var occurrencesOfNull = BigInteger.Zero;
      foreach (T t in values) {
        if (t == null) {
          occurrencesOfNull++;
        } else {
          if (!d.TryGetValue(t, out var i)) {
            i = BigInteger.Zero;
          }
          d[t] = i + 1;
        }
      }
      return new MultiSet<T>(d, occurrencesOfNull);
    }

    public static MultiSet<T> FromCollection(IEnumerable<T> values) {
      var d = ImmutableDictionary<T, BigInteger>.Empty.ToBuilder();
      var occurrencesOfNull = BigInteger.Zero;
      foreach (T t in values) {
        if (t == null) {
          occurrencesOfNull++;
        } else {
          if (!d.TryGetValue(t,
                out var i)) {
            i = BigInteger.Zero;
          }

          d[t] = i + 1;
        }
      }

      return new MultiSet<T>(d,
        occurrencesOfNull);
    }

    public static MultiSet<T> FromSeq(ISequence<T> values) {
      var d = ImmutableDictionary<T, BigInteger>.Empty.ToBuilder();
      var occurrencesOfNull = BigInteger.Zero;
      foreach (var t in values) {
        if (t == null) {
          occurrencesOfNull++;
        } else {
          if (!d.TryGetValue(t,
                out var i)) {
            i = BigInteger.Zero;
          }

          d[t] = i + 1;
        }
      }

      return new MultiSet<T>(d,
        occurrencesOfNull);
    }
    public static MultiSet<T> FromSet(ISet<T> values) {
      var d = ImmutableDictionary<T, BigInteger>.Empty.ToBuilder();
      var containsNull = false;
      foreach (T t in values.Elements) {
        if (t == null) {
          containsNull = true;
        } else {
          d[t] = BigInteger.One;
        }
      }
      return new MultiSet<T>(d, containsNull ? BigInteger.One : BigInteger.Zero);
    }
    public IMultiSet<U> DowncastClone<U>(Func<T, U> converter) {
      if (this is IMultiSet<U> th) {
        return th;
      } else {
        var d = ImmutableDictionary<U, BigInteger>.Empty.ToBuilder();
        foreach (var item in this.dict) {
          var k = converter(item.Key);
          d.Add(k, item.Value);
        }
        return new MultiSet<U>(d, this.occurrencesOfNull);
      }
    }

    public bool Equals(IMultiSet<T> other) {
      return IsSubsetOf(this, other) && IsSubsetOf(other, this);
    }
    public override bool Equals(object other) {
      if (other is IMultiSet<T>) {
        return Equals((IMultiSet<T>)other);
      }
      var th = this as IMultiSet<object>;
      var oth = other as IMultiSet<object>;
      if (th != null && oth != null) {
        // See comment in Set.Equals
        return oth.EqualsAux(th);
      } else {
        return false;
      }
    }

    public bool EqualsAux(IMultiSet<object> other) {
      var s = other as IMultiSet<T>;
      if (s != null) {
        return Equals(s);
      } else {
        return false;
      }
    }

    public override int GetHashCode() {
      var hashCode = 1;
      if (occurrencesOfNull > 0) {
        var key = Dafny.Helpers.GetHashCode(default(T));
        key = (key << 3) | (key >> 29) ^ occurrencesOfNull.GetHashCode();
        hashCode = hashCode * (key + 3);
      }
      foreach (var kv in dict) {
        var key = Dafny.Helpers.GetHashCode(kv.Key);
        key = (key << 3) | (key >> 29) ^ kv.Value.GetHashCode();
        hashCode = hashCode * (key + 3);
      }
      return hashCode;
    }
    public override string ToString() {
      var s = "multiset{";
      var sep = "";
      for (var i = BigInteger.Zero; i < occurrencesOfNull; i++) {
        s += sep + Dafny.Helpers.ToString(default(T));
        sep = ", ";
      }
      foreach (var kv in dict) {
        var t = Dafny.Helpers.ToString(kv.Key);
        for (var i = BigInteger.Zero; i < kv.Value; i++) {
          s += sep + t;
          sep = ", ";
        }
      }
      return s + "}";
    }
    public static bool IsProperSubsetOf(IMultiSet<T> th, IMultiSet<T> other) {
      return th.Count < other.Count && IsSubsetOf(th, other);
    }
    public static bool IsSubsetOf(IMultiSet<T> th, IMultiSet<T> other) {
      var a = FromIMultiSet(th);
      var b = FromIMultiSet(other);
      if (b.occurrencesOfNull < a.occurrencesOfNull) {
        return false;
      }
      foreach (T t in a.dict.Keys) {
        if (b.dict.ContainsKey(t)) {
          if (b.dict[t] < a.dict[t]) {
            return false;
          }
        } else {
          if (a.dict[t] != BigInteger.Zero) {
            return false;
          }
        }
      }
      return true;
    }
    public static bool IsDisjointFrom(IMultiSet<T> th, IMultiSet<T> other) {
      foreach (T t in th.UniqueElements) {
        if (other.Contains(t)) {
          return false;
        }
      }
      return true;
    }

    public bool Contains<G>(G t) {
      return Select(t) != 0;
    }
    public BigInteger Select<G>(G t) {
      if (t == null) {
        return occurrencesOfNull;
      }

      if (t is T && dict.TryGetValue((T)(object)t, out var m)) {
        return m;
      } else {
        return BigInteger.Zero;
      }
    }
    public IMultiSet<T> Update<G>(G t, BigInteger i) {
      if (Select(t) == i) {
        return this;
      } else if (t == null) {
        var r = dict.ToBuilder();
        return new MultiSet<T>(r, i);
      } else {
        var r = dict.ToBuilder();
        r[(T)(object)t] = i;
        return new MultiSet<T>(r, occurrencesOfNull);
      }
    }
    public static IMultiSet<T> Union(IMultiSet<T> th, IMultiSet<T> other) {
      if (th.IsEmpty) {
        return other;
      } else if (other.IsEmpty) {
        return th;
      }
      var a = FromIMultiSet(th);
      var b = FromIMultiSet(other);
      var r = ImmutableDictionary<T, BigInteger>.Empty.ToBuilder();
      foreach (T t in a.dict.Keys) {
        if (!r.TryGetValue(t, out var i)) {
          i = BigInteger.Zero;
        }
        r[t] = i + a.dict[t];
      }
      foreach (T t in b.dict.Keys) {
        if (!r.TryGetValue(t, out var i)) {
          i = BigInteger.Zero;
        }
        r[t] = i + b.dict[t];
      }
      return new MultiSet<T>(r, a.occurrencesOfNull + b.occurrencesOfNull);
    }
    public static IMultiSet<T> Intersect(IMultiSet<T> th, IMultiSet<T> other) {
      if (th.IsEmpty) {
        return th;
      } else if (other.IsEmpty) {
        return other;
      }
      var a = FromIMultiSet(th);
      var b = FromIMultiSet(other);
      var r = ImmutableDictionary<T, BigInteger>.Empty.ToBuilder();
      foreach (T t in a.dict.Keys) {
        if (b.dict.ContainsKey(t)) {
          r.Add(t, a.dict[t] < b.dict[t] ? a.dict[t] : b.dict[t]);
        }
      }
      return new MultiSet<T>(r, a.occurrencesOfNull < b.occurrencesOfNull ? a.occurrencesOfNull : b.occurrencesOfNull);
    }
    public static IMultiSet<T> Difference(IMultiSet<T> th, IMultiSet<T> other) { // \result == this - other
      if (other.IsEmpty) {
        return th;
      }
      var a = FromIMultiSet(th);
      var b = FromIMultiSet(other);
      var r = ImmutableDictionary<T, BigInteger>.Empty.ToBuilder();
      foreach (T t in a.dict.Keys) {
        if (!b.dict.ContainsKey(t)) {
          r.Add(t, a.dict[t]);
        } else if (b.dict[t] < a.dict[t]) {
          r.Add(t, a.dict[t] - b.dict[t]);
        }
      }
      return new MultiSet<T>(r, b.occurrencesOfNull < a.occurrencesOfNull ? a.occurrencesOfNull - b.occurrencesOfNull : BigInteger.Zero);
    }

    public bool IsEmpty { get { return occurrencesOfNull == 0 && dict.IsEmpty; } }

    public int Count {
      get { return (int)ElementCount; }
    }
    public long LongCount {
      get { return (long)ElementCount; }
    }

    public BigInteger ElementCount {
      get {
        // This is inefficient
        var c = occurrencesOfNull;
        foreach (var item in dict) {
          c += item.Value;
        }
        return c;
      }
    }

    public IEnumerable<T> Elements {
      get {
        for (var i = BigInteger.Zero; i < occurrencesOfNull; i++) {
          yield return default(T);
        }
        foreach (var item in dict) {
          for (var i = BigInteger.Zero; i < item.Value; i++) {
            yield return item.Key;
          }
        }
      }
    }

    public IEnumerable<T> UniqueElements {
      get {
        if (!occurrencesOfNull.IsZero) {
          yield return default(T);
        }
        foreach (var key in dict.Keys) {
          if (dict[key] != 0) {
            yield return key;
          }
        }
      }
    }
  }

  public interface IMap<out U, out V> {
    int Count { get; }
    long LongCount { get; }
    ISet<U> Keys { get; }
    ISet<V> Values { get; }
    IEnumerable<IPair<U, V>> ItemEnumerable { get; }
    bool Contains<G>(G t);
    /// <summary>
    /// Returns "true" iff "this is IMap<object, object>" and "this" equals "other".
    /// </summary>
    bool EqualsObjObj(IMap<object, object> other);
    IMap<UU, VV> DowncastClone<UU, VV>(Func<U, UU> keyConverter, Func<V, VV> valueConverter);
  }

  public class Map<U, V> : IMap<U, V> {
    readonly ImmutableDictionary<U, V> dict;
    readonly bool hasNullKey;  // true when "null" is a key of the Map
    readonly V nullValue;  // if "hasNullKey", the value that "null" maps to

    private Map(ImmutableDictionary<U, V>.Builder d, bool hasNullKey, V nullValue) {
      dict = d.ToImmutable();
      this.hasNullKey = hasNullKey;
      this.nullValue = nullValue;
    }
    public static readonly Map<U, V> Empty = new Map<U, V>(ImmutableDictionary<U, V>.Empty.ToBuilder(), false, default(V));

    private Map(ImmutableDictionary<U, V> d, bool hasNullKey, V nullValue) {
      dict = d;
      this.hasNullKey = hasNullKey;
      this.nullValue = nullValue;
    }

    private static readonly TypeDescriptor<IMap<U, V>> _TYPE = new Dafny.TypeDescriptor<IMap<U, V>>(Empty);
    public static TypeDescriptor<IMap<U, V>> _TypeDescriptor() {
      return _TYPE;
    }

    public static Map<U, V> FromElements(params IPair<U, V>[] values) {
      var d = ImmutableDictionary<U, V>.Empty.ToBuilder();
      var hasNullKey = false;
      var nullValue = default(V);
      foreach (var p in values) {
        if (p.Car == null) {
          hasNullKey = true;
          nullValue = p.Cdr;
        } else {
          d[p.Car] = p.Cdr;
        }
      }
      return new Map<U, V>(d, hasNullKey, nullValue);
    }
    public static Map<U, V> FromCollection(IEnumerable<IPair<U, V>> values) {
      var d = ImmutableDictionary<U, V>.Empty.ToBuilder();
      var hasNullKey = false;
      var nullValue = default(V);
      foreach (var p in values) {
        if (p.Car == null) {
          hasNullKey = true;
          nullValue = p.Cdr;
        } else {
          d[p.Car] = p.Cdr;
        }
      }
      return new Map<U, V>(d, hasNullKey, nullValue);
    }
    public static Map<U, V> FromIMap(IMap<U, V> m) {
      return m as Map<U, V> ?? FromCollection(m.ItemEnumerable);
    }
    public IMap<UU, VV> DowncastClone<UU, VV>(Func<U, UU> keyConverter, Func<V, VV> valueConverter) {
      if (this is IMap<UU, VV> th) {
        return th;
      } else {
        var d = ImmutableDictionary<UU, VV>.Empty.ToBuilder();
        foreach (var item in this.dict) {
          var k = keyConverter(item.Key);
          var v = valueConverter(item.Value);
          d.Add(k, v);
        }
        return new Map<UU, VV>(d, this.hasNullKey, (VV)(object)this.nullValue);
      }
    }
    public int Count {
      get { return dict.Count + (hasNullKey ? 1 : 0); }
    }
    public long LongCount {
      get { return dict.Count + (hasNullKey ? 1 : 0); }
    }

    public bool Equals(IMap<U, V> other) {
      if (ReferenceEquals(this, other)) {
        return true;
      }

      if (other == null || LongCount != other.LongCount) {
        return false;
      }

      if (hasNullKey) {
        if (!other.Contains(default(U)) || !object.Equals(nullValue, Select(other, default(U)))) {
          return false;
        }
      }

      foreach (var item in dict) {
        if (!other.Contains(item.Key) || !object.Equals(item.Value, Select(other, item.Key))) {
          return false;
        }
      }
      return true;
    }
    public bool EqualsObjObj(IMap<object, object> other) {
      if (ReferenceEquals(this, other)) {
        return true;
      }
      if (!(this is IMap<object, object>) || other == null || LongCount != other.LongCount) {
        return false;
      }
      var oth = Map<object, object>.FromIMap(other);
      if (hasNullKey) {
        if (!oth.Contains(default(U)) || !object.Equals(nullValue, Map<object, object>.Select(oth, default(U)))) {
          return false;
        }
      }
      foreach (var item in dict) {
        if (!other.Contains(item.Key) || !object.Equals(item.Value, Map<object, object>.Select(oth, item.Key))) {
          return false;
        }
      }
      return true;
    }
    public override bool Equals(object other) {
      // See comment in Set.Equals
      var m = other as IMap<U, V>;
      if (m != null) {
        return Equals(m);
      }
      var imapoo = other as IMap<object, object>;
      if (imapoo != null) {
        return EqualsObjObj(imapoo);
      } else {
        return false;
      }
    }

    public override int GetHashCode() {
      var hashCode = 1;
      if (hasNullKey) {
        var key = Dafny.Helpers.GetHashCode(default(U));
        key = (key << 3) | (key >> 29) ^ Dafny.Helpers.GetHashCode(nullValue);
        hashCode = hashCode * (key + 3);
      }
      foreach (var kv in dict) {
        var key = Dafny.Helpers.GetHashCode(kv.Key);
        key = (key << 3) | (key >> 29) ^ Dafny.Helpers.GetHashCode(kv.Value);
        hashCode = hashCode * (key + 3);
      }
      return hashCode;
    }
    public override string ToString() {
      var s = "map[";
      var sep = "";
      if (hasNullKey) {
        s += sep + Dafny.Helpers.ToString(default(U)) + " := " + Dafny.Helpers.ToString(nullValue);
        sep = ", ";
      }
      foreach (var kv in dict) {
        s += sep + Dafny.Helpers.ToString(kv.Key) + " := " + Dafny.Helpers.ToString(kv.Value);
        sep = ", ";
      }
      return s + "]";
    }
    public bool Contains<G>(G u) {
      return u == null ? hasNullKey : u is U && dict.ContainsKey((U)(object)u);
    }
    public static V Select(IMap<U, V> th, U index) {
      // the following will throw an exception if "index" in not a key of the map
      var m = FromIMap(th);
      return index == null && m.hasNullKey ? m.nullValue : m.dict[index];
    }
    public static IMap<U, V> Update(IMap<U, V> th, U index, V val) {
      var m = FromIMap(th);
      var d = m.dict.ToBuilder();
      if (index == null) {
        return new Map<U, V>(d, true, val);
      } else {
        d[index] = val;
        return new Map<U, V>(d, m.hasNullKey, m.nullValue);
      }
    }

    public static IMap<U, V> Merge(IMap<U, V> th, IMap<U, V> other) {
      var a = FromIMap(th);
      var b = FromIMap(other);
      ImmutableDictionary<U, V> d = a.dict.SetItems(b.dict);
      return new Map<U, V>(d, a.hasNullKey || b.hasNullKey, b.hasNullKey ? b.nullValue : a.nullValue);
    }

    public static IMap<U, V> Subtract(IMap<U, V> th, ISet<U> keys) {
      var a = FromIMap(th);
      ImmutableDictionary<U, V> d = a.dict.RemoveRange(keys.Elements);
      return new Map<U, V>(d, a.hasNullKey && !keys.Contains<object>(null), a.nullValue);
    }

    public ISet<U> Keys {
      get {
        if (hasNullKey) {
          return Dafny.Set<U>.FromCollectionPlusOne(dict.Keys, default(U));
        } else {
          return Dafny.Set<U>.FromCollection(dict.Keys);
        }
      }
    }
    public ISet<V> Values {
      get {
        if (hasNullKey) {
          return Dafny.Set<V>.FromCollectionPlusOne(dict.Values, nullValue);
        } else {
          return Dafny.Set<V>.FromCollection(dict.Values);
        }
      }
    }

    public IEnumerable<IPair<U, V>> ItemEnumerable {
      get {
        if (hasNullKey) {
          yield return new Pair<U, V>(default(U), nullValue);
        }
        foreach (KeyValuePair<U, V> kvp in dict) {
          yield return new Pair<U, V>(kvp.Key, kvp.Value);
        }
      }
    }

    public static ISet<_System._ITuple2<U, V>> Items(IMap<U, V> m) {
      var result = new HashSet<_System._ITuple2<U, V>>();
      foreach (var item in m.ItemEnumerable) {
        result.Add(_System.Tuple2<U, V>.create(item.Car, item.Cdr));
      }
      return Dafny.Set<_System._ITuple2<U, V>>.FromCollection(result);
    }
  }

  public interface ISequence<out T> : IEnumerable<T> {
    long LongCount { get; }
    int Count { get; }
    [Obsolete("Use CloneAsArray() instead of Elements (both perform a copy).")]
    T[] Elements { get; }
    T[] CloneAsArray();
    IEnumerable<T> UniqueElements { get; }
    T Select(ulong index);
    T Select(long index);
    T Select(uint index);
    T Select(int index);
    T Select(BigInteger index);
    bool Contains<G>(G g);
    ISequence<T> Take(long m);
    ISequence<T> Take(ulong n);
    ISequence<T> Take(BigInteger n);
    ISequence<T> Drop(long m);
    ISequence<T> Drop(ulong n);
    ISequence<T> Drop(BigInteger n);
    ISequence<T> Subsequence(long lo, long hi);
    ISequence<T> Subsequence(long lo, ulong hi);
    ISequence<T> Subsequence(long lo, BigInteger hi);
    ISequence<T> Subsequence(ulong lo, long hi);
    ISequence<T> Subsequence(ulong lo, ulong hi);
    ISequence<T> Subsequence(ulong lo, BigInteger hi);
    ISequence<T> Subsequence(BigInteger lo, long hi);
    ISequence<T> Subsequence(BigInteger lo, ulong hi);
    ISequence<T> Subsequence(BigInteger lo, BigInteger hi);
    bool EqualsAux(ISequence<object> other);
    ISequence<U> DowncastClone<U>(Func<T, U> converter);
    string ToVerbatimString(bool asLiteral);
  }

  public abstract class Sequence<T> : ISequence<T> {
    public static readonly ISequence<T> Empty = new ArraySequence<T>(new T[0]);

    private static readonly TypeDescriptor<ISequence<T>> _TYPE = new Dafny.TypeDescriptor<ISequence<T>>(Empty);
    public static TypeDescriptor<ISequence<T>> _TypeDescriptor() {
      return _TYPE;
    }

    public static ISequence<T> Create(BigInteger length, System.Func<BigInteger, T> init) {
      var len = (int)length;
      var builder = ImmutableArray.CreateBuilder<T>(len);
      for (int i = 0; i < len; i++) {
        builder.Add(init(new BigInteger(i)));
      }
      return new ArraySequence<T>(builder.MoveToImmutable());
    }
    public static ISequence<T> FromArray(T[] values) {
      return new ArraySequence<T>(values);
    }
    public static ISequence<T> FromElements(params T[] values) {
      return new ArraySequence<T>(values);
    }
    public static ISequence<char> FromString(string s) {
      return new ArraySequence<char>(s.ToCharArray());
    }
    public static ISequence<Rune> UnicodeFromString(string s) {
      var runes = new List<Rune>();

      foreach (var rune in Rune.Enumerate(s)) {
        runes.Add(rune);
      }
      return new ArraySequence<Rune>(runes.ToArray());
    }

    public static ISequence<ISequence<char>> FromMainArguments(string[] args) {
      Dafny.ISequence<char>[] dafnyArgs = new Dafny.ISequence<char>[args.Length + 1];
      dafnyArgs[0] = Dafny.Sequence<char>.FromString("dotnet");
      for (var i = 0; i < args.Length; i++) {
        dafnyArgs[i + 1] = Dafny.Sequence<char>.FromString(args[i]);
      }

      return Sequence<ISequence<char>>.FromArray(dafnyArgs);
    }
    public static ISequence<ISequence<Rune>> UnicodeFromMainArguments(string[] args) {
      Dafny.ISequence<Rune>[] dafnyArgs = new Dafny.ISequence<Rune>[args.Length + 1];
      dafnyArgs[0] = Dafny.Sequence<Rune>.UnicodeFromString("dotnet");
      for (var i = 0; i < args.Length; i++) {
        dafnyArgs[i + 1] = Dafny.Sequence<Rune>.UnicodeFromString(args[i]);
      }

      return Sequence<ISequence<Rune>>.FromArray(dafnyArgs);
    }

    public ISequence<U> DowncastClone<U>(Func<T, U> converter) {
      if (this is ISequence<U> th) {
        return th;
      } else {
        var values = new U[this.LongCount];
        for (long i = 0; i < this.LongCount; i++) {
          var val = converter(this.Select(i));
          values[i] = val;
        }
        return new ArraySequence<U>(values);
      }
    }
    public static ISequence<T> Update(ISequence<T> sequence, long index, T t) {
      T[] tmp = sequence.CloneAsArray();
      tmp[index] = t;
      return new ArraySequence<T>(tmp);
    }
    public static ISequence<T> Update(ISequence<T> sequence, ulong index, T t) {
      return Update(sequence, (long)index, t);
    }
    public static ISequence<T> Update(ISequence<T> sequence, BigInteger index, T t) {
      return Update(sequence, (long)index, t);
    }
    public static bool EqualUntil(ISequence<T> left, ISequence<T> right, int n) {
      for (int i = 0; i < n; i++) {
        if (!Equals(left.Select(i), right.Select(i))) {
          return false;
        }
      }
      return true;
    }
    public static bool IsPrefixOf(ISequence<T> left, ISequence<T> right) {
      int n = left.Count;
      return n <= right.Count && EqualUntil(left, right, n);
    }
    public static bool IsProperPrefixOf(ISequence<T> left, ISequence<T> right) {
      int n = left.Count;
      return n < right.Count && EqualUntil(left, right, n);
    }
    public static ISequence<T> Concat(ISequence<T> left, ISequence<T> right) {
      if (left.Count == 0) {
        return right;
      }
      if (right.Count == 0) {
        return left;
      }
      return new ConcatSequence<T>(left, right);
    }
    // Make Count a public abstract instead of LongCount, since the "array size is limited to a total of 4 billion
    // elements, and to a maximum index of 0X7FEFFFFF". Therefore, as a protection, limit this to int32.
    // https://docs.microsoft.com/en-us/dotnet/api/system.array
    public abstract int Count { get; }
    public long LongCount {
      get { return Count; }
    }
    // ImmutableElements cannot be public in the interface since ImmutableArray<T> leads to a
    // "covariant type T occurs in invariant position" error. There do not appear to be interfaces for ImmutableArray<T>
    // that resolve this.
    internal abstract ImmutableArray<T> ImmutableElements { get; }

    public T[] Elements { get { return CloneAsArray(); } }

    public T[] CloneAsArray() {
      return ImmutableElements.ToArray();
    }

    public IEnumerable<T> UniqueElements {
      get {
        return Set<T>.FromCollection(ImmutableElements).Elements;
      }
    }

    public IEnumerator<T> GetEnumerator() {
      foreach (var el in ImmutableElements) {
        yield return el;
      }
    }

    IEnumerator IEnumerable.GetEnumerator() {
      return GetEnumerator();
    }

    public T Select(ulong index) {
      return ImmutableElements[checked((int)index)];
    }
    public T Select(long index) {
      return ImmutableElements[checked((int)index)];
    }
    public T Select(uint index) {
      return ImmutableElements[checked((int)index)];
    }
    public T Select(int index) {
      return ImmutableElements[index];
    }
    public T Select(BigInteger index) {
      return ImmutableElements[(int)index];
    }
    public bool Equals(ISequence<T> other) {
      return ReferenceEquals(this, other) || (Count == other.Count && EqualUntil(this, other, Count));
    }
    public override bool Equals(object other) {
      if (other is ISequence<T>) {
        return Equals((ISequence<T>)other);
      }
      var th = this as ISequence<object>;
      var oth = other as ISequence<object>;
      if (th != null && oth != null) {
        // see explanation in Set.Equals
        return oth.EqualsAux(th);
      } else {
        return false;
      }
    }
    public bool EqualsAux(ISequence<object> other) {
      var s = other as ISequence<T>;
      if (s != null) {
        return Equals(s);
      } else {
        return false;
      }
    }
    public override int GetHashCode() {
      ImmutableArray<T> elmts = ImmutableElements;
      // https://devblogs.microsoft.com/dotnet/please-welcome-immutablearrayt/
      if (elmts.IsDefaultOrEmpty) {
        return 0;
      }

      var hashCode = 0;
      for (var i = 0; i < elmts.Length; i++) {
        hashCode = (hashCode << 3) | (hashCode >> 29) ^ Dafny.Helpers.GetHashCode(elmts[i]);
      }
      return hashCode;
    }
    public override string ToString() {
      if (typeof(T) == typeof(char)) {
        return string.Concat(this);
      } else {
        return "[" + string.Join(", ", ImmutableElements.Select(Dafny.Helpers.ToString)) + "]";
      }
    }

    public string ToVerbatimString(bool asLiteral) {
      var builder = new System.Text.StringBuilder();
      if (asLiteral) {
        builder.Append('"');
      }
      foreach (var c in this) {
        var rune = (Rune)(object)c;
        if (asLiteral) {
          builder.Append(Helpers.EscapeCharacter(rune));
        } else {
          builder.Append(char.ConvertFromUtf32(rune.Value));
        }
      }
      if (asLiteral) {
        builder.Append('"');
      }
      return builder.ToString();
    }

    public bool Contains<G>(G g) {
      if (g == null || g is T) {
        var t = (T)(object)g;
        return ImmutableElements.Contains(t);
      }
      return false;
    }
    public ISequence<T> Take(long m) {
      return Subsequence(0, m);
    }
    public ISequence<T> Take(ulong n) {
      return Take((long)n);
    }
    public ISequence<T> Take(BigInteger n) {
      return Take((long)n);
    }
    public ISequence<T> Drop(long m) {
      return Subsequence(m, Count);
    }
    public ISequence<T> Drop(ulong n) {
      return Drop((long)n);
    }
    public ISequence<T> Drop(BigInteger n) {
      return Drop((long)n);
    }
    public ISequence<T> Subsequence(long lo, long hi) {
      if (lo == 0 && hi == Count) {
        return this;
      }
      int startingIndex = checked((int)lo);
      var length = checked((int)hi) - startingIndex;
      return new ArraySequence<T>(ImmutableArray.Create<T>(ImmutableElements, startingIndex, length));
    }
    public ISequence<T> Subsequence(long lo, ulong hi) {
      return Subsequence(lo, (long)hi);
    }
    public ISequence<T> Subsequence(long lo, BigInteger hi) {
      return Subsequence(lo, (long)hi);
    }
    public ISequence<T> Subsequence(ulong lo, long hi) {
      return Subsequence((long)lo, hi);
    }
    public ISequence<T> Subsequence(ulong lo, ulong hi) {
      return Subsequence((long)lo, (long)hi);
    }
    public ISequence<T> Subsequence(ulong lo, BigInteger hi) {
      return Subsequence((long)lo, (long)hi);
    }
    public ISequence<T> Subsequence(BigInteger lo, long hi) {
      return Subsequence((long)lo, hi);
    }
    public ISequence<T> Subsequence(BigInteger lo, ulong hi) {
      return Subsequence((long)lo, (long)hi);
    }
    public ISequence<T> Subsequence(BigInteger lo, BigInteger hi) {
      return Subsequence((long)lo, (long)hi);
    }
  }

  internal class ArraySequence<T> : Sequence<T> {
    private readonly ImmutableArray<T> elmts;

    internal ArraySequence(ImmutableArray<T> ee) {
      elmts = ee;
    }
    internal ArraySequence(T[] ee) {
      elmts = ImmutableArray.Create<T>(ee);
    }

    internal override ImmutableArray<T> ImmutableElements {
      get {
        return elmts;
      }
    }

    public override int Count {
      get {
        return elmts.Length;
      }
    }
  }

  internal class ConcatSequence<T> : Sequence<T> {
    // INVARIANT: Either left != null, right != null, and elmts's underlying array == null or
    // left == null, right == null, and elmts's underlying array != null
    internal volatile ISequence<T> left, right;
    internal ImmutableArray<T> elmts;
    private readonly int count;

    internal ConcatSequence(ISequence<T> left, ISequence<T> right) {
      this.left = left;
      this.right = right;
      this.count = left.Count + right.Count;
    }

    internal override ImmutableArray<T> ImmutableElements {
      get {
        // IsDefault returns true if the underlying array is a null reference
        // https://devblogs.microsoft.com/dotnet/please-welcome-immutablearrayt/
        if (elmts.IsDefault) {
          elmts = ComputeElements();
          // We don't need the original sequences anymore; let them be
          // garbage-collected
          left = null;
          right = null;
        }
        return elmts;
      }
    }

    public override int Count {
      get {
        return count;
      }
    }

    internal ImmutableArray<T> ComputeElements() {
      // Traverse the tree formed by all descendants which are ConcatSequences
      var ansBuilder = ImmutableArray.CreateBuilder<T>(count);
      var toVisit = new Stack<ISequence<T>>();
      var leftBuffer = left;
      var rightBuffer = right;
      if (left == null || right == null) {
        // elmts can't be .IsDefault while either left, or right are null
        return elmts;
      }
      toVisit.Push(rightBuffer);
      toVisit.Push(leftBuffer);

      while (toVisit.Count != 0) {
        var seq = toVisit.Pop();
        if (seq is ConcatSequence<T> cs && cs.elmts.IsDefault) {
          leftBuffer = cs.left;
          rightBuffer = cs.right;
          if (cs.left == null || cs.right == null) {
            // !cs.elmts.IsDefault, due to concurrent enumeration
            toVisit.Push(cs);
          } else {
            toVisit.Push(rightBuffer);
            toVisit.Push(leftBuffer);
          }
        } else {
          if (seq is Sequence<T> sq) {
            ansBuilder.AddRange(sq.ImmutableElements); // Optimized path for ImmutableArray
          } else {
            ansBuilder.AddRange(seq); // Slower path using IEnumerable
          }
        }
      }
      return ansBuilder.MoveToImmutable();
    }
  }

  public interface IPair<out A, out B> {
    A Car { get; }
    B Cdr { get; }
  }

  public class Pair<A, B> : IPair<A, B> {
    private A car;
    private B cdr;
    public A Car { get { return car; } }
    public B Cdr { get { return cdr; } }
    public Pair(A a, B b) {
      this.car = a;
      this.cdr = b;
    }
  }

  public class TypeDescriptor<T> {
    private readonly T initValue;
    public TypeDescriptor(T initValue) {
      this.initValue = initValue;
    }
    public T Default() {
      return initValue;
    }
  }

  public partial class Helpers {
    public static int GetHashCode<G>(G g) {
      return g == null ? 1001 : g.GetHashCode();
    }

    public static int ToIntChecked(BigInteger i, string msg) {
      if (i > Int32.MaxValue || i < Int32.MinValue) {
        if (msg == null) {
          msg = "value out of range for a 32-bit int";
        }

        throw new HaltException(msg + ": " + i);
      }
      return (int)i;
    }
    public static int ToIntChecked(long i, string msg) {
      if (i > Int32.MaxValue || i < Int32.MinValue) {
        if (msg == null) {
          msg = "value out of range for a 32-bit int";
        }

        throw new HaltException(msg + ": " + i);
      }
      return (int)i;
    }
    public static int ToIntChecked(int i, string msg) {
      return i;
    }

    public static string ToString<G>(G g) {
      if (g == null) {
        return "null";
      } else if (g is bool) {
        return (bool)(object)g ? "true" : "false";  // capitalize boolean literals like in Dafny
      } else if (g is Rune) {
        return "'" + EscapeCharacter((Rune)(object)g) + "'";
      } else {
        return g.ToString();
      }
    }

    public static string EscapeCharacter(Rune r) {
      switch (r.Value) {
        case '\n': return "\\n";
        case '\r': return "\\r";
        case '\t': return "\\t";
        case '\0': return "\\0";
        case '\'': return "\\'";
        case '\"': return "\\\"";
        case '\\': return "\\\\";
        default: return r.ToString();
      };
    }

    public static void Print<G>(G g) {
      System.Console.Write(ToString(g));
    }

    public static readonly TypeDescriptor<bool> BOOL = new TypeDescriptor<bool>(false);
    public static readonly TypeDescriptor<char> CHAR = new TypeDescriptor<char>('D');  // See CharType.DefaultValue in Dafny source code
    public static readonly TypeDescriptor<Rune> RUNE = new TypeDescriptor<Rune>(new Rune('D'));  // See CharType.DefaultValue in Dafny source code
    public static readonly TypeDescriptor<BigInteger> INT = new TypeDescriptor<BigInteger>(BigInteger.Zero);
    public static readonly TypeDescriptor<BigRational> REAL = new TypeDescriptor<BigRational>(BigRational.ZERO);
    public static readonly TypeDescriptor<byte> UINT8 = new TypeDescriptor<byte>(0);
    public static readonly TypeDescriptor<ushort> UINT16 = new TypeDescriptor<ushort>(0);
    public static readonly TypeDescriptor<uint> UINT32 = new TypeDescriptor<uint>(0);
    public static readonly TypeDescriptor<ulong> UINT64 = new TypeDescriptor<ulong>(0);

    public static TypeDescriptor<T> NULL<T>() where T : class {
      return new TypeDescriptor<T>(null);
    }

    public static TypeDescriptor<A[]> ARRAY<A>() {
      return new TypeDescriptor<A[]>(new A[0]);
    }

    public static bool Quantifier<T>(IEnumerable<T> vals, bool frall, System.Predicate<T> pred) {
      foreach (var u in vals) {
        if (pred(u) != frall) { return !frall; }
      }
      return frall;
    }
    // Enumerating other collections
    public static IEnumerable<bool> AllBooleans() {
      yield return false;
      yield return true;
    }
    public static IEnumerable<char> AllChars() {
      for (int i = 0; i < 0x1_0000; i++) {
        yield return (char)i;
      }
    }
    public static IEnumerable<Rune> AllUnicodeChars() {
      for (int i = 0; i < 0xD800; i++) {
        yield return new Rune(i);
      }
      for (int i = 0xE000; i < 0x11_0000; i++) {
        yield return new Rune(i);
      }
    }
    public static IEnumerable<BigInteger> AllIntegers() {
      yield return new BigInteger(0);
      for (var j = new BigInteger(1); ; j++) {
        yield return j;
        yield return -j;
      }
    }
    public static IEnumerable<BigInteger> IntegerRange(Nullable<BigInteger> lo, Nullable<BigInteger> hi) {
      if (lo == null) {
        for (var j = (BigInteger)hi; true;) {
          j--;
          yield return j;
        }
      } else if (hi == null) {
        for (var j = (BigInteger)lo; true; j++) {
          yield return j;
        }
      } else {
        for (var j = (BigInteger)lo; j < hi; j++) {
          yield return j;
        }
      }
    }
    public static IEnumerable<T> SingleValue<T>(T e) {
      yield return e;
    }
    // pre: b != 0
    // post: result == a/b, as defined by Euclidean Division (http://en.wikipedia.org/wiki/Modulo_operation)
    public static sbyte EuclideanDivision_sbyte(sbyte a, sbyte b) {
      return (sbyte)EuclideanDivision_int(a, b);
    }
    public static short EuclideanDivision_short(short a, short b) {
      return (short)EuclideanDivision_int(a, b);
    }
    public static int EuclideanDivision_int(int a, int b) {
      if (0 <= a) {
        if (0 <= b) {
          // +a +b: a/b
          return (int)(((uint)(a)) / ((uint)(b)));
        } else {
          // +a -b: -(a/(-b))
          return -((int)(((uint)(a)) / ((uint)(unchecked(-b)))));
        }
      } else {
        if (0 <= b) {
          // -a +b: -((-a-1)/b) - 1
          return -((int)(((uint)(-(a + 1))) / ((uint)(b)))) - 1;
        } else {
          // -a -b: ((-a-1)/(-b)) + 1
          return ((int)(((uint)(-(a + 1))) / ((uint)(unchecked(-b))))) + 1;
        }
      }
    }
    public static long EuclideanDivision_long(long a, long b) {
      if (0 <= a) {
        if (0 <= b) {
          // +a +b: a/b
          return (long)(((ulong)(a)) / ((ulong)(b)));
        } else {
          // +a -b: -(a/(-b))
          return -((long)(((ulong)(a)) / ((ulong)(unchecked(-b)))));
        }
      } else {
        if (0 <= b) {
          // -a +b: -((-a-1)/b) - 1
          return -((long)(((ulong)(-(a + 1))) / ((ulong)(b)))) - 1;
        } else {
          // -a -b: ((-a-1)/(-b)) + 1
          return ((long)(((ulong)(-(a + 1))) / ((ulong)(unchecked(-b))))) + 1;
        }
      }
    }
    public static BigInteger EuclideanDivision(BigInteger a, BigInteger b) {
      if (0 <= a.Sign) {
        if (0 <= b.Sign) {
          // +a +b: a/b
          return BigInteger.Divide(a, b);
        } else {
          // +a -b: -(a/(-b))
          return BigInteger.Negate(BigInteger.Divide(a, BigInteger.Negate(b)));
        }
      } else {
        if (0 <= b.Sign) {
          // -a +b: -((-a-1)/b) - 1
          return BigInteger.Negate(BigInteger.Divide(BigInteger.Negate(a) - 1, b)) - 1;
        } else {
          // -a -b: ((-a-1)/(-b)) + 1
          return BigInteger.Divide(BigInteger.Negate(a) - 1, BigInteger.Negate(b)) + 1;
        }
      }
    }
    // pre: b != 0
    // post: result == a%b, as defined by Euclidean Division (http://en.wikipedia.org/wiki/Modulo_operation)
    public static sbyte EuclideanModulus_sbyte(sbyte a, sbyte b) {
      return (sbyte)EuclideanModulus_int(a, b);
    }
    public static short EuclideanModulus_short(short a, short b) {
      return (short)EuclideanModulus_int(a, b);
    }
    public static int EuclideanModulus_int(int a, int b) {
      uint bp = (0 <= b) ? (uint)b : (uint)(unchecked(-b));
      if (0 <= a) {
        // +a: a % b'
        return (int)(((uint)a) % bp);
      } else {
        // c = ((-a) % b')
        // -a: b' - c if c > 0
        // -a: 0 if c == 0
        uint c = ((uint)(unchecked(-a))) % bp;
        return (int)(c == 0 ? c : bp - c);
      }
    }
    public static long EuclideanModulus_long(long a, long b) {
      ulong bp = (0 <= b) ? (ulong)b : (ulong)(unchecked(-b));
      if (0 <= a) {
        // +a: a % b'
        return (long)(((ulong)a) % bp);
      } else {
        // c = ((-a) % b')
        // -a: b' - c if c > 0
        // -a: 0 if c == 0
        ulong c = ((ulong)(unchecked(-a))) % bp;
        return (long)(c == 0 ? c : bp - c);
      }
    }
    public static BigInteger EuclideanModulus(BigInteger a, BigInteger b) {
      var bp = BigInteger.Abs(b);
      if (0 <= a.Sign) {
        // +a: a % b'
        return BigInteger.Remainder(a, bp);
      } else {
        // c = ((-a) % b')
        // -a: b' - c if c > 0
        // -a: 0 if c == 0
        var c = BigInteger.Remainder(BigInteger.Negate(a), bp);
        return c.IsZero ? c : BigInteger.Subtract(bp, c);
      }
    }

    public static U CastConverter<T, U>(T t) {
      return (U)(object)t;
    }

    public static Sequence<T> SeqFromArray<T>(T[] array) {
      return new ArraySequence<T>(array);
    }
    // In .NET version 4.5, it is possible to mark a method with "AggressiveInlining", which says to inline the
    // method if possible.  Method "ExpressionSequence" would be a good candidate for it:
    // [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static U ExpressionSequence<T, U>(T t, U u) {
      return u;
    }

    public static U Let<T, U>(T t, Func<T, U> f) {
      return f(t);
    }

    public static A Id<A>(A a) {
      return a;
    }

    public static void WithHaltHandling(Action action) {
      try {
        action();
      } catch (HaltException e) {
        Console.WriteLine("[Program halted] " + e.Message);
        // This is unfriendly given that Dafny's C# compiler will
        // invoke the compiled main method directly,
        // so we might be exiting the whole Dafny process here.
        // That's the best we can do until Dafny main methods support
        // a return value though (https://github.com/dafny-lang/dafny/issues/2699).
        // If we just set Environment.ExitCode here, the Dafny CLI
        // will just override that with 0.
        Environment.Exit(1);
      }
    }

    public static Rune AddRunes(Rune left, Rune right) {
      return (Rune)(left.Value + right.Value);
    }

    public static Rune SubtractRunes(Rune left, Rune right) {
      return (Rune)(left.Value - right.Value);
    }

    public static uint Bv32ShiftLeft(uint a, int amount) {
      return 32 <= amount ? 0 : a << amount;
    }
    public static ulong Bv64ShiftLeft(ulong a, int amount) {
      return 64 <= amount ? 0 : a << amount;
    }

    public static uint Bv32ShiftRight(uint a, int amount) {
      return 32 <= amount ? 0 : a >> amount;
    }
    public static ulong Bv64ShiftRight(ulong a, int amount) {
      return 64 <= amount ? 0 : a >> amount;
    }
  }

  public class BigOrdinal {
    public static bool IsLimit(BigInteger ord) {
      return ord == 0;
    }
    public static bool IsSucc(BigInteger ord) {
      return 0 < ord;
    }
    public static BigInteger Offset(BigInteger ord) {
      return ord;
    }
    public static bool IsNat(BigInteger ord) {
      return true;  // at run time, every ORDINAL is a natural number
    }
  }

  public struct BigRational {
    public static readonly BigRational ZERO = new BigRational(0);

    // We need to deal with the special case "num == 0 && den == 0", because
    // that's what C#'s default struct constructor will produce for BigRational. :(
    // To deal with it, we ignore "den" when "num" is 0.
    public readonly BigInteger num, den;  // invariant 1 <= den || (num == 0 && den == 0)

    public override string ToString() {
      if (num.IsZero || den.IsOne) {
        return string.Format("{0}.0", num);
      } else if (DividesAPowerOf10(den, out var factor, out var log10)) {
        var n = num * factor;
        string sign;
        string digits;
        if (n.Sign < 0) {
          sign = "-"; digits = (-n).ToString();
        } else {
          sign = ""; digits = n.ToString();
        }
        if (log10 < digits.Length) {
          var digitCount = digits.Length - log10;
          return string.Format("{0}{1}.{2}", sign, digits.Substring(0, digitCount), digits.Substring(digitCount));
        } else {
          return string.Format("{0}0.{1}{2}", sign, new string('0', log10 - digits.Length), digits);
        }
      } else {
        return string.Format("({0}.0 / {1}.0)", num, den);
      }
    }
    public static bool IsPowerOf10(BigInteger x, out int log10) {
      log10 = 0;
      if (x.IsZero) {
        return false;
      }
      while (true) {  // invariant: x != 0 && x * 10^log10 == old(x)
        if (x.IsOne) {
          return true;
        } else if (x % 10 == 0) {
          log10++;
          x /= 10;
        } else {
          return false;
        }
      }
    }
    /// <summary>
    /// If this method return true, then
    ///     10^log10 == factor * i
    /// Otherwise, factor and log10 should not be used.
    /// </summary>
    public static bool DividesAPowerOf10(BigInteger i, out BigInteger factor, out int log10) {
      factor = BigInteger.One;
      log10 = 0;
      if (i <= 0) {
        return false;
      }

      BigInteger ten = 10;
      BigInteger five = 5;
      BigInteger two = 2;

      // invariant: 1 <= i && i * 10^log10 == factor * old(i)
      while (i % ten == 0) {
        i /= ten;
        log10++;
      }

      while (i % five == 0) {
        i /= five;
        factor *= two;
        log10++;
      }
      while (i % two == 0) {
        i /= two;
        factor *= five;
        log10++;
      }

      return i == BigInteger.One;
    }

    public BigRational(int n) {
      num = new BigInteger(n);
      den = BigInteger.One;
    }
    public BigRational(uint n) {
      num = new BigInteger(n);
      den = BigInteger.One;
    }
    public BigRational(long n) {
      num = new BigInteger(n);
      den = BigInteger.One;
    }
    public BigRational(ulong n) {
      num = new BigInteger(n);
      den = BigInteger.One;
    }
    public BigRational(BigInteger n, BigInteger d) {
      // requires 1 <= d
      num = n;
      den = d;
    }
    /// <summary>
    /// Construct an exact rational representation of a double value.
    /// Throw an exception on NaN or infinite values. Does not support
    /// subnormal values, though it would be possible to extend it to.
    /// </summary>
    public BigRational(double n) {
      if (Double.IsNaN(n)) {
        throw new ArgumentException("Can't convert NaN to a rational.");
      }
      if (Double.IsInfinity(n)) {
        throw new ArgumentException(
          "Can't convert +/- infinity to a rational.");
      }

      // Double-specific values
      const int exptBias = 1023;
      const ulong signMask = 0x8000000000000000;
      const ulong exptMask = 0x7FF0000000000000;
      const ulong mantMask = 0x000FFFFFFFFFFFFF;
      const int mantBits = 52;
      ulong bits = BitConverter.ToUInt64(BitConverter.GetBytes(n), 0);

      // Generic conversion
      bool isNeg = (bits & signMask) != 0;
      int expt = ((int)((bits & exptMask) >> mantBits)) - exptBias;
      var mant = (bits & mantMask);

      if (expt == -exptBias && mant != 0) {
        throw new ArgumentException(
          "Can't convert a subnormal value to a rational (yet).");
      }

      var one = BigInteger.One;
      var negFactor = isNeg ? BigInteger.Negate(one) : one;
      var two = new BigInteger(2);
      var exptBI = BigInteger.Pow(two, Math.Abs(expt));
      var twoToMantBits = BigInteger.Pow(two, mantBits);
      var mantNum = negFactor * (twoToMantBits + new BigInteger(mant));
      if (expt == -exptBias && mant == 0) {
        num = den = 0;
      } else if (expt < 0) {
        num = mantNum;
        den = twoToMantBits * exptBI;
      } else {
        num = exptBI * mantNum;
        den = twoToMantBits;
      }
    }
    public BigInteger ToBigInteger() {
      if (num.IsZero || den.IsOne) {
        return num;
      } else if (0 < num.Sign) {
        return num / den;
      } else {
        return (num - den + 1) / den;
      }
    }

    public bool IsInteger() {
      var floored = new BigRational(this.ToBigInteger(), BigInteger.One);
      return this == floored;
    }

    /// <summary>
    /// Returns values such that aa/dd == a and bb/dd == b.
    /// </summary>
    private static void Normalize(BigRational a, BigRational b, out BigInteger aa, out BigInteger bb, out BigInteger dd) {
      if (a.num.IsZero) {
        aa = a.num;
        bb = b.num;
        dd = b.den;
      } else if (b.num.IsZero) {
        aa = a.num;
        dd = a.den;
        bb = b.num;
      } else {
        var gcd = BigInteger.GreatestCommonDivisor(a.den, b.den);
        var xx = a.den / gcd;
        var yy = b.den / gcd;
        // We now have a == a.num / (xx * gcd) and b == b.num / (yy * gcd).
        aa = a.num * yy;
        bb = b.num * xx;
        dd = a.den * yy;
      }
    }
    public int CompareTo(BigRational that) {
      // simple things first
      int asign = this.num.Sign;
      int bsign = that.num.Sign;
      if (asign < 0 && 0 <= bsign) {
        return -1;
      } else if (asign <= 0 && 0 < bsign) {
        return -1;
      } else if (bsign < 0 && 0 <= asign) {
        return 1;
      } else if (bsign <= 0 && 0 < asign) {
        return 1;
      }

      Normalize(this, that, out var aa, out var bb, out var dd);
      return aa.CompareTo(bb);
    }
    public int Sign {
      get {
        return num.Sign;
      }
    }
    public override int GetHashCode() {
      return num.GetHashCode() + 29 * den.GetHashCode();
    }
    public override bool Equals(object obj) {
      if (obj is BigRational) {
        return this == (BigRational)obj;
      } else {
        return false;
      }
    }
    public static bool operator ==(BigRational a, BigRational b) {
      return a.CompareTo(b) == 0;
    }
    public static bool operator !=(BigRational a, BigRational b) {
      return a.CompareTo(b) != 0;
    }
    public static bool operator >(BigRational a, BigRational b) {
      return a.CompareTo(b) > 0;
    }
    public static bool operator >=(BigRational a, BigRational b) {
      return a.CompareTo(b) >= 0;
    }
    public static bool operator <(BigRational a, BigRational b) {
      return a.CompareTo(b) < 0;
    }
    public static bool operator <=(BigRational a, BigRational b) {
      return a.CompareTo(b) <= 0;
    }
    public static BigRational operator +(BigRational a, BigRational b) {
      Normalize(a, b, out var aa, out var bb, out var dd);
      return new BigRational(aa + bb, dd);
    }
    public static BigRational operator -(BigRational a, BigRational b) {
      Normalize(a, b, out var aa, out var bb, out var dd);
      return new BigRational(aa - bb, dd);
    }
    public static BigRational operator -(BigRational a) {
      return new BigRational(-a.num, a.den);
    }
    public static BigRational operator *(BigRational a, BigRational b) {
      return new BigRational(a.num * b.num, a.den * b.den);
    }
    public static BigRational operator /(BigRational a, BigRational b) {
      // Compute the reciprocal of b
      BigRational bReciprocal;
      if (0 < b.num.Sign) {
        bReciprocal = new BigRational(b.den, b.num);
      } else {
        // this is the case b.num < 0
        bReciprocal = new BigRational(-b.den, -b.num);
      }
      return a * bReciprocal;
    }
  }

  public class HaltException : Exception {
    public HaltException(object message) : base(message.ToString()) {
    }
  }
}
// Dafny program systemModulePopulator.dfy compiled into C#
// To recompile, you will need the libraries
//     System.Runtime.Numerics.dll System.Collections.Immutable.dll
// but the 'dotnet' tool in net6.0 should pick those up automatically.
// Optionally, you may want to include compiler switches like
//     /debug /nowarn:162,164,168,183,219,436,1717,1718

#if ISDAFNYRUNTIMELIB
using System;
using System.Numerics;
using System.Collections;
#endif
#if ISDAFNYRUNTIMELIB
namespace Dafny {
  internal class ArrayHelpers {
    public static T[] InitNewArray1<T>(T z, BigInteger size0) {
      int s0 = (int)size0;
      T[] a = new T[s0];
      for (int i0 = 0; i0 < s0; i0++) {
        a[i0] = z;
      }
      return a;
    }
    public static T[,] InitNewArray2<T>(T z, BigInteger size0, BigInteger size1) {
      int s0 = (int)size0;
      int s1 = (int)size1;
      T[,] a = new T[s0,s1];
      for (int i0 = 0; i0 < s0; i0++) {
        for (int i1 = 0; i1 < s1; i1++) {
          a[i0,i1] = z;
        }
      }
      return a;
    }
    public static T[,,] InitNewArray3<T>(T z, BigInteger size0, BigInteger size1, BigInteger size2) {
      int s0 = (int)size0;
      int s1 = (int)size1;
      int s2 = (int)size2;
      T[,,] a = new T[s0,s1,s2];
      for (int i0 = 0; i0 < s0; i0++) {
        for (int i1 = 0; i1 < s1; i1++) {
          for (int i2 = 0; i2 < s2; i2++) {
            a[i0,i1,i2] = z;
          }
        }
      }
      return a;
    }
    public static T[,,,] InitNewArray4<T>(T z, BigInteger size0, BigInteger size1, BigInteger size2, BigInteger size3) {
      int s0 = (int)size0;
      int s1 = (int)size1;
      int s2 = (int)size2;
      int s3 = (int)size3;
      T[,,,] a = new T[s0,s1,s2,s3];
      for (int i0 = 0; i0 < s0; i0++) {
        for (int i1 = 0; i1 < s1; i1++) {
          for (int i2 = 0; i2 < s2; i2++) {
            for (int i3 = 0; i3 < s3; i3++) {
              a[i0,i1,i2,i3] = z;
            }
          }
        }
      }
      return a;
    }
    public static T[,,,,] InitNewArray5<T>(T z, BigInteger size0, BigInteger size1, BigInteger size2, BigInteger size3, BigInteger size4) {
      int s0 = (int)size0;
      int s1 = (int)size1;
      int s2 = (int)size2;
      int s3 = (int)size3;
      int s4 = (int)size4;
      T[,,,,] a = new T[s0,s1,s2,s3,s4];
      for (int i0 = 0; i0 < s0; i0++) {
        for (int i1 = 0; i1 < s1; i1++) {
          for (int i2 = 0; i2 < s2; i2++) {
            for (int i3 = 0; i3 < s3; i3++) {
              for (int i4 = 0; i4 < s4; i4++) {
                a[i0,i1,i2,i3,i4] = z;
              }
            }
          }
        }
      }
      return a;
    }
    public static T[,,,,,] InitNewArray6<T>(T z, BigInteger size0, BigInteger size1, BigInteger size2, BigInteger size3, BigInteger size4, BigInteger size5) {
      int s0 = (int)size0;
      int s1 = (int)size1;
      int s2 = (int)size2;
      int s3 = (int)size3;
      int s4 = (int)size4;
      int s5 = (int)size5;
      T[,,,,,] a = new T[s0,s1,s2,s3,s4,s5];
      for (int i0 = 0; i0 < s0; i0++) {
        for (int i1 = 0; i1 < s1; i1++) {
          for (int i2 = 0; i2 < s2; i2++) {
            for (int i3 = 0; i3 < s3; i3++) {
              for (int i4 = 0; i4 < s4; i4++) {
                for (int i5 = 0; i5 < s5; i5++) {
                  a[i0,i1,i2,i3,i4,i5] = z;
                }
              }
            }
          }
        }
      }
      return a;
    }
    public static T[,,,,,,] InitNewArray7<T>(T z, BigInteger size0, BigInteger size1, BigInteger size2, BigInteger size3, BigInteger size4, BigInteger size5, BigInteger size6) {
      int s0 = (int)size0;
      int s1 = (int)size1;
      int s2 = (int)size2;
      int s3 = (int)size3;
      int s4 = (int)size4;
      int s5 = (int)size5;
      int s6 = (int)size6;
      T[,,,,,,] a = new T[s0,s1,s2,s3,s4,s5,s6];
      for (int i0 = 0; i0 < s0; i0++) {
        for (int i1 = 0; i1 < s1; i1++) {
          for (int i2 = 0; i2 < s2; i2++) {
            for (int i3 = 0; i3 < s3; i3++) {
              for (int i4 = 0; i4 < s4; i4++) {
                for (int i5 = 0; i5 < s5; i5++) {
                  for (int i6 = 0; i6 < s6; i6++) {
                    a[i0,i1,i2,i3,i4,i5,i6] = z;
                  }
                }
              }
            }
          }
        }
      }
      return a;
    }
    public static T[,,,,,,,] InitNewArray8<T>(T z, BigInteger size0, BigInteger size1, BigInteger size2, BigInteger size3, BigInteger size4, BigInteger size5, BigInteger size6, BigInteger size7) {
      int s0 = (int)size0;
      int s1 = (int)size1;
      int s2 = (int)size2;
      int s3 = (int)size3;
      int s4 = (int)size4;
      int s5 = (int)size5;
      int s6 = (int)size6;
      int s7 = (int)size7;
      T[,,,,,,,] a = new T[s0,s1,s2,s3,s4,s5,s6,s7];
      for (int i0 = 0; i0 < s0; i0++) {
        for (int i1 = 0; i1 < s1; i1++) {
          for (int i2 = 0; i2 < s2; i2++) {
            for (int i3 = 0; i3 < s3; i3++) {
              for (int i4 = 0; i4 < s4; i4++) {
                for (int i5 = 0; i5 < s5; i5++) {
                  for (int i6 = 0; i6 < s6; i6++) {
                    for (int i7 = 0; i7 < s7; i7++) {
                      a[i0,i1,i2,i3,i4,i5,i6,i7] = z;
                    }
                  }
                }
              }
            }
          }
        }
      }
      return a;
    }
    public static T[,,,,,,,,] InitNewArray9<T>(T z, BigInteger size0, BigInteger size1, BigInteger size2, BigInteger size3, BigInteger size4, BigInteger size5, BigInteger size6, BigInteger size7, BigInteger size8) {
      int s0 = (int)size0;
      int s1 = (int)size1;
      int s2 = (int)size2;
      int s3 = (int)size3;
      int s4 = (int)size4;
      int s5 = (int)size5;
      int s6 = (int)size6;
      int s7 = (int)size7;
      int s8 = (int)size8;
      T[,,,,,,,,] a = new T[s0,s1,s2,s3,s4,s5,s6,s7,s8];
      for (int i0 = 0; i0 < s0; i0++) {
        for (int i1 = 0; i1 < s1; i1++) {
          for (int i2 = 0; i2 < s2; i2++) {
            for (int i3 = 0; i3 < s3; i3++) {
              for (int i4 = 0; i4 < s4; i4++) {
                for (int i5 = 0; i5 < s5; i5++) {
                  for (int i6 = 0; i6 < s6; i6++) {
                    for (int i7 = 0; i7 < s7; i7++) {
                      for (int i8 = 0; i8 < s8; i8++) {
                        a[i0,i1,i2,i3,i4,i5,i6,i7,i8] = z;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      return a;
    }
    public static T[,,,,,,,,,] InitNewArray10<T>(T z, BigInteger size0, BigInteger size1, BigInteger size2, BigInteger size3, BigInteger size4, BigInteger size5, BigInteger size6, BigInteger size7, BigInteger size8, BigInteger size9) {
      int s0 = (int)size0;
      int s1 = (int)size1;
      int s2 = (int)size2;
      int s3 = (int)size3;
      int s4 = (int)size4;
      int s5 = (int)size5;
      int s6 = (int)size6;
      int s7 = (int)size7;
      int s8 = (int)size8;
      int s9 = (int)size9;
      T[,,,,,,,,,] a = new T[s0,s1,s2,s3,s4,s5,s6,s7,s8,s9];
      for (int i0 = 0; i0 < s0; i0++) {
        for (int i1 = 0; i1 < s1; i1++) {
          for (int i2 = 0; i2 < s2; i2++) {
            for (int i3 = 0; i3 < s3; i3++) {
              for (int i4 = 0; i4 < s4; i4++) {
                for (int i5 = 0; i5 < s5; i5++) {
                  for (int i6 = 0; i6 < s6; i6++) {
                    for (int i7 = 0; i7 < s7; i7++) {
                      for (int i8 = 0; i8 < s8; i8++) {
                        for (int i9 = 0; i9 < s9; i9++) {
                          a[i0,i1,i2,i3,i4,i5,i6,i7,i8,i9] = z;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      return a;
    }
    public static T[,,,,,,,,,,] InitNewArray11<T>(T z, BigInteger size0, BigInteger size1, BigInteger size2, BigInteger size3, BigInteger size4, BigInteger size5, BigInteger size6, BigInteger size7, BigInteger size8, BigInteger size9, BigInteger size10) {
      int s0 = (int)size0;
      int s1 = (int)size1;
      int s2 = (int)size2;
      int s3 = (int)size3;
      int s4 = (int)size4;
      int s5 = (int)size5;
      int s6 = (int)size6;
      int s7 = (int)size7;
      int s8 = (int)size8;
      int s9 = (int)size9;
      int s10 = (int)size10;
      T[,,,,,,,,,,] a = new T[s0,s1,s2,s3,s4,s5,s6,s7,s8,s9,s10];
      for (int i0 = 0; i0 < s0; i0++) {
        for (int i1 = 0; i1 < s1; i1++) {
          for (int i2 = 0; i2 < s2; i2++) {
            for (int i3 = 0; i3 < s3; i3++) {
              for (int i4 = 0; i4 < s4; i4++) {
                for (int i5 = 0; i5 < s5; i5++) {
                  for (int i6 = 0; i6 < s6; i6++) {
                    for (int i7 = 0; i7 < s7; i7++) {
                      for (int i8 = 0; i8 < s8; i8++) {
                        for (int i9 = 0; i9 < s9; i9++) {
                          for (int i10 = 0; i10 < s10; i10++) {
                            a[i0,i1,i2,i3,i4,i5,i6,i7,i8,i9,i10] = z;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      return a;
    }
    public static T[,,,,,,,,,,,] InitNewArray12<T>(T z, BigInteger size0, BigInteger size1, BigInteger size2, BigInteger size3, BigInteger size4, BigInteger size5, BigInteger size6, BigInteger size7, BigInteger size8, BigInteger size9, BigInteger size10, BigInteger size11) {
      int s0 = (int)size0;
      int s1 = (int)size1;
      int s2 = (int)size2;
      int s3 = (int)size3;
      int s4 = (int)size4;
      int s5 = (int)size5;
      int s6 = (int)size6;
      int s7 = (int)size7;
      int s8 = (int)size8;
      int s9 = (int)size9;
      int s10 = (int)size10;
      int s11 = (int)size11;
      T[,,,,,,,,,,,] a = new T[s0,s1,s2,s3,s4,s5,s6,s7,s8,s9,s10,s11];
      for (int i0 = 0; i0 < s0; i0++) {
        for (int i1 = 0; i1 < s1; i1++) {
          for (int i2 = 0; i2 < s2; i2++) {
            for (int i3 = 0; i3 < s3; i3++) {
              for (int i4 = 0; i4 < s4; i4++) {
                for (int i5 = 0; i5 < s5; i5++) {
                  for (int i6 = 0; i6 < s6; i6++) {
                    for (int i7 = 0; i7 < s7; i7++) {
                      for (int i8 = 0; i8 < s8; i8++) {
                        for (int i9 = 0; i9 < s9; i9++) {
                          for (int i10 = 0; i10 < s10; i10++) {
                            for (int i11 = 0; i11 < s11; i11++) {
                              a[i0,i1,i2,i3,i4,i5,i6,i7,i8,i9,i10,i11] = z;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      return a;
    }
    public static T[,,,,,,,,,,,,] InitNewArray13<T>(T z, BigInteger size0, BigInteger size1, BigInteger size2, BigInteger size3, BigInteger size4, BigInteger size5, BigInteger size6, BigInteger size7, BigInteger size8, BigInteger size9, BigInteger size10, BigInteger size11, BigInteger size12) {
      int s0 = (int)size0;
      int s1 = (int)size1;
      int s2 = (int)size2;
      int s3 = (int)size3;
      int s4 = (int)size4;
      int s5 = (int)size5;
      int s6 = (int)size6;
      int s7 = (int)size7;
      int s8 = (int)size8;
      int s9 = (int)size9;
      int s10 = (int)size10;
      int s11 = (int)size11;
      int s12 = (int)size12;
      T[,,,,,,,,,,,,] a = new T[s0,s1,s2,s3,s4,s5,s6,s7,s8,s9,s10,s11,s12];
      for (int i0 = 0; i0 < s0; i0++) {
        for (int i1 = 0; i1 < s1; i1++) {
          for (int i2 = 0; i2 < s2; i2++) {
            for (int i3 = 0; i3 < s3; i3++) {
              for (int i4 = 0; i4 < s4; i4++) {
                for (int i5 = 0; i5 < s5; i5++) {
                  for (int i6 = 0; i6 < s6; i6++) {
                    for (int i7 = 0; i7 < s7; i7++) {
                      for (int i8 = 0; i8 < s8; i8++) {
                        for (int i9 = 0; i9 < s9; i9++) {
                          for (int i10 = 0; i10 < s10; i10++) {
                            for (int i11 = 0; i11 < s11; i11++) {
                              for (int i12 = 0; i12 < s12; i12++) {
                                a[i0,i1,i2,i3,i4,i5,i6,i7,i8,i9,i10,i11,i12] = z;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      return a;
    }
    public static T[,,,,,,,,,,,,,] InitNewArray14<T>(T z, BigInteger size0, BigInteger size1, BigInteger size2, BigInteger size3, BigInteger size4, BigInteger size5, BigInteger size6, BigInteger size7, BigInteger size8, BigInteger size9, BigInteger size10, BigInteger size11, BigInteger size12, BigInteger size13) {
      int s0 = (int)size0;
      int s1 = (int)size1;
      int s2 = (int)size2;
      int s3 = (int)size3;
      int s4 = (int)size4;
      int s5 = (int)size5;
      int s6 = (int)size6;
      int s7 = (int)size7;
      int s8 = (int)size8;
      int s9 = (int)size9;
      int s10 = (int)size10;
      int s11 = (int)size11;
      int s12 = (int)size12;
      int s13 = (int)size13;
      T[,,,,,,,,,,,,,] a = new T[s0,s1,s2,s3,s4,s5,s6,s7,s8,s9,s10,s11,s12,s13];
      for (int i0 = 0; i0 < s0; i0++) {
        for (int i1 = 0; i1 < s1; i1++) {
          for (int i2 = 0; i2 < s2; i2++) {
            for (int i3 = 0; i3 < s3; i3++) {
              for (int i4 = 0; i4 < s4; i4++) {
                for (int i5 = 0; i5 < s5; i5++) {
                  for (int i6 = 0; i6 < s6; i6++) {
                    for (int i7 = 0; i7 < s7; i7++) {
                      for (int i8 = 0; i8 < s8; i8++) {
                        for (int i9 = 0; i9 < s9; i9++) {
                          for (int i10 = 0; i10 < s10; i10++) {
                            for (int i11 = 0; i11 < s11; i11++) {
                              for (int i12 = 0; i12 < s12; i12++) {
                                for (int i13 = 0; i13 < s13; i13++) {
                                  a[i0,i1,i2,i3,i4,i5,i6,i7,i8,i9,i10,i11,i12,i13] = z;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      return a;
    }
    public static T[,,,,,,,,,,,,,,] InitNewArray15<T>(T z, BigInteger size0, BigInteger size1, BigInteger size2, BigInteger size3, BigInteger size4, BigInteger size5, BigInteger size6, BigInteger size7, BigInteger size8, BigInteger size9, BigInteger size10, BigInteger size11, BigInteger size12, BigInteger size13, BigInteger size14) {
      int s0 = (int)size0;
      int s1 = (int)size1;
      int s2 = (int)size2;
      int s3 = (int)size3;
      int s4 = (int)size4;
      int s5 = (int)size5;
      int s6 = (int)size6;
      int s7 = (int)size7;
      int s8 = (int)size8;
      int s9 = (int)size9;
      int s10 = (int)size10;
      int s11 = (int)size11;
      int s12 = (int)size12;
      int s13 = (int)size13;
      int s14 = (int)size14;
      T[,,,,,,,,,,,,,,] a = new T[s0,s1,s2,s3,s4,s5,s6,s7,s8,s9,s10,s11,s12,s13,s14];
      for (int i0 = 0; i0 < s0; i0++) {
        for (int i1 = 0; i1 < s1; i1++) {
          for (int i2 = 0; i2 < s2; i2++) {
            for (int i3 = 0; i3 < s3; i3++) {
              for (int i4 = 0; i4 < s4; i4++) {
                for (int i5 = 0; i5 < s5; i5++) {
                  for (int i6 = 0; i6 < s6; i6++) {
                    for (int i7 = 0; i7 < s7; i7++) {
                      for (int i8 = 0; i8 < s8; i8++) {
                        for (int i9 = 0; i9 < s9; i9++) {
                          for (int i10 = 0; i10 < s10; i10++) {
                            for (int i11 = 0; i11 < s11; i11++) {
                              for (int i12 = 0; i12 < s12; i12++) {
                                for (int i13 = 0; i13 < s13; i13++) {
                                  for (int i14 = 0; i14 < s14; i14++) {
                                    a[i0,i1,i2,i3,i4,i5,i6,i7,i8,i9,i10,i11,i12,i13,i14] = z;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      return a;
    }
    public static T[,,,,,,,,,,,,,,,] InitNewArray16<T>(T z, BigInteger size0, BigInteger size1, BigInteger size2, BigInteger size3, BigInteger size4, BigInteger size5, BigInteger size6, BigInteger size7, BigInteger size8, BigInteger size9, BigInteger size10, BigInteger size11, BigInteger size12, BigInteger size13, BigInteger size14, BigInteger size15) {
      int s0 = (int)size0;
      int s1 = (int)size1;
      int s2 = (int)size2;
      int s3 = (int)size3;
      int s4 = (int)size4;
      int s5 = (int)size5;
      int s6 = (int)size6;
      int s7 = (int)size7;
      int s8 = (int)size8;
      int s9 = (int)size9;
      int s10 = (int)size10;
      int s11 = (int)size11;
      int s12 = (int)size12;
      int s13 = (int)size13;
      int s14 = (int)size14;
      int s15 = (int)size15;
      T[,,,,,,,,,,,,,,,] a = new T[s0,s1,s2,s3,s4,s5,s6,s7,s8,s9,s10,s11,s12,s13,s14,s15];
      for (int i0 = 0; i0 < s0; i0++) {
        for (int i1 = 0; i1 < s1; i1++) {
          for (int i2 = 0; i2 < s2; i2++) {
            for (int i3 = 0; i3 < s3; i3++) {
              for (int i4 = 0; i4 < s4; i4++) {
                for (int i5 = 0; i5 < s5; i5++) {
                  for (int i6 = 0; i6 < s6; i6++) {
                    for (int i7 = 0; i7 < s7; i7++) {
                      for (int i8 = 0; i8 < s8; i8++) {
                        for (int i9 = 0; i9 < s9; i9++) {
                          for (int i10 = 0; i10 < s10; i10++) {
                            for (int i11 = 0; i11 < s11; i11++) {
                              for (int i12 = 0; i12 < s12; i12++) {
                                for (int i13 = 0; i13 < s13; i13++) {
                                  for (int i14 = 0; i14 < s14; i14++) {
                                    for (int i15 = 0; i15 < s15; i15++) {
                                      a[i0,i1,i2,i3,i4,i5,i6,i7,i8,i9,i10,i11,i12,i13,i14,i15] = z;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      return a;
    }
  }
} // end of namespace Dafny
internal static class FuncExtensions {
  public static Func<U, UResult> DowncastClone<T, TResult, U, UResult>(this Func<T, TResult> F, Func<U, T> ArgConv, Func<TResult, UResult> ResConv) {
    return arg => ResConv(F(ArgConv(arg)));
  }
  public static Func<UResult> DowncastClone<TResult, UResult>(this Func<TResult> F, Func<TResult, UResult> ResConv) {
    return () => ResConv(F());
  }
  public static Func<U1, U2, UResult> DowncastClone<T1, T2, TResult, U1, U2, UResult>(this Func<T1, T2, TResult> F, Func<U1, T1> ArgConv1, Func<U2, T2> ArgConv2, Func<TResult, UResult> ResConv) {
    return (arg1, arg2) => ResConv(F(ArgConv1(arg1), ArgConv2(arg2)));
  }
  public static Func<U1, U2, U3, UResult> DowncastClone<T1, T2, T3, TResult, U1, U2, U3, UResult>(this Func<T1, T2, T3, TResult> F, Func<U1, T1> ArgConv1, Func<U2, T2> ArgConv2, Func<U3, T3> ArgConv3, Func<TResult, UResult> ResConv) {
    return (arg1, arg2, arg3) => ResConv(F(ArgConv1(arg1), ArgConv2(arg2), ArgConv3(arg3)));
  }
  public static Func<U1, U2, U3, U4, UResult> DowncastClone<T1, T2, T3, T4, TResult, U1, U2, U3, U4, UResult>(this Func<T1, T2, T3, T4, TResult> F, Func<U1, T1> ArgConv1, Func<U2, T2> ArgConv2, Func<U3, T3> ArgConv3, Func<U4, T4> ArgConv4, Func<TResult, UResult> ResConv) {
    return (arg1, arg2, arg3, arg4) => ResConv(F(ArgConv1(arg1), ArgConv2(arg2), ArgConv3(arg3), ArgConv4(arg4)));
  }
  public static Func<U1, U2, U3, U4, U5, UResult> DowncastClone<T1, T2, T3, T4, T5, TResult, U1, U2, U3, U4, U5, UResult>(this Func<T1, T2, T3, T4, T5, TResult> F, Func<U1, T1> ArgConv1, Func<U2, T2> ArgConv2, Func<U3, T3> ArgConv3, Func<U4, T4> ArgConv4, Func<U5, T5> ArgConv5, Func<TResult, UResult> ResConv) {
    return (arg1, arg2, arg3, arg4, arg5) => ResConv(F(ArgConv1(arg1), ArgConv2(arg2), ArgConv3(arg3), ArgConv4(arg4), ArgConv5(arg5)));
  }
  public static Func<U1, U2, U3, U4, U5, U6, UResult> DowncastClone<T1, T2, T3, T4, T5, T6, TResult, U1, U2, U3, U4, U5, U6, UResult>(this Func<T1, T2, T3, T4, T5, T6, TResult> F, Func<U1, T1> ArgConv1, Func<U2, T2> ArgConv2, Func<U3, T3> ArgConv3, Func<U4, T4> ArgConv4, Func<U5, T5> ArgConv5, Func<U6, T6> ArgConv6, Func<TResult, UResult> ResConv) {
    return (arg1, arg2, arg3, arg4, arg5, arg6) => ResConv(F(ArgConv1(arg1), ArgConv2(arg2), ArgConv3(arg3), ArgConv4(arg4), ArgConv5(arg5), ArgConv6(arg6)));
  }
  public static Func<U1, U2, U3, U4, U5, U6, U7, UResult> DowncastClone<T1, T2, T3, T4, T5, T6, T7, TResult, U1, U2, U3, U4, U5, U6, U7, UResult>(this Func<T1, T2, T3, T4, T5, T6, T7, TResult> F, Func<U1, T1> ArgConv1, Func<U2, T2> ArgConv2, Func<U3, T3> ArgConv3, Func<U4, T4> ArgConv4, Func<U5, T5> ArgConv5, Func<U6, T6> ArgConv6, Func<U7, T7> ArgConv7, Func<TResult, UResult> ResConv) {
    return (arg1, arg2, arg3, arg4, arg5, arg6, arg7) => ResConv(F(ArgConv1(arg1), ArgConv2(arg2), ArgConv3(arg3), ArgConv4(arg4), ArgConv5(arg5), ArgConv6(arg6), ArgConv7(arg7)));
  }
  public static Func<U1, U2, U3, U4, U5, U6, U7, U8, UResult> DowncastClone<T1, T2, T3, T4, T5, T6, T7, T8, TResult, U1, U2, U3, U4, U5, U6, U7, U8, UResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult> F, Func<U1, T1> ArgConv1, Func<U2, T2> ArgConv2, Func<U3, T3> ArgConv3, Func<U4, T4> ArgConv4, Func<U5, T5> ArgConv5, Func<U6, T6> ArgConv6, Func<U7, T7> ArgConv7, Func<U8, T8> ArgConv8, Func<TResult, UResult> ResConv) {
    return (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8) => ResConv(F(ArgConv1(arg1), ArgConv2(arg2), ArgConv3(arg3), ArgConv4(arg4), ArgConv5(arg5), ArgConv6(arg6), ArgConv7(arg7), ArgConv8(arg8)));
  }
  public static Func<U1, U2, U3, U4, U5, U6, U7, U8, U9, UResult> DowncastClone<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult, U1, U2, U3, U4, U5, U6, U7, U8, U9, UResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> F, Func<U1, T1> ArgConv1, Func<U2, T2> ArgConv2, Func<U3, T3> ArgConv3, Func<U4, T4> ArgConv4, Func<U5, T5> ArgConv5, Func<U6, T6> ArgConv6, Func<U7, T7> ArgConv7, Func<U8, T8> ArgConv8, Func<U9, T9> ArgConv9, Func<TResult, UResult> ResConv) {
    return (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9) => ResConv(F(ArgConv1(arg1), ArgConv2(arg2), ArgConv3(arg3), ArgConv4(arg4), ArgConv5(arg5), ArgConv6(arg6), ArgConv7(arg7), ArgConv8(arg8), ArgConv9(arg9)));
  }
  public static Func<U1, U2, U3, U4, U5, U6, U7, U8, U9, U10, UResult> DowncastClone<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult, U1, U2, U3, U4, U5, U6, U7, U8, U9, U10, UResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> F, Func<U1, T1> ArgConv1, Func<U2, T2> ArgConv2, Func<U3, T3> ArgConv3, Func<U4, T4> ArgConv4, Func<U5, T5> ArgConv5, Func<U6, T6> ArgConv6, Func<U7, T7> ArgConv7, Func<U8, T8> ArgConv8, Func<U9, T9> ArgConv9, Func<U10, T10> ArgConv10, Func<TResult, UResult> ResConv) {
    return (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10) => ResConv(F(ArgConv1(arg1), ArgConv2(arg2), ArgConv3(arg3), ArgConv4(arg4), ArgConv5(arg5), ArgConv6(arg6), ArgConv7(arg7), ArgConv8(arg8), ArgConv9(arg9), ArgConv10(arg10)));
  }
  public static Func<U1, U2, U3, U4, U5, U6, U7, U8, U9, U10, U11, UResult> DowncastClone<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult, U1, U2, U3, U4, U5, U6, U7, U8, U9, U10, U11, UResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult> F, Func<U1, T1> ArgConv1, Func<U2, T2> ArgConv2, Func<U3, T3> ArgConv3, Func<U4, T4> ArgConv4, Func<U5, T5> ArgConv5, Func<U6, T6> ArgConv6, Func<U7, T7> ArgConv7, Func<U8, T8> ArgConv8, Func<U9, T9> ArgConv9, Func<U10, T10> ArgConv10, Func<U11, T11> ArgConv11, Func<TResult, UResult> ResConv) {
    return (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11) => ResConv(F(ArgConv1(arg1), ArgConv2(arg2), ArgConv3(arg3), ArgConv4(arg4), ArgConv5(arg5), ArgConv6(arg6), ArgConv7(arg7), ArgConv8(arg8), ArgConv9(arg9), ArgConv10(arg10), ArgConv11(arg11)));
  }
  public static Func<U1, U2, U3, U4, U5, U6, U7, U8, U9, U10, U11, U12, UResult> DowncastClone<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult, U1, U2, U3, U4, U5, U6, U7, U8, U9, U10, U11, U12, UResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult> F, Func<U1, T1> ArgConv1, Func<U2, T2> ArgConv2, Func<U3, T3> ArgConv3, Func<U4, T4> ArgConv4, Func<U5, T5> ArgConv5, Func<U6, T6> ArgConv6, Func<U7, T7> ArgConv7, Func<U8, T8> ArgConv8, Func<U9, T9> ArgConv9, Func<U10, T10> ArgConv10, Func<U11, T11> ArgConv11, Func<U12, T12> ArgConv12, Func<TResult, UResult> ResConv) {
    return (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12) => ResConv(F(ArgConv1(arg1), ArgConv2(arg2), ArgConv3(arg3), ArgConv4(arg4), ArgConv5(arg5), ArgConv6(arg6), ArgConv7(arg7), ArgConv8(arg8), ArgConv9(arg9), ArgConv10(arg10), ArgConv11(arg11), ArgConv12(arg12)));
  }
  public static Func<U1, U2, U3, U4, U5, U6, U7, U8, U9, U10, U11, U12, U13, UResult> DowncastClone<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult, U1, U2, U3, U4, U5, U6, U7, U8, U9, U10, U11, U12, U13, UResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult> F, Func<U1, T1> ArgConv1, Func<U2, T2> ArgConv2, Func<U3, T3> ArgConv3, Func<U4, T4> ArgConv4, Func<U5, T5> ArgConv5, Func<U6, T6> ArgConv6, Func<U7, T7> ArgConv7, Func<U8, T8> ArgConv8, Func<U9, T9> ArgConv9, Func<U10, T10> ArgConv10, Func<U11, T11> ArgConv11, Func<U12, T12> ArgConv12, Func<U13, T13> ArgConv13, Func<TResult, UResult> ResConv) {
    return (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13) => ResConv(F(ArgConv1(arg1), ArgConv2(arg2), ArgConv3(arg3), ArgConv4(arg4), ArgConv5(arg5), ArgConv6(arg6), ArgConv7(arg7), ArgConv8(arg8), ArgConv9(arg9), ArgConv10(arg10), ArgConv11(arg11), ArgConv12(arg12), ArgConv13(arg13)));
  }
  public static Func<U1, U2, U3, U4, U5, U6, U7, U8, U9, U10, U11, U12, U13, U14, UResult> DowncastClone<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult, U1, U2, U3, U4, U5, U6, U7, U8, U9, U10, U11, U12, U13, U14, UResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult> F, Func<U1, T1> ArgConv1, Func<U2, T2> ArgConv2, Func<U3, T3> ArgConv3, Func<U4, T4> ArgConv4, Func<U5, T5> ArgConv5, Func<U6, T6> ArgConv6, Func<U7, T7> ArgConv7, Func<U8, T8> ArgConv8, Func<U9, T9> ArgConv9, Func<U10, T10> ArgConv10, Func<U11, T11> ArgConv11, Func<U12, T12> ArgConv12, Func<U13, T13> ArgConv13, Func<U14, T14> ArgConv14, Func<TResult, UResult> ResConv) {
    return (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14) => ResConv(F(ArgConv1(arg1), ArgConv2(arg2), ArgConv3(arg3), ArgConv4(arg4), ArgConv5(arg5), ArgConv6(arg6), ArgConv7(arg7), ArgConv8(arg8), ArgConv9(arg9), ArgConv10(arg10), ArgConv11(arg11), ArgConv12(arg12), ArgConv13(arg13), ArgConv14(arg14)));
  }
  public static Func<U1, U2, U3, U4, U5, U6, U7, U8, U9, U10, U11, U12, U13, U14, U15, UResult> DowncastClone<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult, U1, U2, U3, U4, U5, U6, U7, U8, U9, U10, U11, U12, U13, U14, U15, UResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult> F, Func<U1, T1> ArgConv1, Func<U2, T2> ArgConv2, Func<U3, T3> ArgConv3, Func<U4, T4> ArgConv4, Func<U5, T5> ArgConv5, Func<U6, T6> ArgConv6, Func<U7, T7> ArgConv7, Func<U8, T8> ArgConv8, Func<U9, T9> ArgConv9, Func<U10, T10> ArgConv10, Func<U11, T11> ArgConv11, Func<U12, T12> ArgConv12, Func<U13, T13> ArgConv13, Func<U14, T14> ArgConv14, Func<U15, T15> ArgConv15, Func<TResult, UResult> ResConv) {
    return (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15) => ResConv(F(ArgConv1(arg1), ArgConv2(arg2), ArgConv3(arg3), ArgConv4(arg4), ArgConv5(arg5), ArgConv6(arg6), ArgConv7(arg7), ArgConv8(arg8), ArgConv9(arg9), ArgConv10(arg10), ArgConv11(arg11), ArgConv12(arg12), ArgConv13(arg13), ArgConv14(arg14), ArgConv15(arg15)));
  }
  public static Func<U1, U2, U3, U4, U5, U6, U7, U8, U9, U10, U11, U12, U13, U14, U15, U16, UResult> DowncastClone<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult, U1, U2, U3, U4, U5, U6, U7, U8, U9, U10, U11, U12, U13, U14, U15, U16, UResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult> F, Func<U1, T1> ArgConv1, Func<U2, T2> ArgConv2, Func<U3, T3> ArgConv3, Func<U4, T4> ArgConv4, Func<U5, T5> ArgConv5, Func<U6, T6> ArgConv6, Func<U7, T7> ArgConv7, Func<U8, T8> ArgConv8, Func<U9, T9> ArgConv9, Func<U10, T10> ArgConv10, Func<U11, T11> ArgConv11, Func<U12, T12> ArgConv12, Func<U13, T13> ArgConv13, Func<U14, T14> ArgConv14, Func<U15, T15> ArgConv15, Func<U16, T16> ArgConv16, Func<TResult, UResult> ResConv) {
    return (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16) => ResConv(F(ArgConv1(arg1), ArgConv2(arg2), ArgConv3(arg3), ArgConv4(arg4), ArgConv5(arg5), ArgConv6(arg6), ArgConv7(arg7), ArgConv8(arg8), ArgConv9(arg9), ArgConv10(arg10), ArgConv11(arg11), ArgConv12(arg12), ArgConv13(arg13), ArgConv14(arg14), ArgConv15(arg15), ArgConv16(arg16)));
  }
}
// end of class FuncExtensions
#endif
namespace _System {

  public partial class nat {
    private static readonly Dafny.TypeDescriptor<BigInteger> _TYPE = new Dafny.TypeDescriptor<BigInteger>(BigInteger.Zero);
    public static Dafny.TypeDescriptor<BigInteger> _TypeDescriptor() {
      return _TYPE;
    }
    public static bool _Is(BigInteger __source) {
      BigInteger _0_x = __source;
      return (_0_x).Sign != -1;
    }
  }

  public interface _ITuple2<out T0, out T1> {
    T0 dtor__0 { get; }
    T1 dtor__1 { get; }
    _ITuple2<__T0, __T1> DowncastClone<__T0, __T1>(Func<T0, __T0> converter0, Func<T1, __T1> converter1);
  }
  public class Tuple2<T0, T1> : _ITuple2<T0, T1> {
    public readonly T0 __0;
    public readonly T1 __1;
    public Tuple2(T0 _0, T1 _1) {
      this.__0 = _0;
      this.__1 = _1;
    }
    public _ITuple2<__T0, __T1> DowncastClone<__T0, __T1>(Func<T0, __T0> converter0, Func<T1, __T1> converter1) {
      if (this is _ITuple2<__T0, __T1> dt) { return dt; }
      return new Tuple2<__T0, __T1>(converter0(__0), converter1(__1));
    }
    public override bool Equals(object other) {
      var oth = other as _System.Tuple2<T0, T1>;
      return oth != null && object.Equals(this.__0, oth.__0) && object.Equals(this.__1, oth.__1);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__1));
      return (int) hash;
    }
    public override string ToString() {
      string s = "";
      s += "(";
      s += Dafny.Helpers.ToString(this.__0);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__1);
      s += ")";
      return s;
    }
    public static _System._ITuple2<T0, T1> Default(T0 _default_T0, T1 _default_T1) {
      return create(_default_T0, _default_T1);
    }
    public static Dafny.TypeDescriptor<_System._ITuple2<T0, T1>> _TypeDescriptor(Dafny.TypeDescriptor<T0> _td_T0, Dafny.TypeDescriptor<T1> _td_T1) {
      return new Dafny.TypeDescriptor<_System._ITuple2<T0, T1>>(_System.Tuple2<T0, T1>.Default(_td_T0.Default(), _td_T1.Default()));
    }
    public static _ITuple2<T0, T1> create(T0 _0, T1 _1) {
      return new Tuple2<T0, T1>(_0, _1);
    }
    public static _ITuple2<T0, T1> create____hMake2(T0 _0, T1 _1) {
      return create(_0, _1);
    }
    public T0 dtor__0 {
      get {
        return this.__0;
      }
    }
    public T1 dtor__1 {
      get {
        return this.__1;
      }
    }
  }

  public interface _ITuple0 {
    _ITuple0 DowncastClone();
  }
  public class Tuple0 : _ITuple0 {
    public Tuple0() {
    }
    public _ITuple0 DowncastClone() {
      if (this is _ITuple0 dt) { return dt; }
      return new Tuple0();
    }
    public override bool Equals(object other) {
      var oth = other as _System.Tuple0;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      return "()";
    }
    private static readonly _System._ITuple0 theDefault = create();
    public static _System._ITuple0 Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<_System._ITuple0> _TYPE = new Dafny.TypeDescriptor<_System._ITuple0>(_System.Tuple0.Default());
    public static Dafny.TypeDescriptor<_System._ITuple0> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ITuple0 create() {
      return new Tuple0();
    }
    public static _ITuple0 create____hMake0() {
      return create();
    }
    public static System.Collections.Generic.IEnumerable<_ITuple0> AllSingletonConstructors {
      get {
        yield return Tuple0.create();
      }
    }
  }

  public interface _ITuple1<out T0> {
    T0 dtor__0 { get; }
    _ITuple1<__T0> DowncastClone<__T0>(Func<T0, __T0> converter0);
  }
  public class Tuple1<T0> : _ITuple1<T0> {
    public readonly T0 __0;
    public Tuple1(T0 _0) {
      this.__0 = _0;
    }
    public _ITuple1<__T0> DowncastClone<__T0>(Func<T0, __T0> converter0) {
      if (this is _ITuple1<__T0> dt) { return dt; }
      return new Tuple1<__T0>(converter0(__0));
    }
    public override bool Equals(object other) {
      var oth = other as _System.Tuple1<T0>;
      return oth != null && object.Equals(this.__0, oth.__0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "";
      s += "(";
      s += Dafny.Helpers.ToString(this.__0);
      s += ")";
      return s;
    }
    public static _System._ITuple1<T0> Default(T0 _default_T0) {
      return create(_default_T0);
    }
    public static Dafny.TypeDescriptor<_System._ITuple1<T0>> _TypeDescriptor(Dafny.TypeDescriptor<T0> _td_T0) {
      return new Dafny.TypeDescriptor<_System._ITuple1<T0>>(_System.Tuple1<T0>.Default(_td_T0.Default()));
    }
    public static _ITuple1<T0> create(T0 _0) {
      return new Tuple1<T0>(_0);
    }
    public static _ITuple1<T0> create____hMake1(T0 _0) {
      return create(_0);
    }
    public T0 dtor__0 {
      get {
        return this.__0;
      }
    }
  }

  public interface _ITuple3<out T0, out T1, out T2> {
    T0 dtor__0 { get; }
    T1 dtor__1 { get; }
    T2 dtor__2 { get; }
    _ITuple3<__T0, __T1, __T2> DowncastClone<__T0, __T1, __T2>(Func<T0, __T0> converter0, Func<T1, __T1> converter1, Func<T2, __T2> converter2);
  }
  public class Tuple3<T0, T1, T2> : _ITuple3<T0, T1, T2> {
    public readonly T0 __0;
    public readonly T1 __1;
    public readonly T2 __2;
    public Tuple3(T0 _0, T1 _1, T2 _2) {
      this.__0 = _0;
      this.__1 = _1;
      this.__2 = _2;
    }
    public _ITuple3<__T0, __T1, __T2> DowncastClone<__T0, __T1, __T2>(Func<T0, __T0> converter0, Func<T1, __T1> converter1, Func<T2, __T2> converter2) {
      if (this is _ITuple3<__T0, __T1, __T2> dt) { return dt; }
      return new Tuple3<__T0, __T1, __T2>(converter0(__0), converter1(__1), converter2(__2));
    }
    public override bool Equals(object other) {
      var oth = other as _System.Tuple3<T0, T1, T2>;
      return oth != null && object.Equals(this.__0, oth.__0) && object.Equals(this.__1, oth.__1) && object.Equals(this.__2, oth.__2);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__1));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__2));
      return (int) hash;
    }
    public override string ToString() {
      string s = "";
      s += "(";
      s += Dafny.Helpers.ToString(this.__0);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__1);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__2);
      s += ")";
      return s;
    }
    public static _System._ITuple3<T0, T1, T2> Default(T0 _default_T0, T1 _default_T1, T2 _default_T2) {
      return create(_default_T0, _default_T1, _default_T2);
    }
    public static Dafny.TypeDescriptor<_System._ITuple3<T0, T1, T2>> _TypeDescriptor(Dafny.TypeDescriptor<T0> _td_T0, Dafny.TypeDescriptor<T1> _td_T1, Dafny.TypeDescriptor<T2> _td_T2) {
      return new Dafny.TypeDescriptor<_System._ITuple3<T0, T1, T2>>(_System.Tuple3<T0, T1, T2>.Default(_td_T0.Default(), _td_T1.Default(), _td_T2.Default()));
    }
    public static _ITuple3<T0, T1, T2> create(T0 _0, T1 _1, T2 _2) {
      return new Tuple3<T0, T1, T2>(_0, _1, _2);
    }
    public static _ITuple3<T0, T1, T2> create____hMake3(T0 _0, T1 _1, T2 _2) {
      return create(_0, _1, _2);
    }
    public T0 dtor__0 {
      get {
        return this.__0;
      }
    }
    public T1 dtor__1 {
      get {
        return this.__1;
      }
    }
    public T2 dtor__2 {
      get {
        return this.__2;
      }
    }
  }

  public interface _ITuple4<out T0, out T1, out T2, out T3> {
    T0 dtor__0 { get; }
    T1 dtor__1 { get; }
    T2 dtor__2 { get; }
    T3 dtor__3 { get; }
    _ITuple4<__T0, __T1, __T2, __T3> DowncastClone<__T0, __T1, __T2, __T3>(Func<T0, __T0> converter0, Func<T1, __T1> converter1, Func<T2, __T2> converter2, Func<T3, __T3> converter3);
  }
  public class Tuple4<T0, T1, T2, T3> : _ITuple4<T0, T1, T2, T3> {
    public readonly T0 __0;
    public readonly T1 __1;
    public readonly T2 __2;
    public readonly T3 __3;
    public Tuple4(T0 _0, T1 _1, T2 _2, T3 _3) {
      this.__0 = _0;
      this.__1 = _1;
      this.__2 = _2;
      this.__3 = _3;
    }
    public _ITuple4<__T0, __T1, __T2, __T3> DowncastClone<__T0, __T1, __T2, __T3>(Func<T0, __T0> converter0, Func<T1, __T1> converter1, Func<T2, __T2> converter2, Func<T3, __T3> converter3) {
      if (this is _ITuple4<__T0, __T1, __T2, __T3> dt) { return dt; }
      return new Tuple4<__T0, __T1, __T2, __T3>(converter0(__0), converter1(__1), converter2(__2), converter3(__3));
    }
    public override bool Equals(object other) {
      var oth = other as _System.Tuple4<T0, T1, T2, T3>;
      return oth != null && object.Equals(this.__0, oth.__0) && object.Equals(this.__1, oth.__1) && object.Equals(this.__2, oth.__2) && object.Equals(this.__3, oth.__3);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__1));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__2));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__3));
      return (int) hash;
    }
    public override string ToString() {
      string s = "";
      s += "(";
      s += Dafny.Helpers.ToString(this.__0);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__1);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__2);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__3);
      s += ")";
      return s;
    }
    public static _System._ITuple4<T0, T1, T2, T3> Default(T0 _default_T0, T1 _default_T1, T2 _default_T2, T3 _default_T3) {
      return create(_default_T0, _default_T1, _default_T2, _default_T3);
    }
    public static Dafny.TypeDescriptor<_System._ITuple4<T0, T1, T2, T3>> _TypeDescriptor(Dafny.TypeDescriptor<T0> _td_T0, Dafny.TypeDescriptor<T1> _td_T1, Dafny.TypeDescriptor<T2> _td_T2, Dafny.TypeDescriptor<T3> _td_T3) {
      return new Dafny.TypeDescriptor<_System._ITuple4<T0, T1, T2, T3>>(_System.Tuple4<T0, T1, T2, T3>.Default(_td_T0.Default(), _td_T1.Default(), _td_T2.Default(), _td_T3.Default()));
    }
    public static _ITuple4<T0, T1, T2, T3> create(T0 _0, T1 _1, T2 _2, T3 _3) {
      return new Tuple4<T0, T1, T2, T3>(_0, _1, _2, _3);
    }
    public static _ITuple4<T0, T1, T2, T3> create____hMake4(T0 _0, T1 _1, T2 _2, T3 _3) {
      return create(_0, _1, _2, _3);
    }
    public T0 dtor__0 {
      get {
        return this.__0;
      }
    }
    public T1 dtor__1 {
      get {
        return this.__1;
      }
    }
    public T2 dtor__2 {
      get {
        return this.__2;
      }
    }
    public T3 dtor__3 {
      get {
        return this.__3;
      }
    }
  }

  public interface _ITuple5<out T0, out T1, out T2, out T3, out T4> {
    T0 dtor__0 { get; }
    T1 dtor__1 { get; }
    T2 dtor__2 { get; }
    T3 dtor__3 { get; }
    T4 dtor__4 { get; }
    _ITuple5<__T0, __T1, __T2, __T3, __T4> DowncastClone<__T0, __T1, __T2, __T3, __T4>(Func<T0, __T0> converter0, Func<T1, __T1> converter1, Func<T2, __T2> converter2, Func<T3, __T3> converter3, Func<T4, __T4> converter4);
  }
  public class Tuple5<T0, T1, T2, T3, T4> : _ITuple5<T0, T1, T2, T3, T4> {
    public readonly T0 __0;
    public readonly T1 __1;
    public readonly T2 __2;
    public readonly T3 __3;
    public readonly T4 __4;
    public Tuple5(T0 _0, T1 _1, T2 _2, T3 _3, T4 _4) {
      this.__0 = _0;
      this.__1 = _1;
      this.__2 = _2;
      this.__3 = _3;
      this.__4 = _4;
    }
    public _ITuple5<__T0, __T1, __T2, __T3, __T4> DowncastClone<__T0, __T1, __T2, __T3, __T4>(Func<T0, __T0> converter0, Func<T1, __T1> converter1, Func<T2, __T2> converter2, Func<T3, __T3> converter3, Func<T4, __T4> converter4) {
      if (this is _ITuple5<__T0, __T1, __T2, __T3, __T4> dt) { return dt; }
      return new Tuple5<__T0, __T1, __T2, __T3, __T4>(converter0(__0), converter1(__1), converter2(__2), converter3(__3), converter4(__4));
    }
    public override bool Equals(object other) {
      var oth = other as _System.Tuple5<T0, T1, T2, T3, T4>;
      return oth != null && object.Equals(this.__0, oth.__0) && object.Equals(this.__1, oth.__1) && object.Equals(this.__2, oth.__2) && object.Equals(this.__3, oth.__3) && object.Equals(this.__4, oth.__4);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__1));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__2));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__3));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__4));
      return (int) hash;
    }
    public override string ToString() {
      string s = "";
      s += "(";
      s += Dafny.Helpers.ToString(this.__0);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__1);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__2);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__3);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__4);
      s += ")";
      return s;
    }
    public static _System._ITuple5<T0, T1, T2, T3, T4> Default(T0 _default_T0, T1 _default_T1, T2 _default_T2, T3 _default_T3, T4 _default_T4) {
      return create(_default_T0, _default_T1, _default_T2, _default_T3, _default_T4);
    }
    public static Dafny.TypeDescriptor<_System._ITuple5<T0, T1, T2, T3, T4>> _TypeDescriptor(Dafny.TypeDescriptor<T0> _td_T0, Dafny.TypeDescriptor<T1> _td_T1, Dafny.TypeDescriptor<T2> _td_T2, Dafny.TypeDescriptor<T3> _td_T3, Dafny.TypeDescriptor<T4> _td_T4) {
      return new Dafny.TypeDescriptor<_System._ITuple5<T0, T1, T2, T3, T4>>(_System.Tuple5<T0, T1, T2, T3, T4>.Default(_td_T0.Default(), _td_T1.Default(), _td_T2.Default(), _td_T3.Default(), _td_T4.Default()));
    }
    public static _ITuple5<T0, T1, T2, T3, T4> create(T0 _0, T1 _1, T2 _2, T3 _3, T4 _4) {
      return new Tuple5<T0, T1, T2, T3, T4>(_0, _1, _2, _3, _4);
    }
    public static _ITuple5<T0, T1, T2, T3, T4> create____hMake5(T0 _0, T1 _1, T2 _2, T3 _3, T4 _4) {
      return create(_0, _1, _2, _3, _4);
    }
    public T0 dtor__0 {
      get {
        return this.__0;
      }
    }
    public T1 dtor__1 {
      get {
        return this.__1;
      }
    }
    public T2 dtor__2 {
      get {
        return this.__2;
      }
    }
    public T3 dtor__3 {
      get {
        return this.__3;
      }
    }
    public T4 dtor__4 {
      get {
        return this.__4;
      }
    }
  }

  public interface _ITuple6<out T0, out T1, out T2, out T3, out T4, out T5> {
    T0 dtor__0 { get; }
    T1 dtor__1 { get; }
    T2 dtor__2 { get; }
    T3 dtor__3 { get; }
    T4 dtor__4 { get; }
    T5 dtor__5 { get; }
    _ITuple6<__T0, __T1, __T2, __T3, __T4, __T5> DowncastClone<__T0, __T1, __T2, __T3, __T4, __T5>(Func<T0, __T0> converter0, Func<T1, __T1> converter1, Func<T2, __T2> converter2, Func<T3, __T3> converter3, Func<T4, __T4> converter4, Func<T5, __T5> converter5);
  }
  public class Tuple6<T0, T1, T2, T3, T4, T5> : _ITuple6<T0, T1, T2, T3, T4, T5> {
    public readonly T0 __0;
    public readonly T1 __1;
    public readonly T2 __2;
    public readonly T3 __3;
    public readonly T4 __4;
    public readonly T5 __5;
    public Tuple6(T0 _0, T1 _1, T2 _2, T3 _3, T4 _4, T5 _5) {
      this.__0 = _0;
      this.__1 = _1;
      this.__2 = _2;
      this.__3 = _3;
      this.__4 = _4;
      this.__5 = _5;
    }
    public _ITuple6<__T0, __T1, __T2, __T3, __T4, __T5> DowncastClone<__T0, __T1, __T2, __T3, __T4, __T5>(Func<T0, __T0> converter0, Func<T1, __T1> converter1, Func<T2, __T2> converter2, Func<T3, __T3> converter3, Func<T4, __T4> converter4, Func<T5, __T5> converter5) {
      if (this is _ITuple6<__T0, __T1, __T2, __T3, __T4, __T5> dt) { return dt; }
      return new Tuple6<__T0, __T1, __T2, __T3, __T4, __T5>(converter0(__0), converter1(__1), converter2(__2), converter3(__3), converter4(__4), converter5(__5));
    }
    public override bool Equals(object other) {
      var oth = other as _System.Tuple6<T0, T1, T2, T3, T4, T5>;
      return oth != null && object.Equals(this.__0, oth.__0) && object.Equals(this.__1, oth.__1) && object.Equals(this.__2, oth.__2) && object.Equals(this.__3, oth.__3) && object.Equals(this.__4, oth.__4) && object.Equals(this.__5, oth.__5);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__1));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__2));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__3));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__4));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__5));
      return (int) hash;
    }
    public override string ToString() {
      string s = "";
      s += "(";
      s += Dafny.Helpers.ToString(this.__0);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__1);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__2);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__3);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__4);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__5);
      s += ")";
      return s;
    }
    public static _System._ITuple6<T0, T1, T2, T3, T4, T5> Default(T0 _default_T0, T1 _default_T1, T2 _default_T2, T3 _default_T3, T4 _default_T4, T5 _default_T5) {
      return create(_default_T0, _default_T1, _default_T2, _default_T3, _default_T4, _default_T5);
    }
    public static Dafny.TypeDescriptor<_System._ITuple6<T0, T1, T2, T3, T4, T5>> _TypeDescriptor(Dafny.TypeDescriptor<T0> _td_T0, Dafny.TypeDescriptor<T1> _td_T1, Dafny.TypeDescriptor<T2> _td_T2, Dafny.TypeDescriptor<T3> _td_T3, Dafny.TypeDescriptor<T4> _td_T4, Dafny.TypeDescriptor<T5> _td_T5) {
      return new Dafny.TypeDescriptor<_System._ITuple6<T0, T1, T2, T3, T4, T5>>(_System.Tuple6<T0, T1, T2, T3, T4, T5>.Default(_td_T0.Default(), _td_T1.Default(), _td_T2.Default(), _td_T3.Default(), _td_T4.Default(), _td_T5.Default()));
    }
    public static _ITuple6<T0, T1, T2, T3, T4, T5> create(T0 _0, T1 _1, T2 _2, T3 _3, T4 _4, T5 _5) {
      return new Tuple6<T0, T1, T2, T3, T4, T5>(_0, _1, _2, _3, _4, _5);
    }
    public static _ITuple6<T0, T1, T2, T3, T4, T5> create____hMake6(T0 _0, T1 _1, T2 _2, T3 _3, T4 _4, T5 _5) {
      return create(_0, _1, _2, _3, _4, _5);
    }
    public T0 dtor__0 {
      get {
        return this.__0;
      }
    }
    public T1 dtor__1 {
      get {
        return this.__1;
      }
    }
    public T2 dtor__2 {
      get {
        return this.__2;
      }
    }
    public T3 dtor__3 {
      get {
        return this.__3;
      }
    }
    public T4 dtor__4 {
      get {
        return this.__4;
      }
    }
    public T5 dtor__5 {
      get {
        return this.__5;
      }
    }
  }

  public interface _ITuple7<out T0, out T1, out T2, out T3, out T4, out T5, out T6> {
    T0 dtor__0 { get; }
    T1 dtor__1 { get; }
    T2 dtor__2 { get; }
    T3 dtor__3 { get; }
    T4 dtor__4 { get; }
    T5 dtor__5 { get; }
    T6 dtor__6 { get; }
    _ITuple7<__T0, __T1, __T2, __T3, __T4, __T5, __T6> DowncastClone<__T0, __T1, __T2, __T3, __T4, __T5, __T6>(Func<T0, __T0> converter0, Func<T1, __T1> converter1, Func<T2, __T2> converter2, Func<T3, __T3> converter3, Func<T4, __T4> converter4, Func<T5, __T5> converter5, Func<T6, __T6> converter6);
  }
  public class Tuple7<T0, T1, T2, T3, T4, T5, T6> : _ITuple7<T0, T1, T2, T3, T4, T5, T6> {
    public readonly T0 __0;
    public readonly T1 __1;
    public readonly T2 __2;
    public readonly T3 __3;
    public readonly T4 __4;
    public readonly T5 __5;
    public readonly T6 __6;
    public Tuple7(T0 _0, T1 _1, T2 _2, T3 _3, T4 _4, T5 _5, T6 _6) {
      this.__0 = _0;
      this.__1 = _1;
      this.__2 = _2;
      this.__3 = _3;
      this.__4 = _4;
      this.__5 = _5;
      this.__6 = _6;
    }
    public _ITuple7<__T0, __T1, __T2, __T3, __T4, __T5, __T6> DowncastClone<__T0, __T1, __T2, __T3, __T4, __T5, __T6>(Func<T0, __T0> converter0, Func<T1, __T1> converter1, Func<T2, __T2> converter2, Func<T3, __T3> converter3, Func<T4, __T4> converter4, Func<T5, __T5> converter5, Func<T6, __T6> converter6) {
      if (this is _ITuple7<__T0, __T1, __T2, __T3, __T4, __T5, __T6> dt) { return dt; }
      return new Tuple7<__T0, __T1, __T2, __T3, __T4, __T5, __T6>(converter0(__0), converter1(__1), converter2(__2), converter3(__3), converter4(__4), converter5(__5), converter6(__6));
    }
    public override bool Equals(object other) {
      var oth = other as _System.Tuple7<T0, T1, T2, T3, T4, T5, T6>;
      return oth != null && object.Equals(this.__0, oth.__0) && object.Equals(this.__1, oth.__1) && object.Equals(this.__2, oth.__2) && object.Equals(this.__3, oth.__3) && object.Equals(this.__4, oth.__4) && object.Equals(this.__5, oth.__5) && object.Equals(this.__6, oth.__6);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__1));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__2));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__3));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__4));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__5));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__6));
      return (int) hash;
    }
    public override string ToString() {
      string s = "";
      s += "(";
      s += Dafny.Helpers.ToString(this.__0);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__1);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__2);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__3);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__4);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__5);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__6);
      s += ")";
      return s;
    }
    public static _System._ITuple7<T0, T1, T2, T3, T4, T5, T6> Default(T0 _default_T0, T1 _default_T1, T2 _default_T2, T3 _default_T3, T4 _default_T4, T5 _default_T5, T6 _default_T6) {
      return create(_default_T0, _default_T1, _default_T2, _default_T3, _default_T4, _default_T5, _default_T6);
    }
    public static Dafny.TypeDescriptor<_System._ITuple7<T0, T1, T2, T3, T4, T5, T6>> _TypeDescriptor(Dafny.TypeDescriptor<T0> _td_T0, Dafny.TypeDescriptor<T1> _td_T1, Dafny.TypeDescriptor<T2> _td_T2, Dafny.TypeDescriptor<T3> _td_T3, Dafny.TypeDescriptor<T4> _td_T4, Dafny.TypeDescriptor<T5> _td_T5, Dafny.TypeDescriptor<T6> _td_T6) {
      return new Dafny.TypeDescriptor<_System._ITuple7<T0, T1, T2, T3, T4, T5, T6>>(_System.Tuple7<T0, T1, T2, T3, T4, T5, T6>.Default(_td_T0.Default(), _td_T1.Default(), _td_T2.Default(), _td_T3.Default(), _td_T4.Default(), _td_T5.Default(), _td_T6.Default()));
    }
    public static _ITuple7<T0, T1, T2, T3, T4, T5, T6> create(T0 _0, T1 _1, T2 _2, T3 _3, T4 _4, T5 _5, T6 _6) {
      return new Tuple7<T0, T1, T2, T3, T4, T5, T6>(_0, _1, _2, _3, _4, _5, _6);
    }
    public static _ITuple7<T0, T1, T2, T3, T4, T5, T6> create____hMake7(T0 _0, T1 _1, T2 _2, T3 _3, T4 _4, T5 _5, T6 _6) {
      return create(_0, _1, _2, _3, _4, _5, _6);
    }
    public T0 dtor__0 {
      get {
        return this.__0;
      }
    }
    public T1 dtor__1 {
      get {
        return this.__1;
      }
    }
    public T2 dtor__2 {
      get {
        return this.__2;
      }
    }
    public T3 dtor__3 {
      get {
        return this.__3;
      }
    }
    public T4 dtor__4 {
      get {
        return this.__4;
      }
    }
    public T5 dtor__5 {
      get {
        return this.__5;
      }
    }
    public T6 dtor__6 {
      get {
        return this.__6;
      }
    }
  }

  public interface _ITuple8<out T0, out T1, out T2, out T3, out T4, out T5, out T6, out T7> {
    T0 dtor__0 { get; }
    T1 dtor__1 { get; }
    T2 dtor__2 { get; }
    T3 dtor__3 { get; }
    T4 dtor__4 { get; }
    T5 dtor__5 { get; }
    T6 dtor__6 { get; }
    T7 dtor__7 { get; }
    _ITuple8<__T0, __T1, __T2, __T3, __T4, __T5, __T6, __T7> DowncastClone<__T0, __T1, __T2, __T3, __T4, __T5, __T6, __T7>(Func<T0, __T0> converter0, Func<T1, __T1> converter1, Func<T2, __T2> converter2, Func<T3, __T3> converter3, Func<T4, __T4> converter4, Func<T5, __T5> converter5, Func<T6, __T6> converter6, Func<T7, __T7> converter7);
  }
  public class Tuple8<T0, T1, T2, T3, T4, T5, T6, T7> : _ITuple8<T0, T1, T2, T3, T4, T5, T6, T7> {
    public readonly T0 __0;
    public readonly T1 __1;
    public readonly T2 __2;
    public readonly T3 __3;
    public readonly T4 __4;
    public readonly T5 __5;
    public readonly T6 __6;
    public readonly T7 __7;
    public Tuple8(T0 _0, T1 _1, T2 _2, T3 _3, T4 _4, T5 _5, T6 _6, T7 _7) {
      this.__0 = _0;
      this.__1 = _1;
      this.__2 = _2;
      this.__3 = _3;
      this.__4 = _4;
      this.__5 = _5;
      this.__6 = _6;
      this.__7 = _7;
    }
    public _ITuple8<__T0, __T1, __T2, __T3, __T4, __T5, __T6, __T7> DowncastClone<__T0, __T1, __T2, __T3, __T4, __T5, __T6, __T7>(Func<T0, __T0> converter0, Func<T1, __T1> converter1, Func<T2, __T2> converter2, Func<T3, __T3> converter3, Func<T4, __T4> converter4, Func<T5, __T5> converter5, Func<T6, __T6> converter6, Func<T7, __T7> converter7) {
      if (this is _ITuple8<__T0, __T1, __T2, __T3, __T4, __T5, __T6, __T7> dt) { return dt; }
      return new Tuple8<__T0, __T1, __T2, __T3, __T4, __T5, __T6, __T7>(converter0(__0), converter1(__1), converter2(__2), converter3(__3), converter4(__4), converter5(__5), converter6(__6), converter7(__7));
    }
    public override bool Equals(object other) {
      var oth = other as _System.Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>;
      return oth != null && object.Equals(this.__0, oth.__0) && object.Equals(this.__1, oth.__1) && object.Equals(this.__2, oth.__2) && object.Equals(this.__3, oth.__3) && object.Equals(this.__4, oth.__4) && object.Equals(this.__5, oth.__5) && object.Equals(this.__6, oth.__6) && object.Equals(this.__7, oth.__7);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__1));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__2));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__3));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__4));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__5));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__6));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__7));
      return (int) hash;
    }
    public override string ToString() {
      string s = "";
      s += "(";
      s += Dafny.Helpers.ToString(this.__0);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__1);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__2);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__3);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__4);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__5);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__6);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__7);
      s += ")";
      return s;
    }
    public static _System._ITuple8<T0, T1, T2, T3, T4, T5, T6, T7> Default(T0 _default_T0, T1 _default_T1, T2 _default_T2, T3 _default_T3, T4 _default_T4, T5 _default_T5, T6 _default_T6, T7 _default_T7) {
      return create(_default_T0, _default_T1, _default_T2, _default_T3, _default_T4, _default_T5, _default_T6, _default_T7);
    }
    public static Dafny.TypeDescriptor<_System._ITuple8<T0, T1, T2, T3, T4, T5, T6, T7>> _TypeDescriptor(Dafny.TypeDescriptor<T0> _td_T0, Dafny.TypeDescriptor<T1> _td_T1, Dafny.TypeDescriptor<T2> _td_T2, Dafny.TypeDescriptor<T3> _td_T3, Dafny.TypeDescriptor<T4> _td_T4, Dafny.TypeDescriptor<T5> _td_T5, Dafny.TypeDescriptor<T6> _td_T6, Dafny.TypeDescriptor<T7> _td_T7) {
      return new Dafny.TypeDescriptor<_System._ITuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(_System.Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>.Default(_td_T0.Default(), _td_T1.Default(), _td_T2.Default(), _td_T3.Default(), _td_T4.Default(), _td_T5.Default(), _td_T6.Default(), _td_T7.Default()));
    }
    public static _ITuple8<T0, T1, T2, T3, T4, T5, T6, T7> create(T0 _0, T1 _1, T2 _2, T3 _3, T4 _4, T5 _5, T6 _6, T7 _7) {
      return new Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>(_0, _1, _2, _3, _4, _5, _6, _7);
    }
    public static _ITuple8<T0, T1, T2, T3, T4, T5, T6, T7> create____hMake8(T0 _0, T1 _1, T2 _2, T3 _3, T4 _4, T5 _5, T6 _6, T7 _7) {
      return create(_0, _1, _2, _3, _4, _5, _6, _7);
    }
    public T0 dtor__0 {
      get {
        return this.__0;
      }
    }
    public T1 dtor__1 {
      get {
        return this.__1;
      }
    }
    public T2 dtor__2 {
      get {
        return this.__2;
      }
    }
    public T3 dtor__3 {
      get {
        return this.__3;
      }
    }
    public T4 dtor__4 {
      get {
        return this.__4;
      }
    }
    public T5 dtor__5 {
      get {
        return this.__5;
      }
    }
    public T6 dtor__6 {
      get {
        return this.__6;
      }
    }
    public T7 dtor__7 {
      get {
        return this.__7;
      }
    }
  }

  public interface _ITuple9<out T0, out T1, out T2, out T3, out T4, out T5, out T6, out T7, out T8> {
    T0 dtor__0 { get; }
    T1 dtor__1 { get; }
    T2 dtor__2 { get; }
    T3 dtor__3 { get; }
    T4 dtor__4 { get; }
    T5 dtor__5 { get; }
    T6 dtor__6 { get; }
    T7 dtor__7 { get; }
    T8 dtor__8 { get; }
    _ITuple9<__T0, __T1, __T2, __T3, __T4, __T5, __T6, __T7, __T8> DowncastClone<__T0, __T1, __T2, __T3, __T4, __T5, __T6, __T7, __T8>(Func<T0, __T0> converter0, Func<T1, __T1> converter1, Func<T2, __T2> converter2, Func<T3, __T3> converter3, Func<T4, __T4> converter4, Func<T5, __T5> converter5, Func<T6, __T6> converter6, Func<T7, __T7> converter7, Func<T8, __T8> converter8);
  }
  public class Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8> : _ITuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    public readonly T0 __0;
    public readonly T1 __1;
    public readonly T2 __2;
    public readonly T3 __3;
    public readonly T4 __4;
    public readonly T5 __5;
    public readonly T6 __6;
    public readonly T7 __7;
    public readonly T8 __8;
    public Tuple9(T0 _0, T1 _1, T2 _2, T3 _3, T4 _4, T5 _5, T6 _6, T7 _7, T8 _8) {
      this.__0 = _0;
      this.__1 = _1;
      this.__2 = _2;
      this.__3 = _3;
      this.__4 = _4;
      this.__5 = _5;
      this.__6 = _6;
      this.__7 = _7;
      this.__8 = _8;
    }
    public _ITuple9<__T0, __T1, __T2, __T3, __T4, __T5, __T6, __T7, __T8> DowncastClone<__T0, __T1, __T2, __T3, __T4, __T5, __T6, __T7, __T8>(Func<T0, __T0> converter0, Func<T1, __T1> converter1, Func<T2, __T2> converter2, Func<T3, __T3> converter3, Func<T4, __T4> converter4, Func<T5, __T5> converter5, Func<T6, __T6> converter6, Func<T7, __T7> converter7, Func<T8, __T8> converter8) {
      if (this is _ITuple9<__T0, __T1, __T2, __T3, __T4, __T5, __T6, __T7, __T8> dt) { return dt; }
      return new Tuple9<__T0, __T1, __T2, __T3, __T4, __T5, __T6, __T7, __T8>(converter0(__0), converter1(__1), converter2(__2), converter3(__3), converter4(__4), converter5(__5), converter6(__6), converter7(__7), converter8(__8));
    }
    public override bool Equals(object other) {
      var oth = other as _System.Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>;
      return oth != null && object.Equals(this.__0, oth.__0) && object.Equals(this.__1, oth.__1) && object.Equals(this.__2, oth.__2) && object.Equals(this.__3, oth.__3) && object.Equals(this.__4, oth.__4) && object.Equals(this.__5, oth.__5) && object.Equals(this.__6, oth.__6) && object.Equals(this.__7, oth.__7) && object.Equals(this.__8, oth.__8);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__1));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__2));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__3));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__4));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__5));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__6));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__7));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__8));
      return (int) hash;
    }
    public override string ToString() {
      string s = "";
      s += "(";
      s += Dafny.Helpers.ToString(this.__0);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__1);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__2);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__3);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__4);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__5);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__6);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__7);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__8);
      s += ")";
      return s;
    }
    public static _System._ITuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8> Default(T0 _default_T0, T1 _default_T1, T2 _default_T2, T3 _default_T3, T4 _default_T4, T5 _default_T5, T6 _default_T6, T7 _default_T7, T8 _default_T8) {
      return create(_default_T0, _default_T1, _default_T2, _default_T3, _default_T4, _default_T5, _default_T6, _default_T7, _default_T8);
    }
    public static Dafny.TypeDescriptor<_System._ITuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> _TypeDescriptor(Dafny.TypeDescriptor<T0> _td_T0, Dafny.TypeDescriptor<T1> _td_T1, Dafny.TypeDescriptor<T2> _td_T2, Dafny.TypeDescriptor<T3> _td_T3, Dafny.TypeDescriptor<T4> _td_T4, Dafny.TypeDescriptor<T5> _td_T5, Dafny.TypeDescriptor<T6> _td_T6, Dafny.TypeDescriptor<T7> _td_T7, Dafny.TypeDescriptor<T8> _td_T8) {
      return new Dafny.TypeDescriptor<_System._ITuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(_System.Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>.Default(_td_T0.Default(), _td_T1.Default(), _td_T2.Default(), _td_T3.Default(), _td_T4.Default(), _td_T5.Default(), _td_T6.Default(), _td_T7.Default(), _td_T8.Default()));
    }
    public static _ITuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8> create(T0 _0, T1 _1, T2 _2, T3 _3, T4 _4, T5 _5, T6 _6, T7 _7, T8 _8) {
      return new Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>(_0, _1, _2, _3, _4, _5, _6, _7, _8);
    }
    public static _ITuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8> create____hMake9(T0 _0, T1 _1, T2 _2, T3 _3, T4 _4, T5 _5, T6 _6, T7 _7, T8 _8) {
      return create(_0, _1, _2, _3, _4, _5, _6, _7, _8);
    }
    public T0 dtor__0 {
      get {
        return this.__0;
      }
    }
    public T1 dtor__1 {
      get {
        return this.__1;
      }
    }
    public T2 dtor__2 {
      get {
        return this.__2;
      }
    }
    public T3 dtor__3 {
      get {
        return this.__3;
      }
    }
    public T4 dtor__4 {
      get {
        return this.__4;
      }
    }
    public T5 dtor__5 {
      get {
        return this.__5;
      }
    }
    public T6 dtor__6 {
      get {
        return this.__6;
      }
    }
    public T7 dtor__7 {
      get {
        return this.__7;
      }
    }
    public T8 dtor__8 {
      get {
        return this.__8;
      }
    }
  }

  public interface _ITuple10<out T0, out T1, out T2, out T3, out T4, out T5, out T6, out T7, out T8, out T9> {
    T0 dtor__0 { get; }
    T1 dtor__1 { get; }
    T2 dtor__2 { get; }
    T3 dtor__3 { get; }
    T4 dtor__4 { get; }
    T5 dtor__5 { get; }
    T6 dtor__6 { get; }
    T7 dtor__7 { get; }
    T8 dtor__8 { get; }
    T9 dtor__9 { get; }
    _ITuple10<__T0, __T1, __T2, __T3, __T4, __T5, __T6, __T7, __T8, __T9> DowncastClone<__T0, __T1, __T2, __T3, __T4, __T5, __T6, __T7, __T8, __T9>(Func<T0, __T0> converter0, Func<T1, __T1> converter1, Func<T2, __T2> converter2, Func<T3, __T3> converter3, Func<T4, __T4> converter4, Func<T5, __T5> converter5, Func<T6, __T6> converter6, Func<T7, __T7> converter7, Func<T8, __T8> converter8, Func<T9, __T9> converter9);
  }
  public class Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> : _ITuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> {
    public readonly T0 __0;
    public readonly T1 __1;
    public readonly T2 __2;
    public readonly T3 __3;
    public readonly T4 __4;
    public readonly T5 __5;
    public readonly T6 __6;
    public readonly T7 __7;
    public readonly T8 __8;
    public readonly T9 __9;
    public Tuple10(T0 _0, T1 _1, T2 _2, T3 _3, T4 _4, T5 _5, T6 _6, T7 _7, T8 _8, T9 _9) {
      this.__0 = _0;
      this.__1 = _1;
      this.__2 = _2;
      this.__3 = _3;
      this.__4 = _4;
      this.__5 = _5;
      this.__6 = _6;
      this.__7 = _7;
      this.__8 = _8;
      this.__9 = _9;
    }
    public _ITuple10<__T0, __T1, __T2, __T3, __T4, __T5, __T6, __T7, __T8, __T9> DowncastClone<__T0, __T1, __T2, __T3, __T4, __T5, __T6, __T7, __T8, __T9>(Func<T0, __T0> converter0, Func<T1, __T1> converter1, Func<T2, __T2> converter2, Func<T3, __T3> converter3, Func<T4, __T4> converter4, Func<T5, __T5> converter5, Func<T6, __T6> converter6, Func<T7, __T7> converter7, Func<T8, __T8> converter8, Func<T9, __T9> converter9) {
      if (this is _ITuple10<__T0, __T1, __T2, __T3, __T4, __T5, __T6, __T7, __T8, __T9> dt) { return dt; }
      return new Tuple10<__T0, __T1, __T2, __T3, __T4, __T5, __T6, __T7, __T8, __T9>(converter0(__0), converter1(__1), converter2(__2), converter3(__3), converter4(__4), converter5(__5), converter6(__6), converter7(__7), converter8(__8), converter9(__9));
    }
    public override bool Equals(object other) {
      var oth = other as _System.Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>;
      return oth != null && object.Equals(this.__0, oth.__0) && object.Equals(this.__1, oth.__1) && object.Equals(this.__2, oth.__2) && object.Equals(this.__3, oth.__3) && object.Equals(this.__4, oth.__4) && object.Equals(this.__5, oth.__5) && object.Equals(this.__6, oth.__6) && object.Equals(this.__7, oth.__7) && object.Equals(this.__8, oth.__8) && object.Equals(this.__9, oth.__9);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__1));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__2));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__3));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__4));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__5));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__6));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__7));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__8));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__9));
      return (int) hash;
    }
    public override string ToString() {
      string s = "";
      s += "(";
      s += Dafny.Helpers.ToString(this.__0);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__1);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__2);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__3);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__4);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__5);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__6);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__7);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__8);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__9);
      s += ")";
      return s;
    }
    public static _System._ITuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> Default(T0 _default_T0, T1 _default_T1, T2 _default_T2, T3 _default_T3, T4 _default_T4, T5 _default_T5, T6 _default_T6, T7 _default_T7, T8 _default_T8, T9 _default_T9) {
      return create(_default_T0, _default_T1, _default_T2, _default_T3, _default_T4, _default_T5, _default_T6, _default_T7, _default_T8, _default_T9);
    }
    public static Dafny.TypeDescriptor<_System._ITuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> _TypeDescriptor(Dafny.TypeDescriptor<T0> _td_T0, Dafny.TypeDescriptor<T1> _td_T1, Dafny.TypeDescriptor<T2> _td_T2, Dafny.TypeDescriptor<T3> _td_T3, Dafny.TypeDescriptor<T4> _td_T4, Dafny.TypeDescriptor<T5> _td_T5, Dafny.TypeDescriptor<T6> _td_T6, Dafny.TypeDescriptor<T7> _td_T7, Dafny.TypeDescriptor<T8> _td_T8, Dafny.TypeDescriptor<T9> _td_T9) {
      return new Dafny.TypeDescriptor<_System._ITuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(_System.Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>.Default(_td_T0.Default(), _td_T1.Default(), _td_T2.Default(), _td_T3.Default(), _td_T4.Default(), _td_T5.Default(), _td_T6.Default(), _td_T7.Default(), _td_T8.Default(), _td_T9.Default()));
    }
    public static _ITuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> create(T0 _0, T1 _1, T2 _2, T3 _3, T4 _4, T5 _5, T6 _6, T7 _7, T8 _8, T9 _9) {
      return new Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9);
    }
    public static _ITuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> create____hMake10(T0 _0, T1 _1, T2 _2, T3 _3, T4 _4, T5 _5, T6 _6, T7 _7, T8 _8, T9 _9) {
      return create(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9);
    }
    public T0 dtor__0 {
      get {
        return this.__0;
      }
    }
    public T1 dtor__1 {
      get {
        return this.__1;
      }
    }
    public T2 dtor__2 {
      get {
        return this.__2;
      }
    }
    public T3 dtor__3 {
      get {
        return this.__3;
      }
    }
    public T4 dtor__4 {
      get {
        return this.__4;
      }
    }
    public T5 dtor__5 {
      get {
        return this.__5;
      }
    }
    public T6 dtor__6 {
      get {
        return this.__6;
      }
    }
    public T7 dtor__7 {
      get {
        return this.__7;
      }
    }
    public T8 dtor__8 {
      get {
        return this.__8;
      }
    }
    public T9 dtor__9 {
      get {
        return this.__9;
      }
    }
  }

  public interface _ITuple11<out T0, out T1, out T2, out T3, out T4, out T5, out T6, out T7, out T8, out T9, out T10> {
    T0 dtor__0 { get; }
    T1 dtor__1 { get; }
    T2 dtor__2 { get; }
    T3 dtor__3 { get; }
    T4 dtor__4 { get; }
    T5 dtor__5 { get; }
    T6 dtor__6 { get; }
    T7 dtor__7 { get; }
    T8 dtor__8 { get; }
    T9 dtor__9 { get; }
    T10 dtor__10 { get; }
    _ITuple11<__T0, __T1, __T2, __T3, __T4, __T5, __T6, __T7, __T8, __T9, __T10> DowncastClone<__T0, __T1, __T2, __T3, __T4, __T5, __T6, __T7, __T8, __T9, __T10>(Func<T0, __T0> converter0, Func<T1, __T1> converter1, Func<T2, __T2> converter2, Func<T3, __T3> converter3, Func<T4, __T4> converter4, Func<T5, __T5> converter5, Func<T6, __T6> converter6, Func<T7, __T7> converter7, Func<T8, __T8> converter8, Func<T9, __T9> converter9, Func<T10, __T10> converter10);
  }
  public class Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> : _ITuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> {
    public readonly T0 __0;
    public readonly T1 __1;
    public readonly T2 __2;
    public readonly T3 __3;
    public readonly T4 __4;
    public readonly T5 __5;
    public readonly T6 __6;
    public readonly T7 __7;
    public readonly T8 __8;
    public readonly T9 __9;
    public readonly T10 __10;
    public Tuple11(T0 _0, T1 _1, T2 _2, T3 _3, T4 _4, T5 _5, T6 _6, T7 _7, T8 _8, T9 _9, T10 _10) {
      this.__0 = _0;
      this.__1 = _1;
      this.__2 = _2;
      this.__3 = _3;
      this.__4 = _4;
      this.__5 = _5;
      this.__6 = _6;
      this.__7 = _7;
      this.__8 = _8;
      this.__9 = _9;
      this.__10 = _10;
    }
    public _ITuple11<__T0, __T1, __T2, __T3, __T4, __T5, __T6, __T7, __T8, __T9, __T10> DowncastClone<__T0, __T1, __T2, __T3, __T4, __T5, __T6, __T7, __T8, __T9, __T10>(Func<T0, __T0> converter0, Func<T1, __T1> converter1, Func<T2, __T2> converter2, Func<T3, __T3> converter3, Func<T4, __T4> converter4, Func<T5, __T5> converter5, Func<T6, __T6> converter6, Func<T7, __T7> converter7, Func<T8, __T8> converter8, Func<T9, __T9> converter9, Func<T10, __T10> converter10) {
      if (this is _ITuple11<__T0, __T1, __T2, __T3, __T4, __T5, __T6, __T7, __T8, __T9, __T10> dt) { return dt; }
      return new Tuple11<__T0, __T1, __T2, __T3, __T4, __T5, __T6, __T7, __T8, __T9, __T10>(converter0(__0), converter1(__1), converter2(__2), converter3(__3), converter4(__4), converter5(__5), converter6(__6), converter7(__7), converter8(__8), converter9(__9), converter10(__10));
    }
    public override bool Equals(object other) {
      var oth = other as _System.Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>;
      return oth != null && object.Equals(this.__0, oth.__0) && object.Equals(this.__1, oth.__1) && object.Equals(this.__2, oth.__2) && object.Equals(this.__3, oth.__3) && object.Equals(this.__4, oth.__4) && object.Equals(this.__5, oth.__5) && object.Equals(this.__6, oth.__6) && object.Equals(this.__7, oth.__7) && object.Equals(this.__8, oth.__8) && object.Equals(this.__9, oth.__9) && object.Equals(this.__10, oth.__10);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__1));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__2));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__3));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__4));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__5));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__6));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__7));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__8));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__9));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__10));
      return (int) hash;
    }
    public override string ToString() {
      string s = "";
      s += "(";
      s += Dafny.Helpers.ToString(this.__0);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__1);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__2);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__3);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__4);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__5);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__6);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__7);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__8);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__9);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__10);
      s += ")";
      return s;
    }
    public static _System._ITuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Default(T0 _default_T0, T1 _default_T1, T2 _default_T2, T3 _default_T3, T4 _default_T4, T5 _default_T5, T6 _default_T6, T7 _default_T7, T8 _default_T8, T9 _default_T9, T10 _default_T10) {
      return create(_default_T0, _default_T1, _default_T2, _default_T3, _default_T4, _default_T5, _default_T6, _default_T7, _default_T8, _default_T9, _default_T10);
    }
    public static Dafny.TypeDescriptor<_System._ITuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> _TypeDescriptor(Dafny.TypeDescriptor<T0> _td_T0, Dafny.TypeDescriptor<T1> _td_T1, Dafny.TypeDescriptor<T2> _td_T2, Dafny.TypeDescriptor<T3> _td_T3, Dafny.TypeDescriptor<T4> _td_T4, Dafny.TypeDescriptor<T5> _td_T5, Dafny.TypeDescriptor<T6> _td_T6, Dafny.TypeDescriptor<T7> _td_T7, Dafny.TypeDescriptor<T8> _td_T8, Dafny.TypeDescriptor<T9> _td_T9, Dafny.TypeDescriptor<T10> _td_T10) {
      return new Dafny.TypeDescriptor<_System._ITuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(_System.Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Default(_td_T0.Default(), _td_T1.Default(), _td_T2.Default(), _td_T3.Default(), _td_T4.Default(), _td_T5.Default(), _td_T6.Default(), _td_T7.Default(), _td_T8.Default(), _td_T9.Default(), _td_T10.Default()));
    }
    public static _ITuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> create(T0 _0, T1 _1, T2 _2, T3 _3, T4 _4, T5 _5, T6 _6, T7 _7, T8 _8, T9 _9, T10 _10) {
      return new Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10);
    }
    public static _ITuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> create____hMake11(T0 _0, T1 _1, T2 _2, T3 _3, T4 _4, T5 _5, T6 _6, T7 _7, T8 _8, T9 _9, T10 _10) {
      return create(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10);
    }
    public T0 dtor__0 {
      get {
        return this.__0;
      }
    }
    public T1 dtor__1 {
      get {
        return this.__1;
      }
    }
    public T2 dtor__2 {
      get {
        return this.__2;
      }
    }
    public T3 dtor__3 {
      get {
        return this.__3;
      }
    }
    public T4 dtor__4 {
      get {
        return this.__4;
      }
    }
    public T5 dtor__5 {
      get {
        return this.__5;
      }
    }
    public T6 dtor__6 {
      get {
        return this.__6;
      }
    }
    public T7 dtor__7 {
      get {
        return this.__7;
      }
    }
    public T8 dtor__8 {
      get {
        return this.__8;
      }
    }
    public T9 dtor__9 {
      get {
        return this.__9;
      }
    }
    public T10 dtor__10 {
      get {
        return this.__10;
      }
    }
  }

  public interface _ITuple12<out T0, out T1, out T2, out T3, out T4, out T5, out T6, out T7, out T8, out T9, out T10, out T11> {
    T0 dtor__0 { get; }
    T1 dtor__1 { get; }
    T2 dtor__2 { get; }
    T3 dtor__3 { get; }
    T4 dtor__4 { get; }
    T5 dtor__5 { get; }
    T6 dtor__6 { get; }
    T7 dtor__7 { get; }
    T8 dtor__8 { get; }
    T9 dtor__9 { get; }
    T10 dtor__10 { get; }
    T11 dtor__11 { get; }
    _ITuple12<__T0, __T1, __T2, __T3, __T4, __T5, __T6, __T7, __T8, __T9, __T10, __T11> DowncastClone<__T0, __T1, __T2, __T3, __T4, __T5, __T6, __T7, __T8, __T9, __T10, __T11>(Func<T0, __T0> converter0, Func<T1, __T1> converter1, Func<T2, __T2> converter2, Func<T3, __T3> converter3, Func<T4, __T4> converter4, Func<T5, __T5> converter5, Func<T6, __T6> converter6, Func<T7, __T7> converter7, Func<T8, __T8> converter8, Func<T9, __T9> converter9, Func<T10, __T10> converter10, Func<T11, __T11> converter11);
  }
  public class Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> : _ITuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> {
    public readonly T0 __0;
    public readonly T1 __1;
    public readonly T2 __2;
    public readonly T3 __3;
    public readonly T4 __4;
    public readonly T5 __5;
    public readonly T6 __6;
    public readonly T7 __7;
    public readonly T8 __8;
    public readonly T9 __9;
    public readonly T10 __10;
    public readonly T11 __11;
    public Tuple12(T0 _0, T1 _1, T2 _2, T3 _3, T4 _4, T5 _5, T6 _6, T7 _7, T8 _8, T9 _9, T10 _10, T11 _11) {
      this.__0 = _0;
      this.__1 = _1;
      this.__2 = _2;
      this.__3 = _3;
      this.__4 = _4;
      this.__5 = _5;
      this.__6 = _6;
      this.__7 = _7;
      this.__8 = _8;
      this.__9 = _9;
      this.__10 = _10;
      this.__11 = _11;
    }
    public _ITuple12<__T0, __T1, __T2, __T3, __T4, __T5, __T6, __T7, __T8, __T9, __T10, __T11> DowncastClone<__T0, __T1, __T2, __T3, __T4, __T5, __T6, __T7, __T8, __T9, __T10, __T11>(Func<T0, __T0> converter0, Func<T1, __T1> converter1, Func<T2, __T2> converter2, Func<T3, __T3> converter3, Func<T4, __T4> converter4, Func<T5, __T5> converter5, Func<T6, __T6> converter6, Func<T7, __T7> converter7, Func<T8, __T8> converter8, Func<T9, __T9> converter9, Func<T10, __T10> converter10, Func<T11, __T11> converter11) {
      if (this is _ITuple12<__T0, __T1, __T2, __T3, __T4, __T5, __T6, __T7, __T8, __T9, __T10, __T11> dt) { return dt; }
      return new Tuple12<__T0, __T1, __T2, __T3, __T4, __T5, __T6, __T7, __T8, __T9, __T10, __T11>(converter0(__0), converter1(__1), converter2(__2), converter3(__3), converter4(__4), converter5(__5), converter6(__6), converter7(__7), converter8(__8), converter9(__9), converter10(__10), converter11(__11));
    }
    public override bool Equals(object other) {
      var oth = other as _System.Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>;
      return oth != null && object.Equals(this.__0, oth.__0) && object.Equals(this.__1, oth.__1) && object.Equals(this.__2, oth.__2) && object.Equals(this.__3, oth.__3) && object.Equals(this.__4, oth.__4) && object.Equals(this.__5, oth.__5) && object.Equals(this.__6, oth.__6) && object.Equals(this.__7, oth.__7) && object.Equals(this.__8, oth.__8) && object.Equals(this.__9, oth.__9) && object.Equals(this.__10, oth.__10) && object.Equals(this.__11, oth.__11);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__1));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__2));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__3));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__4));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__5));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__6));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__7));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__8));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__9));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__10));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__11));
      return (int) hash;
    }
    public override string ToString() {
      string s = "";
      s += "(";
      s += Dafny.Helpers.ToString(this.__0);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__1);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__2);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__3);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__4);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__5);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__6);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__7);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__8);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__9);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__10);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__11);
      s += ")";
      return s;
    }
    public static _System._ITuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Default(T0 _default_T0, T1 _default_T1, T2 _default_T2, T3 _default_T3, T4 _default_T4, T5 _default_T5, T6 _default_T6, T7 _default_T7, T8 _default_T8, T9 _default_T9, T10 _default_T10, T11 _default_T11) {
      return create(_default_T0, _default_T1, _default_T2, _default_T3, _default_T4, _default_T5, _default_T6, _default_T7, _default_T8, _default_T9, _default_T10, _default_T11);
    }
    public static Dafny.TypeDescriptor<_System._ITuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> _TypeDescriptor(Dafny.TypeDescriptor<T0> _td_T0, Dafny.TypeDescriptor<T1> _td_T1, Dafny.TypeDescriptor<T2> _td_T2, Dafny.TypeDescriptor<T3> _td_T3, Dafny.TypeDescriptor<T4> _td_T4, Dafny.TypeDescriptor<T5> _td_T5, Dafny.TypeDescriptor<T6> _td_T6, Dafny.TypeDescriptor<T7> _td_T7, Dafny.TypeDescriptor<T8> _td_T8, Dafny.TypeDescriptor<T9> _td_T9, Dafny.TypeDescriptor<T10> _td_T10, Dafny.TypeDescriptor<T11> _td_T11) {
      return new Dafny.TypeDescriptor<_System._ITuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(_System.Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.Default(_td_T0.Default(), _td_T1.Default(), _td_T2.Default(), _td_T3.Default(), _td_T4.Default(), _td_T5.Default(), _td_T6.Default(), _td_T7.Default(), _td_T8.Default(), _td_T9.Default(), _td_T10.Default(), _td_T11.Default()));
    }
    public static _ITuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> create(T0 _0, T1 _1, T2 _2, T3 _3, T4 _4, T5 _5, T6 _6, T7 _7, T8 _8, T9 _9, T10 _10, T11 _11) {
      return new Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11);
    }
    public static _ITuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> create____hMake12(T0 _0, T1 _1, T2 _2, T3 _3, T4 _4, T5 _5, T6 _6, T7 _7, T8 _8, T9 _9, T10 _10, T11 _11) {
      return create(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11);
    }
    public T0 dtor__0 {
      get {
        return this.__0;
      }
    }
    public T1 dtor__1 {
      get {
        return this.__1;
      }
    }
    public T2 dtor__2 {
      get {
        return this.__2;
      }
    }
    public T3 dtor__3 {
      get {
        return this.__3;
      }
    }
    public T4 dtor__4 {
      get {
        return this.__4;
      }
    }
    public T5 dtor__5 {
      get {
        return this.__5;
      }
    }
    public T6 dtor__6 {
      get {
        return this.__6;
      }
    }
    public T7 dtor__7 {
      get {
        return this.__7;
      }
    }
    public T8 dtor__8 {
      get {
        return this.__8;
      }
    }
    public T9 dtor__9 {
      get {
        return this.__9;
      }
    }
    public T10 dtor__10 {
      get {
        return this.__10;
      }
    }
    public T11 dtor__11 {
      get {
        return this.__11;
      }
    }
  }

  public interface _ITuple13<out T0, out T1, out T2, out T3, out T4, out T5, out T6, out T7, out T8, out T9, out T10, out T11, out T12> {
    T0 dtor__0 { get; }
    T1 dtor__1 { get; }
    T2 dtor__2 { get; }
    T3 dtor__3 { get; }
    T4 dtor__4 { get; }
    T5 dtor__5 { get; }
    T6 dtor__6 { get; }
    T7 dtor__7 { get; }
    T8 dtor__8 { get; }
    T9 dtor__9 { get; }
    T10 dtor__10 { get; }
    T11 dtor__11 { get; }
    T12 dtor__12 { get; }
    _ITuple13<__T0, __T1, __T2, __T3, __T4, __T5, __T6, __T7, __T8, __T9, __T10, __T11, __T12> DowncastClone<__T0, __T1, __T2, __T3, __T4, __T5, __T6, __T7, __T8, __T9, __T10, __T11, __T12>(Func<T0, __T0> converter0, Func<T1, __T1> converter1, Func<T2, __T2> converter2, Func<T3, __T3> converter3, Func<T4, __T4> converter4, Func<T5, __T5> converter5, Func<T6, __T6> converter6, Func<T7, __T7> converter7, Func<T8, __T8> converter8, Func<T9, __T9> converter9, Func<T10, __T10> converter10, Func<T11, __T11> converter11, Func<T12, __T12> converter12);
  }
  public class Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> : _ITuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> {
    public readonly T0 __0;
    public readonly T1 __1;
    public readonly T2 __2;
    public readonly T3 __3;
    public readonly T4 __4;
    public readonly T5 __5;
    public readonly T6 __6;
    public readonly T7 __7;
    public readonly T8 __8;
    public readonly T9 __9;
    public readonly T10 __10;
    public readonly T11 __11;
    public readonly T12 __12;
    public Tuple13(T0 _0, T1 _1, T2 _2, T3 _3, T4 _4, T5 _5, T6 _6, T7 _7, T8 _8, T9 _9, T10 _10, T11 _11, T12 _12) {
      this.__0 = _0;
      this.__1 = _1;
      this.__2 = _2;
      this.__3 = _3;
      this.__4 = _4;
      this.__5 = _5;
      this.__6 = _6;
      this.__7 = _7;
      this.__8 = _8;
      this.__9 = _9;
      this.__10 = _10;
      this.__11 = _11;
      this.__12 = _12;
    }
    public _ITuple13<__T0, __T1, __T2, __T3, __T4, __T5, __T6, __T7, __T8, __T9, __T10, __T11, __T12> DowncastClone<__T0, __T1, __T2, __T3, __T4, __T5, __T6, __T7, __T8, __T9, __T10, __T11, __T12>(Func<T0, __T0> converter0, Func<T1, __T1> converter1, Func<T2, __T2> converter2, Func<T3, __T3> converter3, Func<T4, __T4> converter4, Func<T5, __T5> converter5, Func<T6, __T6> converter6, Func<T7, __T7> converter7, Func<T8, __T8> converter8, Func<T9, __T9> converter9, Func<T10, __T10> converter10, Func<T11, __T11> converter11, Func<T12, __T12> converter12) {
      if (this is _ITuple13<__T0, __T1, __T2, __T3, __T4, __T5, __T6, __T7, __T8, __T9, __T10, __T11, __T12> dt) { return dt; }
      return new Tuple13<__T0, __T1, __T2, __T3, __T4, __T5, __T6, __T7, __T8, __T9, __T10, __T11, __T12>(converter0(__0), converter1(__1), converter2(__2), converter3(__3), converter4(__4), converter5(__5), converter6(__6), converter7(__7), converter8(__8), converter9(__9), converter10(__10), converter11(__11), converter12(__12));
    }
    public override bool Equals(object other) {
      var oth = other as _System.Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>;
      return oth != null && object.Equals(this.__0, oth.__0) && object.Equals(this.__1, oth.__1) && object.Equals(this.__2, oth.__2) && object.Equals(this.__3, oth.__3) && object.Equals(this.__4, oth.__4) && object.Equals(this.__5, oth.__5) && object.Equals(this.__6, oth.__6) && object.Equals(this.__7, oth.__7) && object.Equals(this.__8, oth.__8) && object.Equals(this.__9, oth.__9) && object.Equals(this.__10, oth.__10) && object.Equals(this.__11, oth.__11) && object.Equals(this.__12, oth.__12);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__1));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__2));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__3));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__4));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__5));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__6));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__7));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__8));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__9));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__10));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__11));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__12));
      return (int) hash;
    }
    public override string ToString() {
      string s = "";
      s += "(";
      s += Dafny.Helpers.ToString(this.__0);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__1);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__2);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__3);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__4);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__5);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__6);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__7);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__8);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__9);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__10);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__11);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__12);
      s += ")";
      return s;
    }
    public static _System._ITuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Default(T0 _default_T0, T1 _default_T1, T2 _default_T2, T3 _default_T3, T4 _default_T4, T5 _default_T5, T6 _default_T6, T7 _default_T7, T8 _default_T8, T9 _default_T9, T10 _default_T10, T11 _default_T11, T12 _default_T12) {
      return create(_default_T0, _default_T1, _default_T2, _default_T3, _default_T4, _default_T5, _default_T6, _default_T7, _default_T8, _default_T9, _default_T10, _default_T11, _default_T12);
    }
    public static Dafny.TypeDescriptor<_System._ITuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> _TypeDescriptor(Dafny.TypeDescriptor<T0> _td_T0, Dafny.TypeDescriptor<T1> _td_T1, Dafny.TypeDescriptor<T2> _td_T2, Dafny.TypeDescriptor<T3> _td_T3, Dafny.TypeDescriptor<T4> _td_T4, Dafny.TypeDescriptor<T5> _td_T5, Dafny.TypeDescriptor<T6> _td_T6, Dafny.TypeDescriptor<T7> _td_T7, Dafny.TypeDescriptor<T8> _td_T8, Dafny.TypeDescriptor<T9> _td_T9, Dafny.TypeDescriptor<T10> _td_T10, Dafny.TypeDescriptor<T11> _td_T11, Dafny.TypeDescriptor<T12> _td_T12) {
      return new Dafny.TypeDescriptor<_System._ITuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(_System.Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.Default(_td_T0.Default(), _td_T1.Default(), _td_T2.Default(), _td_T3.Default(), _td_T4.Default(), _td_T5.Default(), _td_T6.Default(), _td_T7.Default(), _td_T8.Default(), _td_T9.Default(), _td_T10.Default(), _td_T11.Default(), _td_T12.Default()));
    }
    public static _ITuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> create(T0 _0, T1 _1, T2 _2, T3 _3, T4 _4, T5 _5, T6 _6, T7 _7, T8 _8, T9 _9, T10 _10, T11 _11, T12 _12) {
      return new Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12);
    }
    public static _ITuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> create____hMake13(T0 _0, T1 _1, T2 _2, T3 _3, T4 _4, T5 _5, T6 _6, T7 _7, T8 _8, T9 _9, T10 _10, T11 _11, T12 _12) {
      return create(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12);
    }
    public T0 dtor__0 {
      get {
        return this.__0;
      }
    }
    public T1 dtor__1 {
      get {
        return this.__1;
      }
    }
    public T2 dtor__2 {
      get {
        return this.__2;
      }
    }
    public T3 dtor__3 {
      get {
        return this.__3;
      }
    }
    public T4 dtor__4 {
      get {
        return this.__4;
      }
    }
    public T5 dtor__5 {
      get {
        return this.__5;
      }
    }
    public T6 dtor__6 {
      get {
        return this.__6;
      }
    }
    public T7 dtor__7 {
      get {
        return this.__7;
      }
    }
    public T8 dtor__8 {
      get {
        return this.__8;
      }
    }
    public T9 dtor__9 {
      get {
        return this.__9;
      }
    }
    public T10 dtor__10 {
      get {
        return this.__10;
      }
    }
    public T11 dtor__11 {
      get {
        return this.__11;
      }
    }
    public T12 dtor__12 {
      get {
        return this.__12;
      }
    }
  }

  public interface _ITuple14<out T0, out T1, out T2, out T3, out T4, out T5, out T6, out T7, out T8, out T9, out T10, out T11, out T12, out T13> {
    T0 dtor__0 { get; }
    T1 dtor__1 { get; }
    T2 dtor__2 { get; }
    T3 dtor__3 { get; }
    T4 dtor__4 { get; }
    T5 dtor__5 { get; }
    T6 dtor__6 { get; }
    T7 dtor__7 { get; }
    T8 dtor__8 { get; }
    T9 dtor__9 { get; }
    T10 dtor__10 { get; }
    T11 dtor__11 { get; }
    T12 dtor__12 { get; }
    T13 dtor__13 { get; }
    _ITuple14<__T0, __T1, __T2, __T3, __T4, __T5, __T6, __T7, __T8, __T9, __T10, __T11, __T12, __T13> DowncastClone<__T0, __T1, __T2, __T3, __T4, __T5, __T6, __T7, __T8, __T9, __T10, __T11, __T12, __T13>(Func<T0, __T0> converter0, Func<T1, __T1> converter1, Func<T2, __T2> converter2, Func<T3, __T3> converter3, Func<T4, __T4> converter4, Func<T5, __T5> converter5, Func<T6, __T6> converter6, Func<T7, __T7> converter7, Func<T8, __T8> converter8, Func<T9, __T9> converter9, Func<T10, __T10> converter10, Func<T11, __T11> converter11, Func<T12, __T12> converter12, Func<T13, __T13> converter13);
  }
  public class Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> : _ITuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> {
    public readonly T0 __0;
    public readonly T1 __1;
    public readonly T2 __2;
    public readonly T3 __3;
    public readonly T4 __4;
    public readonly T5 __5;
    public readonly T6 __6;
    public readonly T7 __7;
    public readonly T8 __8;
    public readonly T9 __9;
    public readonly T10 __10;
    public readonly T11 __11;
    public readonly T12 __12;
    public readonly T13 __13;
    public Tuple14(T0 _0, T1 _1, T2 _2, T3 _3, T4 _4, T5 _5, T6 _6, T7 _7, T8 _8, T9 _9, T10 _10, T11 _11, T12 _12, T13 _13) {
      this.__0 = _0;
      this.__1 = _1;
      this.__2 = _2;
      this.__3 = _3;
      this.__4 = _4;
      this.__5 = _5;
      this.__6 = _6;
      this.__7 = _7;
      this.__8 = _8;
      this.__9 = _9;
      this.__10 = _10;
      this.__11 = _11;
      this.__12 = _12;
      this.__13 = _13;
    }
    public _ITuple14<__T0, __T1, __T2, __T3, __T4, __T5, __T6, __T7, __T8, __T9, __T10, __T11, __T12, __T13> DowncastClone<__T0, __T1, __T2, __T3, __T4, __T5, __T6, __T7, __T8, __T9, __T10, __T11, __T12, __T13>(Func<T0, __T0> converter0, Func<T1, __T1> converter1, Func<T2, __T2> converter2, Func<T3, __T3> converter3, Func<T4, __T4> converter4, Func<T5, __T5> converter5, Func<T6, __T6> converter6, Func<T7, __T7> converter7, Func<T8, __T8> converter8, Func<T9, __T9> converter9, Func<T10, __T10> converter10, Func<T11, __T11> converter11, Func<T12, __T12> converter12, Func<T13, __T13> converter13) {
      if (this is _ITuple14<__T0, __T1, __T2, __T3, __T4, __T5, __T6, __T7, __T8, __T9, __T10, __T11, __T12, __T13> dt) { return dt; }
      return new Tuple14<__T0, __T1, __T2, __T3, __T4, __T5, __T6, __T7, __T8, __T9, __T10, __T11, __T12, __T13>(converter0(__0), converter1(__1), converter2(__2), converter3(__3), converter4(__4), converter5(__5), converter6(__6), converter7(__7), converter8(__8), converter9(__9), converter10(__10), converter11(__11), converter12(__12), converter13(__13));
    }
    public override bool Equals(object other) {
      var oth = other as _System.Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>;
      return oth != null && object.Equals(this.__0, oth.__0) && object.Equals(this.__1, oth.__1) && object.Equals(this.__2, oth.__2) && object.Equals(this.__3, oth.__3) && object.Equals(this.__4, oth.__4) && object.Equals(this.__5, oth.__5) && object.Equals(this.__6, oth.__6) && object.Equals(this.__7, oth.__7) && object.Equals(this.__8, oth.__8) && object.Equals(this.__9, oth.__9) && object.Equals(this.__10, oth.__10) && object.Equals(this.__11, oth.__11) && object.Equals(this.__12, oth.__12) && object.Equals(this.__13, oth.__13);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__1));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__2));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__3));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__4));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__5));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__6));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__7));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__8));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__9));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__10));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__11));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__12));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__13));
      return (int) hash;
    }
    public override string ToString() {
      string s = "";
      s += "(";
      s += Dafny.Helpers.ToString(this.__0);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__1);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__2);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__3);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__4);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__5);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__6);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__7);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__8);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__9);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__10);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__11);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__12);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__13);
      s += ")";
      return s;
    }
    public static _System._ITuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Default(T0 _default_T0, T1 _default_T1, T2 _default_T2, T3 _default_T3, T4 _default_T4, T5 _default_T5, T6 _default_T6, T7 _default_T7, T8 _default_T8, T9 _default_T9, T10 _default_T10, T11 _default_T11, T12 _default_T12, T13 _default_T13) {
      return create(_default_T0, _default_T1, _default_T2, _default_T3, _default_T4, _default_T5, _default_T6, _default_T7, _default_T8, _default_T9, _default_T10, _default_T11, _default_T12, _default_T13);
    }
    public static Dafny.TypeDescriptor<_System._ITuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> _TypeDescriptor(Dafny.TypeDescriptor<T0> _td_T0, Dafny.TypeDescriptor<T1> _td_T1, Dafny.TypeDescriptor<T2> _td_T2, Dafny.TypeDescriptor<T3> _td_T3, Dafny.TypeDescriptor<T4> _td_T4, Dafny.TypeDescriptor<T5> _td_T5, Dafny.TypeDescriptor<T6> _td_T6, Dafny.TypeDescriptor<T7> _td_T7, Dafny.TypeDescriptor<T8> _td_T8, Dafny.TypeDescriptor<T9> _td_T9, Dafny.TypeDescriptor<T10> _td_T10, Dafny.TypeDescriptor<T11> _td_T11, Dafny.TypeDescriptor<T12> _td_T12, Dafny.TypeDescriptor<T13> _td_T13) {
      return new Dafny.TypeDescriptor<_System._ITuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(_System.Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.Default(_td_T0.Default(), _td_T1.Default(), _td_T2.Default(), _td_T3.Default(), _td_T4.Default(), _td_T5.Default(), _td_T6.Default(), _td_T7.Default(), _td_T8.Default(), _td_T9.Default(), _td_T10.Default(), _td_T11.Default(), _td_T12.Default(), _td_T13.Default()));
    }
    public static _ITuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> create(T0 _0, T1 _1, T2 _2, T3 _3, T4 _4, T5 _5, T6 _6, T7 _7, T8 _8, T9 _9, T10 _10, T11 _11, T12 _12, T13 _13) {
      return new Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13);
    }
    public static _ITuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> create____hMake14(T0 _0, T1 _1, T2 _2, T3 _3, T4 _4, T5 _5, T6 _6, T7 _7, T8 _8, T9 _9, T10 _10, T11 _11, T12 _12, T13 _13) {
      return create(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13);
    }
    public T0 dtor__0 {
      get {
        return this.__0;
      }
    }
    public T1 dtor__1 {
      get {
        return this.__1;
      }
    }
    public T2 dtor__2 {
      get {
        return this.__2;
      }
    }
    public T3 dtor__3 {
      get {
        return this.__3;
      }
    }
    public T4 dtor__4 {
      get {
        return this.__4;
      }
    }
    public T5 dtor__5 {
      get {
        return this.__5;
      }
    }
    public T6 dtor__6 {
      get {
        return this.__6;
      }
    }
    public T7 dtor__7 {
      get {
        return this.__7;
      }
    }
    public T8 dtor__8 {
      get {
        return this.__8;
      }
    }
    public T9 dtor__9 {
      get {
        return this.__9;
      }
    }
    public T10 dtor__10 {
      get {
        return this.__10;
      }
    }
    public T11 dtor__11 {
      get {
        return this.__11;
      }
    }
    public T12 dtor__12 {
      get {
        return this.__12;
      }
    }
    public T13 dtor__13 {
      get {
        return this.__13;
      }
    }
  }

  public interface _ITuple15<out T0, out T1, out T2, out T3, out T4, out T5, out T6, out T7, out T8, out T9, out T10, out T11, out T12, out T13, out T14> {
    T0 dtor__0 { get; }
    T1 dtor__1 { get; }
    T2 dtor__2 { get; }
    T3 dtor__3 { get; }
    T4 dtor__4 { get; }
    T5 dtor__5 { get; }
    T6 dtor__6 { get; }
    T7 dtor__7 { get; }
    T8 dtor__8 { get; }
    T9 dtor__9 { get; }
    T10 dtor__10 { get; }
    T11 dtor__11 { get; }
    T12 dtor__12 { get; }
    T13 dtor__13 { get; }
    T14 dtor__14 { get; }
    _ITuple15<__T0, __T1, __T2, __T3, __T4, __T5, __T6, __T7, __T8, __T9, __T10, __T11, __T12, __T13, __T14> DowncastClone<__T0, __T1, __T2, __T3, __T4, __T5, __T6, __T7, __T8, __T9, __T10, __T11, __T12, __T13, __T14>(Func<T0, __T0> converter0, Func<T1, __T1> converter1, Func<T2, __T2> converter2, Func<T3, __T3> converter3, Func<T4, __T4> converter4, Func<T5, __T5> converter5, Func<T6, __T6> converter6, Func<T7, __T7> converter7, Func<T8, __T8> converter8, Func<T9, __T9> converter9, Func<T10, __T10> converter10, Func<T11, __T11> converter11, Func<T12, __T12> converter12, Func<T13, __T13> converter13, Func<T14, __T14> converter14);
  }
  public class Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> : _ITuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> {
    public readonly T0 __0;
    public readonly T1 __1;
    public readonly T2 __2;
    public readonly T3 __3;
    public readonly T4 __4;
    public readonly T5 __5;
    public readonly T6 __6;
    public readonly T7 __7;
    public readonly T8 __8;
    public readonly T9 __9;
    public readonly T10 __10;
    public readonly T11 __11;
    public readonly T12 __12;
    public readonly T13 __13;
    public readonly T14 __14;
    public Tuple15(T0 _0, T1 _1, T2 _2, T3 _3, T4 _4, T5 _5, T6 _6, T7 _7, T8 _8, T9 _9, T10 _10, T11 _11, T12 _12, T13 _13, T14 _14) {
      this.__0 = _0;
      this.__1 = _1;
      this.__2 = _2;
      this.__3 = _3;
      this.__4 = _4;
      this.__5 = _5;
      this.__6 = _6;
      this.__7 = _7;
      this.__8 = _8;
      this.__9 = _9;
      this.__10 = _10;
      this.__11 = _11;
      this.__12 = _12;
      this.__13 = _13;
      this.__14 = _14;
    }
    public _ITuple15<__T0, __T1, __T2, __T3, __T4, __T5, __T6, __T7, __T8, __T9, __T10, __T11, __T12, __T13, __T14> DowncastClone<__T0, __T1, __T2, __T3, __T4, __T5, __T6, __T7, __T8, __T9, __T10, __T11, __T12, __T13, __T14>(Func<T0, __T0> converter0, Func<T1, __T1> converter1, Func<T2, __T2> converter2, Func<T3, __T3> converter3, Func<T4, __T4> converter4, Func<T5, __T5> converter5, Func<T6, __T6> converter6, Func<T7, __T7> converter7, Func<T8, __T8> converter8, Func<T9, __T9> converter9, Func<T10, __T10> converter10, Func<T11, __T11> converter11, Func<T12, __T12> converter12, Func<T13, __T13> converter13, Func<T14, __T14> converter14) {
      if (this is _ITuple15<__T0, __T1, __T2, __T3, __T4, __T5, __T6, __T7, __T8, __T9, __T10, __T11, __T12, __T13, __T14> dt) { return dt; }
      return new Tuple15<__T0, __T1, __T2, __T3, __T4, __T5, __T6, __T7, __T8, __T9, __T10, __T11, __T12, __T13, __T14>(converter0(__0), converter1(__1), converter2(__2), converter3(__3), converter4(__4), converter5(__5), converter6(__6), converter7(__7), converter8(__8), converter9(__9), converter10(__10), converter11(__11), converter12(__12), converter13(__13), converter14(__14));
    }
    public override bool Equals(object other) {
      var oth = other as _System.Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>;
      return oth != null && object.Equals(this.__0, oth.__0) && object.Equals(this.__1, oth.__1) && object.Equals(this.__2, oth.__2) && object.Equals(this.__3, oth.__3) && object.Equals(this.__4, oth.__4) && object.Equals(this.__5, oth.__5) && object.Equals(this.__6, oth.__6) && object.Equals(this.__7, oth.__7) && object.Equals(this.__8, oth.__8) && object.Equals(this.__9, oth.__9) && object.Equals(this.__10, oth.__10) && object.Equals(this.__11, oth.__11) && object.Equals(this.__12, oth.__12) && object.Equals(this.__13, oth.__13) && object.Equals(this.__14, oth.__14);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__1));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__2));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__3));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__4));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__5));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__6));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__7));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__8));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__9));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__10));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__11));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__12));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__13));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__14));
      return (int) hash;
    }
    public override string ToString() {
      string s = "";
      s += "(";
      s += Dafny.Helpers.ToString(this.__0);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__1);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__2);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__3);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__4);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__5);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__6);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__7);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__8);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__9);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__10);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__11);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__12);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__13);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__14);
      s += ")";
      return s;
    }
    public static _System._ITuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Default(T0 _default_T0, T1 _default_T1, T2 _default_T2, T3 _default_T3, T4 _default_T4, T5 _default_T5, T6 _default_T6, T7 _default_T7, T8 _default_T8, T9 _default_T9, T10 _default_T10, T11 _default_T11, T12 _default_T12, T13 _default_T13, T14 _default_T14) {
      return create(_default_T0, _default_T1, _default_T2, _default_T3, _default_T4, _default_T5, _default_T6, _default_T7, _default_T8, _default_T9, _default_T10, _default_T11, _default_T12, _default_T13, _default_T14);
    }
    public static Dafny.TypeDescriptor<_System._ITuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> _TypeDescriptor(Dafny.TypeDescriptor<T0> _td_T0, Dafny.TypeDescriptor<T1> _td_T1, Dafny.TypeDescriptor<T2> _td_T2, Dafny.TypeDescriptor<T3> _td_T3, Dafny.TypeDescriptor<T4> _td_T4, Dafny.TypeDescriptor<T5> _td_T5, Dafny.TypeDescriptor<T6> _td_T6, Dafny.TypeDescriptor<T7> _td_T7, Dafny.TypeDescriptor<T8> _td_T8, Dafny.TypeDescriptor<T9> _td_T9, Dafny.TypeDescriptor<T10> _td_T10, Dafny.TypeDescriptor<T11> _td_T11, Dafny.TypeDescriptor<T12> _td_T12, Dafny.TypeDescriptor<T13> _td_T13, Dafny.TypeDescriptor<T14> _td_T14) {
      return new Dafny.TypeDescriptor<_System._ITuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(_System.Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.Default(_td_T0.Default(), _td_T1.Default(), _td_T2.Default(), _td_T3.Default(), _td_T4.Default(), _td_T5.Default(), _td_T6.Default(), _td_T7.Default(), _td_T8.Default(), _td_T9.Default(), _td_T10.Default(), _td_T11.Default(), _td_T12.Default(), _td_T13.Default(), _td_T14.Default()));
    }
    public static _ITuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> create(T0 _0, T1 _1, T2 _2, T3 _3, T4 _4, T5 _5, T6 _6, T7 _7, T8 _8, T9 _9, T10 _10, T11 _11, T12 _12, T13 _13, T14 _14) {
      return new Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14);
    }
    public static _ITuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> create____hMake15(T0 _0, T1 _1, T2 _2, T3 _3, T4 _4, T5 _5, T6 _6, T7 _7, T8 _8, T9 _9, T10 _10, T11 _11, T12 _12, T13 _13, T14 _14) {
      return create(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14);
    }
    public T0 dtor__0 {
      get {
        return this.__0;
      }
    }
    public T1 dtor__1 {
      get {
        return this.__1;
      }
    }
    public T2 dtor__2 {
      get {
        return this.__2;
      }
    }
    public T3 dtor__3 {
      get {
        return this.__3;
      }
    }
    public T4 dtor__4 {
      get {
        return this.__4;
      }
    }
    public T5 dtor__5 {
      get {
        return this.__5;
      }
    }
    public T6 dtor__6 {
      get {
        return this.__6;
      }
    }
    public T7 dtor__7 {
      get {
        return this.__7;
      }
    }
    public T8 dtor__8 {
      get {
        return this.__8;
      }
    }
    public T9 dtor__9 {
      get {
        return this.__9;
      }
    }
    public T10 dtor__10 {
      get {
        return this.__10;
      }
    }
    public T11 dtor__11 {
      get {
        return this.__11;
      }
    }
    public T12 dtor__12 {
      get {
        return this.__12;
      }
    }
    public T13 dtor__13 {
      get {
        return this.__13;
      }
    }
    public T14 dtor__14 {
      get {
        return this.__14;
      }
    }
  }

  public interface _ITuple16<out T0, out T1, out T2, out T3, out T4, out T5, out T6, out T7, out T8, out T9, out T10, out T11, out T12, out T13, out T14, out T15> {
    T0 dtor__0 { get; }
    T1 dtor__1 { get; }
    T2 dtor__2 { get; }
    T3 dtor__3 { get; }
    T4 dtor__4 { get; }
    T5 dtor__5 { get; }
    T6 dtor__6 { get; }
    T7 dtor__7 { get; }
    T8 dtor__8 { get; }
    T9 dtor__9 { get; }
    T10 dtor__10 { get; }
    T11 dtor__11 { get; }
    T12 dtor__12 { get; }
    T13 dtor__13 { get; }
    T14 dtor__14 { get; }
    T15 dtor__15 { get; }
    _ITuple16<__T0, __T1, __T2, __T3, __T4, __T5, __T6, __T7, __T8, __T9, __T10, __T11, __T12, __T13, __T14, __T15> DowncastClone<__T0, __T1, __T2, __T3, __T4, __T5, __T6, __T7, __T8, __T9, __T10, __T11, __T12, __T13, __T14, __T15>(Func<T0, __T0> converter0, Func<T1, __T1> converter1, Func<T2, __T2> converter2, Func<T3, __T3> converter3, Func<T4, __T4> converter4, Func<T5, __T5> converter5, Func<T6, __T6> converter6, Func<T7, __T7> converter7, Func<T8, __T8> converter8, Func<T9, __T9> converter9, Func<T10, __T10> converter10, Func<T11, __T11> converter11, Func<T12, __T12> converter12, Func<T13, __T13> converter13, Func<T14, __T14> converter14, Func<T15, __T15> converter15);
  }
  public class Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> : _ITuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> {
    public readonly T0 __0;
    public readonly T1 __1;
    public readonly T2 __2;
    public readonly T3 __3;
    public readonly T4 __4;
    public readonly T5 __5;
    public readonly T6 __6;
    public readonly T7 __7;
    public readonly T8 __8;
    public readonly T9 __9;
    public readonly T10 __10;
    public readonly T11 __11;
    public readonly T12 __12;
    public readonly T13 __13;
    public readonly T14 __14;
    public readonly T15 __15;
    public Tuple16(T0 _0, T1 _1, T2 _2, T3 _3, T4 _4, T5 _5, T6 _6, T7 _7, T8 _8, T9 _9, T10 _10, T11 _11, T12 _12, T13 _13, T14 _14, T15 _15) {
      this.__0 = _0;
      this.__1 = _1;
      this.__2 = _2;
      this.__3 = _3;
      this.__4 = _4;
      this.__5 = _5;
      this.__6 = _6;
      this.__7 = _7;
      this.__8 = _8;
      this.__9 = _9;
      this.__10 = _10;
      this.__11 = _11;
      this.__12 = _12;
      this.__13 = _13;
      this.__14 = _14;
      this.__15 = _15;
    }
    public _ITuple16<__T0, __T1, __T2, __T3, __T4, __T5, __T6, __T7, __T8, __T9, __T10, __T11, __T12, __T13, __T14, __T15> DowncastClone<__T0, __T1, __T2, __T3, __T4, __T5, __T6, __T7, __T8, __T9, __T10, __T11, __T12, __T13, __T14, __T15>(Func<T0, __T0> converter0, Func<T1, __T1> converter1, Func<T2, __T2> converter2, Func<T3, __T3> converter3, Func<T4, __T4> converter4, Func<T5, __T5> converter5, Func<T6, __T6> converter6, Func<T7, __T7> converter7, Func<T8, __T8> converter8, Func<T9, __T9> converter9, Func<T10, __T10> converter10, Func<T11, __T11> converter11, Func<T12, __T12> converter12, Func<T13, __T13> converter13, Func<T14, __T14> converter14, Func<T15, __T15> converter15) {
      if (this is _ITuple16<__T0, __T1, __T2, __T3, __T4, __T5, __T6, __T7, __T8, __T9, __T10, __T11, __T12, __T13, __T14, __T15> dt) { return dt; }
      return new Tuple16<__T0, __T1, __T2, __T3, __T4, __T5, __T6, __T7, __T8, __T9, __T10, __T11, __T12, __T13, __T14, __T15>(converter0(__0), converter1(__1), converter2(__2), converter3(__3), converter4(__4), converter5(__5), converter6(__6), converter7(__7), converter8(__8), converter9(__9), converter10(__10), converter11(__11), converter12(__12), converter13(__13), converter14(__14), converter15(__15));
    }
    public override bool Equals(object other) {
      var oth = other as _System.Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>;
      return oth != null && object.Equals(this.__0, oth.__0) && object.Equals(this.__1, oth.__1) && object.Equals(this.__2, oth.__2) && object.Equals(this.__3, oth.__3) && object.Equals(this.__4, oth.__4) && object.Equals(this.__5, oth.__5) && object.Equals(this.__6, oth.__6) && object.Equals(this.__7, oth.__7) && object.Equals(this.__8, oth.__8) && object.Equals(this.__9, oth.__9) && object.Equals(this.__10, oth.__10) && object.Equals(this.__11, oth.__11) && object.Equals(this.__12, oth.__12) && object.Equals(this.__13, oth.__13) && object.Equals(this.__14, oth.__14) && object.Equals(this.__15, oth.__15);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__1));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__2));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__3));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__4));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__5));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__6));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__7));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__8));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__9));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__10));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__11));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__12));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__13));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__14));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__15));
      return (int) hash;
    }
    public override string ToString() {
      string s = "";
      s += "(";
      s += Dafny.Helpers.ToString(this.__0);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__1);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__2);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__3);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__4);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__5);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__6);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__7);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__8);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__9);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__10);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__11);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__12);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__13);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__14);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__15);
      s += ")";
      return s;
    }
    public static _System._ITuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> Default(T0 _default_T0, T1 _default_T1, T2 _default_T2, T3 _default_T3, T4 _default_T4, T5 _default_T5, T6 _default_T6, T7 _default_T7, T8 _default_T8, T9 _default_T9, T10 _default_T10, T11 _default_T11, T12 _default_T12, T13 _default_T13, T14 _default_T14, T15 _default_T15) {
      return create(_default_T0, _default_T1, _default_T2, _default_T3, _default_T4, _default_T5, _default_T6, _default_T7, _default_T8, _default_T9, _default_T10, _default_T11, _default_T12, _default_T13, _default_T14, _default_T15);
    }
    public static Dafny.TypeDescriptor<_System._ITuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> _TypeDescriptor(Dafny.TypeDescriptor<T0> _td_T0, Dafny.TypeDescriptor<T1> _td_T1, Dafny.TypeDescriptor<T2> _td_T2, Dafny.TypeDescriptor<T3> _td_T3, Dafny.TypeDescriptor<T4> _td_T4, Dafny.TypeDescriptor<T5> _td_T5, Dafny.TypeDescriptor<T6> _td_T6, Dafny.TypeDescriptor<T7> _td_T7, Dafny.TypeDescriptor<T8> _td_T8, Dafny.TypeDescriptor<T9> _td_T9, Dafny.TypeDescriptor<T10> _td_T10, Dafny.TypeDescriptor<T11> _td_T11, Dafny.TypeDescriptor<T12> _td_T12, Dafny.TypeDescriptor<T13> _td_T13, Dafny.TypeDescriptor<T14> _td_T14, Dafny.TypeDescriptor<T15> _td_T15) {
      return new Dafny.TypeDescriptor<_System._ITuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(_System.Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.Default(_td_T0.Default(), _td_T1.Default(), _td_T2.Default(), _td_T3.Default(), _td_T4.Default(), _td_T5.Default(), _td_T6.Default(), _td_T7.Default(), _td_T8.Default(), _td_T9.Default(), _td_T10.Default(), _td_T11.Default(), _td_T12.Default(), _td_T13.Default(), _td_T14.Default(), _td_T15.Default()));
    }
    public static _ITuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> create(T0 _0, T1 _1, T2 _2, T3 _3, T4 _4, T5 _5, T6 _6, T7 _7, T8 _8, T9 _9, T10 _10, T11 _11, T12 _12, T13 _13, T14 _14, T15 _15) {
      return new Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15);
    }
    public static _ITuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> create____hMake16(T0 _0, T1 _1, T2 _2, T3 _3, T4 _4, T5 _5, T6 _6, T7 _7, T8 _8, T9 _9, T10 _10, T11 _11, T12 _12, T13 _13, T14 _14, T15 _15) {
      return create(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15);
    }
    public T0 dtor__0 {
      get {
        return this.__0;
      }
    }
    public T1 dtor__1 {
      get {
        return this.__1;
      }
    }
    public T2 dtor__2 {
      get {
        return this.__2;
      }
    }
    public T3 dtor__3 {
      get {
        return this.__3;
      }
    }
    public T4 dtor__4 {
      get {
        return this.__4;
      }
    }
    public T5 dtor__5 {
      get {
        return this.__5;
      }
    }
    public T6 dtor__6 {
      get {
        return this.__6;
      }
    }
    public T7 dtor__7 {
      get {
        return this.__7;
      }
    }
    public T8 dtor__8 {
      get {
        return this.__8;
      }
    }
    public T9 dtor__9 {
      get {
        return this.__9;
      }
    }
    public T10 dtor__10 {
      get {
        return this.__10;
      }
    }
    public T11 dtor__11 {
      get {
        return this.__11;
      }
    }
    public T12 dtor__12 {
      get {
        return this.__12;
      }
    }
    public T13 dtor__13 {
      get {
        return this.__13;
      }
    }
    public T14 dtor__14 {
      get {
        return this.__14;
      }
    }
    public T15 dtor__15 {
      get {
        return this.__15;
      }
    }
  }

  public interface _ITuple17<out T0, out T1, out T2, out T3, out T4, out T5, out T6, out T7, out T8, out T9, out T10, out T11, out T12, out T13, out T14, out T15, out T16> {
    T0 dtor__0 { get; }
    T1 dtor__1 { get; }
    T2 dtor__2 { get; }
    T3 dtor__3 { get; }
    T4 dtor__4 { get; }
    T5 dtor__5 { get; }
    T6 dtor__6 { get; }
    T7 dtor__7 { get; }
    T8 dtor__8 { get; }
    T9 dtor__9 { get; }
    T10 dtor__10 { get; }
    T11 dtor__11 { get; }
    T12 dtor__12 { get; }
    T13 dtor__13 { get; }
    T14 dtor__14 { get; }
    T15 dtor__15 { get; }
    T16 dtor__16 { get; }
    _ITuple17<__T0, __T1, __T2, __T3, __T4, __T5, __T6, __T7, __T8, __T9, __T10, __T11, __T12, __T13, __T14, __T15, __T16> DowncastClone<__T0, __T1, __T2, __T3, __T4, __T5, __T6, __T7, __T8, __T9, __T10, __T11, __T12, __T13, __T14, __T15, __T16>(Func<T0, __T0> converter0, Func<T1, __T1> converter1, Func<T2, __T2> converter2, Func<T3, __T3> converter3, Func<T4, __T4> converter4, Func<T5, __T5> converter5, Func<T6, __T6> converter6, Func<T7, __T7> converter7, Func<T8, __T8> converter8, Func<T9, __T9> converter9, Func<T10, __T10> converter10, Func<T11, __T11> converter11, Func<T12, __T12> converter12, Func<T13, __T13> converter13, Func<T14, __T14> converter14, Func<T15, __T15> converter15, Func<T16, __T16> converter16);
  }
  public class Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> : _ITuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> {
    public readonly T0 __0;
    public readonly T1 __1;
    public readonly T2 __2;
    public readonly T3 __3;
    public readonly T4 __4;
    public readonly T5 __5;
    public readonly T6 __6;
    public readonly T7 __7;
    public readonly T8 __8;
    public readonly T9 __9;
    public readonly T10 __10;
    public readonly T11 __11;
    public readonly T12 __12;
    public readonly T13 __13;
    public readonly T14 __14;
    public readonly T15 __15;
    public readonly T16 __16;
    public Tuple17(T0 _0, T1 _1, T2 _2, T3 _3, T4 _4, T5 _5, T6 _6, T7 _7, T8 _8, T9 _9, T10 _10, T11 _11, T12 _12, T13 _13, T14 _14, T15 _15, T16 _16) {
      this.__0 = _0;
      this.__1 = _1;
      this.__2 = _2;
      this.__3 = _3;
      this.__4 = _4;
      this.__5 = _5;
      this.__6 = _6;
      this.__7 = _7;
      this.__8 = _8;
      this.__9 = _9;
      this.__10 = _10;
      this.__11 = _11;
      this.__12 = _12;
      this.__13 = _13;
      this.__14 = _14;
      this.__15 = _15;
      this.__16 = _16;
    }
    public _ITuple17<__T0, __T1, __T2, __T3, __T4, __T5, __T6, __T7, __T8, __T9, __T10, __T11, __T12, __T13, __T14, __T15, __T16> DowncastClone<__T0, __T1, __T2, __T3, __T4, __T5, __T6, __T7, __T8, __T9, __T10, __T11, __T12, __T13, __T14, __T15, __T16>(Func<T0, __T0> converter0, Func<T1, __T1> converter1, Func<T2, __T2> converter2, Func<T3, __T3> converter3, Func<T4, __T4> converter4, Func<T5, __T5> converter5, Func<T6, __T6> converter6, Func<T7, __T7> converter7, Func<T8, __T8> converter8, Func<T9, __T9> converter9, Func<T10, __T10> converter10, Func<T11, __T11> converter11, Func<T12, __T12> converter12, Func<T13, __T13> converter13, Func<T14, __T14> converter14, Func<T15, __T15> converter15, Func<T16, __T16> converter16) {
      if (this is _ITuple17<__T0, __T1, __T2, __T3, __T4, __T5, __T6, __T7, __T8, __T9, __T10, __T11, __T12, __T13, __T14, __T15, __T16> dt) { return dt; }
      return new Tuple17<__T0, __T1, __T2, __T3, __T4, __T5, __T6, __T7, __T8, __T9, __T10, __T11, __T12, __T13, __T14, __T15, __T16>(converter0(__0), converter1(__1), converter2(__2), converter3(__3), converter4(__4), converter5(__5), converter6(__6), converter7(__7), converter8(__8), converter9(__9), converter10(__10), converter11(__11), converter12(__12), converter13(__13), converter14(__14), converter15(__15), converter16(__16));
    }
    public override bool Equals(object other) {
      var oth = other as _System.Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>;
      return oth != null && object.Equals(this.__0, oth.__0) && object.Equals(this.__1, oth.__1) && object.Equals(this.__2, oth.__2) && object.Equals(this.__3, oth.__3) && object.Equals(this.__4, oth.__4) && object.Equals(this.__5, oth.__5) && object.Equals(this.__6, oth.__6) && object.Equals(this.__7, oth.__7) && object.Equals(this.__8, oth.__8) && object.Equals(this.__9, oth.__9) && object.Equals(this.__10, oth.__10) && object.Equals(this.__11, oth.__11) && object.Equals(this.__12, oth.__12) && object.Equals(this.__13, oth.__13) && object.Equals(this.__14, oth.__14) && object.Equals(this.__15, oth.__15) && object.Equals(this.__16, oth.__16);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__1));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__2));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__3));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__4));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__5));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__6));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__7));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__8));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__9));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__10));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__11));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__12));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__13));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__14));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__15));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__16));
      return (int) hash;
    }
    public override string ToString() {
      string s = "";
      s += "(";
      s += Dafny.Helpers.ToString(this.__0);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__1);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__2);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__3);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__4);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__5);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__6);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__7);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__8);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__9);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__10);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__11);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__12);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__13);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__14);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__15);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__16);
      s += ")";
      return s;
    }
    public static _System._ITuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> Default(T0 _default_T0, T1 _default_T1, T2 _default_T2, T3 _default_T3, T4 _default_T4, T5 _default_T5, T6 _default_T6, T7 _default_T7, T8 _default_T8, T9 _default_T9, T10 _default_T10, T11 _default_T11, T12 _default_T12, T13 _default_T13, T14 _default_T14, T15 _default_T15, T16 _default_T16) {
      return create(_default_T0, _default_T1, _default_T2, _default_T3, _default_T4, _default_T5, _default_T6, _default_T7, _default_T8, _default_T9, _default_T10, _default_T11, _default_T12, _default_T13, _default_T14, _default_T15, _default_T16);
    }
    public static Dafny.TypeDescriptor<_System._ITuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> _TypeDescriptor(Dafny.TypeDescriptor<T0> _td_T0, Dafny.TypeDescriptor<T1> _td_T1, Dafny.TypeDescriptor<T2> _td_T2, Dafny.TypeDescriptor<T3> _td_T3, Dafny.TypeDescriptor<T4> _td_T4, Dafny.TypeDescriptor<T5> _td_T5, Dafny.TypeDescriptor<T6> _td_T6, Dafny.TypeDescriptor<T7> _td_T7, Dafny.TypeDescriptor<T8> _td_T8, Dafny.TypeDescriptor<T9> _td_T9, Dafny.TypeDescriptor<T10> _td_T10, Dafny.TypeDescriptor<T11> _td_T11, Dafny.TypeDescriptor<T12> _td_T12, Dafny.TypeDescriptor<T13> _td_T13, Dafny.TypeDescriptor<T14> _td_T14, Dafny.TypeDescriptor<T15> _td_T15, Dafny.TypeDescriptor<T16> _td_T16) {
      return new Dafny.TypeDescriptor<_System._ITuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(_System.Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.Default(_td_T0.Default(), _td_T1.Default(), _td_T2.Default(), _td_T3.Default(), _td_T4.Default(), _td_T5.Default(), _td_T6.Default(), _td_T7.Default(), _td_T8.Default(), _td_T9.Default(), _td_T10.Default(), _td_T11.Default(), _td_T12.Default(), _td_T13.Default(), _td_T14.Default(), _td_T15.Default(), _td_T16.Default()));
    }
    public static _ITuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> create(T0 _0, T1 _1, T2 _2, T3 _3, T4 _4, T5 _5, T6 _6, T7 _7, T8 _8, T9 _9, T10 _10, T11 _11, T12 _12, T13 _13, T14 _14, T15 _15, T16 _16) {
      return new Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16);
    }
    public static _ITuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> create____hMake17(T0 _0, T1 _1, T2 _2, T3 _3, T4 _4, T5 _5, T6 _6, T7 _7, T8 _8, T9 _9, T10 _10, T11 _11, T12 _12, T13 _13, T14 _14, T15 _15, T16 _16) {
      return create(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16);
    }
    public T0 dtor__0 {
      get {
        return this.__0;
      }
    }
    public T1 dtor__1 {
      get {
        return this.__1;
      }
    }
    public T2 dtor__2 {
      get {
        return this.__2;
      }
    }
    public T3 dtor__3 {
      get {
        return this.__3;
      }
    }
    public T4 dtor__4 {
      get {
        return this.__4;
      }
    }
    public T5 dtor__5 {
      get {
        return this.__5;
      }
    }
    public T6 dtor__6 {
      get {
        return this.__6;
      }
    }
    public T7 dtor__7 {
      get {
        return this.__7;
      }
    }
    public T8 dtor__8 {
      get {
        return this.__8;
      }
    }
    public T9 dtor__9 {
      get {
        return this.__9;
      }
    }
    public T10 dtor__10 {
      get {
        return this.__10;
      }
    }
    public T11 dtor__11 {
      get {
        return this.__11;
      }
    }
    public T12 dtor__12 {
      get {
        return this.__12;
      }
    }
    public T13 dtor__13 {
      get {
        return this.__13;
      }
    }
    public T14 dtor__14 {
      get {
        return this.__14;
      }
    }
    public T15 dtor__15 {
      get {
        return this.__15;
      }
    }
    public T16 dtor__16 {
      get {
        return this.__16;
      }
    }
  }

  public interface _ITuple18<out T0, out T1, out T2, out T3, out T4, out T5, out T6, out T7, out T8, out T9, out T10, out T11, out T12, out T13, out T14, out T15, out T16, out T17> {
    T0 dtor__0 { get; }
    T1 dtor__1 { get; }
    T2 dtor__2 { get; }
    T3 dtor__3 { get; }
    T4 dtor__4 { get; }
    T5 dtor__5 { get; }
    T6 dtor__6 { get; }
    T7 dtor__7 { get; }
    T8 dtor__8 { get; }
    T9 dtor__9 { get; }
    T10 dtor__10 { get; }
    T11 dtor__11 { get; }
    T12 dtor__12 { get; }
    T13 dtor__13 { get; }
    T14 dtor__14 { get; }
    T15 dtor__15 { get; }
    T16 dtor__16 { get; }
    T17 dtor__17 { get; }
    _ITuple18<__T0, __T1, __T2, __T3, __T4, __T5, __T6, __T7, __T8, __T9, __T10, __T11, __T12, __T13, __T14, __T15, __T16, __T17> DowncastClone<__T0, __T1, __T2, __T3, __T4, __T5, __T6, __T7, __T8, __T9, __T10, __T11, __T12, __T13, __T14, __T15, __T16, __T17>(Func<T0, __T0> converter0, Func<T1, __T1> converter1, Func<T2, __T2> converter2, Func<T3, __T3> converter3, Func<T4, __T4> converter4, Func<T5, __T5> converter5, Func<T6, __T6> converter6, Func<T7, __T7> converter7, Func<T8, __T8> converter8, Func<T9, __T9> converter9, Func<T10, __T10> converter10, Func<T11, __T11> converter11, Func<T12, __T12> converter12, Func<T13, __T13> converter13, Func<T14, __T14> converter14, Func<T15, __T15> converter15, Func<T16, __T16> converter16, Func<T17, __T17> converter17);
  }
  public class Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> : _ITuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> {
    public readonly T0 __0;
    public readonly T1 __1;
    public readonly T2 __2;
    public readonly T3 __3;
    public readonly T4 __4;
    public readonly T5 __5;
    public readonly T6 __6;
    public readonly T7 __7;
    public readonly T8 __8;
    public readonly T9 __9;
    public readonly T10 __10;
    public readonly T11 __11;
    public readonly T12 __12;
    public readonly T13 __13;
    public readonly T14 __14;
    public readonly T15 __15;
    public readonly T16 __16;
    public readonly T17 __17;
    public Tuple18(T0 _0, T1 _1, T2 _2, T3 _3, T4 _4, T5 _5, T6 _6, T7 _7, T8 _8, T9 _9, T10 _10, T11 _11, T12 _12, T13 _13, T14 _14, T15 _15, T16 _16, T17 _17) {
      this.__0 = _0;
      this.__1 = _1;
      this.__2 = _2;
      this.__3 = _3;
      this.__4 = _4;
      this.__5 = _5;
      this.__6 = _6;
      this.__7 = _7;
      this.__8 = _8;
      this.__9 = _9;
      this.__10 = _10;
      this.__11 = _11;
      this.__12 = _12;
      this.__13 = _13;
      this.__14 = _14;
      this.__15 = _15;
      this.__16 = _16;
      this.__17 = _17;
    }
    public _ITuple18<__T0, __T1, __T2, __T3, __T4, __T5, __T6, __T7, __T8, __T9, __T10, __T11, __T12, __T13, __T14, __T15, __T16, __T17> DowncastClone<__T0, __T1, __T2, __T3, __T4, __T5, __T6, __T7, __T8, __T9, __T10, __T11, __T12, __T13, __T14, __T15, __T16, __T17>(Func<T0, __T0> converter0, Func<T1, __T1> converter1, Func<T2, __T2> converter2, Func<T3, __T3> converter3, Func<T4, __T4> converter4, Func<T5, __T5> converter5, Func<T6, __T6> converter6, Func<T7, __T7> converter7, Func<T8, __T8> converter8, Func<T9, __T9> converter9, Func<T10, __T10> converter10, Func<T11, __T11> converter11, Func<T12, __T12> converter12, Func<T13, __T13> converter13, Func<T14, __T14> converter14, Func<T15, __T15> converter15, Func<T16, __T16> converter16, Func<T17, __T17> converter17) {
      if (this is _ITuple18<__T0, __T1, __T2, __T3, __T4, __T5, __T6, __T7, __T8, __T9, __T10, __T11, __T12, __T13, __T14, __T15, __T16, __T17> dt) { return dt; }
      return new Tuple18<__T0, __T1, __T2, __T3, __T4, __T5, __T6, __T7, __T8, __T9, __T10, __T11, __T12, __T13, __T14, __T15, __T16, __T17>(converter0(__0), converter1(__1), converter2(__2), converter3(__3), converter4(__4), converter5(__5), converter6(__6), converter7(__7), converter8(__8), converter9(__9), converter10(__10), converter11(__11), converter12(__12), converter13(__13), converter14(__14), converter15(__15), converter16(__16), converter17(__17));
    }
    public override bool Equals(object other) {
      var oth = other as _System.Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>;
      return oth != null && object.Equals(this.__0, oth.__0) && object.Equals(this.__1, oth.__1) && object.Equals(this.__2, oth.__2) && object.Equals(this.__3, oth.__3) && object.Equals(this.__4, oth.__4) && object.Equals(this.__5, oth.__5) && object.Equals(this.__6, oth.__6) && object.Equals(this.__7, oth.__7) && object.Equals(this.__8, oth.__8) && object.Equals(this.__9, oth.__9) && object.Equals(this.__10, oth.__10) && object.Equals(this.__11, oth.__11) && object.Equals(this.__12, oth.__12) && object.Equals(this.__13, oth.__13) && object.Equals(this.__14, oth.__14) && object.Equals(this.__15, oth.__15) && object.Equals(this.__16, oth.__16) && object.Equals(this.__17, oth.__17);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__1));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__2));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__3));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__4));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__5));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__6));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__7));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__8));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__9));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__10));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__11));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__12));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__13));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__14));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__15));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__16));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__17));
      return (int) hash;
    }
    public override string ToString() {
      string s = "";
      s += "(";
      s += Dafny.Helpers.ToString(this.__0);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__1);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__2);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__3);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__4);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__5);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__6);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__7);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__8);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__9);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__10);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__11);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__12);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__13);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__14);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__15);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__16);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__17);
      s += ")";
      return s;
    }
    public static _System._ITuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> Default(T0 _default_T0, T1 _default_T1, T2 _default_T2, T3 _default_T3, T4 _default_T4, T5 _default_T5, T6 _default_T6, T7 _default_T7, T8 _default_T8, T9 _default_T9, T10 _default_T10, T11 _default_T11, T12 _default_T12, T13 _default_T13, T14 _default_T14, T15 _default_T15, T16 _default_T16, T17 _default_T17) {
      return create(_default_T0, _default_T1, _default_T2, _default_T3, _default_T4, _default_T5, _default_T6, _default_T7, _default_T8, _default_T9, _default_T10, _default_T11, _default_T12, _default_T13, _default_T14, _default_T15, _default_T16, _default_T17);
    }
    public static Dafny.TypeDescriptor<_System._ITuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> _TypeDescriptor(Dafny.TypeDescriptor<T0> _td_T0, Dafny.TypeDescriptor<T1> _td_T1, Dafny.TypeDescriptor<T2> _td_T2, Dafny.TypeDescriptor<T3> _td_T3, Dafny.TypeDescriptor<T4> _td_T4, Dafny.TypeDescriptor<T5> _td_T5, Dafny.TypeDescriptor<T6> _td_T6, Dafny.TypeDescriptor<T7> _td_T7, Dafny.TypeDescriptor<T8> _td_T8, Dafny.TypeDescriptor<T9> _td_T9, Dafny.TypeDescriptor<T10> _td_T10, Dafny.TypeDescriptor<T11> _td_T11, Dafny.TypeDescriptor<T12> _td_T12, Dafny.TypeDescriptor<T13> _td_T13, Dafny.TypeDescriptor<T14> _td_T14, Dafny.TypeDescriptor<T15> _td_T15, Dafny.TypeDescriptor<T16> _td_T16, Dafny.TypeDescriptor<T17> _td_T17) {
      return new Dafny.TypeDescriptor<_System._ITuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(_System.Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>.Default(_td_T0.Default(), _td_T1.Default(), _td_T2.Default(), _td_T3.Default(), _td_T4.Default(), _td_T5.Default(), _td_T6.Default(), _td_T7.Default(), _td_T8.Default(), _td_T9.Default(), _td_T10.Default(), _td_T11.Default(), _td_T12.Default(), _td_T13.Default(), _td_T14.Default(), _td_T15.Default(), _td_T16.Default(), _td_T17.Default()));
    }
    public static _ITuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> create(T0 _0, T1 _1, T2 _2, T3 _3, T4 _4, T5 _5, T6 _6, T7 _7, T8 _8, T9 _9, T10 _10, T11 _11, T12 _12, T13 _13, T14 _14, T15 _15, T16 _16, T17 _17) {
      return new Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17);
    }
    public static _ITuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> create____hMake18(T0 _0, T1 _1, T2 _2, T3 _3, T4 _4, T5 _5, T6 _6, T7 _7, T8 _8, T9 _9, T10 _10, T11 _11, T12 _12, T13 _13, T14 _14, T15 _15, T16 _16, T17 _17) {
      return create(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17);
    }
    public T0 dtor__0 {
      get {
        return this.__0;
      }
    }
    public T1 dtor__1 {
      get {
        return this.__1;
      }
    }
    public T2 dtor__2 {
      get {
        return this.__2;
      }
    }
    public T3 dtor__3 {
      get {
        return this.__3;
      }
    }
    public T4 dtor__4 {
      get {
        return this.__4;
      }
    }
    public T5 dtor__5 {
      get {
        return this.__5;
      }
    }
    public T6 dtor__6 {
      get {
        return this.__6;
      }
    }
    public T7 dtor__7 {
      get {
        return this.__7;
      }
    }
    public T8 dtor__8 {
      get {
        return this.__8;
      }
    }
    public T9 dtor__9 {
      get {
        return this.__9;
      }
    }
    public T10 dtor__10 {
      get {
        return this.__10;
      }
    }
    public T11 dtor__11 {
      get {
        return this.__11;
      }
    }
    public T12 dtor__12 {
      get {
        return this.__12;
      }
    }
    public T13 dtor__13 {
      get {
        return this.__13;
      }
    }
    public T14 dtor__14 {
      get {
        return this.__14;
      }
    }
    public T15 dtor__15 {
      get {
        return this.__15;
      }
    }
    public T16 dtor__16 {
      get {
        return this.__16;
      }
    }
    public T17 dtor__17 {
      get {
        return this.__17;
      }
    }
  }

  public interface _ITuple19<out T0, out T1, out T2, out T3, out T4, out T5, out T6, out T7, out T8, out T9, out T10, out T11, out T12, out T13, out T14, out T15, out T16, out T17, out T18> {
    T0 dtor__0 { get; }
    T1 dtor__1 { get; }
    T2 dtor__2 { get; }
    T3 dtor__3 { get; }
    T4 dtor__4 { get; }
    T5 dtor__5 { get; }
    T6 dtor__6 { get; }
    T7 dtor__7 { get; }
    T8 dtor__8 { get; }
    T9 dtor__9 { get; }
    T10 dtor__10 { get; }
    T11 dtor__11 { get; }
    T12 dtor__12 { get; }
    T13 dtor__13 { get; }
    T14 dtor__14 { get; }
    T15 dtor__15 { get; }
    T16 dtor__16 { get; }
    T17 dtor__17 { get; }
    T18 dtor__18 { get; }
    _ITuple19<__T0, __T1, __T2, __T3, __T4, __T5, __T6, __T7, __T8, __T9, __T10, __T11, __T12, __T13, __T14, __T15, __T16, __T17, __T18> DowncastClone<__T0, __T1, __T2, __T3, __T4, __T5, __T6, __T7, __T8, __T9, __T10, __T11, __T12, __T13, __T14, __T15, __T16, __T17, __T18>(Func<T0, __T0> converter0, Func<T1, __T1> converter1, Func<T2, __T2> converter2, Func<T3, __T3> converter3, Func<T4, __T4> converter4, Func<T5, __T5> converter5, Func<T6, __T6> converter6, Func<T7, __T7> converter7, Func<T8, __T8> converter8, Func<T9, __T9> converter9, Func<T10, __T10> converter10, Func<T11, __T11> converter11, Func<T12, __T12> converter12, Func<T13, __T13> converter13, Func<T14, __T14> converter14, Func<T15, __T15> converter15, Func<T16, __T16> converter16, Func<T17, __T17> converter17, Func<T18, __T18> converter18);
  }
  public class Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> : _ITuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> {
    public readonly T0 __0;
    public readonly T1 __1;
    public readonly T2 __2;
    public readonly T3 __3;
    public readonly T4 __4;
    public readonly T5 __5;
    public readonly T6 __6;
    public readonly T7 __7;
    public readonly T8 __8;
    public readonly T9 __9;
    public readonly T10 __10;
    public readonly T11 __11;
    public readonly T12 __12;
    public readonly T13 __13;
    public readonly T14 __14;
    public readonly T15 __15;
    public readonly T16 __16;
    public readonly T17 __17;
    public readonly T18 __18;
    public Tuple19(T0 _0, T1 _1, T2 _2, T3 _3, T4 _4, T5 _5, T6 _6, T7 _7, T8 _8, T9 _9, T10 _10, T11 _11, T12 _12, T13 _13, T14 _14, T15 _15, T16 _16, T17 _17, T18 _18) {
      this.__0 = _0;
      this.__1 = _1;
      this.__2 = _2;
      this.__3 = _3;
      this.__4 = _4;
      this.__5 = _5;
      this.__6 = _6;
      this.__7 = _7;
      this.__8 = _8;
      this.__9 = _9;
      this.__10 = _10;
      this.__11 = _11;
      this.__12 = _12;
      this.__13 = _13;
      this.__14 = _14;
      this.__15 = _15;
      this.__16 = _16;
      this.__17 = _17;
      this.__18 = _18;
    }
    public _ITuple19<__T0, __T1, __T2, __T3, __T4, __T5, __T6, __T7, __T8, __T9, __T10, __T11, __T12, __T13, __T14, __T15, __T16, __T17, __T18> DowncastClone<__T0, __T1, __T2, __T3, __T4, __T5, __T6, __T7, __T8, __T9, __T10, __T11, __T12, __T13, __T14, __T15, __T16, __T17, __T18>(Func<T0, __T0> converter0, Func<T1, __T1> converter1, Func<T2, __T2> converter2, Func<T3, __T3> converter3, Func<T4, __T4> converter4, Func<T5, __T5> converter5, Func<T6, __T6> converter6, Func<T7, __T7> converter7, Func<T8, __T8> converter8, Func<T9, __T9> converter9, Func<T10, __T10> converter10, Func<T11, __T11> converter11, Func<T12, __T12> converter12, Func<T13, __T13> converter13, Func<T14, __T14> converter14, Func<T15, __T15> converter15, Func<T16, __T16> converter16, Func<T17, __T17> converter17, Func<T18, __T18> converter18) {
      if (this is _ITuple19<__T0, __T1, __T2, __T3, __T4, __T5, __T6, __T7, __T8, __T9, __T10, __T11, __T12, __T13, __T14, __T15, __T16, __T17, __T18> dt) { return dt; }
      return new Tuple19<__T0, __T1, __T2, __T3, __T4, __T5, __T6, __T7, __T8, __T9, __T10, __T11, __T12, __T13, __T14, __T15, __T16, __T17, __T18>(converter0(__0), converter1(__1), converter2(__2), converter3(__3), converter4(__4), converter5(__5), converter6(__6), converter7(__7), converter8(__8), converter9(__9), converter10(__10), converter11(__11), converter12(__12), converter13(__13), converter14(__14), converter15(__15), converter16(__16), converter17(__17), converter18(__18));
    }
    public override bool Equals(object other) {
      var oth = other as _System.Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>;
      return oth != null && object.Equals(this.__0, oth.__0) && object.Equals(this.__1, oth.__1) && object.Equals(this.__2, oth.__2) && object.Equals(this.__3, oth.__3) && object.Equals(this.__4, oth.__4) && object.Equals(this.__5, oth.__5) && object.Equals(this.__6, oth.__6) && object.Equals(this.__7, oth.__7) && object.Equals(this.__8, oth.__8) && object.Equals(this.__9, oth.__9) && object.Equals(this.__10, oth.__10) && object.Equals(this.__11, oth.__11) && object.Equals(this.__12, oth.__12) && object.Equals(this.__13, oth.__13) && object.Equals(this.__14, oth.__14) && object.Equals(this.__15, oth.__15) && object.Equals(this.__16, oth.__16) && object.Equals(this.__17, oth.__17) && object.Equals(this.__18, oth.__18);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__1));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__2));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__3));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__4));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__5));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__6));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__7));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__8));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__9));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__10));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__11));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__12));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__13));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__14));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__15));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__16));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__17));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__18));
      return (int) hash;
    }
    public override string ToString() {
      string s = "";
      s += "(";
      s += Dafny.Helpers.ToString(this.__0);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__1);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__2);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__3);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__4);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__5);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__6);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__7);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__8);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__9);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__10);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__11);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__12);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__13);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__14);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__15);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__16);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__17);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__18);
      s += ")";
      return s;
    }
    public static _System._ITuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> Default(T0 _default_T0, T1 _default_T1, T2 _default_T2, T3 _default_T3, T4 _default_T4, T5 _default_T5, T6 _default_T6, T7 _default_T7, T8 _default_T8, T9 _default_T9, T10 _default_T10, T11 _default_T11, T12 _default_T12, T13 _default_T13, T14 _default_T14, T15 _default_T15, T16 _default_T16, T17 _default_T17, T18 _default_T18) {
      return create(_default_T0, _default_T1, _default_T2, _default_T3, _default_T4, _default_T5, _default_T6, _default_T7, _default_T8, _default_T9, _default_T10, _default_T11, _default_T12, _default_T13, _default_T14, _default_T15, _default_T16, _default_T17, _default_T18);
    }
    public static Dafny.TypeDescriptor<_System._ITuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> _TypeDescriptor(Dafny.TypeDescriptor<T0> _td_T0, Dafny.TypeDescriptor<T1> _td_T1, Dafny.TypeDescriptor<T2> _td_T2, Dafny.TypeDescriptor<T3> _td_T3, Dafny.TypeDescriptor<T4> _td_T4, Dafny.TypeDescriptor<T5> _td_T5, Dafny.TypeDescriptor<T6> _td_T6, Dafny.TypeDescriptor<T7> _td_T7, Dafny.TypeDescriptor<T8> _td_T8, Dafny.TypeDescriptor<T9> _td_T9, Dafny.TypeDescriptor<T10> _td_T10, Dafny.TypeDescriptor<T11> _td_T11, Dafny.TypeDescriptor<T12> _td_T12, Dafny.TypeDescriptor<T13> _td_T13, Dafny.TypeDescriptor<T14> _td_T14, Dafny.TypeDescriptor<T15> _td_T15, Dafny.TypeDescriptor<T16> _td_T16, Dafny.TypeDescriptor<T17> _td_T17, Dafny.TypeDescriptor<T18> _td_T18) {
      return new Dafny.TypeDescriptor<_System._ITuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(_System.Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>.Default(_td_T0.Default(), _td_T1.Default(), _td_T2.Default(), _td_T3.Default(), _td_T4.Default(), _td_T5.Default(), _td_T6.Default(), _td_T7.Default(), _td_T8.Default(), _td_T9.Default(), _td_T10.Default(), _td_T11.Default(), _td_T12.Default(), _td_T13.Default(), _td_T14.Default(), _td_T15.Default(), _td_T16.Default(), _td_T17.Default(), _td_T18.Default()));
    }
    public static _ITuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> create(T0 _0, T1 _1, T2 _2, T3 _3, T4 _4, T5 _5, T6 _6, T7 _7, T8 _8, T9 _9, T10 _10, T11 _11, T12 _12, T13 _13, T14 _14, T15 _15, T16 _16, T17 _17, T18 _18) {
      return new Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18);
    }
    public static _ITuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> create____hMake19(T0 _0, T1 _1, T2 _2, T3 _3, T4 _4, T5 _5, T6 _6, T7 _7, T8 _8, T9 _9, T10 _10, T11 _11, T12 _12, T13 _13, T14 _14, T15 _15, T16 _16, T17 _17, T18 _18) {
      return create(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18);
    }
    public T0 dtor__0 {
      get {
        return this.__0;
      }
    }
    public T1 dtor__1 {
      get {
        return this.__1;
      }
    }
    public T2 dtor__2 {
      get {
        return this.__2;
      }
    }
    public T3 dtor__3 {
      get {
        return this.__3;
      }
    }
    public T4 dtor__4 {
      get {
        return this.__4;
      }
    }
    public T5 dtor__5 {
      get {
        return this.__5;
      }
    }
    public T6 dtor__6 {
      get {
        return this.__6;
      }
    }
    public T7 dtor__7 {
      get {
        return this.__7;
      }
    }
    public T8 dtor__8 {
      get {
        return this.__8;
      }
    }
    public T9 dtor__9 {
      get {
        return this.__9;
      }
    }
    public T10 dtor__10 {
      get {
        return this.__10;
      }
    }
    public T11 dtor__11 {
      get {
        return this.__11;
      }
    }
    public T12 dtor__12 {
      get {
        return this.__12;
      }
    }
    public T13 dtor__13 {
      get {
        return this.__13;
      }
    }
    public T14 dtor__14 {
      get {
        return this.__14;
      }
    }
    public T15 dtor__15 {
      get {
        return this.__15;
      }
    }
    public T16 dtor__16 {
      get {
        return this.__16;
      }
    }
    public T17 dtor__17 {
      get {
        return this.__17;
      }
    }
    public T18 dtor__18 {
      get {
        return this.__18;
      }
    }
  }

  public interface _ITuple20<out T0, out T1, out T2, out T3, out T4, out T5, out T6, out T7, out T8, out T9, out T10, out T11, out T12, out T13, out T14, out T15, out T16, out T17, out T18, out T19> {
    T0 dtor__0 { get; }
    T1 dtor__1 { get; }
    T2 dtor__2 { get; }
    T3 dtor__3 { get; }
    T4 dtor__4 { get; }
    T5 dtor__5 { get; }
    T6 dtor__6 { get; }
    T7 dtor__7 { get; }
    T8 dtor__8 { get; }
    T9 dtor__9 { get; }
    T10 dtor__10 { get; }
    T11 dtor__11 { get; }
    T12 dtor__12 { get; }
    T13 dtor__13 { get; }
    T14 dtor__14 { get; }
    T15 dtor__15 { get; }
    T16 dtor__16 { get; }
    T17 dtor__17 { get; }
    T18 dtor__18 { get; }
    T19 dtor__19 { get; }
    _ITuple20<__T0, __T1, __T2, __T3, __T4, __T5, __T6, __T7, __T8, __T9, __T10, __T11, __T12, __T13, __T14, __T15, __T16, __T17, __T18, __T19> DowncastClone<__T0, __T1, __T2, __T3, __T4, __T5, __T6, __T7, __T8, __T9, __T10, __T11, __T12, __T13, __T14, __T15, __T16, __T17, __T18, __T19>(Func<T0, __T0> converter0, Func<T1, __T1> converter1, Func<T2, __T2> converter2, Func<T3, __T3> converter3, Func<T4, __T4> converter4, Func<T5, __T5> converter5, Func<T6, __T6> converter6, Func<T7, __T7> converter7, Func<T8, __T8> converter8, Func<T9, __T9> converter9, Func<T10, __T10> converter10, Func<T11, __T11> converter11, Func<T12, __T12> converter12, Func<T13, __T13> converter13, Func<T14, __T14> converter14, Func<T15, __T15> converter15, Func<T16, __T16> converter16, Func<T17, __T17> converter17, Func<T18, __T18> converter18, Func<T19, __T19> converter19);
  }
  public class Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> : _ITuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> {
    public readonly T0 __0;
    public readonly T1 __1;
    public readonly T2 __2;
    public readonly T3 __3;
    public readonly T4 __4;
    public readonly T5 __5;
    public readonly T6 __6;
    public readonly T7 __7;
    public readonly T8 __8;
    public readonly T9 __9;
    public readonly T10 __10;
    public readonly T11 __11;
    public readonly T12 __12;
    public readonly T13 __13;
    public readonly T14 __14;
    public readonly T15 __15;
    public readonly T16 __16;
    public readonly T17 __17;
    public readonly T18 __18;
    public readonly T19 __19;
    public Tuple20(T0 _0, T1 _1, T2 _2, T3 _3, T4 _4, T5 _5, T6 _6, T7 _7, T8 _8, T9 _9, T10 _10, T11 _11, T12 _12, T13 _13, T14 _14, T15 _15, T16 _16, T17 _17, T18 _18, T19 _19) {
      this.__0 = _0;
      this.__1 = _1;
      this.__2 = _2;
      this.__3 = _3;
      this.__4 = _4;
      this.__5 = _5;
      this.__6 = _6;
      this.__7 = _7;
      this.__8 = _8;
      this.__9 = _9;
      this.__10 = _10;
      this.__11 = _11;
      this.__12 = _12;
      this.__13 = _13;
      this.__14 = _14;
      this.__15 = _15;
      this.__16 = _16;
      this.__17 = _17;
      this.__18 = _18;
      this.__19 = _19;
    }
    public _ITuple20<__T0, __T1, __T2, __T3, __T4, __T5, __T6, __T7, __T8, __T9, __T10, __T11, __T12, __T13, __T14, __T15, __T16, __T17, __T18, __T19> DowncastClone<__T0, __T1, __T2, __T3, __T4, __T5, __T6, __T7, __T8, __T9, __T10, __T11, __T12, __T13, __T14, __T15, __T16, __T17, __T18, __T19>(Func<T0, __T0> converter0, Func<T1, __T1> converter1, Func<T2, __T2> converter2, Func<T3, __T3> converter3, Func<T4, __T4> converter4, Func<T5, __T5> converter5, Func<T6, __T6> converter6, Func<T7, __T7> converter7, Func<T8, __T8> converter8, Func<T9, __T9> converter9, Func<T10, __T10> converter10, Func<T11, __T11> converter11, Func<T12, __T12> converter12, Func<T13, __T13> converter13, Func<T14, __T14> converter14, Func<T15, __T15> converter15, Func<T16, __T16> converter16, Func<T17, __T17> converter17, Func<T18, __T18> converter18, Func<T19, __T19> converter19) {
      if (this is _ITuple20<__T0, __T1, __T2, __T3, __T4, __T5, __T6, __T7, __T8, __T9, __T10, __T11, __T12, __T13, __T14, __T15, __T16, __T17, __T18, __T19> dt) { return dt; }
      return new Tuple20<__T0, __T1, __T2, __T3, __T4, __T5, __T6, __T7, __T8, __T9, __T10, __T11, __T12, __T13, __T14, __T15, __T16, __T17, __T18, __T19>(converter0(__0), converter1(__1), converter2(__2), converter3(__3), converter4(__4), converter5(__5), converter6(__6), converter7(__7), converter8(__8), converter9(__9), converter10(__10), converter11(__11), converter12(__12), converter13(__13), converter14(__14), converter15(__15), converter16(__16), converter17(__17), converter18(__18), converter19(__19));
    }
    public override bool Equals(object other) {
      var oth = other as _System.Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>;
      return oth != null && object.Equals(this.__0, oth.__0) && object.Equals(this.__1, oth.__1) && object.Equals(this.__2, oth.__2) && object.Equals(this.__3, oth.__3) && object.Equals(this.__4, oth.__4) && object.Equals(this.__5, oth.__5) && object.Equals(this.__6, oth.__6) && object.Equals(this.__7, oth.__7) && object.Equals(this.__8, oth.__8) && object.Equals(this.__9, oth.__9) && object.Equals(this.__10, oth.__10) && object.Equals(this.__11, oth.__11) && object.Equals(this.__12, oth.__12) && object.Equals(this.__13, oth.__13) && object.Equals(this.__14, oth.__14) && object.Equals(this.__15, oth.__15) && object.Equals(this.__16, oth.__16) && object.Equals(this.__17, oth.__17) && object.Equals(this.__18, oth.__18) && object.Equals(this.__19, oth.__19);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__1));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__2));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__3));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__4));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__5));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__6));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__7));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__8));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__9));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__10));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__11));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__12));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__13));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__14));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__15));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__16));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__17));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__18));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this.__19));
      return (int) hash;
    }
    public override string ToString() {
      string s = "";
      s += "(";
      s += Dafny.Helpers.ToString(this.__0);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__1);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__2);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__3);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__4);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__5);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__6);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__7);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__8);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__9);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__10);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__11);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__12);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__13);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__14);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__15);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__16);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__17);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__18);
      s += ", ";
      s += Dafny.Helpers.ToString(this.__19);
      s += ")";
      return s;
    }
    public static _System._ITuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> Default(T0 _default_T0, T1 _default_T1, T2 _default_T2, T3 _default_T3, T4 _default_T4, T5 _default_T5, T6 _default_T6, T7 _default_T7, T8 _default_T8, T9 _default_T9, T10 _default_T10, T11 _default_T11, T12 _default_T12, T13 _default_T13, T14 _default_T14, T15 _default_T15, T16 _default_T16, T17 _default_T17, T18 _default_T18, T19 _default_T19) {
      return create(_default_T0, _default_T1, _default_T2, _default_T3, _default_T4, _default_T5, _default_T6, _default_T7, _default_T8, _default_T9, _default_T10, _default_T11, _default_T12, _default_T13, _default_T14, _default_T15, _default_T16, _default_T17, _default_T18, _default_T19);
    }
    public static Dafny.TypeDescriptor<_System._ITuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> _TypeDescriptor(Dafny.TypeDescriptor<T0> _td_T0, Dafny.TypeDescriptor<T1> _td_T1, Dafny.TypeDescriptor<T2> _td_T2, Dafny.TypeDescriptor<T3> _td_T3, Dafny.TypeDescriptor<T4> _td_T4, Dafny.TypeDescriptor<T5> _td_T5, Dafny.TypeDescriptor<T6> _td_T6, Dafny.TypeDescriptor<T7> _td_T7, Dafny.TypeDescriptor<T8> _td_T8, Dafny.TypeDescriptor<T9> _td_T9, Dafny.TypeDescriptor<T10> _td_T10, Dafny.TypeDescriptor<T11> _td_T11, Dafny.TypeDescriptor<T12> _td_T12, Dafny.TypeDescriptor<T13> _td_T13, Dafny.TypeDescriptor<T14> _td_T14, Dafny.TypeDescriptor<T15> _td_T15, Dafny.TypeDescriptor<T16> _td_T16, Dafny.TypeDescriptor<T17> _td_T17, Dafny.TypeDescriptor<T18> _td_T18, Dafny.TypeDescriptor<T19> _td_T19) {
      return new Dafny.TypeDescriptor<_System._ITuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(_System.Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>.Default(_td_T0.Default(), _td_T1.Default(), _td_T2.Default(), _td_T3.Default(), _td_T4.Default(), _td_T5.Default(), _td_T6.Default(), _td_T7.Default(), _td_T8.Default(), _td_T9.Default(), _td_T10.Default(), _td_T11.Default(), _td_T12.Default(), _td_T13.Default(), _td_T14.Default(), _td_T15.Default(), _td_T16.Default(), _td_T17.Default(), _td_T18.Default(), _td_T19.Default()));
    }
    public static _ITuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> create(T0 _0, T1 _1, T2 _2, T3 _3, T4 _4, T5 _5, T6 _6, T7 _7, T8 _8, T9 _9, T10 _10, T11 _11, T12 _12, T13 _13, T14 _14, T15 _15, T16 _16, T17 _17, T18 _18, T19 _19) {
      return new Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19);
    }
    public static _ITuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> create____hMake20(T0 _0, T1 _1, T2 _2, T3 _3, T4 _4, T5 _5, T6 _6, T7 _7, T8 _8, T9 _9, T10 _10, T11 _11, T12 _12, T13 _13, T14 _14, T15 _15, T16 _16, T17 _17, T18 _18, T19 _19) {
      return create(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19);
    }
    public T0 dtor__0 {
      get {
        return this.__0;
      }
    }
    public T1 dtor__1 {
      get {
        return this.__1;
      }
    }
    public T2 dtor__2 {
      get {
        return this.__2;
      }
    }
    public T3 dtor__3 {
      get {
        return this.__3;
      }
    }
    public T4 dtor__4 {
      get {
        return this.__4;
      }
    }
    public T5 dtor__5 {
      get {
        return this.__5;
      }
    }
    public T6 dtor__6 {
      get {
        return this.__6;
      }
    }
    public T7 dtor__7 {
      get {
        return this.__7;
      }
    }
    public T8 dtor__8 {
      get {
        return this.__8;
      }
    }
    public T9 dtor__9 {
      get {
        return this.__9;
      }
    }
    public T10 dtor__10 {
      get {
        return this.__10;
      }
    }
    public T11 dtor__11 {
      get {
        return this.__11;
      }
    }
    public T12 dtor__12 {
      get {
        return this.__12;
      }
    }
    public T13 dtor__13 {
      get {
        return this.__13;
      }
    }
    public T14 dtor__14 {
      get {
        return this.__14;
      }
    }
    public T15 dtor__15 {
      get {
        return this.__15;
      }
    }
    public T16 dtor__16 {
      get {
        return this.__16;
      }
    }
    public T17 dtor__17 {
      get {
        return this.__17;
      }
    }
    public T18 dtor__18 {
      get {
        return this.__18;
      }
    }
    public T19 dtor__19 {
      get {
        return this.__19;
      }
    }
  }
} // end of namespace _System
namespace Dafny {
  internal class ArrayHelpers {
    public static T[] InitNewArray1<T>(T z, BigInteger size0) {
      int s0 = (int)size0;
      T[] a = new T[s0];
      for (int i0 = 0; i0 < s0; i0++) {
        a[i0] = z;
      }
      return a;
    }
  }
} // end of namespace Dafny
internal static class FuncExtensions {
  public static Func<U, UResult> DowncastClone<T, TResult, U, UResult>(this Func<T, TResult> F, Func<U, T> ArgConv, Func<TResult, UResult> ResConv) {
    return arg => ResConv(F(ArgConv(arg)));
  }
  public static Func<UResult> DowncastClone<TResult, UResult>(this Func<TResult> F, Func<TResult, UResult> ResConv) {
    return () => ResConv(F());
  }
  public static Func<U1, U2, UResult> DowncastClone<T1, T2, TResult, U1, U2, UResult>(this Func<T1, T2, TResult> F, Func<U1, T1> ArgConv1, Func<U2, T2> ArgConv2, Func<TResult, UResult> ResConv) {
    return (arg1, arg2) => ResConv(F(ArgConv1(arg1), ArgConv2(arg2)));
  }
  public static Func<U1, U2, U3, UResult> DowncastClone<T1, T2, T3, TResult, U1, U2, U3, UResult>(this Func<T1, T2, T3, TResult> F, Func<U1, T1> ArgConv1, Func<U2, T2> ArgConv2, Func<U3, T3> ArgConv3, Func<TResult, UResult> ResConv) {
    return (arg1, arg2, arg3) => ResConv(F(ArgConv1(arg1), ArgConv2(arg2), ArgConv3(arg3)));
  }
  public static Func<U1, U2, U3, U4, UResult> DowncastClone<T1, T2, T3, T4, TResult, U1, U2, U3, U4, UResult>(this Func<T1, T2, T3, T4, TResult> F, Func<U1, T1> ArgConv1, Func<U2, T2> ArgConv2, Func<U3, T3> ArgConv3, Func<U4, T4> ArgConv4, Func<TResult, UResult> ResConv) {
    return (arg1, arg2, arg3, arg4) => ResConv(F(ArgConv1(arg1), ArgConv2(arg2), ArgConv3(arg3), ArgConv4(arg4)));
  }
  public static Func<U1, U2, U3, U4, U5, UResult> DowncastClone<T1, T2, T3, T4, T5, TResult, U1, U2, U3, U4, U5, UResult>(this Func<T1, T2, T3, T4, T5, TResult> F, Func<U1, T1> ArgConv1, Func<U2, T2> ArgConv2, Func<U3, T3> ArgConv3, Func<U4, T4> ArgConv4, Func<U5, T5> ArgConv5, Func<TResult, UResult> ResConv) {
    return (arg1, arg2, arg3, arg4, arg5) => ResConv(F(ArgConv1(arg1), ArgConv2(arg2), ArgConv3(arg3), ArgConv4(arg4), ArgConv5(arg5)));
  }
  public static Func<U1, U2, U3, U4, U5, U6, U7, UResult> DowncastClone<T1, T2, T3, T4, T5, T6, T7, TResult, U1, U2, U3, U4, U5, U6, U7, UResult>(this Func<T1, T2, T3, T4, T5, T6, T7, TResult> F, Func<U1, T1> ArgConv1, Func<U2, T2> ArgConv2, Func<U3, T3> ArgConv3, Func<U4, T4> ArgConv4, Func<U5, T5> ArgConv5, Func<U6, T6> ArgConv6, Func<U7, T7> ArgConv7, Func<TResult, UResult> ResConv) {
    return (arg1, arg2, arg3, arg4, arg5, arg6, arg7) => ResConv(F(ArgConv1(arg1), ArgConv2(arg2), ArgConv3(arg3), ArgConv4(arg4), ArgConv5(arg5), ArgConv6(arg6), ArgConv7(arg7)));
  }
  public static Func<U1, U2, U3, U4, U5, U6, U7, U8, U9, U10, U11, U12, U13, UResult> DowncastClone<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult, U1, U2, U3, U4, U5, U6, U7, U8, U9, U10, U11, U12, U13, UResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult> F, Func<U1, T1> ArgConv1, Func<U2, T2> ArgConv2, Func<U3, T3> ArgConv3, Func<U4, T4> ArgConv4, Func<U5, T5> ArgConv5, Func<U6, T6> ArgConv6, Func<U7, T7> ArgConv7, Func<U8, T8> ArgConv8, Func<U9, T9> ArgConv9, Func<U10, T10> ArgConv10, Func<U11, T11> ArgConv11, Func<U12, T12> ArgConv12, Func<U13, T13> ArgConv13, Func<TResult, UResult> ResConv) {
    return (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13) => ResConv(F(ArgConv1(arg1), ArgConv2(arg2), ArgConv3(arg3), ArgConv4(arg4), ArgConv5(arg5), ArgConv6(arg6), ArgConv7(arg7), ArgConv8(arg8), ArgConv9(arg9), ArgConv10(arg10), ArgConv11(arg11), ArgConv12(arg12), ArgConv13(arg13)));
  }
  public static Func<U1, U2, U3, U4, U5, U6, U7, U8, UResult> DowncastClone<T1, T2, T3, T4, T5, T6, T7, T8, TResult, U1, U2, U3, U4, U5, U6, U7, U8, UResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult> F, Func<U1, T1> ArgConv1, Func<U2, T2> ArgConv2, Func<U3, T3> ArgConv3, Func<U4, T4> ArgConv4, Func<U5, T5> ArgConv5, Func<U6, T6> ArgConv6, Func<U7, T7> ArgConv7, Func<U8, T8> ArgConv8, Func<TResult, UResult> ResConv) {
    return (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8) => ResConv(F(ArgConv1(arg1), ArgConv2(arg2), ArgConv3(arg3), ArgConv4(arg4), ArgConv5(arg5), ArgConv6(arg6), ArgConv7(arg7), ArgConv8(arg8)));
  }
}
// end of class FuncExtensions
namespace MiscTypes {

  public partial class __default {
    public static bool Foobar(Func<BigInteger, BigInteger> f) {
      return true;
    }
    public static __T Last<__T>(Dafny.ISequence<__T> x) {
      return (x).Select((new BigInteger((x).Count)) - (BigInteger.One));
    }
    public static Dafny.ISequence<__T> Drop<__T>(Dafny.ISequence<__T> x, BigInteger n)
    {
      return (x).Drop(n);
    }
    public static Dafny.ISequence<__T> Init<__T>(Dafny.ISequence<__T> x) {
      return (x).Take((new BigInteger((x).Count)) - (BigInteger.One));
    }
    public static Dafny.ISequence<_System._ITuple2<__U, __V>> Zip<__U, __V>(Dafny.ISequence<__U> u, Dafny.ISequence<__V> v)
    {
      return ((System.Func<Dafny.ISequence<_System._ITuple2<__U, __V>>>) (() => {
        BigInteger dim0 = new BigInteger((u).Count);
        var arr0 = new _System._ITuple2<__U, __V>[Dafny.Helpers.ToIntChecked(dim0, "array size exceeds memory limit")];
        for (int i0 = 0; i0 < dim0; i0++) {
          var _0_i = (BigInteger) i0;
          arr0[(int)(_0_i)] = _System.Tuple2<__U, __V>.create((u).Select(_0_i), (v).Select(_0_i));
        }
        return Dafny.Sequence<_System._ITuple2<__U, __V>>.FromArray(arr0);
      }))();
    }
    public static _System._ITuple2<Dafny.ISequence<__U>, Dafny.ISequence<__V>> UnZip<__U, __V>(Dafny.ISequence<_System._ITuple2<__U, __V>> x) {
      Dafny.ISequence<__U> _0_x0 = ((System.Func<Dafny.ISequence<__U>>) (() => {
        BigInteger dim1 = new BigInteger((x).Count);
        var arr1 = new __U[Dafny.Helpers.ToIntChecked(dim1, "array size exceeds memory limit")];
        for (int i1 = 0; i1 < dim1; i1++) {
          var _1_i = (BigInteger) i1;
          arr1[(int)(_1_i)] = ((x).Select(_1_i)).dtor__0;
        }
        return Dafny.Sequence<__U>.FromArray(arr1);
      }))();
      Dafny.ISequence<__V> _2_x1 = ((System.Func<Dafny.ISequence<__V>>) (() => {
        BigInteger dim2 = new BigInteger((x).Count);
        var arr2 = new __V[Dafny.Helpers.ToIntChecked(dim2, "array size exceeds memory limit")];
        for (int i2 = 0; i2 < dim2; i2++) {
          var _3_i = (BigInteger) i2;
          arr2[(int)(_3_i)] = ((x).Select(_3_i)).dtor__1;
        }
        return Dafny.Sequence<__V>.FromArray(arr2);
      }))();
      return _System.Tuple2<Dafny.ISequence<__U>, Dafny.ISequence<__V>>.create(_0_x0, _2_x1);
    }
    public static Dafny.ISequence<__U> Filter<__U>(Dafny.ISequence<__U> u, Func<__U, bool> f)
    {
      Dafny.ISequence<__U> _0___accumulator = Dafny.Sequence<__U>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((u).Count)).Sign == 0) {
        return Dafny.Sequence<__U>.Concat(_0___accumulator, Dafny.Sequence<__U>.FromElements());
      } else if (Dafny.Helpers.Id<Func<__U, bool>>(f)((u).Select(BigInteger.Zero))) {
        _0___accumulator = Dafny.Sequence<__U>.Concat(_0___accumulator, Dafny.Sequence<__U>.FromElements((u).Select(BigInteger.Zero)));
        Dafny.ISequence<__U> _in0 = (u).Drop(BigInteger.One);
        Func<__U, bool> _in1 = f;
        u = _in0;
        f = _in1;
        goto TAIL_CALL_START;
      } else {
        Dafny.ISequence<__U> _in2 = (u).Drop(BigInteger.One);
        Func<__U, bool> _in3 = f;
        u = _in2;
        f = _in3;
        goto TAIL_CALL_START;
      }
    }
    public static bool Exists<__T>(Dafny.ISequence<__T> xs, Func<__T, bool> f)
    {
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return false;
      } else if (Dafny.Helpers.Id<Func<__T, bool>>(f)((xs).Select(BigInteger.Zero))) {
        return true;
      } else {
        Dafny.ISequence<__T> _in0 = (xs).Drop(BigInteger.One);
        Func<__T, bool> _in1 = f;
        xs = _in0;
        f = _in1;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<__T> Flatten<__T>(Dafny.ISequence<Dafny.ISequence<__T>> x) {
      Dafny.ISequence<__T> _0___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((x).Count)).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(_0___accumulator, Dafny.Sequence<__T>.FromElements());
      } else {
        _0___accumulator = Dafny.Sequence<__T>.Concat(_0___accumulator, (x).Select(BigInteger.Zero));
        Dafny.ISequence<Dafny.ISequence<__T>> _in0 = (x).Drop(BigInteger.One);
        x = _in0;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<__U> Map<__T, __U>(Dafny.ISequence<__T> t, Func<__T, __U> f)
    {
      return ((System.Func<Dafny.ISequence<__U>>) (() => {
        BigInteger dim3 = new BigInteger((t).Count);
        var arr3 = new __U[Dafny.Helpers.ToIntChecked(dim3, "array size exceeds memory limit")];
        for (int i3 = 0; i3 < dim3; i3++) {
          var _0_i = (BigInteger) i3;
          arr3[(int)(_0_i)] = Dafny.Helpers.Id<Func<__T, __U>>(f)((t).Select(_0_i));
        }
        return Dafny.Sequence<__U>.FromArray(arr3);
      }))();
    }
    public static Dafny.ISequence<__U> MapP<__T, __U>(Dafny.ISequence<__T> t, Func<__T, __U> f)
    {
      return ((System.Func<Dafny.ISequence<__U>>) (() => {
        BigInteger dim4 = new BigInteger((t).Count);
        var arr4 = new __U[Dafny.Helpers.ToIntChecked(dim4, "array size exceeds memory limit")];
        for (int i4 = 0; i4 < dim4; i4++) {
          var _0_i = (BigInteger) i4;
          arr4[(int)(_0_i)] = Dafny.Helpers.Id<Func<__T, __U>>(f)((t).Select(_0_i));
        }
        return Dafny.Sequence<__U>.FromArray(arr4);
      }))();
    }
    public static __U FoldLeft<__T, __U>(Dafny.ISequence<__T> t, __U u0, Func<__U, __T, __U> f)
    {
    TAIL_CALL_START: ;
      if ((new BigInteger((t).Count)).Sign == 0) {
        return u0;
      } else {
        Dafny.ISequence<__T> _in0 = (t).Drop(BigInteger.One);
        __U _in1 = Dafny.Helpers.Id<Func<__U, __T, __U>>(f)(u0, (t).Select(BigInteger.Zero));
        Func<__U, __T, __U> _in2 = f;
        t = _in0;
        u0 = _in1;
        f = _in2;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISet<__T> SeqToSet<__T>(Dafny.ISequence<__T> t) {
      Dafny.ISet<__T> _0___accumulator = Dafny.Set<__T>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((t).Count)).Sign == 0) {
        return Dafny.Set<__T>.Union(Dafny.Set<__T>.FromElements(), _0___accumulator);
      } else {
        _0___accumulator = Dafny.Set<__T>.Union(_0___accumulator, Dafny.Set<__T>.FromElements((t).Select(BigInteger.Zero)));
        Dafny.ISequence<__T> _in0 = (t).Drop(BigInteger.One);
        t = _in0;
        goto TAIL_CALL_START;
      }
    }
    public static MiscTypes._IOption<BigInteger> Find<__T>(Dafny.ISequence<__T> x, __T t)
    {
      return MiscTypes.__default.FindRec<__T>(x, t, BigInteger.Zero);
    }
    public static MiscTypes._IOption<BigInteger> FindRec<__T>(Dafny.ISequence<__T> x, __T t, BigInteger i)
    {
    TAIL_CALL_START: ;
      if ((new BigInteger((x).Count)).Sign == 0) {
        return MiscTypes.Option<BigInteger>.create_None();
      } else if (object.Equals((x).Select(BigInteger.Zero), t)) {
        return MiscTypes.Option<BigInteger>.create_Some(i);
      } else {
        Dafny.ISequence<__T> _in0 = (x).Drop(BigInteger.One);
        __T _in1 = t;
        BigInteger _in2 = (i) + (BigInteger.One);
        x = _in0;
        t = _in1;
        i = _in2;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.IMap<__T,Dafny.ISequence<__T>> AddKeyVal<__T>(Dafny.IMap<__T,Dafny.ISequence<__T>> m, __T key, __T val)
    {
      return Dafny.Map<__T, Dafny.ISequence<__T>>.Update(m, key, Dafny.Sequence<__T>.Concat(Dafny.Map<__T, Dafny.ISequence<__T>>.Select(m,key), Dafny.Sequence<__T>.FromElements(val)));
    }
  }

  public interface _ITry<T> {
    bool is_Success { get; }
    bool is_Failure { get; }
    T dtor_v { get; }
    Dafny.ISequence<Dafny.Rune> dtor_msg { get; }
    _ITry<__T> DowncastClone<__T>(Func<T, __T> converter0);
  }
  public abstract class Try<T> : _ITry<T> {
    public Try() {
    }
    public static MiscTypes._ITry<T> Default() {
      return create_Failure(Dafny.Sequence<Dafny.Rune>.Empty);
    }
    public static Dafny.TypeDescriptor<MiscTypes._ITry<T>> _TypeDescriptor() {
      return new Dafny.TypeDescriptor<MiscTypes._ITry<T>>(MiscTypes.Try<T>.Default());
    }
    public static _ITry<T> create_Success(T v) {
      return new Try_Success<T>(v);
    }
    public static _ITry<T> create_Failure(Dafny.ISequence<Dafny.Rune> msg) {
      return new Try_Failure<T>(msg);
    }
    public bool is_Success { get { return this is Try_Success<T>; } }
    public bool is_Failure { get { return this is Try_Failure<T>; } }
    public T dtor_v {
      get {
        var d = this;
        return ((Try_Success<T>)d)._v;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_msg {
      get {
        var d = this;
        return ((Try_Failure<T>)d)._msg;
      }
    }
    public abstract _ITry<__T> DowncastClone<__T>(Func<T, __T> converter0);
  }
  public class Try_Success<T> : Try<T> {
    public readonly T _v;
    public Try_Success(T v) : base() {
      this._v = v;
    }
    public override _ITry<__T> DowncastClone<__T>(Func<T, __T> converter0) {
      if (this is _ITry<__T> dt) { return dt; }
      return new Try_Success<__T>(converter0(_v));
    }
    public override bool Equals(object other) {
      var oth = other as MiscTypes.Try_Success<T>;
      return oth != null && object.Equals(this._v, oth._v);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._v));
      return (int) hash;
    }
    public override string ToString() {
      string s = "MiscTypes.Try.Success";
      s += "(";
      s += Dafny.Helpers.ToString(this._v);
      s += ")";
      return s;
    }
  }
  public class Try_Failure<T> : Try<T> {
    public readonly Dafny.ISequence<Dafny.Rune> _msg;
    public Try_Failure(Dafny.ISequence<Dafny.Rune> msg) : base() {
      this._msg = msg;
    }
    public override _ITry<__T> DowncastClone<__T>(Func<T, __T> converter0) {
      if (this is _ITry<__T> dt) { return dt; }
      return new Try_Failure<__T>(_msg);
    }
    public override bool Equals(object other) {
      var oth = other as MiscTypes.Try_Failure<T>;
      return oth != null && object.Equals(this._msg, oth._msg);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._msg));
      return (int) hash;
    }
    public override string ToString() {
      string s = "MiscTypes.Try.Failure";
      s += "(";
      s += this._msg.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }

  public interface _IOption<T> {
    bool is_None { get; }
    bool is_Some { get; }
    T dtor_v { get; }
    _IOption<__T> DowncastClone<__T>(Func<T, __T> converter0);
    T Extract();
  }
  public abstract class Option<T> : _IOption<T> {
    public Option() {
    }
    public static MiscTypes._IOption<T> Default() {
      return create_None();
    }
    public static Dafny.TypeDescriptor<MiscTypes._IOption<T>> _TypeDescriptor() {
      return new Dafny.TypeDescriptor<MiscTypes._IOption<T>>(MiscTypes.Option<T>.Default());
    }
    public static _IOption<T> create_None() {
      return new Option_None<T>();
    }
    public static _IOption<T> create_Some(T v) {
      return new Option_Some<T>(v);
    }
    public bool is_None { get { return this is Option_None<T>; } }
    public bool is_Some { get { return this is Option_Some<T>; } }
    public T dtor_v {
      get {
        var d = this;
        return ((Option_Some<T>)d)._v;
      }
    }
    public abstract _IOption<__T> DowncastClone<__T>(Func<T, __T> converter0);
    public T Extract() {
      return (this).dtor_v;
    }
  }
  public class Option_None<T> : Option<T> {
    public Option_None() : base() {
    }
    public override _IOption<__T> DowncastClone<__T>(Func<T, __T> converter0) {
      if (this is _IOption<__T> dt) { return dt; }
      return new Option_None<__T>();
    }
    public override bool Equals(object other) {
      var oth = other as MiscTypes.Option_None<T>;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "MiscTypes.Option.None";
      return s;
    }
  }
  public class Option_Some<T> : Option<T> {
    public readonly T _v;
    public Option_Some(T v) : base() {
      this._v = v;
    }
    public override _IOption<__T> DowncastClone<__T>(Func<T, __T> converter0) {
      if (this is _IOption<__T> dt) { return dt; }
      return new Option_Some<__T>(converter0(_v));
    }
    public override bool Equals(object other) {
      var oth = other as MiscTypes.Option_Some<T>;
      return oth != null && object.Equals(this._v, oth._v);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._v));
      return (int) hash;
    }
    public override string ToString() {
      string s = "MiscTypes.Option.Some";
      s += "(";
      s += Dafny.Helpers.ToString(this._v);
      s += ")";
      return s;
    }
  }

  public interface _IEither<T, U> {
    bool is_Left { get; }
    bool is_Right { get; }
    T dtor_l { get; }
    U dtor_r { get; }
    _IEither<__T, __U> DowncastClone<__T, __U>(Func<T, __T> converter0, Func<U, __U> converter1);
    T Left();
    U Right();
  }
  public abstract class Either<T, U> : _IEither<T, U> {
    public Either() {
    }
    public static MiscTypes._IEither<T, U> Default(T _default_T) {
      return create_Left(_default_T);
    }
    public static Dafny.TypeDescriptor<MiscTypes._IEither<T, U>> _TypeDescriptor(Dafny.TypeDescriptor<T> _td_T) {
      return new Dafny.TypeDescriptor<MiscTypes._IEither<T, U>>(MiscTypes.Either<T, U>.Default(_td_T.Default()));
    }
    public static _IEither<T, U> create_Left(T l) {
      return new Either_Left<T, U>(l);
    }
    public static _IEither<T, U> create_Right(U r) {
      return new Either_Right<T, U>(r);
    }
    public bool is_Left { get { return this is Either_Left<T, U>; } }
    public bool is_Right { get { return this is Either_Right<T, U>; } }
    public T dtor_l {
      get {
        var d = this;
        return ((Either_Left<T, U>)d)._l;
      }
    }
    public U dtor_r {
      get {
        var d = this;
        return ((Either_Right<T, U>)d)._r;
      }
    }
    public abstract _IEither<__T, __U> DowncastClone<__T, __U>(Func<T, __T> converter0, Func<U, __U> converter1);
    public T Left() {
      return (this).dtor_l;
    }
    public U Right() {
      return (this).dtor_r;
    }
  }
  public class Either_Left<T, U> : Either<T, U> {
    public readonly T _l;
    public Either_Left(T l) : base() {
      this._l = l;
    }
    public override _IEither<__T, __U> DowncastClone<__T, __U>(Func<T, __T> converter0, Func<U, __U> converter1) {
      if (this is _IEither<__T, __U> dt) { return dt; }
      return new Either_Left<__T, __U>(converter0(_l));
    }
    public override bool Equals(object other) {
      var oth = other as MiscTypes.Either_Left<T, U>;
      return oth != null && object.Equals(this._l, oth._l);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._l));
      return (int) hash;
    }
    public override string ToString() {
      string s = "MiscTypes.Either.Left";
      s += "(";
      s += Dafny.Helpers.ToString(this._l);
      s += ")";
      return s;
    }
  }
  public class Either_Right<T, U> : Either<T, U> {
    public readonly U _r;
    public Either_Right(U r) : base() {
      this._r = r;
    }
    public override _IEither<__T, __U> DowncastClone<__T, __U>(Func<T, __T> converter0, Func<U, __U> converter1) {
      if (this is _IEither<__T, __U> dt) { return dt; }
      return new Either_Right<__T, __U>(converter1(_r));
    }
    public override bool Equals(object other) {
      var oth = other as MiscTypes.Either_Right<T, U>;
      return oth != null && object.Equals(this._r, oth._r);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._r));
      return (int) hash;
    }
    public override string ToString() {
      string s = "MiscTypes.Either.Right";
      s += "(";
      s += Dafny.Helpers.ToString(this._r);
      s += ")";
      return s;
    }
  }

  public partial class WellDefined<K> {
    public static Func<K, Dafny.ISequence<K>, MiscTypes._IOption<K>> Default() {
      return ((System.Func<K, Dafny.ISequence<K>, MiscTypes._IOption<K>>)((_0_x, _1_xs) => {
    return MiscTypes.Option<K>.create_None();
  }));
    }
    public static Dafny.TypeDescriptor<Func<K, Dafny.ISequence<K>, MiscTypes._IOption<K>>> _TypeDescriptor(Dafny.TypeDescriptor<K> _td_K) {
      return new Dafny.TypeDescriptor<Func<K, Dafny.ISequence<K>, MiscTypes._IOption<K>>>(MiscTypes.WellDefined<K>.Default());
    }
  }

  public partial class WellDefined2<K> {
    public static Func<K, Dafny.ISequence<K>, MiscTypes._IOption<BigInteger>> Default() {
      return ((System.Func<K, Dafny.ISequence<K>, MiscTypes._IOption<BigInteger>>)((_2_x, _3_xs) => {
    return MiscTypes.Option<BigInteger>.create_None();
  }));
    }
    public static Dafny.TypeDescriptor<Func<K, Dafny.ISequence<K>, MiscTypes._IOption<BigInteger>>> _TypeDescriptor(Dafny.TypeDescriptor<K> _td_K) {
      return new Dafny.TypeDescriptor<Func<K, Dafny.ISequence<K>, MiscTypes._IOption<BigInteger>>>(MiscTypes.WellDefined2<K>.Default());
    }
  }

  public partial class Foo {
    private static readonly Func<BigInteger, BigInteger> Witness = ((System.Func<BigInteger, BigInteger>)((_4_x) => {
    return BigInteger.Zero;
  }));
    public static Func<BigInteger, BigInteger> Default() {
      return Witness;
    }
    private static readonly Dafny.TypeDescriptor<Func<BigInteger, BigInteger>> _TYPE = new Dafny.TypeDescriptor<Func<BigInteger, BigInteger>>(MiscTypes.Foo.Default());
    public static Dafny.TypeDescriptor<Func<BigInteger, BigInteger>> _TypeDescriptor() {
      return _TYPE;
    }
  }
} // end of namespace MiscTypes
namespace Int {

  public partial class __default {
    public static BigInteger Abs(BigInteger x) {
      if ((x).Sign != -1) {
        return x;
      } else {
        return (BigInteger.Zero) - (x);
      }
    }
    public static BigInteger Max(BigInteger i1, BigInteger i2)
    {
      if ((i1) >= (i2)) {
        return i1;
      } else {
        return i2;
      }
    }
    public static BigInteger Min(BigInteger i1, BigInteger i2)
    {
      if ((i1) < (i2)) {
        return i1;
      } else {
        return i2;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> NatToString(BigInteger n) {
      Dafny.ISequence<Dafny.Rune> _0___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START: ;
      if ((n) < (new BigInteger(10))) {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements(Int.__default.DigitToString(n)), _0___accumulator);
      } else {
        _0___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements(Int.__default.DigitToString(Dafny.Helpers.EuclideanModulus(n, new BigInteger(10)))), _0___accumulator);
        BigInteger _in0 = Dafny.Helpers.EuclideanDivision(n, new BigInteger(10));
        n = _in0;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> IntToString(BigInteger n) {
      if ((n).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0");
      } else if ((n).Sign == 1) {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("+"), Int.__default.NatToString(n));
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("-"), Int.__default.NatToString((BigInteger.Zero) - (n)));
      }
    }
    public static Dafny.Rune DigitToString(BigInteger n) {
      BigInteger _source0 = n;
      {
        if ((_source0) == (BigInteger.Zero)) {
          return new Dafny.Rune('0');
        }
      }
      {
        if ((_source0) == (BigInteger.One)) {
          return new Dafny.Rune('1');
        }
      }
      {
        if ((_source0) == (new BigInteger(2))) {
          return new Dafny.Rune('2');
        }
      }
      {
        if ((_source0) == (new BigInteger(3))) {
          return new Dafny.Rune('3');
        }
      }
      {
        if ((_source0) == (new BigInteger(4))) {
          return new Dafny.Rune('4');
        }
      }
      {
        if ((_source0) == (new BigInteger(5))) {
          return new Dafny.Rune('5');
        }
      }
      {
        if ((_source0) == (new BigInteger(6))) {
          return new Dafny.Rune('6');
        }
      }
      {
        if ((_source0) == (new BigInteger(7))) {
          return new Dafny.Rune('7');
        }
      }
      {
        if ((_source0) == (new BigInteger(8))) {
          return new Dafny.Rune('8');
        }
      }
      {
        return new Dafny.Rune('9');
      }
    }
    public static MiscTypes._IOption<BigInteger> CharToDigit(Dafny.Rune c) {
      Dafny.Rune _source0 = c;
      {
        if ((_source0) == (new Dafny.Rune('0'))) {
          return MiscTypes.Option<BigInteger>.create_Some(BigInteger.Zero);
        }
      }
      {
        if ((_source0) == (new Dafny.Rune('1'))) {
          return MiscTypes.Option<BigInteger>.create_Some(BigInteger.One);
        }
      }
      {
        if ((_source0) == (new Dafny.Rune('2'))) {
          return MiscTypes.Option<BigInteger>.create_Some(new BigInteger(2));
        }
      }
      {
        if ((_source0) == (new Dafny.Rune('3'))) {
          return MiscTypes.Option<BigInteger>.create_Some(new BigInteger(3));
        }
      }
      {
        if ((_source0) == (new Dafny.Rune('4'))) {
          return MiscTypes.Option<BigInteger>.create_Some(new BigInteger(4));
        }
      }
      {
        if ((_source0) == (new Dafny.Rune('5'))) {
          return MiscTypes.Option<BigInteger>.create_Some(new BigInteger(5));
        }
      }
      {
        if ((_source0) == (new Dafny.Rune('6'))) {
          return MiscTypes.Option<BigInteger>.create_Some(new BigInteger(6));
        }
      }
      {
        if ((_source0) == (new Dafny.Rune('7'))) {
          return MiscTypes.Option<BigInteger>.create_Some(new BigInteger(7));
        }
      }
      {
        if ((_source0) == (new Dafny.Rune('8'))) {
          return MiscTypes.Option<BigInteger>.create_Some(new BigInteger(8));
        }
      }
      {
        if ((_source0) == (new Dafny.Rune('9'))) {
          return MiscTypes.Option<BigInteger>.create_Some(new BigInteger(9));
        }
      }
      {
        return MiscTypes.Option<BigInteger>.create_None();
      }
    }
    public static bool IsNatNumber(Dafny.ISequence<Dafny.Rune> s) {
    TAIL_CALL_START: ;
      if ((new BigInteger((s).Count)) == (BigInteger.One)) {
        return (Int.__default.CharToDigit((s).Select(BigInteger.Zero))).is_Some;
      } else {
        MiscTypes._IOption<BigInteger> _source0 = Int.__default.CharToDigit((s).Select(BigInteger.Zero));
        {
          if (_source0.is_Some) {
            BigInteger _0_v = _source0.dtor_v;
            Dafny.ISequence<Dafny.Rune> _in0 = (s).Drop(BigInteger.One);
            s = _in0;
            goto TAIL_CALL_START;
          }
        }
        {
          return false;
        }
      }
    }
    public static BigInteger StringToNat(Dafny.ISequence<Dafny.Rune> s, BigInteger lastVal)
    {
      if ((new BigInteger((s).Count)) == (BigInteger.One)) {
        return (Int.__default.CharToDigit((s).Select(BigInteger.Zero))).dtor_v;
      } else {
        BigInteger _0_v = (Int.__default.CharToDigit((s).Select((new BigInteger((s).Count)) - (BigInteger.One)))).dtor_v;
        return (_0_v) + ((new BigInteger(10)) * (Int.__default.StringToNat((s).Take((new BigInteger((s).Count)) - (BigInteger.One)), BigInteger.Zero)));
      }
    }
    public static BigInteger TWO__8 { get {
      return new BigInteger(256);
    } }
    public static BigInteger MAX__U8 { get {
      return (Int.__default.TWO__8) - (BigInteger.One);
    } }
    public static BigInteger TWO__16 { get {
      return new BigInteger(65536);
    } }
    public static BigInteger MAX__U16 { get {
      return (Int.__default.TWO__16) - (BigInteger.One);
    } }
    public static BigInteger TWO__32 { get {
      return new BigInteger(4294967296L);
    } }
    public static BigInteger MAX__U32 { get {
      return (Int.__default.TWO__32) - (BigInteger.One);
    } }
    public static BigInteger TWO__64 { get {
      return BigInteger.Parse("18446744073709551616");
    } }
    public static BigInteger MAX__U64 { get {
      return (Int.__default.TWO__64) - (BigInteger.One);
    } }
    public static BigInteger TWO__128 { get {
      return BigInteger.Parse("340282366920938463463374607431768211456");
    } }
    public static BigInteger MAX__U128 { get {
      return (Int.__default.TWO__128) - (BigInteger.One);
    } }
    public static BigInteger TWO__256 { get {
      return BigInteger.Parse("115792089237316195423570985008687907853269984665640564039457584007913129639936");
    } }
    public static BigInteger MAX__U256 { get {
      return (Int.__default.TWO__256) - (BigInteger.One);
    } }
    public static BigInteger TWO__4 { get {
      return new BigInteger(16);
    } }
  }

  public partial class u8 {
    public static System.Collections.Generic.IEnumerable<byte> IntegerRange(BigInteger lo, BigInteger hi) {
      for (var j = lo; j < hi; j++) { yield return (byte)j; }
    }
    private static readonly Dafny.TypeDescriptor<byte> _TYPE = new Dafny.TypeDescriptor<byte>(0);
    public static Dafny.TypeDescriptor<byte> _TypeDescriptor() {
      return _TYPE;
    }
    public static bool _Is(byte __source) {
      return true;
    }
  }

  public partial class u16 {
    public static System.Collections.Generic.IEnumerable<ushort> IntegerRange(BigInteger lo, BigInteger hi) {
      for (var j = lo; j < hi; j++) { yield return (ushort)j; }
    }
    private static readonly Dafny.TypeDescriptor<ushort> _TYPE = new Dafny.TypeDescriptor<ushort>(0);
    public static Dafny.TypeDescriptor<ushort> _TypeDescriptor() {
      return _TYPE;
    }
    public static bool _Is(ushort __source) {
      return true;
    }
  }

  public partial class u32 {
    public static System.Collections.Generic.IEnumerable<uint> IntegerRange(BigInteger lo, BigInteger hi) {
      for (var j = lo; j < hi; j++) { yield return (uint)j; }
    }
    private static readonly Dafny.TypeDescriptor<uint> _TYPE = new Dafny.TypeDescriptor<uint>(0);
    public static Dafny.TypeDescriptor<uint> _TypeDescriptor() {
      return _TYPE;
    }
    public static bool _Is(uint __source) {
      return true;
    }
  }

  public partial class u64 {
    public static System.Collections.Generic.IEnumerable<ulong> IntegerRange(BigInteger lo, BigInteger hi) {
      for (var j = lo; j < hi; j++) { yield return (ulong)j; }
    }
    private static readonly Dafny.TypeDescriptor<ulong> _TYPE = new Dafny.TypeDescriptor<ulong>(0);
    public static Dafny.TypeDescriptor<ulong> _TypeDescriptor() {
      return _TYPE;
    }
    public static bool _Is(ulong __source) {
      return true;
    }
  }

  public partial class u128 {
    private static readonly Dafny.TypeDescriptor<BigInteger> _TYPE = new Dafny.TypeDescriptor<BigInteger>(BigInteger.Zero);
    public static Dafny.TypeDescriptor<BigInteger> _TypeDescriptor() {
      return _TYPE;
    }
    public static bool _Is(BigInteger __source) {
      BigInteger _0_i = __source;
      if (_System.nat._Is(_0_i)) {
        return ((_0_i).Sign != -1) && ((_0_i) <= (Int.__default.MAX__U128));
      }
      return false;
    }
  }

  public partial class u256 {
    private static readonly Dafny.TypeDescriptor<BigInteger> _TYPE = new Dafny.TypeDescriptor<BigInteger>(BigInteger.Zero);
    public static Dafny.TypeDescriptor<BigInteger> _TypeDescriptor() {
      return _TYPE;
    }
    public static bool _Is(BigInteger __source) {
      BigInteger _1_i = __source;
      if (_System.nat._Is(_1_i)) {
        return ((_1_i).Sign != -1) && ((_1_i) <= (Int.__default.MAX__U256));
      }
      return false;
    }
  }
} // end of namespace Int
namespace EVMConstants {

  public partial class __default {
    public static byte STOP { get {
      return (byte)(0);
    } }
    public static byte ADD { get {
      return (byte)(1);
    } }
    public static byte MUL { get {
      return (byte)(2);
    } }
    public static byte SUB { get {
      return (byte)(3);
    } }
    public static byte DIV { get {
      return (byte)(4);
    } }
    public static byte SDIV { get {
      return (byte)(5);
    } }
    public static byte MOD { get {
      return (byte)(6);
    } }
    public static byte SMOD { get {
      return (byte)(7);
    } }
    public static byte ADDMOD { get {
      return (byte)(8);
    } }
    public static byte MULMOD { get {
      return (byte)(9);
    } }
    public static byte EXP { get {
      return (byte)(10);
    } }
    public static byte SIGNEXTEND { get {
      return (byte)(11);
    } }
    public static byte LT { get {
      return (byte)(16);
    } }
    public static byte GT { get {
      return (byte)(17);
    } }
    public static byte SLT { get {
      return (byte)(18);
    } }
    public static byte SGT { get {
      return (byte)(19);
    } }
    public static byte EQ { get {
      return (byte)(20);
    } }
    public static byte ISZERO { get {
      return (byte)(21);
    } }
    public static byte AND { get {
      return (byte)(22);
    } }
    public static byte OR { get {
      return (byte)(23);
    } }
    public static byte XOR { get {
      return (byte)(24);
    } }
    public static byte NOT { get {
      return (byte)(25);
    } }
    public static byte BYTE { get {
      return (byte)(26);
    } }
    public static byte SHL { get {
      return (byte)(27);
    } }
    public static byte SHR { get {
      return (byte)(28);
    } }
    public static byte SAR { get {
      return (byte)(29);
    } }
    public static byte KECCAK256 { get {
      return (byte)(32);
    } }
    public static byte ADDRESS { get {
      return (byte)(48);
    } }
    public static byte BALANCE { get {
      return (byte)(49);
    } }
    public static byte ORIGIN { get {
      return (byte)(50);
    } }
    public static byte CALLER { get {
      return (byte)(51);
    } }
    public static byte CALLVALUE { get {
      return (byte)(52);
    } }
    public static byte CALLDATALOAD { get {
      return (byte)(53);
    } }
    public static byte CALLDATASIZE { get {
      return (byte)(54);
    } }
    public static byte CALLDATACOPY { get {
      return (byte)(55);
    } }
    public static byte CODESIZE { get {
      return (byte)(56);
    } }
    public static byte CODECOPY { get {
      return (byte)(57);
    } }
    public static byte GASPRICE { get {
      return (byte)(58);
    } }
    public static byte EXTCODESIZE { get {
      return (byte)(59);
    } }
    public static byte EXTCODECOPY { get {
      return (byte)(60);
    } }
    public static byte RETURNDATASIZE { get {
      return (byte)(61);
    } }
    public static byte RETURNDATACOPY { get {
      return (byte)(62);
    } }
    public static byte EXTCODEHASH { get {
      return (byte)(63);
    } }
    public static byte BLOCKHASH { get {
      return (byte)(64);
    } }
    public static byte COINBASE { get {
      return (byte)(65);
    } }
    public static byte TIMESTAMP { get {
      return (byte)(66);
    } }
    public static byte NUMBER { get {
      return (byte)(67);
    } }
    public static byte DIFFICULTY { get {
      return (byte)(68);
    } }
    public static byte GASLIMIT { get {
      return (byte)(69);
    } }
    public static byte CHAINID { get {
      return (byte)(70);
    } }
    public static byte SELFBALANCE { get {
      return (byte)(71);
    } }
    public static byte BASEFEE { get {
      return (byte)(72);
    } }
    public static byte POP { get {
      return (byte)(80);
    } }
    public static byte MLOAD { get {
      return (byte)(81);
    } }
    public static byte MSTORE { get {
      return (byte)(82);
    } }
    public static byte MSTORE8 { get {
      return (byte)(83);
    } }
    public static byte SLOAD { get {
      return (byte)(84);
    } }
    public static byte SSTORE { get {
      return (byte)(85);
    } }
    public static byte JUMP { get {
      return (byte)(86);
    } }
    public static byte JUMPI { get {
      return (byte)(87);
    } }
    public static byte PC { get {
      return (byte)(88);
    } }
    public static byte MSIZE { get {
      return (byte)(89);
    } }
    public static byte GAS { get {
      return (byte)(90);
    } }
    public static byte JUMPDEST { get {
      return (byte)(91);
    } }
    public static byte RJUMP { get {
      return (byte)(92);
    } }
    public static byte RJUMPI { get {
      return (byte)(93);
    } }
    public static byte RJUMPV { get {
      return (byte)(94);
    } }
    public static byte PUSH0 { get {
      return (byte)(95);
    } }
    public static byte PUSH1 { get {
      return (byte)(96);
    } }
    public static byte PUSH2 { get {
      return (byte)(97);
    } }
    public static byte PUSH3 { get {
      return (byte)(98);
    } }
    public static byte PUSH4 { get {
      return (byte)(99);
    } }
    public static byte PUSH5 { get {
      return (byte)(100);
    } }
    public static byte PUSH6 { get {
      return (byte)(101);
    } }
    public static byte PUSH7 { get {
      return (byte)(102);
    } }
    public static byte PUSH8 { get {
      return (byte)(103);
    } }
    public static byte PUSH9 { get {
      return (byte)(104);
    } }
    public static byte PUSH10 { get {
      return (byte)(105);
    } }
    public static byte PUSH11 { get {
      return (byte)(106);
    } }
    public static byte PUSH12 { get {
      return (byte)(107);
    } }
    public static byte PUSH13 { get {
      return (byte)(108);
    } }
    public static byte PUSH14 { get {
      return (byte)(109);
    } }
    public static byte PUSH15 { get {
      return (byte)(110);
    } }
    public static byte PUSH16 { get {
      return (byte)(111);
    } }
    public static byte PUSH17 { get {
      return (byte)(112);
    } }
    public static byte PUSH18 { get {
      return (byte)(113);
    } }
    public static byte PUSH19 { get {
      return (byte)(114);
    } }
    public static byte PUSH20 { get {
      return (byte)(115);
    } }
    public static byte PUSH21 { get {
      return (byte)(116);
    } }
    public static byte PUSH22 { get {
      return (byte)(117);
    } }
    public static byte PUSH23 { get {
      return (byte)(118);
    } }
    public static byte PUSH24 { get {
      return (byte)(119);
    } }
    public static byte PUSH25 { get {
      return (byte)(120);
    } }
    public static byte PUSH26 { get {
      return (byte)(121);
    } }
    public static byte PUSH27 { get {
      return (byte)(122);
    } }
    public static byte PUSH28 { get {
      return (byte)(123);
    } }
    public static byte PUSH29 { get {
      return (byte)(124);
    } }
    public static byte PUSH30 { get {
      return (byte)(125);
    } }
    public static byte PUSH31 { get {
      return (byte)(126);
    } }
    public static byte PUSH32 { get {
      return (byte)(127);
    } }
    public static byte DUP1 { get {
      return (byte)(128);
    } }
    public static byte DUP2 { get {
      return (byte)(129);
    } }
    public static byte DUP3 { get {
      return (byte)(130);
    } }
    public static byte DUP4 { get {
      return (byte)(131);
    } }
    public static byte DUP5 { get {
      return (byte)(132);
    } }
    public static byte DUP6 { get {
      return (byte)(133);
    } }
    public static byte DUP7 { get {
      return (byte)(134);
    } }
    public static byte DUP8 { get {
      return (byte)(135);
    } }
    public static byte DUP9 { get {
      return (byte)(136);
    } }
    public static byte DUP10 { get {
      return (byte)(137);
    } }
    public static byte DUP11 { get {
      return (byte)(138);
    } }
    public static byte DUP12 { get {
      return (byte)(139);
    } }
    public static byte DUP13 { get {
      return (byte)(140);
    } }
    public static byte DUP14 { get {
      return (byte)(141);
    } }
    public static byte DUP15 { get {
      return (byte)(142);
    } }
    public static byte DUP16 { get {
      return (byte)(143);
    } }
    public static byte SWAP1 { get {
      return (byte)(144);
    } }
    public static byte SWAP2 { get {
      return (byte)(145);
    } }
    public static byte SWAP3 { get {
      return (byte)(146);
    } }
    public static byte SWAP4 { get {
      return (byte)(147);
    } }
    public static byte SWAP5 { get {
      return (byte)(148);
    } }
    public static byte SWAP6 { get {
      return (byte)(149);
    } }
    public static byte SWAP7 { get {
      return (byte)(150);
    } }
    public static byte SWAP8 { get {
      return (byte)(151);
    } }
    public static byte SWAP9 { get {
      return (byte)(152);
    } }
    public static byte SWAP10 { get {
      return (byte)(153);
    } }
    public static byte SWAP11 { get {
      return (byte)(154);
    } }
    public static byte SWAP12 { get {
      return (byte)(155);
    } }
    public static byte SWAP13 { get {
      return (byte)(156);
    } }
    public static byte SWAP14 { get {
      return (byte)(157);
    } }
    public static byte SWAP15 { get {
      return (byte)(158);
    } }
    public static byte SWAP16 { get {
      return (byte)(159);
    } }
    public static byte LOG0 { get {
      return (byte)(160);
    } }
    public static byte LOG1 { get {
      return (byte)(161);
    } }
    public static byte LOG2 { get {
      return (byte)(162);
    } }
    public static byte LOG3 { get {
      return (byte)(163);
    } }
    public static byte LOG4 { get {
      return (byte)(164);
    } }
    public static byte EOF { get {
      return (byte)(239);
    } }
    public static byte CREATE { get {
      return (byte)(240);
    } }
    public static byte CALL { get {
      return (byte)(241);
    } }
    public static byte CALLCODE { get {
      return (byte)(242);
    } }
    public static byte RETURN { get {
      return (byte)(243);
    } }
    public static byte DELEGATECALL { get {
      return (byte)(244);
    } }
    public static byte CREATE2 { get {
      return (byte)(245);
    } }
    public static byte STATICCALL { get {
      return (byte)(250);
    } }
    public static byte REVERT { get {
      return (byte)(253);
    } }
    public static byte INVALID { get {
      return (byte)(254);
    } }
    public static byte SELFDESTRUCT { get {
      return (byte)(255);
    } }
  }
} // end of namespace EVMConstants
namespace EVMOpcodes {


  public partial class ValidOpcode {
    private static readonly EVMOpcodes._IOpcode Witness = EVMOpcodes.Opcode.create_SysOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("STOP"), EVMConstants.__default.STOP, BigInteger.Zero, BigInteger.Zero, BigInteger.Zero, BigInteger.Zero);
    public static EVMOpcodes._IOpcode Default() {
      return Witness;
    }
    private static readonly Dafny.TypeDescriptor<EVMOpcodes._IOpcode> _TYPE = new Dafny.TypeDescriptor<EVMOpcodes._IOpcode>(EVMOpcodes.ValidOpcode.Default());
    public static Dafny.TypeDescriptor<EVMOpcodes._IOpcode> _TypeDescriptor() {
      return _TYPE;
    }
    public static bool _Is(EVMOpcodes._IOpcode __source) {
      EVMOpcodes._IOpcode _0_x = __source;
      return (_0_x).IsValid();
    }
  }

  public interface _IOpcode {
    bool is_ArithOp { get; }
    bool is_CompOp { get; }
    bool is_BitwiseOp { get; }
    bool is_KeccakOp { get; }
    bool is_EnvOp { get; }
    bool is_MemOp { get; }
    bool is_StorageOp { get; }
    bool is_JumpOp { get; }
    bool is_RunOp { get; }
    bool is_StackOp { get; }
    bool is_LogOp { get; }
    bool is_SysOp { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    byte dtor_opcode { get; }
    BigInteger dtor_minCapacity { get; }
    BigInteger dtor_minOperands { get; }
    BigInteger dtor_pushes { get; }
    BigInteger dtor_pops { get; }
    _IOpcode DowncastClone();
    bool IsValid();
    BigInteger Args();
    bool IsTerminal();
    bool IsJump();
    bool IsJumpDest();
    bool IsRevertStop();
    bool IsReturn();
    bool IsInvalid();
    Dafny.ISequence<Dafny.Rune> Name();
    BigInteger StackEffect();
    BigInteger WeakestPreOperands(BigInteger post);
    BigInteger WeakestPreCapacity(BigInteger post);
  }
  public abstract class Opcode : _IOpcode {
    public Opcode() {
    }
    private static readonly EVMOpcodes._IOpcode theDefault = create_ArithOp(Dafny.Sequence<Dafny.Rune>.Empty, 0, BigInteger.Zero, BigInteger.Zero, BigInteger.Zero, BigInteger.Zero);
    public static EVMOpcodes._IOpcode Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<EVMOpcodes._IOpcode> _TYPE = new Dafny.TypeDescriptor<EVMOpcodes._IOpcode>(EVMOpcodes.Opcode.Default());
    public static Dafny.TypeDescriptor<EVMOpcodes._IOpcode> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IOpcode create_ArithOp(Dafny.ISequence<Dafny.Rune> name, byte opcode, BigInteger minCapacity, BigInteger minOperands, BigInteger pushes, BigInteger pops) {
      return new Opcode_ArithOp(name, opcode, minCapacity, minOperands, pushes, pops);
    }
    public static _IOpcode create_CompOp(Dafny.ISequence<Dafny.Rune> name, byte opcode, BigInteger minCapacity, BigInteger minOperands, BigInteger pushes, BigInteger pops) {
      return new Opcode_CompOp(name, opcode, minCapacity, minOperands, pushes, pops);
    }
    public static _IOpcode create_BitwiseOp(Dafny.ISequence<Dafny.Rune> name, byte opcode, BigInteger minCapacity, BigInteger minOperands, BigInteger pushes, BigInteger pops) {
      return new Opcode_BitwiseOp(name, opcode, minCapacity, minOperands, pushes, pops);
    }
    public static _IOpcode create_KeccakOp(Dafny.ISequence<Dafny.Rune> name, byte opcode, BigInteger minCapacity, BigInteger minOperands, BigInteger pushes, BigInteger pops) {
      return new Opcode_KeccakOp(name, opcode, minCapacity, minOperands, pushes, pops);
    }
    public static _IOpcode create_EnvOp(Dafny.ISequence<Dafny.Rune> name, byte opcode, BigInteger minCapacity, BigInteger minOperands, BigInteger pushes, BigInteger pops) {
      return new Opcode_EnvOp(name, opcode, minCapacity, minOperands, pushes, pops);
    }
    public static _IOpcode create_MemOp(Dafny.ISequence<Dafny.Rune> name, byte opcode, BigInteger minCapacity, BigInteger minOperands, BigInteger pushes, BigInteger pops) {
      return new Opcode_MemOp(name, opcode, minCapacity, minOperands, pushes, pops);
    }
    public static _IOpcode create_StorageOp(Dafny.ISequence<Dafny.Rune> name, byte opcode, BigInteger minCapacity, BigInteger minOperands, BigInteger pushes, BigInteger pops) {
      return new Opcode_StorageOp(name, opcode, minCapacity, minOperands, pushes, pops);
    }
    public static _IOpcode create_JumpOp(Dafny.ISequence<Dafny.Rune> name, byte opcode, BigInteger minCapacity, BigInteger minOperands, BigInteger pushes, BigInteger pops) {
      return new Opcode_JumpOp(name, opcode, minCapacity, minOperands, pushes, pops);
    }
    public static _IOpcode create_RunOp(Dafny.ISequence<Dafny.Rune> name, byte opcode, BigInteger minCapacity, BigInteger minOperands, BigInteger pushes, BigInteger pops) {
      return new Opcode_RunOp(name, opcode, minCapacity, minOperands, pushes, pops);
    }
    public static _IOpcode create_StackOp(Dafny.ISequence<Dafny.Rune> name, byte opcode, BigInteger minCapacity, BigInteger minOperands, BigInteger pushes, BigInteger pops) {
      return new Opcode_StackOp(name, opcode, minCapacity, minOperands, pushes, pops);
    }
    public static _IOpcode create_LogOp(Dafny.ISequence<Dafny.Rune> name, byte opcode, BigInteger minCapacity, BigInteger minOperands, BigInteger pushes, BigInteger pops) {
      return new Opcode_LogOp(name, opcode, minCapacity, minOperands, pushes, pops);
    }
    public static _IOpcode create_SysOp(Dafny.ISequence<Dafny.Rune> name, byte opcode, BigInteger minCapacity, BigInteger minOperands, BigInteger pushes, BigInteger pops) {
      return new Opcode_SysOp(name, opcode, minCapacity, minOperands, pushes, pops);
    }
    public bool is_ArithOp { get { return this is Opcode_ArithOp; } }
    public bool is_CompOp { get { return this is Opcode_CompOp; } }
    public bool is_BitwiseOp { get { return this is Opcode_BitwiseOp; } }
    public bool is_KeccakOp { get { return this is Opcode_KeccakOp; } }
    public bool is_EnvOp { get { return this is Opcode_EnvOp; } }
    public bool is_MemOp { get { return this is Opcode_MemOp; } }
    public bool is_StorageOp { get { return this is Opcode_StorageOp; } }
    public bool is_JumpOp { get { return this is Opcode_JumpOp; } }
    public bool is_RunOp { get { return this is Opcode_RunOp; } }
    public bool is_StackOp { get { return this is Opcode_StackOp; } }
    public bool is_LogOp { get { return this is Opcode_LogOp; } }
    public bool is_SysOp { get { return this is Opcode_SysOp; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        if (d is Opcode_ArithOp) { return ((Opcode_ArithOp)d)._name; }
        if (d is Opcode_CompOp) { return ((Opcode_CompOp)d)._name; }
        if (d is Opcode_BitwiseOp) { return ((Opcode_BitwiseOp)d)._name; }
        if (d is Opcode_KeccakOp) { return ((Opcode_KeccakOp)d)._name; }
        if (d is Opcode_EnvOp) { return ((Opcode_EnvOp)d)._name; }
        if (d is Opcode_MemOp) { return ((Opcode_MemOp)d)._name; }
        if (d is Opcode_StorageOp) { return ((Opcode_StorageOp)d)._name; }
        if (d is Opcode_JumpOp) { return ((Opcode_JumpOp)d)._name; }
        if (d is Opcode_RunOp) { return ((Opcode_RunOp)d)._name; }
        if (d is Opcode_StackOp) { return ((Opcode_StackOp)d)._name; }
        if (d is Opcode_LogOp) { return ((Opcode_LogOp)d)._name; }
        return ((Opcode_SysOp)d)._name;
      }
    }
    public byte dtor_opcode {
      get {
        var d = this;
        if (d is Opcode_ArithOp) { return ((Opcode_ArithOp)d)._opcode; }
        if (d is Opcode_CompOp) { return ((Opcode_CompOp)d)._opcode; }
        if (d is Opcode_BitwiseOp) { return ((Opcode_BitwiseOp)d)._opcode; }
        if (d is Opcode_KeccakOp) { return ((Opcode_KeccakOp)d)._opcode; }
        if (d is Opcode_EnvOp) { return ((Opcode_EnvOp)d)._opcode; }
        if (d is Opcode_MemOp) { return ((Opcode_MemOp)d)._opcode; }
        if (d is Opcode_StorageOp) { return ((Opcode_StorageOp)d)._opcode; }
        if (d is Opcode_JumpOp) { return ((Opcode_JumpOp)d)._opcode; }
        if (d is Opcode_RunOp) { return ((Opcode_RunOp)d)._opcode; }
        if (d is Opcode_StackOp) { return ((Opcode_StackOp)d)._opcode; }
        if (d is Opcode_LogOp) { return ((Opcode_LogOp)d)._opcode; }
        return ((Opcode_SysOp)d)._opcode;
      }
    }
    public BigInteger dtor_minCapacity {
      get {
        var d = this;
        if (d is Opcode_ArithOp) { return ((Opcode_ArithOp)d)._minCapacity; }
        if (d is Opcode_CompOp) { return ((Opcode_CompOp)d)._minCapacity; }
        if (d is Opcode_BitwiseOp) { return ((Opcode_BitwiseOp)d)._minCapacity; }
        if (d is Opcode_KeccakOp) { return ((Opcode_KeccakOp)d)._minCapacity; }
        if (d is Opcode_EnvOp) { return ((Opcode_EnvOp)d)._minCapacity; }
        if (d is Opcode_MemOp) { return ((Opcode_MemOp)d)._minCapacity; }
        if (d is Opcode_StorageOp) { return ((Opcode_StorageOp)d)._minCapacity; }
        if (d is Opcode_JumpOp) { return ((Opcode_JumpOp)d)._minCapacity; }
        if (d is Opcode_RunOp) { return ((Opcode_RunOp)d)._minCapacity; }
        if (d is Opcode_StackOp) { return ((Opcode_StackOp)d)._minCapacity; }
        if (d is Opcode_LogOp) { return ((Opcode_LogOp)d)._minCapacity; }
        return ((Opcode_SysOp)d)._minCapacity;
      }
    }
    public BigInteger dtor_minOperands {
      get {
        var d = this;
        if (d is Opcode_ArithOp) { return ((Opcode_ArithOp)d)._minOperands; }
        if (d is Opcode_CompOp) { return ((Opcode_CompOp)d)._minOperands; }
        if (d is Opcode_BitwiseOp) { return ((Opcode_BitwiseOp)d)._minOperands; }
        if (d is Opcode_KeccakOp) { return ((Opcode_KeccakOp)d)._minOperands; }
        if (d is Opcode_EnvOp) { return ((Opcode_EnvOp)d)._minOperands; }
        if (d is Opcode_MemOp) { return ((Opcode_MemOp)d)._minOperands; }
        if (d is Opcode_StorageOp) { return ((Opcode_StorageOp)d)._minOperands; }
        if (d is Opcode_JumpOp) { return ((Opcode_JumpOp)d)._minOperands; }
        if (d is Opcode_RunOp) { return ((Opcode_RunOp)d)._minOperands; }
        if (d is Opcode_StackOp) { return ((Opcode_StackOp)d)._minOperands; }
        if (d is Opcode_LogOp) { return ((Opcode_LogOp)d)._minOperands; }
        return ((Opcode_SysOp)d)._minOperands;
      }
    }
    public BigInteger dtor_pushes {
      get {
        var d = this;
        if (d is Opcode_ArithOp) { return ((Opcode_ArithOp)d)._pushes; }
        if (d is Opcode_CompOp) { return ((Opcode_CompOp)d)._pushes; }
        if (d is Opcode_BitwiseOp) { return ((Opcode_BitwiseOp)d)._pushes; }
        if (d is Opcode_KeccakOp) { return ((Opcode_KeccakOp)d)._pushes; }
        if (d is Opcode_EnvOp) { return ((Opcode_EnvOp)d)._pushes; }
        if (d is Opcode_MemOp) { return ((Opcode_MemOp)d)._pushes; }
        if (d is Opcode_StorageOp) { return ((Opcode_StorageOp)d)._pushes; }
        if (d is Opcode_JumpOp) { return ((Opcode_JumpOp)d)._pushes; }
        if (d is Opcode_RunOp) { return ((Opcode_RunOp)d)._pushes; }
        if (d is Opcode_StackOp) { return ((Opcode_StackOp)d)._pushes; }
        if (d is Opcode_LogOp) { return ((Opcode_LogOp)d)._pushes; }
        return ((Opcode_SysOp)d)._pushes;
      }
    }
    public BigInteger dtor_pops {
      get {
        var d = this;
        if (d is Opcode_ArithOp) { return ((Opcode_ArithOp)d)._pops; }
        if (d is Opcode_CompOp) { return ((Opcode_CompOp)d)._pops; }
        if (d is Opcode_BitwiseOp) { return ((Opcode_BitwiseOp)d)._pops; }
        if (d is Opcode_KeccakOp) { return ((Opcode_KeccakOp)d)._pops; }
        if (d is Opcode_EnvOp) { return ((Opcode_EnvOp)d)._pops; }
        if (d is Opcode_MemOp) { return ((Opcode_MemOp)d)._pops; }
        if (d is Opcode_StorageOp) { return ((Opcode_StorageOp)d)._pops; }
        if (d is Opcode_JumpOp) { return ((Opcode_JumpOp)d)._pops; }
        if (d is Opcode_RunOp) { return ((Opcode_RunOp)d)._pops; }
        if (d is Opcode_StackOp) { return ((Opcode_StackOp)d)._pops; }
        if (d is Opcode_LogOp) { return ((Opcode_LogOp)d)._pops; }
        return ((Opcode_SysOp)d)._pops;
      }
    }
    public abstract _IOpcode DowncastClone();
    public bool IsValid() {
      EVMOpcodes._IOpcode _source0 = this;
      {
        if (_source0.is_ArithOp) {
          return ((((EVMConstants.__default.ADD) <= ((this).dtor_opcode)) && (((this).dtor_opcode) <= (EVMConstants.__default.SIGNEXTEND))) && (((this).dtor_pops) == (new BigInteger(2)))) && (((this).dtor_pushes) == (BigInteger.One));
        }
      }
      {
        if (_source0.is_CompOp) {
          return (((EVMConstants.__default.LT) <= ((this).dtor_opcode)) && (((this).dtor_opcode) <= (EVMConstants.__default.ISZERO))) && (((this).dtor_pops) >= ((this).dtor_pushes));
        }
      }
      {
        if (_source0.is_BitwiseOp) {
          return (((EVMConstants.__default.AND) <= ((this).dtor_opcode)) && (((this).dtor_opcode) <= (EVMConstants.__default.SAR))) && (((this).dtor_pops) >= ((this).dtor_pushes));
        }
      }
      {
        if (_source0.is_KeccakOp) {
          return ((((this).dtor_opcode) == (EVMConstants.__default.KECCAK256)) && (((this).dtor_pops) == (new BigInteger(2)))) && (((this).dtor_pushes) == (BigInteger.One));
        }
      }
      {
        if (_source0.is_EnvOp) {
          return (((EVMConstants.__default.ADDRESS) <= ((this).dtor_opcode)) && (((this).dtor_opcode) <= (EVMConstants.__default.BASEFEE))) && (((((((this).dtor_pushes) == (BigInteger.One)) && (((this).dtor_pops).Sign == 0)) || ((((this).dtor_pushes) == (BigInteger.One)) && (((this).dtor_pops) == (BigInteger.One)))) || ((((this).dtor_pushes).Sign == 0) && (((this).dtor_pops) == (new BigInteger(3))))) || ((((this).dtor_pushes).Sign == 0) && (((this).dtor_pops) == (new BigInteger(4)))));
        }
      }
      {
        if (_source0.is_MemOp) {
          return ((((this).dtor_opcode) == (EVMConstants.__default.MLOAD)) && ((((this).dtor_pushes) == ((this).dtor_pops)) && (((this).dtor_pops) == (BigInteger.One)))) || (((((EVMConstants.__default.MSTORE) <= ((this).dtor_opcode)) && (((this).dtor_opcode) <= (EVMConstants.__default.MSTORE8))) && (((this).dtor_pushes).Sign == 0)) && (((this).dtor_pops) == (new BigInteger(2))));
        }
      }
      {
        if (_source0.is_StorageOp) {
          return (((EVMConstants.__default.SLOAD) == ((this).dtor_opcode)) && ((((this).dtor_pushes) == ((this).dtor_pops)) && (((this).dtor_pops) == (BigInteger.One)))) || (((((this).dtor_opcode) == (EVMConstants.__default.SSTORE)) && (((this).dtor_pushes).Sign == 0)) && (((this).dtor_pops) == (new BigInteger(2))));
        }
      }
      {
        if (_source0.is_JumpOp) {
          return ((((EVMConstants.__default.JUMP) <= ((this).dtor_opcode)) && (((this).dtor_opcode) <= (EVMConstants.__default.JUMPI))) || (((EVMConstants.__default.JUMPDEST) <= ((this).dtor_opcode)) && (((this).dtor_opcode) <= (EVMConstants.__default.RJUMPV)))) && (((this).dtor_pushes).Sign == 0);
        }
      }
      {
        if (_source0.is_RunOp) {
          return ((((EVMConstants.__default.PC) <= ((this).dtor_opcode)) && (((this).dtor_opcode) <= (EVMConstants.__default.GAS))) && (((this).dtor_pops).Sign == 0)) && (((this).dtor_pushes) == (BigInteger.One));
        }
      }
      {
        if (_source0.is_StackOp) {
          return ((((((this).dtor_opcode) == (EVMConstants.__default.POP)) && (((this).dtor_pushes).Sign == 0)) && (((this).dtor_pops) == (BigInteger.One))) || (((((EVMConstants.__default.PUSH0) <= ((this).dtor_opcode)) && (((this).dtor_opcode) <= (EVMConstants.__default.DUP16))) && (((this).dtor_pushes) == (BigInteger.One))) && (((this).dtor_pops).Sign == 0))) || ((((EVMConstants.__default.SWAP1) <= ((this).dtor_opcode)) && (((this).dtor_opcode) <= (EVMConstants.__default.SWAP16))) && ((((this).dtor_pushes) == ((this).dtor_pops)) && (((this).dtor_pops).Sign == 0)));
        }
      }
      {
        if (_source0.is_LogOp) {
          return ((((EVMConstants.__default.LOG0) <= ((this).dtor_opcode)) && (((this).dtor_opcode) <= (EVMConstants.__default.LOG4))) && (((this).dtor_pushes).Sign == 0)) && (((this).dtor_pops) == ((new BigInteger((byte)(((this).dtor_opcode) - (EVMConstants.__default.LOG0)))) + (new BigInteger(2))));
        }
      }
      {
        return (((((this).dtor_opcode) == (EVMConstants.__default.STOP)) || (((this).dtor_opcode) == (EVMConstants.__default.EOF))) || (((EVMConstants.__default.CREATE) <= ((this).dtor_opcode)) && (((this).dtor_opcode) <= (EVMConstants.__default.SELFDESTRUCT)))) && (((this).dtor_pushes) <= (BigInteger.One));
      }
    }
    public BigInteger Args() {
      if (((EVMConstants.__default.PUSH1) <= ((this).dtor_opcode)) && (((this).dtor_opcode) <= (EVMConstants.__default.PUSH32))) {
        return new BigInteger((byte)(((this).dtor_opcode) - (EVMConstants.__default.PUSH0)));
      } else {
        return BigInteger.Zero;
      }
    }
    public bool IsTerminal() {
      byte _source0 = (this).dtor_opcode;
      {
        if ((_source0) == ((byte)(0))) {
          return true;
        }
      }
      {
        if ((_source0) == ((byte)(86))) {
          return true;
        }
      }
      {
        if ((_source0) == ((byte)(87))) {
          return true;
        }
      }
      {
        if ((_source0) == ((byte)(92))) {
          return true;
        }
      }
      {
        if ((_source0) == ((byte)(93))) {
          return true;
        }
      }
      {
        if ((_source0) == ((byte)(94))) {
          return true;
        }
      }
      {
        if ((_source0) == ((byte)(243))) {
          return true;
        }
      }
      {
        if ((_source0) == ((byte)(253))) {
          return true;
        }
      }
      {
        if ((_source0) == ((byte)(254))) {
          return true;
        }
      }
      {
        return false;
      }
    }
    public bool IsJump() {
      byte _source0 = (this).dtor_opcode;
      {
        if ((_source0) == ((byte)(86))) {
          return true;
        }
      }
      {
        if ((_source0) == ((byte)(87))) {
          return true;
        }
      }
      {
        return false;
      }
    }
    public bool IsJumpDest() {
      return ((this).dtor_opcode) == (EVMConstants.__default.JUMPDEST);
    }
    public bool IsRevertStop() {
      return (((this).dtor_opcode) == (EVMConstants.__default.REVERT)) || (((this).dtor_opcode) == (EVMConstants.__default.STOP));
    }
    public bool IsReturn() {
      return ((this).dtor_opcode) == (EVMConstants.__default.RETURN);
    }
    public bool IsInvalid() {
      return ((this).dtor_opcode) == (EVMConstants.__default.INVALID);
    }
    public Dafny.ISequence<Dafny.Rune> Name() {
      return (this).dtor_name;
    }
    public BigInteger StackEffect() {
      return ((this).dtor_pushes) - ((this).dtor_pops);
    }
    public BigInteger WeakestPreOperands(BigInteger post) {
      return Int.__default.Max((this).dtor_minOperands, (post) - ((this).StackEffect()));
    }
    public BigInteger WeakestPreCapacity(BigInteger post) {
      return Int.__default.Max((this).dtor_minCapacity, (post) + ((this).StackEffect()));
    }
  }
  public class Opcode_ArithOp : Opcode {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly byte _opcode;
    public readonly BigInteger _minCapacity;
    public readonly BigInteger _minOperands;
    public readonly BigInteger _pushes;
    public readonly BigInteger _pops;
    public Opcode_ArithOp(Dafny.ISequence<Dafny.Rune> name, byte opcode, BigInteger minCapacity, BigInteger minOperands, BigInteger pushes, BigInteger pops) : base() {
      this._name = name;
      this._opcode = opcode;
      this._minCapacity = minCapacity;
      this._minOperands = minOperands;
      this._pushes = pushes;
      this._pops = pops;
    }
    public override _IOpcode DowncastClone() {
      if (this is _IOpcode dt) { return dt; }
      return new Opcode_ArithOp(_name, _opcode, _minCapacity, _minOperands, _pushes, _pops);
    }
    public override bool Equals(object other) {
      var oth = other as EVMOpcodes.Opcode_ArithOp;
      return oth != null && object.Equals(this._name, oth._name) && this._opcode == oth._opcode && this._minCapacity == oth._minCapacity && this._minOperands == oth._minOperands && this._pushes == oth._pushes && this._pops == oth._pops;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._opcode));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._minCapacity));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._minOperands));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._pushes));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._pops));
      return (int) hash;
    }
    public override string ToString() {
      string s = "EVMOpcodes.Opcode.ArithOp";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._opcode);
      s += ", ";
      s += Dafny.Helpers.ToString(this._minCapacity);
      s += ", ";
      s += Dafny.Helpers.ToString(this._minOperands);
      s += ", ";
      s += Dafny.Helpers.ToString(this._pushes);
      s += ", ";
      s += Dafny.Helpers.ToString(this._pops);
      s += ")";
      return s;
    }
  }
  public class Opcode_CompOp : Opcode {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly byte _opcode;
    public readonly BigInteger _minCapacity;
    public readonly BigInteger _minOperands;
    public readonly BigInteger _pushes;
    public readonly BigInteger _pops;
    public Opcode_CompOp(Dafny.ISequence<Dafny.Rune> name, byte opcode, BigInteger minCapacity, BigInteger minOperands, BigInteger pushes, BigInteger pops) : base() {
      this._name = name;
      this._opcode = opcode;
      this._minCapacity = minCapacity;
      this._minOperands = minOperands;
      this._pushes = pushes;
      this._pops = pops;
    }
    public override _IOpcode DowncastClone() {
      if (this is _IOpcode dt) { return dt; }
      return new Opcode_CompOp(_name, _opcode, _minCapacity, _minOperands, _pushes, _pops);
    }
    public override bool Equals(object other) {
      var oth = other as EVMOpcodes.Opcode_CompOp;
      return oth != null && object.Equals(this._name, oth._name) && this._opcode == oth._opcode && this._minCapacity == oth._minCapacity && this._minOperands == oth._minOperands && this._pushes == oth._pushes && this._pops == oth._pops;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._opcode));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._minCapacity));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._minOperands));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._pushes));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._pops));
      return (int) hash;
    }
    public override string ToString() {
      string s = "EVMOpcodes.Opcode.CompOp";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._opcode);
      s += ", ";
      s += Dafny.Helpers.ToString(this._minCapacity);
      s += ", ";
      s += Dafny.Helpers.ToString(this._minOperands);
      s += ", ";
      s += Dafny.Helpers.ToString(this._pushes);
      s += ", ";
      s += Dafny.Helpers.ToString(this._pops);
      s += ")";
      return s;
    }
  }
  public class Opcode_BitwiseOp : Opcode {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly byte _opcode;
    public readonly BigInteger _minCapacity;
    public readonly BigInteger _minOperands;
    public readonly BigInteger _pushes;
    public readonly BigInteger _pops;
    public Opcode_BitwiseOp(Dafny.ISequence<Dafny.Rune> name, byte opcode, BigInteger minCapacity, BigInteger minOperands, BigInteger pushes, BigInteger pops) : base() {
      this._name = name;
      this._opcode = opcode;
      this._minCapacity = minCapacity;
      this._minOperands = minOperands;
      this._pushes = pushes;
      this._pops = pops;
    }
    public override _IOpcode DowncastClone() {
      if (this is _IOpcode dt) { return dt; }
      return new Opcode_BitwiseOp(_name, _opcode, _minCapacity, _minOperands, _pushes, _pops);
    }
    public override bool Equals(object other) {
      var oth = other as EVMOpcodes.Opcode_BitwiseOp;
      return oth != null && object.Equals(this._name, oth._name) && this._opcode == oth._opcode && this._minCapacity == oth._minCapacity && this._minOperands == oth._minOperands && this._pushes == oth._pushes && this._pops == oth._pops;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._opcode));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._minCapacity));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._minOperands));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._pushes));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._pops));
      return (int) hash;
    }
    public override string ToString() {
      string s = "EVMOpcodes.Opcode.BitwiseOp";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._opcode);
      s += ", ";
      s += Dafny.Helpers.ToString(this._minCapacity);
      s += ", ";
      s += Dafny.Helpers.ToString(this._minOperands);
      s += ", ";
      s += Dafny.Helpers.ToString(this._pushes);
      s += ", ";
      s += Dafny.Helpers.ToString(this._pops);
      s += ")";
      return s;
    }
  }
  public class Opcode_KeccakOp : Opcode {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly byte _opcode;
    public readonly BigInteger _minCapacity;
    public readonly BigInteger _minOperands;
    public readonly BigInteger _pushes;
    public readonly BigInteger _pops;
    public Opcode_KeccakOp(Dafny.ISequence<Dafny.Rune> name, byte opcode, BigInteger minCapacity, BigInteger minOperands, BigInteger pushes, BigInteger pops) : base() {
      this._name = name;
      this._opcode = opcode;
      this._minCapacity = minCapacity;
      this._minOperands = minOperands;
      this._pushes = pushes;
      this._pops = pops;
    }
    public override _IOpcode DowncastClone() {
      if (this is _IOpcode dt) { return dt; }
      return new Opcode_KeccakOp(_name, _opcode, _minCapacity, _minOperands, _pushes, _pops);
    }
    public override bool Equals(object other) {
      var oth = other as EVMOpcodes.Opcode_KeccakOp;
      return oth != null && object.Equals(this._name, oth._name) && this._opcode == oth._opcode && this._minCapacity == oth._minCapacity && this._minOperands == oth._minOperands && this._pushes == oth._pushes && this._pops == oth._pops;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._opcode));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._minCapacity));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._minOperands));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._pushes));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._pops));
      return (int) hash;
    }
    public override string ToString() {
      string s = "EVMOpcodes.Opcode.KeccakOp";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._opcode);
      s += ", ";
      s += Dafny.Helpers.ToString(this._minCapacity);
      s += ", ";
      s += Dafny.Helpers.ToString(this._minOperands);
      s += ", ";
      s += Dafny.Helpers.ToString(this._pushes);
      s += ", ";
      s += Dafny.Helpers.ToString(this._pops);
      s += ")";
      return s;
    }
  }
  public class Opcode_EnvOp : Opcode {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly byte _opcode;
    public readonly BigInteger _minCapacity;
    public readonly BigInteger _minOperands;
    public readonly BigInteger _pushes;
    public readonly BigInteger _pops;
    public Opcode_EnvOp(Dafny.ISequence<Dafny.Rune> name, byte opcode, BigInteger minCapacity, BigInteger minOperands, BigInteger pushes, BigInteger pops) : base() {
      this._name = name;
      this._opcode = opcode;
      this._minCapacity = minCapacity;
      this._minOperands = minOperands;
      this._pushes = pushes;
      this._pops = pops;
    }
    public override _IOpcode DowncastClone() {
      if (this is _IOpcode dt) { return dt; }
      return new Opcode_EnvOp(_name, _opcode, _minCapacity, _minOperands, _pushes, _pops);
    }
    public override bool Equals(object other) {
      var oth = other as EVMOpcodes.Opcode_EnvOp;
      return oth != null && object.Equals(this._name, oth._name) && this._opcode == oth._opcode && this._minCapacity == oth._minCapacity && this._minOperands == oth._minOperands && this._pushes == oth._pushes && this._pops == oth._pops;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._opcode));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._minCapacity));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._minOperands));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._pushes));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._pops));
      return (int) hash;
    }
    public override string ToString() {
      string s = "EVMOpcodes.Opcode.EnvOp";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._opcode);
      s += ", ";
      s += Dafny.Helpers.ToString(this._minCapacity);
      s += ", ";
      s += Dafny.Helpers.ToString(this._minOperands);
      s += ", ";
      s += Dafny.Helpers.ToString(this._pushes);
      s += ", ";
      s += Dafny.Helpers.ToString(this._pops);
      s += ")";
      return s;
    }
  }
  public class Opcode_MemOp : Opcode {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly byte _opcode;
    public readonly BigInteger _minCapacity;
    public readonly BigInteger _minOperands;
    public readonly BigInteger _pushes;
    public readonly BigInteger _pops;
    public Opcode_MemOp(Dafny.ISequence<Dafny.Rune> name, byte opcode, BigInteger minCapacity, BigInteger minOperands, BigInteger pushes, BigInteger pops) : base() {
      this._name = name;
      this._opcode = opcode;
      this._minCapacity = minCapacity;
      this._minOperands = minOperands;
      this._pushes = pushes;
      this._pops = pops;
    }
    public override _IOpcode DowncastClone() {
      if (this is _IOpcode dt) { return dt; }
      return new Opcode_MemOp(_name, _opcode, _minCapacity, _minOperands, _pushes, _pops);
    }
    public override bool Equals(object other) {
      var oth = other as EVMOpcodes.Opcode_MemOp;
      return oth != null && object.Equals(this._name, oth._name) && this._opcode == oth._opcode && this._minCapacity == oth._minCapacity && this._minOperands == oth._minOperands && this._pushes == oth._pushes && this._pops == oth._pops;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._opcode));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._minCapacity));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._minOperands));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._pushes));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._pops));
      return (int) hash;
    }
    public override string ToString() {
      string s = "EVMOpcodes.Opcode.MemOp";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._opcode);
      s += ", ";
      s += Dafny.Helpers.ToString(this._minCapacity);
      s += ", ";
      s += Dafny.Helpers.ToString(this._minOperands);
      s += ", ";
      s += Dafny.Helpers.ToString(this._pushes);
      s += ", ";
      s += Dafny.Helpers.ToString(this._pops);
      s += ")";
      return s;
    }
  }
  public class Opcode_StorageOp : Opcode {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly byte _opcode;
    public readonly BigInteger _minCapacity;
    public readonly BigInteger _minOperands;
    public readonly BigInteger _pushes;
    public readonly BigInteger _pops;
    public Opcode_StorageOp(Dafny.ISequence<Dafny.Rune> name, byte opcode, BigInteger minCapacity, BigInteger minOperands, BigInteger pushes, BigInteger pops) : base() {
      this._name = name;
      this._opcode = opcode;
      this._minCapacity = minCapacity;
      this._minOperands = minOperands;
      this._pushes = pushes;
      this._pops = pops;
    }
    public override _IOpcode DowncastClone() {
      if (this is _IOpcode dt) { return dt; }
      return new Opcode_StorageOp(_name, _opcode, _minCapacity, _minOperands, _pushes, _pops);
    }
    public override bool Equals(object other) {
      var oth = other as EVMOpcodes.Opcode_StorageOp;
      return oth != null && object.Equals(this._name, oth._name) && this._opcode == oth._opcode && this._minCapacity == oth._minCapacity && this._minOperands == oth._minOperands && this._pushes == oth._pushes && this._pops == oth._pops;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._opcode));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._minCapacity));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._minOperands));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._pushes));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._pops));
      return (int) hash;
    }
    public override string ToString() {
      string s = "EVMOpcodes.Opcode.StorageOp";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._opcode);
      s += ", ";
      s += Dafny.Helpers.ToString(this._minCapacity);
      s += ", ";
      s += Dafny.Helpers.ToString(this._minOperands);
      s += ", ";
      s += Dafny.Helpers.ToString(this._pushes);
      s += ", ";
      s += Dafny.Helpers.ToString(this._pops);
      s += ")";
      return s;
    }
  }
  public class Opcode_JumpOp : Opcode {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly byte _opcode;
    public readonly BigInteger _minCapacity;
    public readonly BigInteger _minOperands;
    public readonly BigInteger _pushes;
    public readonly BigInteger _pops;
    public Opcode_JumpOp(Dafny.ISequence<Dafny.Rune> name, byte opcode, BigInteger minCapacity, BigInteger minOperands, BigInteger pushes, BigInteger pops) : base() {
      this._name = name;
      this._opcode = opcode;
      this._minCapacity = minCapacity;
      this._minOperands = minOperands;
      this._pushes = pushes;
      this._pops = pops;
    }
    public override _IOpcode DowncastClone() {
      if (this is _IOpcode dt) { return dt; }
      return new Opcode_JumpOp(_name, _opcode, _minCapacity, _minOperands, _pushes, _pops);
    }
    public override bool Equals(object other) {
      var oth = other as EVMOpcodes.Opcode_JumpOp;
      return oth != null && object.Equals(this._name, oth._name) && this._opcode == oth._opcode && this._minCapacity == oth._minCapacity && this._minOperands == oth._minOperands && this._pushes == oth._pushes && this._pops == oth._pops;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._opcode));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._minCapacity));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._minOperands));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._pushes));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._pops));
      return (int) hash;
    }
    public override string ToString() {
      string s = "EVMOpcodes.Opcode.JumpOp";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._opcode);
      s += ", ";
      s += Dafny.Helpers.ToString(this._minCapacity);
      s += ", ";
      s += Dafny.Helpers.ToString(this._minOperands);
      s += ", ";
      s += Dafny.Helpers.ToString(this._pushes);
      s += ", ";
      s += Dafny.Helpers.ToString(this._pops);
      s += ")";
      return s;
    }
  }
  public class Opcode_RunOp : Opcode {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly byte _opcode;
    public readonly BigInteger _minCapacity;
    public readonly BigInteger _minOperands;
    public readonly BigInteger _pushes;
    public readonly BigInteger _pops;
    public Opcode_RunOp(Dafny.ISequence<Dafny.Rune> name, byte opcode, BigInteger minCapacity, BigInteger minOperands, BigInteger pushes, BigInteger pops) : base() {
      this._name = name;
      this._opcode = opcode;
      this._minCapacity = minCapacity;
      this._minOperands = minOperands;
      this._pushes = pushes;
      this._pops = pops;
    }
    public override _IOpcode DowncastClone() {
      if (this is _IOpcode dt) { return dt; }
      return new Opcode_RunOp(_name, _opcode, _minCapacity, _minOperands, _pushes, _pops);
    }
    public override bool Equals(object other) {
      var oth = other as EVMOpcodes.Opcode_RunOp;
      return oth != null && object.Equals(this._name, oth._name) && this._opcode == oth._opcode && this._minCapacity == oth._minCapacity && this._minOperands == oth._minOperands && this._pushes == oth._pushes && this._pops == oth._pops;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._opcode));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._minCapacity));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._minOperands));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._pushes));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._pops));
      return (int) hash;
    }
    public override string ToString() {
      string s = "EVMOpcodes.Opcode.RunOp";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._opcode);
      s += ", ";
      s += Dafny.Helpers.ToString(this._minCapacity);
      s += ", ";
      s += Dafny.Helpers.ToString(this._minOperands);
      s += ", ";
      s += Dafny.Helpers.ToString(this._pushes);
      s += ", ";
      s += Dafny.Helpers.ToString(this._pops);
      s += ")";
      return s;
    }
  }
  public class Opcode_StackOp : Opcode {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly byte _opcode;
    public readonly BigInteger _minCapacity;
    public readonly BigInteger _minOperands;
    public readonly BigInteger _pushes;
    public readonly BigInteger _pops;
    public Opcode_StackOp(Dafny.ISequence<Dafny.Rune> name, byte opcode, BigInteger minCapacity, BigInteger minOperands, BigInteger pushes, BigInteger pops) : base() {
      this._name = name;
      this._opcode = opcode;
      this._minCapacity = minCapacity;
      this._minOperands = minOperands;
      this._pushes = pushes;
      this._pops = pops;
    }
    public override _IOpcode DowncastClone() {
      if (this is _IOpcode dt) { return dt; }
      return new Opcode_StackOp(_name, _opcode, _minCapacity, _minOperands, _pushes, _pops);
    }
    public override bool Equals(object other) {
      var oth = other as EVMOpcodes.Opcode_StackOp;
      return oth != null && object.Equals(this._name, oth._name) && this._opcode == oth._opcode && this._minCapacity == oth._minCapacity && this._minOperands == oth._minOperands && this._pushes == oth._pushes && this._pops == oth._pops;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._opcode));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._minCapacity));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._minOperands));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._pushes));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._pops));
      return (int) hash;
    }
    public override string ToString() {
      string s = "EVMOpcodes.Opcode.StackOp";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._opcode);
      s += ", ";
      s += Dafny.Helpers.ToString(this._minCapacity);
      s += ", ";
      s += Dafny.Helpers.ToString(this._minOperands);
      s += ", ";
      s += Dafny.Helpers.ToString(this._pushes);
      s += ", ";
      s += Dafny.Helpers.ToString(this._pops);
      s += ")";
      return s;
    }
  }
  public class Opcode_LogOp : Opcode {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly byte _opcode;
    public readonly BigInteger _minCapacity;
    public readonly BigInteger _minOperands;
    public readonly BigInteger _pushes;
    public readonly BigInteger _pops;
    public Opcode_LogOp(Dafny.ISequence<Dafny.Rune> name, byte opcode, BigInteger minCapacity, BigInteger minOperands, BigInteger pushes, BigInteger pops) : base() {
      this._name = name;
      this._opcode = opcode;
      this._minCapacity = minCapacity;
      this._minOperands = minOperands;
      this._pushes = pushes;
      this._pops = pops;
    }
    public override _IOpcode DowncastClone() {
      if (this is _IOpcode dt) { return dt; }
      return new Opcode_LogOp(_name, _opcode, _minCapacity, _minOperands, _pushes, _pops);
    }
    public override bool Equals(object other) {
      var oth = other as EVMOpcodes.Opcode_LogOp;
      return oth != null && object.Equals(this._name, oth._name) && this._opcode == oth._opcode && this._minCapacity == oth._minCapacity && this._minOperands == oth._minOperands && this._pushes == oth._pushes && this._pops == oth._pops;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._opcode));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._minCapacity));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._minOperands));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._pushes));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._pops));
      return (int) hash;
    }
    public override string ToString() {
      string s = "EVMOpcodes.Opcode.LogOp";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._opcode);
      s += ", ";
      s += Dafny.Helpers.ToString(this._minCapacity);
      s += ", ";
      s += Dafny.Helpers.ToString(this._minOperands);
      s += ", ";
      s += Dafny.Helpers.ToString(this._pushes);
      s += ", ";
      s += Dafny.Helpers.ToString(this._pops);
      s += ")";
      return s;
    }
  }
  public class Opcode_SysOp : Opcode {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly byte _opcode;
    public readonly BigInteger _minCapacity;
    public readonly BigInteger _minOperands;
    public readonly BigInteger _pushes;
    public readonly BigInteger _pops;
    public Opcode_SysOp(Dafny.ISequence<Dafny.Rune> name, byte opcode, BigInteger minCapacity, BigInteger minOperands, BigInteger pushes, BigInteger pops) : base() {
      this._name = name;
      this._opcode = opcode;
      this._minCapacity = minCapacity;
      this._minOperands = minOperands;
      this._pushes = pushes;
      this._pops = pops;
    }
    public override _IOpcode DowncastClone() {
      if (this is _IOpcode dt) { return dt; }
      return new Opcode_SysOp(_name, _opcode, _minCapacity, _minOperands, _pushes, _pops);
    }
    public override bool Equals(object other) {
      var oth = other as EVMOpcodes.Opcode_SysOp;
      return oth != null && object.Equals(this._name, oth._name) && this._opcode == oth._opcode && this._minCapacity == oth._minCapacity && this._minOperands == oth._minOperands && this._pushes == oth._pushes && this._pops == oth._pops;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._opcode));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._minCapacity));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._minOperands));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._pushes));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._pops));
      return (int) hash;
    }
    public override string ToString() {
      string s = "EVMOpcodes.Opcode.SysOp";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._opcode);
      s += ", ";
      s += Dafny.Helpers.ToString(this._minCapacity);
      s += ", ";
      s += Dafny.Helpers.ToString(this._minOperands);
      s += ", ";
      s += Dafny.Helpers.ToString(this._pushes);
      s += ", ";
      s += Dafny.Helpers.ToString(this._pops);
      s += ")";
      return s;
    }
  }
} // end of namespace EVMOpcodes
namespace OpcodeDecoder {

  public partial class __default {
    public static EVMOpcodes._IOpcode Decode(byte op) {
      byte _source0 = op;
      {
        if ((_source0) == ((byte)(0))) {
          return EVMOpcodes.Opcode.create_SysOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("STOP"), EVMConstants.__default.STOP, BigInteger.Zero, BigInteger.Zero, BigInteger.Zero, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(1))) {
          return EVMOpcodes.Opcode.create_ArithOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("ADD"), EVMConstants.__default.ADD, BigInteger.Zero, new BigInteger(2), BigInteger.One, new BigInteger(2));
        }
      }
      {
        if ((_source0) == ((byte)(2))) {
          return EVMOpcodes.Opcode.create_ArithOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("MUL"), EVMConstants.__default.MUL, BigInteger.Zero, new BigInteger(2), BigInteger.One, new BigInteger(2));
        }
      }
      {
        if ((_source0) == ((byte)(3))) {
          return EVMOpcodes.Opcode.create_ArithOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("SUB"), EVMConstants.__default.SUB, BigInteger.Zero, new BigInteger(2), BigInteger.One, new BigInteger(2));
        }
      }
      {
        if ((_source0) == ((byte)(4))) {
          return EVMOpcodes.Opcode.create_ArithOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DIV"), EVMConstants.__default.DIV, BigInteger.Zero, new BigInteger(2), BigInteger.One, new BigInteger(2));
        }
      }
      {
        if ((_source0) == ((byte)(5))) {
          return EVMOpcodes.Opcode.create_ArithOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("SDIV"), EVMConstants.__default.SDIV, BigInteger.Zero, new BigInteger(2), BigInteger.One, new BigInteger(2));
        }
      }
      {
        if ((_source0) == ((byte)(6))) {
          return EVMOpcodes.Opcode.create_ArithOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("MOD"), EVMConstants.__default.MOD, BigInteger.Zero, new BigInteger(2), BigInteger.One, new BigInteger(2));
        }
      }
      {
        if ((_source0) == ((byte)(7))) {
          return EVMOpcodes.Opcode.create_ArithOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("SMOD"), EVMConstants.__default.SMOD, BigInteger.Zero, new BigInteger(2), BigInteger.One, new BigInteger(2));
        }
      }
      {
        if ((_source0) == ((byte)(8))) {
          return EVMOpcodes.Opcode.create_ArithOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("ADDMOD"), EVMConstants.__default.ADDMOD, BigInteger.Zero, new BigInteger(2), BigInteger.One, new BigInteger(2));
        }
      }
      {
        if ((_source0) == ((byte)(9))) {
          return EVMOpcodes.Opcode.create_ArithOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("MULMOD"), EVMConstants.__default.MULMOD, BigInteger.Zero, new BigInteger(2), BigInteger.One, new BigInteger(2));
        }
      }
      {
        if ((_source0) == ((byte)(10))) {
          return EVMOpcodes.Opcode.create_ArithOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("EXP"), EVMConstants.__default.EXP, BigInteger.Zero, new BigInteger(2), BigInteger.One, new BigInteger(2));
        }
      }
      {
        if ((_source0) == ((byte)(11))) {
          return EVMOpcodes.Opcode.create_ArithOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("SIGNEXTEND"), EVMConstants.__default.SIGNEXTEND, BigInteger.Zero, new BigInteger(2), BigInteger.One, new BigInteger(2));
        }
      }
      {
        if ((_source0) == ((byte)(16))) {
          return EVMOpcodes.Opcode.create_CompOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("LT"), EVMConstants.__default.LT, BigInteger.Zero, new BigInteger(2), BigInteger.One, new BigInteger(2));
        }
      }
      {
        if ((_source0) == ((byte)(17))) {
          return EVMOpcodes.Opcode.create_CompOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("GT"), EVMConstants.__default.GT, BigInteger.Zero, new BigInteger(2), BigInteger.One, new BigInteger(2));
        }
      }
      {
        if ((_source0) == ((byte)(18))) {
          return EVMOpcodes.Opcode.create_CompOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("SLT"), EVMConstants.__default.SLT, BigInteger.Zero, new BigInteger(2), BigInteger.One, new BigInteger(2));
        }
      }
      {
        if ((_source0) == ((byte)(19))) {
          return EVMOpcodes.Opcode.create_CompOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("SGT"), EVMConstants.__default.SGT, BigInteger.Zero, new BigInteger(2), BigInteger.One, new BigInteger(2));
        }
      }
      {
        if ((_source0) == ((byte)(20))) {
          return EVMOpcodes.Opcode.create_CompOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("EQ"), EVMConstants.__default.EQ, BigInteger.Zero, new BigInteger(2), BigInteger.One, new BigInteger(2));
        }
      }
      {
        if ((_source0) == ((byte)(21))) {
          return EVMOpcodes.Opcode.create_CompOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("ISZERO"), EVMConstants.__default.ISZERO, BigInteger.Zero, BigInteger.One, BigInteger.One, BigInteger.One);
        }
      }
      {
        if ((_source0) == ((byte)(22))) {
          return EVMOpcodes.Opcode.create_BitwiseOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("AND"), EVMConstants.__default.AND, BigInteger.Zero, new BigInteger(2), BigInteger.One, new BigInteger(2));
        }
      }
      {
        if ((_source0) == ((byte)(23))) {
          return EVMOpcodes.Opcode.create_BitwiseOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("OR"), EVMConstants.__default.OR, BigInteger.Zero, new BigInteger(2), BigInteger.One, new BigInteger(2));
        }
      }
      {
        if ((_source0) == ((byte)(24))) {
          return EVMOpcodes.Opcode.create_BitwiseOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("XOR"), EVMConstants.__default.XOR, BigInteger.Zero, new BigInteger(2), BigInteger.One, new BigInteger(2));
        }
      }
      {
        if ((_source0) == ((byte)(25))) {
          return EVMOpcodes.Opcode.create_BitwiseOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NOT"), EVMConstants.__default.NOT, BigInteger.Zero, BigInteger.One, BigInteger.One, BigInteger.One);
        }
      }
      {
        if ((_source0) == ((byte)(26))) {
          return EVMOpcodes.Opcode.create_BitwiseOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("BYTE"), EVMConstants.__default.BYTE, BigInteger.Zero, new BigInteger(2), BigInteger.One, new BigInteger(2));
        }
      }
      {
        if ((_source0) == ((byte)(27))) {
          return EVMOpcodes.Opcode.create_BitwiseOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("SHL"), EVMConstants.__default.SHL, BigInteger.Zero, new BigInteger(2), BigInteger.One, new BigInteger(2));
        }
      }
      {
        if ((_source0) == ((byte)(28))) {
          return EVMOpcodes.Opcode.create_BitwiseOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("SHR"), EVMConstants.__default.SHR, BigInteger.Zero, new BigInteger(2), BigInteger.One, new BigInteger(2));
        }
      }
      {
        if ((_source0) == ((byte)(29))) {
          return EVMOpcodes.Opcode.create_BitwiseOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("SAR"), EVMConstants.__default.SAR, BigInteger.Zero, new BigInteger(2), BigInteger.One, new BigInteger(2));
        }
      }
      {
        if ((_source0) == ((byte)(32))) {
          return EVMOpcodes.Opcode.create_KeccakOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("KECCAK256"), EVMConstants.__default.KECCAK256, BigInteger.Zero, new BigInteger(2), BigInteger.One, new BigInteger(2));
        }
      }
      {
        if ((_source0) == ((byte)(48))) {
          return EVMOpcodes.Opcode.create_EnvOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("ADDRESS"), EVMConstants.__default.ADDRESS, BigInteger.One, BigInteger.Zero, BigInteger.One, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(49))) {
          return EVMOpcodes.Opcode.create_EnvOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("BALANCE"), EVMConstants.__default.BALANCE, BigInteger.Zero, BigInteger.One, BigInteger.One, BigInteger.One);
        }
      }
      {
        if ((_source0) == ((byte)(50))) {
          return EVMOpcodes.Opcode.create_EnvOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("ORIGIN"), EVMConstants.__default.ORIGIN, BigInteger.One, BigInteger.Zero, BigInteger.One, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(51))) {
          return EVMOpcodes.Opcode.create_EnvOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("CALLER"), EVMConstants.__default.CALLER, BigInteger.One, BigInteger.Zero, BigInteger.One, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(52))) {
          return EVMOpcodes.Opcode.create_EnvOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("CALLVALUE"), EVMConstants.__default.CALLVALUE, BigInteger.One, BigInteger.Zero, BigInteger.One, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(53))) {
          return EVMOpcodes.Opcode.create_EnvOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("CALLDATALOAD"), EVMConstants.__default.CALLDATALOAD, BigInteger.Zero, BigInteger.One, BigInteger.One, BigInteger.One);
        }
      }
      {
        if ((_source0) == ((byte)(54))) {
          return EVMOpcodes.Opcode.create_EnvOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("CALLDATASIZE"), EVMConstants.__default.CALLDATASIZE, BigInteger.One, BigInteger.Zero, BigInteger.One, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(55))) {
          return EVMOpcodes.Opcode.create_EnvOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("CALLDATACOPY"), EVMConstants.__default.CALLDATACOPY, BigInteger.Zero, new BigInteger(3), BigInteger.Zero, new BigInteger(3));
        }
      }
      {
        if ((_source0) == ((byte)(56))) {
          return EVMOpcodes.Opcode.create_EnvOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("CODESIZE"), EVMConstants.__default.CODESIZE, BigInteger.One, BigInteger.Zero, BigInteger.One, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(57))) {
          return EVMOpcodes.Opcode.create_EnvOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("CODECOPY"), EVMConstants.__default.CODECOPY, BigInteger.Zero, new BigInteger(3), BigInteger.Zero, new BigInteger(3));
        }
      }
      {
        if ((_source0) == ((byte)(58))) {
          return EVMOpcodes.Opcode.create_EnvOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("GASPRICE"), EVMConstants.__default.GASPRICE, BigInteger.One, BigInteger.Zero, BigInteger.One, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(59))) {
          return EVMOpcodes.Opcode.create_EnvOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("EXTCODESIZE"), EVMConstants.__default.EXTCODESIZE, BigInteger.Zero, BigInteger.One, BigInteger.One, BigInteger.One);
        }
      }
      {
        if ((_source0) == ((byte)(60))) {
          return EVMOpcodes.Opcode.create_EnvOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("EXTCODECOPY"), EVMConstants.__default.EXTCODECOPY, BigInteger.Zero, new BigInteger(4), BigInteger.Zero, new BigInteger(4));
        }
      }
      {
        if ((_source0) == ((byte)(61))) {
          return EVMOpcodes.Opcode.create_EnvOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("RETURNDATASIZE"), EVMConstants.__default.RETURNDATASIZE, BigInteger.One, BigInteger.Zero, BigInteger.One, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(62))) {
          return EVMOpcodes.Opcode.create_EnvOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("RETURNDATACOPY"), EVMConstants.__default.RETURNDATACOPY, BigInteger.Zero, new BigInteger(3), BigInteger.Zero, new BigInteger(3));
        }
      }
      {
        if ((_source0) == ((byte)(63))) {
          return EVMOpcodes.Opcode.create_EnvOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("EXTCODEHASH"), EVMConstants.__default.EXTCODEHASH, BigInteger.Zero, BigInteger.One, BigInteger.One, BigInteger.One);
        }
      }
      {
        if ((_source0) == ((byte)(64))) {
          return EVMOpcodes.Opcode.create_EnvOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("BLOCKHASH"), EVMConstants.__default.BLOCKHASH, BigInteger.Zero, BigInteger.One, BigInteger.One, BigInteger.One);
        }
      }
      {
        if ((_source0) == ((byte)(65))) {
          return EVMOpcodes.Opcode.create_EnvOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("COINBASE"), EVMConstants.__default.COINBASE, BigInteger.One, BigInteger.Zero, BigInteger.One, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(66))) {
          return EVMOpcodes.Opcode.create_EnvOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("TIMESTAMP"), EVMConstants.__default.TIMESTAMP, BigInteger.One, BigInteger.Zero, BigInteger.One, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(67))) {
          return EVMOpcodes.Opcode.create_EnvOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NUMBER"), EVMConstants.__default.NUMBER, BigInteger.One, BigInteger.Zero, BigInteger.One, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(68))) {
          return EVMOpcodes.Opcode.create_EnvOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DIFFICULTY"), EVMConstants.__default.DIFFICULTY, BigInteger.One, BigInteger.Zero, BigInteger.One, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(69))) {
          return EVMOpcodes.Opcode.create_EnvOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("GASLIMIT"), EVMConstants.__default.GASLIMIT, BigInteger.One, BigInteger.Zero, BigInteger.One, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(70))) {
          return EVMOpcodes.Opcode.create_EnvOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("CHAINID"), EVMConstants.__default.CHAINID, BigInteger.One, BigInteger.Zero, BigInteger.One, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(71))) {
          return EVMOpcodes.Opcode.create_EnvOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("SELFBALANCE"), EVMConstants.__default.SELFBALANCE, BigInteger.One, BigInteger.Zero, BigInteger.One, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(72))) {
          return EVMOpcodes.Opcode.create_EnvOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("BASEFEE"), EVMConstants.__default.BASEFEE, BigInteger.One, BigInteger.Zero, BigInteger.One, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(80))) {
          return EVMOpcodes.Opcode.create_StackOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("POP"), EVMConstants.__default.POP, BigInteger.Zero, BigInteger.One, BigInteger.Zero, BigInteger.One);
        }
      }
      {
        if ((_source0) == ((byte)(81))) {
          return EVMOpcodes.Opcode.create_MemOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("MLOAD"), EVMConstants.__default.MLOAD, BigInteger.Zero, BigInteger.One, BigInteger.One, BigInteger.One);
        }
      }
      {
        if ((_source0) == ((byte)(82))) {
          return EVMOpcodes.Opcode.create_MemOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("MSTORE"), EVMConstants.__default.MSTORE, BigInteger.Zero, new BigInteger(2), BigInteger.Zero, new BigInteger(2));
        }
      }
      {
        if ((_source0) == ((byte)(83))) {
          return EVMOpcodes.Opcode.create_MemOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("MSTORE8"), EVMConstants.__default.MSTORE8, BigInteger.Zero, new BigInteger(2), BigInteger.Zero, new BigInteger(2));
        }
      }
      {
        if ((_source0) == ((byte)(84))) {
          return EVMOpcodes.Opcode.create_StorageOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("SLOAD"), EVMConstants.__default.SLOAD, BigInteger.Zero, BigInteger.One, BigInteger.One, BigInteger.One);
        }
      }
      {
        if ((_source0) == ((byte)(85))) {
          return EVMOpcodes.Opcode.create_StorageOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("SSTORE"), EVMConstants.__default.SSTORE, BigInteger.Zero, new BigInteger(2), BigInteger.Zero, new BigInteger(2));
        }
      }
      {
        if ((_source0) == ((byte)(86))) {
          return EVMOpcodes.Opcode.create_JumpOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("JUMP"), EVMConstants.__default.JUMP, BigInteger.Zero, BigInteger.One, BigInteger.Zero, BigInteger.One);
        }
      }
      {
        if ((_source0) == ((byte)(87))) {
          return EVMOpcodes.Opcode.create_JumpOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("JUMPI"), EVMConstants.__default.JUMPI, BigInteger.Zero, new BigInteger(2), BigInteger.Zero, new BigInteger(2));
        }
      }
      {
        if ((_source0) == ((byte)(92))) {
          return EVMOpcodes.Opcode.create_JumpOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("RJUMP"), EVMConstants.__default.RJUMP, BigInteger.Zero, BigInteger.One, BigInteger.Zero, BigInteger.One);
        }
      }
      {
        if ((_source0) == ((byte)(93))) {
          return EVMOpcodes.Opcode.create_JumpOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("RJUMPI"), EVMConstants.__default.RJUMPI, BigInteger.Zero, new BigInteger(2), BigInteger.Zero, new BigInteger(2));
        }
      }
      {
        if ((_source0) == ((byte)(94))) {
          return EVMOpcodes.Opcode.create_JumpOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("RJUMPV"), EVMConstants.__default.RJUMPV, BigInteger.Zero, new BigInteger(2), BigInteger.Zero, new BigInteger(2));
        }
      }
      {
        if ((_source0) == ((byte)(88))) {
          return EVMOpcodes.Opcode.create_RunOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("PC"), EVMConstants.__default.PC, BigInteger.One, BigInteger.Zero, BigInteger.One, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(89))) {
          return EVMOpcodes.Opcode.create_RunOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("MSIZE"), EVMConstants.__default.MSIZE, BigInteger.One, BigInteger.Zero, BigInteger.One, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(90))) {
          return EVMOpcodes.Opcode.create_RunOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("GAS"), EVMConstants.__default.GAS, BigInteger.One, BigInteger.Zero, BigInteger.One, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(91))) {
          return EVMOpcodes.Opcode.create_JumpOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("JUMPDEST"), EVMConstants.__default.JUMPDEST, BigInteger.Zero, BigInteger.Zero, BigInteger.Zero, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(95))) {
          return EVMOpcodes.Opcode.create_StackOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("PUSH0"), EVMConstants.__default.PUSH0, BigInteger.One, BigInteger.Zero, BigInteger.One, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(96))) {
          return EVMOpcodes.Opcode.create_StackOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("PUSH1"), EVMConstants.__default.PUSH1, BigInteger.One, BigInteger.Zero, BigInteger.One, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(97))) {
          return EVMOpcodes.Opcode.create_StackOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("PUSH2"), EVMConstants.__default.PUSH2, BigInteger.One, BigInteger.Zero, BigInteger.One, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(98))) {
          return EVMOpcodes.Opcode.create_StackOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("PUSH3"), EVMConstants.__default.PUSH3, BigInteger.One, BigInteger.Zero, BigInteger.One, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(99))) {
          return EVMOpcodes.Opcode.create_StackOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("PUSH4"), EVMConstants.__default.PUSH4, BigInteger.One, BigInteger.Zero, BigInteger.One, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(100))) {
          return EVMOpcodes.Opcode.create_StackOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("PUSH5"), EVMConstants.__default.PUSH5, BigInteger.One, BigInteger.Zero, BigInteger.One, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(101))) {
          return EVMOpcodes.Opcode.create_StackOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("PUSH6"), EVMConstants.__default.PUSH6, BigInteger.One, BigInteger.Zero, BigInteger.One, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(102))) {
          return EVMOpcodes.Opcode.create_StackOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("PUSH7"), EVMConstants.__default.PUSH7, BigInteger.One, BigInteger.Zero, BigInteger.One, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(103))) {
          return EVMOpcodes.Opcode.create_StackOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("PUSH8"), EVMConstants.__default.PUSH8, BigInteger.One, BigInteger.Zero, BigInteger.One, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(104))) {
          return EVMOpcodes.Opcode.create_StackOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("PUSH9"), EVMConstants.__default.PUSH9, BigInteger.One, BigInteger.Zero, BigInteger.One, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(105))) {
          return EVMOpcodes.Opcode.create_StackOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("PUSH10"), EVMConstants.__default.PUSH10, BigInteger.One, BigInteger.Zero, BigInteger.One, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(106))) {
          return EVMOpcodes.Opcode.create_StackOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("PUSH11"), EVMConstants.__default.PUSH11, BigInteger.One, BigInteger.Zero, BigInteger.One, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(107))) {
          return EVMOpcodes.Opcode.create_StackOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("PUSH12"), EVMConstants.__default.PUSH12, BigInteger.One, BigInteger.Zero, BigInteger.One, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(108))) {
          return EVMOpcodes.Opcode.create_StackOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("PUSH13"), EVMConstants.__default.PUSH13, BigInteger.One, BigInteger.Zero, BigInteger.One, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(109))) {
          return EVMOpcodes.Opcode.create_StackOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("PUSH14"), EVMConstants.__default.PUSH14, BigInteger.One, BigInteger.Zero, BigInteger.One, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(110))) {
          return EVMOpcodes.Opcode.create_StackOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("PUSH15"), EVMConstants.__default.PUSH15, BigInteger.One, BigInteger.Zero, BigInteger.One, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(111))) {
          return EVMOpcodes.Opcode.create_StackOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("PUSH16"), EVMConstants.__default.PUSH16, BigInteger.One, BigInteger.Zero, BigInteger.One, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(112))) {
          return EVMOpcodes.Opcode.create_StackOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("PUSH17"), EVMConstants.__default.PUSH17, BigInteger.One, BigInteger.Zero, BigInteger.One, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(113))) {
          return EVMOpcodes.Opcode.create_StackOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("PUSH18"), EVMConstants.__default.PUSH18, BigInteger.One, BigInteger.Zero, BigInteger.One, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(114))) {
          return EVMOpcodes.Opcode.create_StackOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("PUSH19"), EVMConstants.__default.PUSH19, BigInteger.One, BigInteger.Zero, BigInteger.One, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(115))) {
          return EVMOpcodes.Opcode.create_StackOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("PUSH20"), EVMConstants.__default.PUSH20, BigInteger.One, BigInteger.Zero, BigInteger.One, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(116))) {
          return EVMOpcodes.Opcode.create_StackOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("PUSH21"), EVMConstants.__default.PUSH21, BigInteger.One, BigInteger.Zero, BigInteger.One, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(117))) {
          return EVMOpcodes.Opcode.create_StackOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("PUSH22"), EVMConstants.__default.PUSH22, BigInteger.One, BigInteger.Zero, BigInteger.One, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(118))) {
          return EVMOpcodes.Opcode.create_StackOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("PUSH23"), EVMConstants.__default.PUSH23, BigInteger.One, BigInteger.Zero, BigInteger.One, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(119))) {
          return EVMOpcodes.Opcode.create_StackOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("PUSH24"), EVMConstants.__default.PUSH24, BigInteger.One, BigInteger.Zero, BigInteger.One, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(120))) {
          return EVMOpcodes.Opcode.create_StackOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("PUSH25"), EVMConstants.__default.PUSH25, BigInteger.One, BigInteger.Zero, BigInteger.One, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(121))) {
          return EVMOpcodes.Opcode.create_StackOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("PUSH26"), EVMConstants.__default.PUSH26, BigInteger.One, BigInteger.Zero, BigInteger.One, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(122))) {
          return EVMOpcodes.Opcode.create_StackOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("PUSH27"), EVMConstants.__default.PUSH27, BigInteger.One, BigInteger.Zero, BigInteger.One, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(123))) {
          return EVMOpcodes.Opcode.create_StackOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("PUSH28"), EVMConstants.__default.PUSH28, BigInteger.One, BigInteger.Zero, BigInteger.One, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(124))) {
          return EVMOpcodes.Opcode.create_StackOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("PUSH29"), EVMConstants.__default.PUSH29, BigInteger.One, BigInteger.Zero, BigInteger.One, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(125))) {
          return EVMOpcodes.Opcode.create_StackOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("PUSH30"), EVMConstants.__default.PUSH30, BigInteger.One, BigInteger.Zero, BigInteger.One, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(126))) {
          return EVMOpcodes.Opcode.create_StackOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("PUSH31"), EVMConstants.__default.PUSH31, BigInteger.One, BigInteger.Zero, BigInteger.One, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(127))) {
          return EVMOpcodes.Opcode.create_StackOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("PUSH32"), EVMConstants.__default.PUSH32, BigInteger.One, BigInteger.Zero, BigInteger.One, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(128))) {
          return EVMOpcodes.Opcode.create_StackOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DUP1"), EVMConstants.__default.DUP1, BigInteger.One, BigInteger.One, BigInteger.One, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(129))) {
          return EVMOpcodes.Opcode.create_StackOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DUP2"), EVMConstants.__default.DUP2, BigInteger.One, new BigInteger(2), BigInteger.One, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(130))) {
          return EVMOpcodes.Opcode.create_StackOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DUP3"), EVMConstants.__default.DUP3, BigInteger.One, new BigInteger(3), BigInteger.One, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(131))) {
          return EVMOpcodes.Opcode.create_StackOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DUP4"), EVMConstants.__default.DUP4, BigInteger.One, new BigInteger(4), BigInteger.One, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(132))) {
          return EVMOpcodes.Opcode.create_StackOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DUP5"), EVMConstants.__default.DUP5, BigInteger.One, new BigInteger(5), BigInteger.One, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(133))) {
          return EVMOpcodes.Opcode.create_StackOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DUP6"), EVMConstants.__default.DUP6, BigInteger.One, new BigInteger(6), BigInteger.One, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(134))) {
          return EVMOpcodes.Opcode.create_StackOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DUP7"), EVMConstants.__default.DUP7, BigInteger.One, new BigInteger(7), BigInteger.One, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(135))) {
          return EVMOpcodes.Opcode.create_StackOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DUP8"), EVMConstants.__default.DUP8, BigInteger.One, new BigInteger(8), BigInteger.One, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(136))) {
          return EVMOpcodes.Opcode.create_StackOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DUP9"), EVMConstants.__default.DUP9, BigInteger.One, new BigInteger(9), BigInteger.One, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(137))) {
          return EVMOpcodes.Opcode.create_StackOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DUP10"), EVMConstants.__default.DUP10, BigInteger.One, new BigInteger(10), BigInteger.One, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(138))) {
          return EVMOpcodes.Opcode.create_StackOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DUP11"), EVMConstants.__default.DUP11, BigInteger.One, new BigInteger(11), BigInteger.One, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(139))) {
          return EVMOpcodes.Opcode.create_StackOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DUP12"), EVMConstants.__default.DUP12, BigInteger.One, new BigInteger(12), BigInteger.One, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(140))) {
          return EVMOpcodes.Opcode.create_StackOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DUP13"), EVMConstants.__default.DUP13, BigInteger.One, new BigInteger(13), BigInteger.One, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(141))) {
          return EVMOpcodes.Opcode.create_StackOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DUP14"), EVMConstants.__default.DUP14, BigInteger.One, new BigInteger(14), BigInteger.One, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(142))) {
          return EVMOpcodes.Opcode.create_StackOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DUP15"), EVMConstants.__default.DUP15, BigInteger.One, new BigInteger(15), BigInteger.One, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(143))) {
          return EVMOpcodes.Opcode.create_StackOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DUP16"), EVMConstants.__default.DUP16, BigInteger.One, new BigInteger(16), BigInteger.One, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(144))) {
          return EVMOpcodes.Opcode.create_StackOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("SWAP1"), EVMConstants.__default.SWAP1, BigInteger.Zero, (BigInteger.One) + (BigInteger.One), BigInteger.Zero, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(145))) {
          return EVMOpcodes.Opcode.create_StackOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("SWAP2"), EVMConstants.__default.SWAP2, BigInteger.Zero, (new BigInteger(2)) + (BigInteger.One), BigInteger.Zero, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(146))) {
          return EVMOpcodes.Opcode.create_StackOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("SWAP3"), EVMConstants.__default.SWAP3, BigInteger.Zero, (new BigInteger(3)) + (BigInteger.One), BigInteger.Zero, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(147))) {
          return EVMOpcodes.Opcode.create_StackOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("SWAP4"), EVMConstants.__default.SWAP4, BigInteger.Zero, (new BigInteger(4)) + (BigInteger.One), BigInteger.Zero, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(148))) {
          return EVMOpcodes.Opcode.create_StackOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("SWAP5"), EVMConstants.__default.SWAP5, BigInteger.Zero, (new BigInteger(5)) + (BigInteger.One), BigInteger.Zero, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(149))) {
          return EVMOpcodes.Opcode.create_StackOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("SWAP6"), EVMConstants.__default.SWAP6, BigInteger.Zero, (new BigInteger(6)) + (BigInteger.One), BigInteger.Zero, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(150))) {
          return EVMOpcodes.Opcode.create_StackOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("SWAP7"), EVMConstants.__default.SWAP7, BigInteger.Zero, (new BigInteger(7)) + (BigInteger.One), BigInteger.Zero, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(151))) {
          return EVMOpcodes.Opcode.create_StackOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("SWAP8"), EVMConstants.__default.SWAP8, BigInteger.Zero, (new BigInteger(8)) + (BigInteger.One), BigInteger.Zero, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(152))) {
          return EVMOpcodes.Opcode.create_StackOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("SWAP9"), EVMConstants.__default.SWAP9, BigInteger.Zero, (new BigInteger(9)) + (BigInteger.One), BigInteger.Zero, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(153))) {
          return EVMOpcodes.Opcode.create_StackOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("SWAP10"), EVMConstants.__default.SWAP10, BigInteger.Zero, (new BigInteger(10)) + (BigInteger.One), BigInteger.Zero, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(154))) {
          return EVMOpcodes.Opcode.create_StackOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("SWAP11"), EVMConstants.__default.SWAP11, BigInteger.Zero, (new BigInteger(11)) + (BigInteger.One), BigInteger.Zero, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(155))) {
          return EVMOpcodes.Opcode.create_StackOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("SWAP12"), EVMConstants.__default.SWAP12, BigInteger.Zero, (new BigInteger(12)) + (BigInteger.One), BigInteger.Zero, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(156))) {
          return EVMOpcodes.Opcode.create_StackOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("SWAP13"), EVMConstants.__default.SWAP13, BigInteger.Zero, (new BigInteger(13)) + (BigInteger.One), BigInteger.Zero, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(157))) {
          return EVMOpcodes.Opcode.create_StackOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("SWAP14"), EVMConstants.__default.SWAP14, BigInteger.Zero, (new BigInteger(14)) + (BigInteger.One), BigInteger.Zero, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(158))) {
          return EVMOpcodes.Opcode.create_StackOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("SWAP15"), EVMConstants.__default.SWAP15, BigInteger.Zero, (new BigInteger(15)) + (BigInteger.One), BigInteger.Zero, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(159))) {
          return EVMOpcodes.Opcode.create_StackOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("SWAP16"), EVMConstants.__default.SWAP16, BigInteger.Zero, (new BigInteger(16)) + (BigInteger.One), BigInteger.Zero, BigInteger.Zero);
        }
      }
      {
        if ((_source0) == ((byte)(160))) {
          return EVMOpcodes.Opcode.create_LogOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("LOG0"), EVMConstants.__default.LOG0, BigInteger.Zero, (BigInteger.Zero) + (new BigInteger(2)), BigInteger.Zero, (BigInteger.Zero) + (new BigInteger(2)));
        }
      }
      {
        if ((_source0) == ((byte)(161))) {
          return EVMOpcodes.Opcode.create_LogOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("LOG1"), EVMConstants.__default.LOG1, BigInteger.Zero, (BigInteger.One) + (new BigInteger(2)), BigInteger.Zero, (BigInteger.One) + (new BigInteger(2)));
        }
      }
      {
        if ((_source0) == ((byte)(162))) {
          return EVMOpcodes.Opcode.create_LogOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("LOG2"), EVMConstants.__default.LOG2, BigInteger.Zero, (new BigInteger(2)) + (new BigInteger(2)), BigInteger.Zero, (new BigInteger(2)) + (new BigInteger(2)));
        }
      }
      {
        if ((_source0) == ((byte)(163))) {
          return EVMOpcodes.Opcode.create_LogOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("LOG3"), EVMConstants.__default.LOG3, BigInteger.Zero, (new BigInteger(3)) + (new BigInteger(2)), BigInteger.Zero, (new BigInteger(3)) + (new BigInteger(2)));
        }
      }
      {
        if ((_source0) == ((byte)(164))) {
          return EVMOpcodes.Opcode.create_LogOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("LOG4"), EVMConstants.__default.LOG4, BigInteger.Zero, (new BigInteger(4)) + (new BigInteger(2)), BigInteger.Zero, (new BigInteger(4)) + (new BigInteger(2)));
        }
      }
      {
        if ((_source0) == ((byte)(240))) {
          return EVMOpcodes.Opcode.create_SysOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("CREATE"), EVMConstants.__default.CREATE, BigInteger.One, new BigInteger(3), BigInteger.One, new BigInteger(3));
        }
      }
      {
        if ((_source0) == ((byte)(241))) {
          return EVMOpcodes.Opcode.create_SysOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("CALL"), EVMConstants.__default.CALL, BigInteger.One, new BigInteger(7), BigInteger.One, new BigInteger(7));
        }
      }
      {
        if ((_source0) == ((byte)(242))) {
          return EVMOpcodes.Opcode.create_SysOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("CALLCODE"), EVMConstants.__default.CALLCODE, BigInteger.One, new BigInteger(7), BigInteger.One, new BigInteger(7));
        }
      }
      {
        if ((_source0) == ((byte)(243))) {
          return EVMOpcodes.Opcode.create_SysOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("RETURN"), EVMConstants.__default.RETURN, BigInteger.Zero, new BigInteger(2), BigInteger.Zero, new BigInteger(2));
        }
      }
      {
        if ((_source0) == ((byte)(244))) {
          return EVMOpcodes.Opcode.create_SysOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DELEGATECALL"), EVMConstants.__default.DELEGATECALL, BigInteger.One, new BigInteger(6), BigInteger.One, new BigInteger(6));
        }
      }
      {
        if ((_source0) == ((byte)(245))) {
          return EVMOpcodes.Opcode.create_SysOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("CREATE2"), EVMConstants.__default.CREATE2, BigInteger.One, new BigInteger(4), BigInteger.One, new BigInteger(4));
        }
      }
      {
        if ((_source0) == ((byte)(250))) {
          return EVMOpcodes.Opcode.create_SysOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("STATICCALL"), EVMConstants.__default.STATICCALL, BigInteger.One, new BigInteger(6), BigInteger.One, new BigInteger(6));
        }
      }
      {
        if ((_source0) == ((byte)(253))) {
          return EVMOpcodes.Opcode.create_SysOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("REVERT"), EVMConstants.__default.REVERT, BigInteger.Zero, new BigInteger(2), BigInteger.Zero, new BigInteger(2));
        }
      }
      {
        if ((_source0) == ((byte)(255))) {
          return EVMOpcodes.Opcode.create_SysOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("SELFDESTRUCT"), EVMConstants.__default.SELFDESTRUCT, BigInteger.Zero, BigInteger.One, BigInteger.Zero, BigInteger.One);
        }
      }
      {
        return EVMOpcodes.Opcode.create_SysOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("INVALID"), EVMConstants.__default.INVALID, BigInteger.Zero, BigInteger.Zero, BigInteger.Zero, BigInteger.Zero);
      }
    }
  }
} // end of namespace OpcodeDecoder
namespace Hex {

  public partial class __default {
    public static bool IsHexString(Dafny.ISequence<Dafny.Rune> s) {
      return Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, bool>>((_0_s) => Dafny.Helpers.Quantifier<BigInteger>(Dafny.Helpers.IntegerRange(BigInteger.Zero, new BigInteger((_0_s).Count)), true, (((_forall_var_0) => {
        BigInteger _1_k = (BigInteger)_forall_var_0;
        return !(((_1_k).Sign != -1) && ((_1_k) < (new BigInteger((_0_s).Count)))) || (Hex.__default.IsHex((_0_s).Select(_1_k)));
      }))))(s);
    }
    public static MiscTypes._IOption<byte> HexToU8(Dafny.ISequence<Dafny.Rune> s) {
      _System._ITuple2<MiscTypes._IOption<byte>, MiscTypes._IOption<byte>> _source0 = _System.Tuple2<MiscTypes._IOption<byte>, MiscTypes._IOption<byte>>.create(Hex.__default.HexVal((s).Select(BigInteger.Zero)), Hex.__default.HexVal((s).Select(BigInteger.One)));
      {
        MiscTypes._IOption<byte> _00 = _source0.dtor__0;
        if (_00.is_None) {
          return MiscTypes.Option<byte>.create_None();
        }
      }
      {
        MiscTypes._IOption<byte> _10 = _source0.dtor__1;
        if (_10.is_None) {
          return MiscTypes.Option<byte>.create_None();
        }
      }
      {
        MiscTypes._IOption<byte> _01 = _source0.dtor__0;
        byte _0_v1 = _01.dtor_v;
        MiscTypes._IOption<byte> _11 = _source0.dtor__1;
        byte _1_v2 = _11.dtor_v;
        return MiscTypes.Option<byte>.create_Some((byte)(((Int.__default.TWO__4) * (new BigInteger(_0_v1))) + (new BigInteger(_1_v2))));
      }
    }
    public static MiscTypes._IOption<ushort> HexToU16(Dafny.ISequence<Dafny.Rune> s) {
      _System._ITuple2<MiscTypes._IOption<byte>, MiscTypes._IOption<byte>> _source0 = _System.Tuple2<MiscTypes._IOption<byte>, MiscTypes._IOption<byte>>.create(Hex.__default.HexToU8((s).Take(new BigInteger(2))), Hex.__default.HexToU8((s).Drop(new BigInteger(2))));
      {
        MiscTypes._IOption<byte> _00 = _source0.dtor__0;
        if (_00.is_None) {
          return MiscTypes.Option<ushort>.create_None();
        }
      }
      {
        MiscTypes._IOption<byte> _10 = _source0.dtor__1;
        if (_10.is_None) {
          return MiscTypes.Option<ushort>.create_None();
        }
      }
      {
        MiscTypes._IOption<byte> _01 = _source0.dtor__0;
        byte _0_v1 = _01.dtor_v;
        MiscTypes._IOption<byte> _11 = _source0.dtor__1;
        byte _1_v2 = _11.dtor_v;
        return MiscTypes.Option<ushort>.create_Some((ushort)(((Int.__default.TWO__8) * (new BigInteger(_0_v1))) + (new BigInteger(_1_v2))));
      }
    }
    public static MiscTypes._IOption<uint> HexToU32(Dafny.ISequence<Dafny.Rune> s) {
      _System._ITuple2<MiscTypes._IOption<ushort>, MiscTypes._IOption<ushort>> _source0 = _System.Tuple2<MiscTypes._IOption<ushort>, MiscTypes._IOption<ushort>>.create(Hex.__default.HexToU16((s).Take(new BigInteger(4))), Hex.__default.HexToU16((s).Drop(new BigInteger(4))));
      {
        MiscTypes._IOption<ushort> _00 = _source0.dtor__0;
        if (_00.is_None) {
          return MiscTypes.Option<uint>.create_None();
        }
      }
      {
        MiscTypes._IOption<ushort> _10 = _source0.dtor__1;
        if (_10.is_None) {
          return MiscTypes.Option<uint>.create_None();
        }
      }
      {
        MiscTypes._IOption<ushort> _01 = _source0.dtor__0;
        ushort _0_v1 = _01.dtor_v;
        MiscTypes._IOption<ushort> _11 = _source0.dtor__1;
        ushort _1_v2 = _11.dtor_v;
        return MiscTypes.Option<uint>.create_Some((uint)(((Int.__default.TWO__16) * (new BigInteger(_0_v1))) + (new BigInteger(_1_v2))));
      }
    }
    public static MiscTypes._IOption<ulong> HexToU64(Dafny.ISequence<Dafny.Rune> s) {
      _System._ITuple2<MiscTypes._IOption<uint>, MiscTypes._IOption<uint>> _source0 = _System.Tuple2<MiscTypes._IOption<uint>, MiscTypes._IOption<uint>>.create(Hex.__default.HexToU32((s).Take(new BigInteger(8))), Hex.__default.HexToU32((s).Drop(new BigInteger(8))));
      {
        MiscTypes._IOption<uint> _00 = _source0.dtor__0;
        if (_00.is_None) {
          return MiscTypes.Option<ulong>.create_None();
        }
      }
      {
        MiscTypes._IOption<uint> _10 = _source0.dtor__1;
        if (_10.is_None) {
          return MiscTypes.Option<ulong>.create_None();
        }
      }
      {
        MiscTypes._IOption<uint> _01 = _source0.dtor__0;
        uint _0_v1 = _01.dtor_v;
        MiscTypes._IOption<uint> _11 = _source0.dtor__1;
        uint _1_v2 = _11.dtor_v;
        return MiscTypes.Option<ulong>.create_Some((ulong)(((Int.__default.TWO__32) * (new BigInteger(_0_v1))) + (new BigInteger(_1_v2))));
      }
    }
    public static MiscTypes._IOption<BigInteger> HexToU128(Dafny.ISequence<Dafny.Rune> s) {
      _System._ITuple2<MiscTypes._IOption<ulong>, MiscTypes._IOption<ulong>> _source0 = _System.Tuple2<MiscTypes._IOption<ulong>, MiscTypes._IOption<ulong>>.create(Hex.__default.HexToU64((s).Take(new BigInteger(16))), Hex.__default.HexToU64((s).Drop(new BigInteger(16))));
      {
        MiscTypes._IOption<ulong> _00 = _source0.dtor__0;
        if (_00.is_None) {
          return MiscTypes.Option<BigInteger>.create_None();
        }
      }
      {
        MiscTypes._IOption<ulong> _10 = _source0.dtor__1;
        if (_10.is_None) {
          return MiscTypes.Option<BigInteger>.create_None();
        }
      }
      {
        MiscTypes._IOption<ulong> _01 = _source0.dtor__0;
        ulong _0_v1 = _01.dtor_v;
        MiscTypes._IOption<ulong> _11 = _source0.dtor__1;
        ulong _1_v2 = _11.dtor_v;
        return MiscTypes.Option<BigInteger>.create_Some(((Int.__default.TWO__64) * (new BigInteger(_0_v1))) + (new BigInteger(_1_v2)));
      }
    }
    public static MiscTypes._IOption<BigInteger> HexToU256(Dafny.ISequence<Dafny.Rune> s) {
      _System._ITuple2<MiscTypes._IOption<BigInteger>, MiscTypes._IOption<BigInteger>> _source0 = _System.Tuple2<MiscTypes._IOption<BigInteger>, MiscTypes._IOption<BigInteger>>.create(Hex.__default.HexToU128((s).Take(new BigInteger(32))), Hex.__default.HexToU128((s).Drop(new BigInteger(32))));
      {
        MiscTypes._IOption<BigInteger> _00 = _source0.dtor__0;
        if (_00.is_None) {
          return MiscTypes.Option<BigInteger>.create_None();
        }
      }
      {
        MiscTypes._IOption<BigInteger> _10 = _source0.dtor__1;
        if (_10.is_None) {
          return MiscTypes.Option<BigInteger>.create_None();
        }
      }
      {
        MiscTypes._IOption<BigInteger> _01 = _source0.dtor__0;
        BigInteger _0_v1 = _01.dtor_v;
        MiscTypes._IOption<BigInteger> _11 = _source0.dtor__1;
        BigInteger _1_v2 = _11.dtor_v;
        return MiscTypes.Option<BigInteger>.create_Some(((Int.__default.TWO__128) * (_0_v1)) + (_1_v2));
      }
    }
    public static Dafny.ISequence<Dafny.Rune> U8ToHex(byte n) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements(Hex.__default.DecToHex(Dafny.Helpers.EuclideanDivision(new BigInteger(n), Int.__default.TWO__4))), Dafny.Sequence<Dafny.Rune>.FromElements(Hex.__default.DecToHex(Dafny.Helpers.EuclideanModulus(new BigInteger(n), Int.__default.TWO__4))));
    }
    public static Dafny.ISequence<Dafny.Rune> HexHelper(Dafny.ISequence<byte> s) {
      Dafny.ISequence<Dafny.Rune> _0___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((s).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.Concat(_0___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      } else {
        _0___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_0___accumulator, Hex.__default.U8ToHex((s).Select(BigInteger.Zero)));
        Dafny.ISequence<byte> _in0 = (s).Drop(BigInteger.One);
        s = _in0;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> U16ToHex(ushort n) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Hex.__default.U8ToHex((byte)(Dafny.Helpers.EuclideanDivision(new BigInteger(n), Int.__default.TWO__8))), Hex.__default.U8ToHex((byte)(Dafny.Helpers.EuclideanModulus(new BigInteger(n), Int.__default.TWO__8))));
    }
    public static Dafny.ISequence<Dafny.Rune> U32ToHex(uint n) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Hex.__default.U16ToHex((ushort)(Dafny.Helpers.EuclideanDivision(new BigInteger(n), Int.__default.TWO__16))), Hex.__default.U16ToHex((ushort)(Dafny.Helpers.EuclideanModulus(new BigInteger(n), Int.__default.TWO__16))));
    }
    public static Dafny.ISequence<Dafny.Rune> U64ToHex(ulong n) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Hex.__default.U32ToHex((uint)(Dafny.Helpers.EuclideanDivision(new BigInteger(n), Int.__default.TWO__32))), Hex.__default.U32ToHex((uint)(Dafny.Helpers.EuclideanModulus(new BigInteger(n), Int.__default.TWO__32))));
    }
    public static Dafny.ISequence<Dafny.Rune> U128ToHex(BigInteger n) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Hex.__default.U64ToHex((ulong)(Dafny.Helpers.EuclideanDivision(n, Int.__default.TWO__64))), Hex.__default.U64ToHex((ulong)(Dafny.Helpers.EuclideanModulus(n, Int.__default.TWO__64))));
    }
    public static Dafny.ISequence<Dafny.Rune> U256ToHex(BigInteger n) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Hex.__default.U128ToHex(Dafny.Helpers.EuclideanDivision(n, Int.__default.TWO__128)), Hex.__default.U128ToHex(Dafny.Helpers.EuclideanModulus(n, Int.__default.TWO__128)));
    }
    public static Dafny.ISequence<Dafny.Rune> NatToHex(BigInteger n) {
      Dafny.ISequence<Dafny.Rune> _0___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START: ;
      if ((n) < (new BigInteger(16))) {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements(Hex.__default.DecToHex(n)), _0___accumulator);
      } else {
        _0___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements(Hex.__default.DecToHex(Dafny.Helpers.EuclideanModulus(n, new BigInteger(16)))), _0___accumulator);
        BigInteger _in0 = Dafny.Helpers.EuclideanDivision(n, new BigInteger(16));
        n = _in0;
        goto TAIL_CALL_START;
      }
    }
    public static MiscTypes._IOption<byte> HexVal(Dafny.Rune c) {
      Dafny.Rune _source0 = c;
      {
        if ((_source0) == (new Dafny.Rune('0'))) {
          return MiscTypes.Option<byte>.create_Some((byte)(0));
        }
      }
      {
        if ((_source0) == (new Dafny.Rune('1'))) {
          return MiscTypes.Option<byte>.create_Some((byte)(1));
        }
      }
      {
        if ((_source0) == (new Dafny.Rune('2'))) {
          return MiscTypes.Option<byte>.create_Some((byte)(2));
        }
      }
      {
        if ((_source0) == (new Dafny.Rune('3'))) {
          return MiscTypes.Option<byte>.create_Some((byte)(3));
        }
      }
      {
        if ((_source0) == (new Dafny.Rune('4'))) {
          return MiscTypes.Option<byte>.create_Some((byte)(4));
        }
      }
      {
        if ((_source0) == (new Dafny.Rune('5'))) {
          return MiscTypes.Option<byte>.create_Some((byte)(5));
        }
      }
      {
        if ((_source0) == (new Dafny.Rune('6'))) {
          return MiscTypes.Option<byte>.create_Some((byte)(6));
        }
      }
      {
        if ((_source0) == (new Dafny.Rune('7'))) {
          return MiscTypes.Option<byte>.create_Some((byte)(7));
        }
      }
      {
        if ((_source0) == (new Dafny.Rune('8'))) {
          return MiscTypes.Option<byte>.create_Some((byte)(8));
        }
      }
      {
        if ((_source0) == (new Dafny.Rune('9'))) {
          return MiscTypes.Option<byte>.create_Some((byte)(9));
        }
      }
      {
        if ((_source0) == (new Dafny.Rune('a'))) {
          return MiscTypes.Option<byte>.create_Some((byte)(10));
        }
      }
      {
        if ((_source0) == (new Dafny.Rune('A'))) {
          return MiscTypes.Option<byte>.create_Some((byte)(10));
        }
      }
      {
        if ((_source0) == (new Dafny.Rune('b'))) {
          return MiscTypes.Option<byte>.create_Some((byte)(11));
        }
      }
      {
        if ((_source0) == (new Dafny.Rune('B'))) {
          return MiscTypes.Option<byte>.create_Some((byte)(11));
        }
      }
      {
        if ((_source0) == (new Dafny.Rune('c'))) {
          return MiscTypes.Option<byte>.create_Some((byte)(12));
        }
      }
      {
        if ((_source0) == (new Dafny.Rune('C'))) {
          return MiscTypes.Option<byte>.create_Some((byte)(12));
        }
      }
      {
        if ((_source0) == (new Dafny.Rune('d'))) {
          return MiscTypes.Option<byte>.create_Some((byte)(13));
        }
      }
      {
        if ((_source0) == (new Dafny.Rune('D'))) {
          return MiscTypes.Option<byte>.create_Some((byte)(13));
        }
      }
      {
        if ((_source0) == (new Dafny.Rune('e'))) {
          return MiscTypes.Option<byte>.create_Some((byte)(14));
        }
      }
      {
        if ((_source0) == (new Dafny.Rune('E'))) {
          return MiscTypes.Option<byte>.create_Some((byte)(14));
        }
      }
      {
        if ((_source0) == (new Dafny.Rune('f'))) {
          return MiscTypes.Option<byte>.create_Some((byte)(15));
        }
      }
      {
        if ((_source0) == (new Dafny.Rune('F'))) {
          return MiscTypes.Option<byte>.create_Some((byte)(15));
        }
      }
      {
        return MiscTypes.Option<byte>.create_None();
      }
    }
    public static Dafny.Rune DecToHex(BigInteger n) {
      BigInteger _source0 = n;
      {
        if ((_source0) == (BigInteger.Zero)) {
          return new Dafny.Rune('0');
        }
      }
      {
        if ((_source0) == (BigInteger.One)) {
          return new Dafny.Rune('1');
        }
      }
      {
        if ((_source0) == (new BigInteger(2))) {
          return new Dafny.Rune('2');
        }
      }
      {
        if ((_source0) == (new BigInteger(3))) {
          return new Dafny.Rune('3');
        }
      }
      {
        if ((_source0) == (new BigInteger(4))) {
          return new Dafny.Rune('4');
        }
      }
      {
        if ((_source0) == (new BigInteger(5))) {
          return new Dafny.Rune('5');
        }
      }
      {
        if ((_source0) == (new BigInteger(6))) {
          return new Dafny.Rune('6');
        }
      }
      {
        if ((_source0) == (new BigInteger(7))) {
          return new Dafny.Rune('7');
        }
      }
      {
        if ((_source0) == (new BigInteger(8))) {
          return new Dafny.Rune('8');
        }
      }
      {
        if ((_source0) == (new BigInteger(9))) {
          return new Dafny.Rune('9');
        }
      }
      {
        if ((_source0) == (new BigInteger(10))) {
          return new Dafny.Rune('a');
        }
      }
      {
        if ((_source0) == (new BigInteger(11))) {
          return new Dafny.Rune('b');
        }
      }
      {
        if ((_source0) == (new BigInteger(12))) {
          return new Dafny.Rune('c');
        }
      }
      {
        if ((_source0) == (new BigInteger(13))) {
          return new Dafny.Rune('d');
        }
      }
      {
        if ((_source0) == (new BigInteger(14))) {
          return new Dafny.Rune('e');
        }
      }
      {
        return new Dafny.Rune('f');
      }
    }
    public static bool IsHex(Dafny.Rune c) {
      return ((((new Dafny.Rune('0')) <= (c)) && ((c) <= (new Dafny.Rune('9')))) || (((new Dafny.Rune('a')) <= (c)) && ((c) <= (new Dafny.Rune('f'))))) || (((new Dafny.Rune('A')) <= (c)) && ((c) <= (new Dafny.Rune('F'))));
    }
  }
} // end of namespace Hex
namespace StackElement {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> StackToString(Dafny.ISequence<StackElement._IStackElem> s) {
      Dafny.ISequence<Dafny.Rune> _0___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((s).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.Concat(_0___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Ã˜"));
      } else {
        _0___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_0___accumulator, Dafny.Sequence<Dafny.Rune>.Concat(((s).Select(BigInteger.Zero))._ToString(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(",")));
        Dafny.ISequence<StackElement._IStackElem> _in0 = (s).Drop(BigInteger.One);
        s = _in0;
        goto TAIL_CALL_START;
      }
    }
  }

  public interface _IStackElem {
    bool is_Value { get; }
    bool is_Random { get; }
    BigInteger dtor_v { get; }
    Dafny.ISequence<Dafny.Rune> dtor_s { get; }
    _IStackElem DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString();
    Dafny.ISequence<Dafny.Rune> ToHTML();
    BigInteger Extract();
  }
  public abstract class StackElem : _IStackElem {
    public StackElem() {
    }
    private static readonly StackElement._IStackElem theDefault = create_Value(BigInteger.Zero);
    public static StackElement._IStackElem Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<StackElement._IStackElem> _TYPE = new Dafny.TypeDescriptor<StackElement._IStackElem>(StackElement.StackElem.Default());
    public static Dafny.TypeDescriptor<StackElement._IStackElem> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IStackElem create_Value(BigInteger v) {
      return new StackElem_Value(v);
    }
    public static _IStackElem create_Random(Dafny.ISequence<Dafny.Rune> s) {
      return new StackElem_Random(s);
    }
    public bool is_Value { get { return this is StackElem_Value; } }
    public bool is_Random { get { return this is StackElem_Random; } }
    public BigInteger dtor_v {
      get {
        var d = this;
        return ((StackElem_Value)d)._v;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_s {
      get {
        var d = this;
        return ((StackElem_Random)d)._s;
      }
    }
    public abstract _IStackElem DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString() {
      StackElement._IStackElem _source0 = this;
      {
        if (_source0.is_Value) {
          BigInteger _0_v = _source0.dtor_v;
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Int.__default.NatToString(_0_v), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(0x")), Hex.__default.NatToHex(_0_v)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
        }
      }
      {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("?");
      }
    }
    public Dafny.ISequence<Dafny.Rune> ToHTML() {
      StackElement._IStackElem _source0 = this;
      {
        if (_source0.is_Value) {
          BigInteger _0_v = _source0.dtor_v;
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(0x"), Hex.__default.NatToHex(_0_v)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
        }
      }
      {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("?");
      }
    }
    public BigInteger Extract() {
      return (this).dtor_v;
    }
  }
  public class StackElem_Value : StackElem {
    public readonly BigInteger _v;
    public StackElem_Value(BigInteger v) : base() {
      this._v = v;
    }
    public override _IStackElem DowncastClone() {
      if (this is _IStackElem dt) { return dt; }
      return new StackElem_Value(_v);
    }
    public override bool Equals(object other) {
      var oth = other as StackElement.StackElem_Value;
      return oth != null && this._v == oth._v;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._v));
      return (int) hash;
    }
    public override string ToString() {
      string s = "StackElement.StackElem.Value";
      s += "(";
      s += Dafny.Helpers.ToString(this._v);
      s += ")";
      return s;
    }
  }
  public class StackElem_Random : StackElem {
    public readonly Dafny.ISequence<Dafny.Rune> _s;
    public StackElem_Random(Dafny.ISequence<Dafny.Rune> s) : base() {
      this._s = s;
    }
    public override _IStackElem DowncastClone() {
      if (this is _IStackElem dt) { return dt; }
      return new StackElem_Random(_s);
    }
    public override bool Equals(object other) {
      var oth = other as StackElement.StackElem_Random;
      return oth != null && object.Equals(this._s, oth._s);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._s));
      return (int) hash;
    }
    public override string ToString() {
      string ss = "StackElement.StackElem.Random";
      ss += "(";
      ss += this._s.ToVerbatimString(true);
      ss += ")";
      return ss;
    }
  }
} // end of namespace StackElement
namespace WeakPre {

  public partial class __default {
    public static WeakPre._ICond StackToCond(Dafny.ISequence<StackElement._IStackElem> xs) {
      _System._ITuple2<Dafny.ISequence<BigInteger>, Dafny.ISequence<BigInteger>> _0_r = WeakPre.__default.StackToCondHelper(xs, _System.Tuple2<Dafny.ISequence<BigInteger>, Dafny.ISequence<BigInteger>>.create(Dafny.Sequence<BigInteger>.FromElements(), Dafny.Sequence<BigInteger>.FromElements()), BigInteger.Zero);
      if ((new BigInteger(((_0_r).dtor__0).Count)).Sign == 0) {
        return WeakPre.Cond.create_StTrue();
      } else {
        return WeakPre.Cond.create_StCond((_0_r).dtor__0, (_0_r).dtor__1);
      }
    }
    public static _System._ITuple2<Dafny.ISequence<BigInteger>, Dafny.ISequence<BigInteger>> StackToCondHelper(Dafny.ISequence<StackElement._IStackElem> xs, _System._ITuple2<Dafny.ISequence<BigInteger>, Dafny.ISequence<BigInteger>> c, BigInteger index)
    {
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)) == (index)) {
        return c;
      } else if (((xs).Select(index)).is_Value) {
        _System._ITuple2<Dafny.ISequence<BigInteger>, Dafny.ISequence<BigInteger>> _0_c_k = _System.Tuple2<Dafny.ISequence<BigInteger>, Dafny.ISequence<BigInteger>>.create(Dafny.Sequence<BigInteger>.Concat((c).dtor__0, Dafny.Sequence<BigInteger>.FromElements(index)), Dafny.Sequence<BigInteger>.Concat((c).dtor__1, Dafny.Sequence<BigInteger>.FromElements(((xs).Select(index)).dtor_v)));
        Dafny.ISequence<StackElement._IStackElem> _in0 = xs;
        _System._ITuple2<Dafny.ISequence<BigInteger>, Dafny.ISequence<BigInteger>> _in1 = _0_c_k;
        BigInteger _in2 = (index) + (BigInteger.One);
        xs = _in0;
        c = _in1;
        index = _in2;
        goto TAIL_CALL_START;
      } else {
        Dafny.ISequence<StackElement._IStackElem> _in3 = xs;
        _System._ITuple2<Dafny.ISequence<BigInteger>, Dafny.ISequence<BigInteger>> _in4 = c;
        BigInteger _in5 = (index) + (BigInteger.One);
        xs = _in3;
        c = _in4;
        index = _in5;
        goto TAIL_CALL_START;
      }
    }
    public static WeakPre._ICond Merge(WeakPre._ICond c1, WeakPre._ICond c2)
    {
    TAIL_CALL_START: ;
      if (((c2).Size()).Sign == 0) {
        return c1;
      } else if (((c2).Size()) == (BigInteger.One)) {
        if (((c1).dtor_trackedPos).Contains(((c2).dtor_trackedPos).Select(BigInteger.Zero))) {
          BigInteger _0_i = WeakPre.__default.FindVal<BigInteger>(((c2).dtor_trackedPos).Select(BigInteger.Zero), (c1).dtor_trackedPos, BigInteger.Zero);
          if ((((c1).dtor_trackedVals).Select(_0_i)) == (((c2).dtor_trackedVals).Select(BigInteger.Zero))) {
            return c1;
          } else {
            return WeakPre.Cond.create_StFalse();
          }
        } else {
          return WeakPre.Cond.create_StCond(Dafny.Sequence<BigInteger>.Concat((c1).dtor_trackedPos, Dafny.Sequence<BigInteger>.FromElements(((c2).dtor_trackedPos).Select(BigInteger.Zero))), Dafny.Sequence<BigInteger>.Concat((c1).dtor_trackedVals, Dafny.Sequence<BigInteger>.FromElements(((c2).dtor_trackedVals).Select(BigInteger.Zero))));
        }
      } else {
        if (((c1).dtor_trackedPos).Contains(((c2).dtor_trackedPos).Select(BigInteger.Zero))) {
          WeakPre._ICond _in0 = c1;
          WeakPre._ICond _in1 = WeakPre.Cond.create_StCond(((c2).dtor_trackedPos).Drop(BigInteger.One), ((c2).dtor_trackedVals).Drop(BigInteger.One));
          c1 = _in0;
          c2 = _in1;
          goto TAIL_CALL_START;
        } else {
          Dafny.ISequence<BigInteger> _1_p = Dafny.Sequence<BigInteger>.Concat((c1).dtor_trackedPos, Dafny.Sequence<BigInteger>.FromElements(((c2).dtor_trackedPos).Select(BigInteger.Zero)));
          Dafny.ISequence<BigInteger> _2_v = Dafny.Sequence<BigInteger>.Concat((c1).dtor_trackedVals, Dafny.Sequence<BigInteger>.FromElements(((c2).dtor_trackedVals).Select(BigInteger.Zero)));
          WeakPre._ICond _in2 = WeakPre.Cond.create_StCond(_1_p, _2_v);
          WeakPre._ICond _in3 = WeakPre.Cond.create_StCond(((c2).dtor_trackedPos).Drop(BigInteger.One), ((c2).dtor_trackedVals).Drop(BigInteger.One));
          c1 = _in2;
          c2 = _in3;
          goto TAIL_CALL_START;
        }
      }
    }
    public static BigInteger FindVal<__T>(__T x, Dafny.ISequence<__T> xs, BigInteger index)
    {
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)) == (BigInteger.One)) {
        return index;
      } else if (object.Equals((xs).Select(index), x)) {
        return index;
      } else {
        __T _in0 = x;
        Dafny.ISequence<__T> _in1 = xs;
        BigInteger _in2 = (index) + (BigInteger.One);
        x = _in0;
        xs = _in1;
        index = _in2;
        goto TAIL_CALL_START;
      }
    }
  }

  public partial class ValidCond {
    private static readonly WeakPre._ICond Witness = WeakPre.Cond.create_StCond(Dafny.Sequence<BigInteger>.FromElements(BigInteger.One), Dafny.Sequence<BigInteger>.FromElements(BigInteger.Zero));
    public static WeakPre._ICond Default() {
      return Witness;
    }
    private static readonly Dafny.TypeDescriptor<WeakPre._ICond> _TYPE = new Dafny.TypeDescriptor<WeakPre._ICond>(WeakPre.ValidCond.Default());
    public static Dafny.TypeDescriptor<WeakPre._ICond> _TypeDescriptor() {
      return _TYPE;
    }
    public static bool _Is(WeakPre._ICond __source) {
      WeakPre._ICond _0_c = __source;
      return (_0_c).IsValid();
    }
  }

  public interface _ICond {
    bool is_StTrue { get; }
    bool is_StFalse { get; }
    bool is_StCond { get; }
    Dafny.ISequence<BigInteger> dtor_trackedPos { get; }
    Dafny.ISequence<BigInteger> dtor_trackedVals { get; }
    _ICond DowncastClone();
    bool IsValid();
    BigInteger Size();
    WeakPre._ICond And(WeakPre._ICond c);
    Dafny.ISequence<BigInteger> TrackedPos();
    Dafny.ISequence<BigInteger> TrackedVals();
    BigInteger TrackedPosAt(BigInteger i);
    BigInteger TrackedValAt(BigInteger i);
    WeakPre._ICond Tail();
    WeakPre._ICond Add(BigInteger pos, BigInteger val);
    Dafny.ISequence<StackElement._IStackElem> BuildStack(Dafny.ISequence<StackElement._IStackElem> r, BigInteger index);
  }
  public abstract class Cond : _ICond {
    public Cond() {
    }
    private static readonly WeakPre._ICond theDefault = create_StTrue();
    public static WeakPre._ICond Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<WeakPre._ICond> _TYPE = new Dafny.TypeDescriptor<WeakPre._ICond>(WeakPre.Cond.Default());
    public static Dafny.TypeDescriptor<WeakPre._ICond> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ICond create_StTrue() {
      return new Cond_StTrue();
    }
    public static _ICond create_StFalse() {
      return new Cond_StFalse();
    }
    public static _ICond create_StCond(Dafny.ISequence<BigInteger> trackedPos, Dafny.ISequence<BigInteger> trackedVals) {
      return new Cond_StCond(trackedPos, trackedVals);
    }
    public bool is_StTrue { get { return this is Cond_StTrue; } }
    public bool is_StFalse { get { return this is Cond_StFalse; } }
    public bool is_StCond { get { return this is Cond_StCond; } }
    public Dafny.ISequence<BigInteger> dtor_trackedPos {
      get {
        var d = this;
        return ((Cond_StCond)d)._trackedPos;
      }
    }
    public Dafny.ISequence<BigInteger> dtor_trackedVals {
      get {
        var d = this;
        return ((Cond_StCond)d)._trackedVals;
      }
    }
    public abstract _ICond DowncastClone();
    public bool IsValid() {
      return !((this).is_StCond) || ((((new BigInteger(((this).dtor_trackedPos).Count)) == (new BigInteger(((this).dtor_trackedVals).Count))) && ((new BigInteger(((this).dtor_trackedVals).Count)).Sign == 1)) && (Dafny.Helpers.Quantifier<BigInteger>(Dafny.Helpers.IntegerRange(BigInteger.Zero, new BigInteger(((this).dtor_trackedPos).Count)), true, (((_forall_var_0) => {
        BigInteger _0_k = (BigInteger)_forall_var_0;
        return Dafny.Helpers.Quantifier<BigInteger>(Dafny.Helpers.IntegerRange((_0_k) + (BigInteger.One), new BigInteger(((this).dtor_trackedPos).Count)), true, (((_forall_var_1) => {
          BigInteger _1_k_k = (BigInteger)_forall_var_1;
          return !((((_0_k).Sign != -1) && ((_0_k) < (_1_k_k))) && ((_1_k_k) < (new BigInteger(((this).dtor_trackedPos).Count)))) || ((((this).dtor_trackedPos).Select(_0_k)) != (((this).dtor_trackedPos).Select(_1_k_k)));
        })));
      })))));
    }
    public BigInteger Size() {
      if ((this).is_StCond) {
        return new BigInteger(((this).dtor_trackedPos).Count);
      } else {
        return BigInteger.Zero;
      }
    }
    public WeakPre._ICond And(WeakPre._ICond c) {
      _System._ITuple2<WeakPre._ICond, WeakPre._ICond> _source0 = _System.Tuple2<WeakPre._ICond, WeakPre._ICond>.create(this, c);
      {
        WeakPre._ICond _00 = _source0.dtor__0;
        if (_00.is_StFalse) {
          return WeakPre.Cond.create_StFalse();
        }
      }
      {
        WeakPre._ICond _10 = _source0.dtor__1;
        if (_10.is_StFalse) {
          return WeakPre.Cond.create_StFalse();
        }
      }
      {
        WeakPre._ICond _01 = _source0.dtor__0;
        if (_01.is_StTrue) {
          WeakPre._ICond _0_cond = _source0.dtor__1;
          return _0_cond;
        }
      }
      {
        WeakPre._ICond _1_c1 = _source0.dtor__0;
        WeakPre._ICond _11 = _source0.dtor__1;
        if (_11.is_StTrue) {
          return _1_c1;
        }
      }
      {
        WeakPre._ICond _2_c1 = _source0.dtor__0;
        WeakPre._ICond _3_c2 = _source0.dtor__1;
        return WeakPre.__default.Merge(_2_c1, _3_c2);
      }
    }
    public Dafny.ISequence<BigInteger> TrackedPos() {
      return (this).dtor_trackedPos;
    }
    public Dafny.ISequence<BigInteger> TrackedVals() {
      return (this).dtor_trackedVals;
    }
    public BigInteger TrackedPosAt(BigInteger i) {
      return ((this).dtor_trackedPos).Select(i);
    }
    public BigInteger TrackedValAt(BigInteger i) {
      return ((this).dtor_trackedVals).Select(i);
    }
    public WeakPre._ICond Tail() {
      WeakPre._ICond _0_dt__update__tmp_h0 = this;
      Dafny.ISequence<BigInteger> _1_dt__update_htrackedVals_h0 = ((this).dtor_trackedVals).Drop(BigInteger.One);
      Dafny.ISequence<BigInteger> _2_dt__update_htrackedPos_h0 = ((this).dtor_trackedPos).Drop(BigInteger.One);
      return WeakPre.Cond.create_StCond(_2_dt__update_htrackedPos_h0, _1_dt__update_htrackedVals_h0);
    }
    public WeakPre._ICond Add(BigInteger pos, BigInteger val)
    {
      return this;
    }
    public Dafny.ISequence<StackElement._IStackElem> BuildStack(Dafny.ISequence<StackElement._IStackElem> r, BigInteger index)
    {
      _ICond _this = this;
    TAIL_CALL_START: ;
      if ((index) == (new BigInteger(((_this).dtor_trackedPos).Count))) {
        return r;
      } else if ((((_this).dtor_trackedPos).Select(index)) < (new BigInteger((r).Count))) {
        WeakPre._ICond _in0 = _this;
        Dafny.ISequence<StackElement._IStackElem> _in1 = Dafny.Sequence<StackElement._IStackElem>.Update(r, ((_this).dtor_trackedPos).Select(index), StackElement.StackElem.create_Value(((_this).dtor_trackedVals).Select(index)));
        BigInteger _in2 = (index) + (BigInteger.One);
        _this = _in0;
        ;
        r = _in1;
        index = _in2;
        goto TAIL_CALL_START;
      } else {
        Dafny.ISequence<StackElement._IStackElem> _0_suf = ((System.Func<Dafny.ISequence<StackElement._IStackElem>>) (() => {
          BigInteger dim5 = (((_this).dtor_trackedPos).Select(index)) - (new BigInteger((r).Count));
          var arr5 = new StackElement._IStackElem[Dafny.Helpers.ToIntChecked(dim5, "array size exceeds memory limit")];
          for (int i5 = 0; i5 < dim5; i5++) {
            var _1___v2 = (BigInteger) i5;
            arr5[(int)(_1___v2)] = StackElement.StackElem.create_Random(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
          }
          return Dafny.Sequence<StackElement._IStackElem>.FromArray(arr5);
        }))();
        WeakPre._ICond _in3 = _this;
        Dafny.ISequence<StackElement._IStackElem> _in4 = Dafny.Sequence<StackElement._IStackElem>.Concat(Dafny.Sequence<StackElement._IStackElem>.Concat(r, _0_suf), Dafny.Sequence<StackElement._IStackElem>.FromElements(StackElement.StackElem.create_Value(((_this).dtor_trackedVals).Select(index))));
        BigInteger _in5 = (index) + (BigInteger.One);
        _this = _in3;
        ;
        r = _in4;
        index = _in5;
        goto TAIL_CALL_START;
      }
    }
  }
  public class Cond_StTrue : Cond {
    public Cond_StTrue() : base() {
    }
    public override _ICond DowncastClone() {
      if (this is _ICond dt) { return dt; }
      return new Cond_StTrue();
    }
    public override bool Equals(object other) {
      var oth = other as WeakPre.Cond_StTrue;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "WeakPre.Cond.StTrue";
      return s;
    }
  }
  public class Cond_StFalse : Cond {
    public Cond_StFalse() : base() {
    }
    public override _ICond DowncastClone() {
      if (this is _ICond dt) { return dt; }
      return new Cond_StFalse();
    }
    public override bool Equals(object other) {
      var oth = other as WeakPre.Cond_StFalse;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "WeakPre.Cond.StFalse";
      return s;
    }
  }
  public class Cond_StCond : Cond {
    public readonly Dafny.ISequence<BigInteger> _trackedPos;
    public readonly Dafny.ISequence<BigInteger> _trackedVals;
    public Cond_StCond(Dafny.ISequence<BigInteger> trackedPos, Dafny.ISequence<BigInteger> trackedVals) : base() {
      this._trackedPos = trackedPos;
      this._trackedVals = trackedVals;
    }
    public override _ICond DowncastClone() {
      if (this is _ICond dt) { return dt; }
      return new Cond_StCond(_trackedPos, _trackedVals);
    }
    public override bool Equals(object other) {
      var oth = other as WeakPre.Cond_StCond;
      return oth != null && object.Equals(this._trackedPos, oth._trackedPos) && object.Equals(this._trackedVals, oth._trackedVals);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._trackedPos));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._trackedVals));
      return (int) hash;
    }
    public override string ToString() {
      string s = "WeakPre.Cond.StCond";
      s += "(";
      s += Dafny.Helpers.ToString(this._trackedPos);
      s += ", ";
      s += Dafny.Helpers.ToString(this._trackedVals);
      s += ")";
      return s;
    }
  }
} // end of namespace WeakPre
namespace State {

  public partial class __default {
    public static bool checkPos(State._IAState s, BigInteger pos, BigInteger val)
    {
      if ((new BigInteger(((s).dtor_stack).Count)) <= (pos)) {
        return false;
      } else {
        return object.Equals(((s).dtor_stack).Select(pos), StackElement.StackElem.create_Value(val));
      }
    }
    public static State._IAState BuildInitState(WeakPre._ICond c, BigInteger initpc)
    {
      State._IAState _0_s0 = State.__default.DEFAULT__VALIDSTATE;
      if ((c).is_StCond) {
        State._IAState _1_dt__update__tmp_h0 = _0_s0;
        BigInteger _2_dt__update_hpc_h0 = initpc;
        Dafny.ISequence<StackElement._IStackElem> _3_dt__update_hstack_h0 = (c).BuildStack(Dafny.Sequence<StackElement._IStackElem>.FromElements(), BigInteger.Zero);
        return State.AState.create_EState(_2_dt__update_hpc_h0, _3_dt__update_hstack_h0);
      } else {
        State._IAState _4_dt__update__tmp_h1 = _0_s0;
        BigInteger _5_dt__update_hpc_h1 = initpc;
        return State.AState.create_EState(_5_dt__update_hpc_h1, (_4_dt__update__tmp_h1).dtor_stack);
      }
    }
    public static State._IAState DEFAULT__VALIDSTATE { get {
      return State.AState.create_EState(BigInteger.Zero, Dafny.Sequence<StackElement._IStackElem>.FromElements());
    } }
  }

  public partial class ValidState {
    private static readonly State._IAState Witness = State.__default.DEFAULT__VALIDSTATE;
    public static State._IAState Default() {
      return Witness;
    }
    private static readonly Dafny.TypeDescriptor<State._IAState> _TYPE = new Dafny.TypeDescriptor<State._IAState>(State.ValidState.Default());
    public static Dafny.TypeDescriptor<State._IAState> _TypeDescriptor() {
      return _TYPE;
    }
    public static bool _Is(State._IAState __source) {
      State._IAState _0_s = __source;
      return (_0_s).is_EState;
    }
  }

  public interface _IAState {
    bool is_EState { get; }
    bool is_Error { get; }
    BigInteger dtor_pc { get; }
    Dafny.ISequence<StackElement._IStackElem> dtor_stack { get; }
    Dafny.ISequence<Dafny.Rune> dtor_msg { get; }
    _IAState DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString();
    BigInteger Size();
    BigInteger PC();
    State._IAState Skip(BigInteger n);
    State._IAState Goto(BigInteger tgt);
    StackElement._IStackElem Peek(BigInteger k);
    State._IAState Pop();
    State._IAState PopN(BigInteger n);
    State._IAState Push(StackElement._IStackElem v);
    State._IAState PushNRandom(BigInteger n);
    State._IAState Dup(BigInteger n);
    State._IAState Swap(BigInteger n);
    bool Sat(WeakPre._ICond c);
  }
  public abstract class AState : _IAState {
    public AState() {
    }
    private static readonly State._IAState theDefault = create_EState(BigInteger.Zero, Dafny.Sequence<StackElement._IStackElem>.Empty);
    public static State._IAState Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<State._IAState> _TYPE = new Dafny.TypeDescriptor<State._IAState>(State.AState.Default());
    public static Dafny.TypeDescriptor<State._IAState> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IAState create_EState(BigInteger pc, Dafny.ISequence<StackElement._IStackElem> stack) {
      return new AState_EState(pc, stack);
    }
    public static _IAState create_Error(Dafny.ISequence<Dafny.Rune> msg) {
      return new AState_Error(msg);
    }
    public bool is_EState { get { return this is AState_EState; } }
    public bool is_Error { get { return this is AState_Error; } }
    public BigInteger dtor_pc {
      get {
        var d = this;
        return ((AState_EState)d)._pc;
      }
    }
    public Dafny.ISequence<StackElement._IStackElem> dtor_stack {
      get {
        var d = this;
        return ((AState_EState)d)._stack;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_msg {
      get {
        var d = this;
        return ((AState_Error)d)._msg;
      }
    }
    public abstract _IAState DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString() {
      State._IAState _source0 = this;
      {
        if (_source0.is_EState) {
          BigInteger _0_pc = _source0.dtor_pc;
          Dafny.ISequence<StackElement._IStackElem> _1_stack = _source0.dtor_stack;
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(pc=0x"), Hex.__default.NatToHex(_0_pc)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" stack:[")), StackElement.__default.StackToString(_1_stack)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("])"));
        }
      }
      {
        Dafny.ISequence<Dafny.Rune> _2_m = _source0.dtor_msg;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("ErrorState "), _2_m);
      }
    }
    public BigInteger Size() {
      return new BigInteger(((this).dtor_stack).Count);
    }
    public BigInteger PC() {
      return (this).dtor_pc;
    }
    public State._IAState Skip(BigInteger n) {
      State._IAState _0_dt__update__tmp_h0 = this;
      BigInteger _1_dt__update_hpc_h0 = ((this).dtor_pc) + (n);
      return State.AState.create_EState(_1_dt__update_hpc_h0, (_0_dt__update__tmp_h0).dtor_stack);
    }
    public State._IAState Goto(BigInteger tgt) {
      State._IAState _0_dt__update__tmp_h0 = this;
      BigInteger _1_dt__update_hpc_h0 = tgt;
      return State.AState.create_EState(_1_dt__update_hpc_h0, (_0_dt__update__tmp_h0).dtor_stack);
    }
    public StackElement._IStackElem Peek(BigInteger k) {
      return ((this).dtor_stack).Select(k);
    }
    public State._IAState Pop() {
      return (this).PopN(BigInteger.One);
    }
    public State._IAState PopN(BigInteger n) {
      State._IAState _0_dt__update__tmp_h0 = this;
      Dafny.ISequence<StackElement._IStackElem> _1_dt__update_hstack_h0 = ((this).dtor_stack).Drop(n);
      return State.AState.create_EState((_0_dt__update__tmp_h0).dtor_pc, _1_dt__update_hstack_h0);
    }
    public State._IAState Push(StackElement._IStackElem v) {
      State._IAState _0_dt__update__tmp_h0 = this;
      Dafny.ISequence<StackElement._IStackElem> _1_dt__update_hstack_h0 = Dafny.Sequence<StackElement._IStackElem>.Concat(Dafny.Sequence<StackElement._IStackElem>.FromElements(v), (this).dtor_stack);
      return State.AState.create_EState((_0_dt__update__tmp_h0).dtor_pc, _1_dt__update_hstack_h0);
    }
    public State._IAState PushNRandom(BigInteger n) {
      Dafny.ISequence<StackElement._IStackElem> _0_xr = ((System.Func<Dafny.ISequence<StackElement._IStackElem>>) (() => {
        BigInteger dim6 = n;
        var arr6 = new StackElement._IStackElem[Dafny.Helpers.ToIntChecked(dim6, "array size exceeds memory limit")];
        for (int i6 = 0; i6 < dim6; i6++) {
          var _1___v0 = (BigInteger) i6;
          arr6[(int)(_1___v0)] = StackElement.StackElem.create_Random(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
        }
        return Dafny.Sequence<StackElement._IStackElem>.FromArray(arr6);
      }))();
      State._IAState _2_dt__update__tmp_h0 = this;
      Dafny.ISequence<StackElement._IStackElem> _3_dt__update_hstack_h0 = Dafny.Sequence<StackElement._IStackElem>.Concat(_0_xr, (this).dtor_stack);
      return State.AState.create_EState((_2_dt__update__tmp_h0).dtor_pc, _3_dt__update_hstack_h0);
    }
    public State._IAState Dup(BigInteger n) {
      StackElement._IStackElem _0_nth = ((this).dtor_stack).Select((n) - (BigInteger.One));
      State._IAState _1_dt__update__tmp_h0 = this;
      Dafny.ISequence<StackElement._IStackElem> _2_dt__update_hstack_h0 = Dafny.Sequence<StackElement._IStackElem>.Concat(Dafny.Sequence<StackElement._IStackElem>.FromElements(_0_nth), (this).dtor_stack);
      return State.AState.create_EState((_1_dt__update__tmp_h0).dtor_pc, _2_dt__update_hstack_h0);
    }
    public State._IAState Swap(BigInteger n) {
      StackElement._IStackElem _0_nth = ((this).dtor_stack).Select(n);
      StackElement._IStackElem _1_top = ((this).dtor_stack).Select(BigInteger.Zero);
      State._IAState _2_dt__update__tmp_h0 = this;
      Dafny.ISequence<StackElement._IStackElem> _3_dt__update_hstack_h0 = Dafny.Sequence<StackElement._IStackElem>.Update(Dafny.Sequence<StackElement._IStackElem>.Update((this).dtor_stack, BigInteger.Zero, _0_nth), n, _1_top);
      return State.AState.create_EState((_2_dt__update__tmp_h0).dtor_pc, _3_dt__update_hstack_h0);
    }
    public bool Sat(WeakPre._ICond c) {
      if (((c).Size()) == (BigInteger.One)) {
        return State.__default.checkPos(this, ((c).dtor_trackedPos).Select(BigInteger.Zero), ((c).dtor_trackedVals).Select(BigInteger.Zero));
      } else {
        return (State.__default.checkPos(this, ((c).dtor_trackedPos).Select(BigInteger.Zero), ((c).dtor_trackedVals).Select(BigInteger.Zero))) && ((this).Sat((c).Tail()));
      }
    }
  }
  public class AState_EState : AState {
    public readonly BigInteger _pc;
    public readonly Dafny.ISequence<StackElement._IStackElem> _stack;
    public AState_EState(BigInteger pc, Dafny.ISequence<StackElement._IStackElem> stack) : base() {
      this._pc = pc;
      this._stack = stack;
    }
    public override _IAState DowncastClone() {
      if (this is _IAState dt) { return dt; }
      return new AState_EState(_pc, _stack);
    }
    public override bool Equals(object other) {
      var oth = other as State.AState_EState;
      return oth != null && this._pc == oth._pc && object.Equals(this._stack, oth._stack);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._pc));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._stack));
      return (int) hash;
    }
    public override string ToString() {
      string s = "State.AState.EState";
      s += "(";
      s += Dafny.Helpers.ToString(this._pc);
      s += ", ";
      s += Dafny.Helpers.ToString(this._stack);
      s += ")";
      return s;
    }
  }
  public class AState_Error : AState {
    public readonly Dafny.ISequence<Dafny.Rune> _msg;
    public AState_Error(Dafny.ISequence<Dafny.Rune> msg) : base() {
      this._msg = msg;
    }
    public override _IAState DowncastClone() {
      if (this is _IAState dt) { return dt; }
      return new AState_Error(_msg);
    }
    public override bool Equals(object other) {
      var oth = other as State.AState_Error;
      return oth != null && object.Equals(this._msg, oth._msg);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._msg));
      return (int) hash;
    }
    public override string ToString() {
      string s = "State.AState.Error";
      s += "(";
      s += this._msg.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
} // end of namespace State
namespace EVMToolTips {

  public partial class __default {
    public static _System._ITuple2<Dafny.ISequence<Dafny.Rune>, BigInteger> ToolTip(byte op) {
      byte _source0 = op;
      {
        if ((_source0) == ((byte)(0))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Halts the machine without return output data"), new BigInteger(32));
        }
      }
      {
        if ((_source0) == ((byte)(1))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Unsigned integer addition modulo TWO_256"), new BigInteger(40));
        }
      }
      {
        if ((_source0) == ((byte)(2))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Unsigned integer multiplication modulo TWO_256"), new BigInteger(61));
        }
      }
      {
        if ((_source0) == ((byte)(3))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Unsigned integer subtraction modulo TWO_256"), new BigInteger(81));
        }
      }
      {
        if ((_source0) == ((byte)(4))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Unsigned integer division modulo TWO_256. Div by 0 yields 0"), new BigInteger(154));
        }
      }
      {
        if ((_source0) == ((byte)(5))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Signed integer division modulo TWO_256. Div by 0 yields 0"), new BigInteger(173));
        }
      }
      {
        if ((_source0) == ((byte)(6))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Unsigned modulo remainder"), new BigInteger(195));
        }
      }
      {
        if ((_source0) == ((byte)(7))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Signed modulo remainder"), new BigInteger(211));
        }
      }
      {
        if ((_source0) == ((byte)(8))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Unsigned integer addition modulo"), new BigInteger(230));
        }
      }
      {
        if ((_source0) == ((byte)(9))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Unsigned integer multiplication modulo"), new BigInteger(250));
        }
      }
      {
        if ((_source0) == ((byte)(10))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Exponential"), new BigInteger(272));
        }
      }
      {
        if ((_source0) == ((byte)(11))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Extend length of two's complement signed integer"), new BigInteger(291));
        }
      }
      {
        if ((_source0) == ((byte)(16))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Unsigned Less than"), new BigInteger(314));
        }
      }
      {
        if ((_source0) == ((byte)(17))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Unsigned Greater than"), new BigInteger(336));
        }
      }
      {
        if ((_source0) == ((byte)(18))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Signed less than"), new BigInteger(358));
        }
      }
      {
        if ((_source0) == ((byte)(19))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Signed greater than"), new BigInteger(380));
        }
      }
      {
        if ((_source0) == ((byte)(20))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("equal"), new BigInteger(402));
        }
      }
      {
        if ((_source0) == ((byte)(21))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Is equal to zero"), new BigInteger(424));
        }
      }
      {
        if ((_source0) == ((byte)(22))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Bitwise AND"), new BigInteger(445));
        }
      }
      {
        if ((_source0) == ((byte)(23))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Bitwise OR"), new BigInteger(464));
        }
      }
      {
        if ((_source0) == ((byte)(24))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Bitwise XOR"), new BigInteger(484));
        }
      }
      {
        if ((_source0) == ((byte)(25))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Bitwise NOT"), new BigInteger(504));
        }
      }
      {
        if ((_source0) == ((byte)(26))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Extract a byte from a word."), new BigInteger(522));
        }
      }
      {
        if ((_source0) == ((byte)(27))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Left shift"), new BigInteger(541));
        }
      }
      {
        if ((_source0) == ((byte)(28))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Right shift"), new BigInteger(560));
        }
      }
      {
        if ((_source0) == ((byte)(29))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Arithmetic (signed) right shift operation"), new BigInteger(579));
        }
      }
      {
        if ((_source0) == ((byte)(32))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Keccak 256 hash"), new BigInteger(598));
        }
      }
      {
        if ((_source0) == ((byte)(48))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Address of current executing account"), new BigInteger(640));
        }
      }
      {
        if ((_source0) == ((byte)(49))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Balance of a given account"), new BigInteger(655));
        }
      }
      {
        if ((_source0) == ((byte)(50))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Originator's address"), new BigInteger(676));
        }
      }
      {
        if ((_source0) == ((byte)(51))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Caller address"), new BigInteger(692));
        }
      }
      {
        if ((_source0) == ((byte)(52))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Value deposited by function call"), new BigInteger(707));
        }
      }
      {
        if ((_source0) == ((byte)(53))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Input data for this call"), new BigInteger(723));
        }
      }
      {
        if ((_source0) == ((byte)(54))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Size of the input data"), new BigInteger(742));
        }
      }
      {
        if ((_source0) == ((byte)(55))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Copy input data to memory"), new BigInteger(759));
        }
      }
      {
        if ((_source0) == ((byte)(56))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Size of the code of this contract"), new BigInteger(783));
        }
      }
      {
        if ((_source0) == ((byte)(57))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Copy the executing code to memory"), new BigInteger(799));
        }
      }
      {
        if ((_source0) == ((byte)(58))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Gas price in current block"), new BigInteger(824));
        }
      }
      {
        if ((_source0) == ((byte)(59))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Size of the calling account's code"), new BigInteger(839));
        }
      }
      {
        if ((_source0) == ((byte)(60))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Copy account's code to memory"), new BigInteger(866));
        }
      }
      {
        if ((_source0) == ((byte)(61))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Size of return data from previous call"), new BigInteger(920));
        }
      }
      {
        if ((_source0) == ((byte)(62))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Copy return data from previous call to memory"), new BigInteger(937));
        }
      }
      {
        if ((_source0) == ((byte)(63))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Hash of account's code"), new BigInteger(895));
        }
      }
      {
        if ((_source0) == ((byte)(64))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Hash of current block"), new BigInteger(626));
        }
      }
      {
        if ((_source0) == ((byte)(65))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Current block's beneficiay address"), new BigInteger(970));
        }
      }
      {
        if ((_source0) == ((byte)(66))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Current block's timestamp"), new BigInteger(985));
        }
      }
      {
        if ((_source0) == ((byte)(67))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Current block's number"), new BigInteger(1000));
        }
      }
      {
        if ((_source0) == ((byte)(68))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Current block's difficulty"), new BigInteger(1015));
        }
      }
      {
        if ((_source0) == ((byte)(69))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Current block's gas limit"), new BigInteger(1030));
        }
      }
      {
        if ((_source0) == ((byte)(70))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Chain ID"), new BigInteger(1045));
        }
      }
      {
        if ((_source0) == ((byte)(71))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Balance of currently executing account"), new BigInteger(1060));
        }
      }
      {
        if ((_source0) == ((byte)(72))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Base fee for the currently executing block"), new BigInteger(1080));
        }
      }
      {
        if ((_source0) == ((byte)(80))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Pop top of stack"), new BigInteger(1097));
        }
      }
      {
        if ((_source0) == ((byte)(81))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Read a word from memory"), new BigInteger(1133));
        }
      }
      {
        if ((_source0) == ((byte)(82))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Store a word to memory"), new BigInteger(1165));
        }
      }
      {
        if ((_source0) == ((byte)(83))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Store a byte to memory"), new BigInteger(1195));
        }
      }
      {
        if ((_source0) == ((byte)(84))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Read a word from storage"), new BigInteger(1214));
        }
      }
      {
        if ((_source0) == ((byte)(85))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Store a word to storage"), new BigInteger(1233));
        }
      }
      {
        if ((_source0) == ((byte)(86))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Uncoditional Jump"), new BigInteger(1255));
        }
      }
      {
        if ((_source0) == ((byte)(87))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Conditional Jump"), new BigInteger(1277));
        }
      }
      {
        if ((_source0) == ((byte)(92))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Static relative jump using a given offset"), new BigInteger(1343));
        }
      }
      {
        if ((_source0) == ((byte)(93))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Conditional Static relative jump using a given offset"), new BigInteger(1363));
        }
      }
      {
        if ((_source0) == ((byte)(94))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Relative jump via a jump table of one or more relative offsets"), new BigInteger(1392));
        }
      }
      {
        if ((_source0) == ((byte)(88))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Value of program counter"), new BigInteger(1302));
        }
      }
      {
        if ((_source0) == ((byte)(89))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Size of allocated memory"), new BigInteger(1113));
        }
      }
      {
        if ((_source0) == ((byte)(90))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Amount of available gas"), new BigInteger(1318));
        }
      }
      {
        if ((_source0) == ((byte)(91))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("A valid destination for a jump"), new BigInteger(1334));
        }
      }
      {
        if ((_source0) == ((byte)(95))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Push 0 on stack"), new BigInteger(1428));
        }
      }
      {
        if ((_source0) == ((byte)(96))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Push 1 byte"), new BigInteger(1479));
        }
      }
      {
        if ((_source0) == ((byte)(97))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Push 2 bytes"), new BigInteger(1486));
        }
      }
      {
        if ((_source0) == ((byte)(98))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Push 3 bytes"), new BigInteger(1493));
        }
      }
      {
        if ((_source0) == ((byte)(99))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Push 4 bytes"), new BigInteger(1500));
        }
      }
      {
        if ((_source0) == ((byte)(100))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Push 5 bytes"), new BigInteger(1507));
        }
      }
      {
        if ((_source0) == ((byte)(101))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Push 6 bytes"), new BigInteger(1514));
        }
      }
      {
        if ((_source0) == ((byte)(102))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Push 7 bytes"), new BigInteger(1521));
        }
      }
      {
        if ((_source0) == ((byte)(103))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Push 8 bytes"), new BigInteger(1528));
        }
      }
      {
        if ((_source0) == ((byte)(104))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Push 9 bytes"), new BigInteger(1535));
        }
      }
      {
        if ((_source0) == ((byte)(105))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Push 10 bytes"), new BigInteger(1535));
        }
      }
      {
        if ((_source0) == ((byte)(106))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Push 11 bytes"), new BigInteger(1535));
        }
      }
      {
        if ((_source0) == ((byte)(107))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Push 12 bytes"), new BigInteger(1535));
        }
      }
      {
        if ((_source0) == ((byte)(108))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Push 13 bytes"), new BigInteger(1535));
        }
      }
      {
        if ((_source0) == ((byte)(109))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Push 14 bytes"), new BigInteger(1535));
        }
      }
      {
        if ((_source0) == ((byte)(110))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Push 15 bytes"), new BigInteger(1535));
        }
      }
      {
        if ((_source0) == ((byte)(111))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Push 16 bytes"), new BigInteger(1535));
        }
      }
      {
        if ((_source0) == ((byte)(112))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Push 17 bytes"), new BigInteger(1535));
        }
      }
      {
        if ((_source0) == ((byte)(113))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Push 18 bytes"), new BigInteger(1535));
        }
      }
      {
        if ((_source0) == ((byte)(114))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Push 19 bytes"), new BigInteger(1535));
        }
      }
      {
        if ((_source0) == ((byte)(115))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Push 20 bytes"), new BigInteger(1535));
        }
      }
      {
        if ((_source0) == ((byte)(116))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Push 21 bytes"), new BigInteger(1535));
        }
      }
      {
        if ((_source0) == ((byte)(117))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Push 22 bytes"), new BigInteger(1535));
        }
      }
      {
        if ((_source0) == ((byte)(118))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Push 23 bytes"), new BigInteger(1535));
        }
      }
      {
        if ((_source0) == ((byte)(119))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Push 24 bytes"), new BigInteger(1535));
        }
      }
      {
        if ((_source0) == ((byte)(120))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Push 25 bytes"), new BigInteger(1535));
        }
      }
      {
        if ((_source0) == ((byte)(121))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Push 26 bytes"), new BigInteger(1535));
        }
      }
      {
        if ((_source0) == ((byte)(122))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Push 27 bytes"), new BigInteger(1535));
        }
      }
      {
        if ((_source0) == ((byte)(123))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Push 28 bytes"), new BigInteger(1535));
        }
      }
      {
        if ((_source0) == ((byte)(124))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Push 29 bytes"), new BigInteger(1535));
        }
      }
      {
        if ((_source0) == ((byte)(125))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Push 30 bytes"), new BigInteger(1535));
        }
      }
      {
        if ((_source0) == ((byte)(126))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Push 31 bytes"), new BigInteger(1535));
        }
      }
      {
        if ((_source0) == ((byte)(127))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Push 32 bytes"), new BigInteger(1535));
        }
      }
      {
        if ((_source0) == ((byte)(128))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Duplicate 1st element on top of the stack"), new BigInteger(1568));
        }
      }
      {
        if ((_source0) == ((byte)(129))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Duplicate 2nd element on top of the stack"), new BigInteger(1568));
        }
      }
      {
        if ((_source0) == ((byte)(130))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Duplicate 3rd element on top of the stack"), new BigInteger(1568));
        }
      }
      {
        if ((_source0) == ((byte)(131))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Duplicate 4-th element on top of the stack"), new BigInteger(1568));
        }
      }
      {
        if ((_source0) == ((byte)(132))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Duplicate 5-th element on top of the stack"), new BigInteger(1568));
        }
      }
      {
        if ((_source0) == ((byte)(133))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Duplicate 6-th element on top of the stack"), new BigInteger(1568));
        }
      }
      {
        if ((_source0) == ((byte)(134))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Duplicate 7-th element on top of the stack"), new BigInteger(1568));
        }
      }
      {
        if ((_source0) == ((byte)(135))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Duplicate 8-th element on top of the stack"), new BigInteger(1568));
        }
      }
      {
        if ((_source0) == ((byte)(136))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Duplicate 9-th element on top of the stack"), new BigInteger(1568));
        }
      }
      {
        if ((_source0) == ((byte)(137))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Duplicate 10-th element on top of the stack"), new BigInteger(1568));
        }
      }
      {
        if ((_source0) == ((byte)(138))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Duplicate 11-th element on top of the stack"), new BigInteger(1568));
        }
      }
      {
        if ((_source0) == ((byte)(139))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Duplicate 12-th element on top of the stack"), new BigInteger(1568));
        }
      }
      {
        if ((_source0) == ((byte)(140))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Duplicate 13-th element on top of the stack"), new BigInteger(1568));
        }
      }
      {
        if ((_source0) == ((byte)(141))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Duplicate 14-th element on top of the stack"), new BigInteger(1568));
        }
      }
      {
        if ((_source0) == ((byte)(142))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Duplicate 15-th element on top of the stack"), new BigInteger(1568));
        }
      }
      {
        if ((_source0) == ((byte)(143))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Duplicate 16-th element on top of the stack"), new BigInteger(1568));
        }
      }
      {
        if ((_source0) == ((byte)(144))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Swap top and 2nd element of the stack"), new BigInteger(1577));
        }
      }
      {
        if ((_source0) == ((byte)(145))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Swap top and 3rd element of the stack"), new BigInteger(1577));
        }
      }
      {
        if ((_source0) == ((byte)(146))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Swap top and 4-th element of the stack"), new BigInteger(1577));
        }
      }
      {
        if ((_source0) == ((byte)(147))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Swap top and 5-th element of the stack"), new BigInteger(1577));
        }
      }
      {
        if ((_source0) == ((byte)(148))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Swap top and 6-th element of the stack"), new BigInteger(1577));
        }
      }
      {
        if ((_source0) == ((byte)(149))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Swap top and 7-th element of the stack"), new BigInteger(1577));
        }
      }
      {
        if ((_source0) == ((byte)(150))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Swap top and 8-th element of the stack"), new BigInteger(1577));
        }
      }
      {
        if ((_source0) == ((byte)(151))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Swap top and 9-th element of the stack"), new BigInteger(1577));
        }
      }
      {
        if ((_source0) == ((byte)(152))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Swap top and 10-th element of the stack"), new BigInteger(1577));
        }
      }
      {
        if ((_source0) == ((byte)(153))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Swap top and 11-th element of the stack"), new BigInteger(1577));
        }
      }
      {
        if ((_source0) == ((byte)(154))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Swap top and 12-th element of the stack"), new BigInteger(1577));
        }
      }
      {
        if ((_source0) == ((byte)(155))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Swap top and 13-th element of the stack"), new BigInteger(1577));
        }
      }
      {
        if ((_source0) == ((byte)(156))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Swap top and 14-th element of the stack"), new BigInteger(1577));
        }
      }
      {
        if ((_source0) == ((byte)(157))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Swap top and 15-th element of the stack"), new BigInteger(1577));
        }
      }
      {
        if ((_source0) == ((byte)(158))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Swap top and 16-th element of the stack"), new BigInteger(1577));
        }
      }
      {
        if ((_source0) == ((byte)(159))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Swap top and 17-th element of the stack"), new BigInteger(1577));
        }
      }
      {
        if ((_source0) == ((byte)(160))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Append log with 0 topics"), new BigInteger(1600));
        }
      }
      {
        if ((_source0) == ((byte)(161))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Append log with 1 topics"), new BigInteger(1600));
        }
      }
      {
        if ((_source0) == ((byte)(162))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Append log with 2 topics"), new BigInteger(1600));
        }
      }
      {
        if ((_source0) == ((byte)(163))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Append log with 3 topics"), new BigInteger(1600));
        }
      }
      {
        if ((_source0) == ((byte)(164))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Append log with 4 topics"), new BigInteger(1600));
        }
      }
      {
        if ((_source0) == ((byte)(240))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Create a new account with associated code"), new BigInteger(1629));
        }
      }
      {
        if ((_source0) == ((byte)(241))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Message-call into an account"), new BigInteger(1674));
        }
      }
      {
        if ((_source0) == ((byte)(242))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Message-call into this account with another account's code"), new BigInteger(1711));
        }
      }
      {
        if ((_source0) == ((byte)(243))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Halt execution and return data"), new BigInteger(1742));
        }
      }
      {
        if ((_source0) == ((byte)(244))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Message-call into this account with an alternative account's code"), new BigInteger(1764));
        }
      }
      {
        if ((_source0) == ((byte)(245))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Create a new account with associated code"), new BigInteger(1799));
        }
      }
      {
        if ((_source0) == ((byte)(250))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Static Message-call into an account"), new BigInteger(1844));
        }
      }
      {
        if ((_source0) == ((byte)(253))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Revert execution and return data"), new BigInteger(1874));
        }
      }
      {
        if ((_source0) == ((byte)(255))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Delete this account"), new BigInteger(1896));
        }
      }
      {
        if ((_source0) == ((byte)(254))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Equivalent to STOP"), new BigInteger(32));
        }
      }
      {
        return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, BigInteger>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("N/A"), BigInteger.Zero);
      }
    }
    public static Dafny.ISequence<Dafny.Rune> Gas(byte op) {
      byte _source0 = op;
      {
        if ((_source0) == ((byte)(0))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__ZERO);
        }
      }
      {
        if ((_source0) == ((byte)(1))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        if ((_source0) == ((byte)(2))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__LOW);
        }
      }
      {
        if ((_source0) == ((byte)(3))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        if ((_source0) == ((byte)(4))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__LOW);
        }
      }
      {
        if ((_source0) == ((byte)(5))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__LOW);
        }
      }
      {
        if ((_source0) == ((byte)(6))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__LOW);
        }
      }
      {
        if ((_source0) == ((byte)(7))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__LOW);
        }
      }
      {
        if ((_source0) == ((byte)(8))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__MID);
        }
      }
      {
        if ((_source0) == ((byte)(9))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__MID);
        }
      }
      {
        if ((_source0) == ((byte)(10))) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Depends on memory expansion");
        }
      }
      {
        if ((_source0) == ((byte)(11))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__LOW);
        }
      }
      {
        if ((_source0) == ((byte)(16))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        if ((_source0) == ((byte)(17))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        if ((_source0) == ((byte)(18))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        if ((_source0) == ((byte)(19))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        if ((_source0) == ((byte)(20))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        if ((_source0) == ((byte)(21))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        if ((_source0) == ((byte)(22))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        if ((_source0) == ((byte)(23))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        if ((_source0) == ((byte)(24))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        if ((_source0) == ((byte)(25))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        if ((_source0) == ((byte)(26))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        if ((_source0) == ((byte)(27))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        if ((_source0) == ((byte)(28))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        if ((_source0) == ((byte)(29))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        if ((_source0) == ((byte)(32))) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Depends on memory expansion");
        }
      }
      {
        if ((_source0) == ((byte)(48))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__BASE);
        }
      }
      {
        if ((_source0) == ((byte)(50))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__BASE);
        }
      }
      {
        if ((_source0) == ((byte)(51))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__BASE);
        }
      }
      {
        if ((_source0) == ((byte)(52))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__BASE);
        }
      }
      {
        if ((_source0) == ((byte)(53))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        if ((_source0) == ((byte)(54))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__BASE);
        }
      }
      {
        if ((_source0) == ((byte)(55))) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Depends on memory expansion");
        }
      }
      {
        if ((_source0) == ((byte)(56))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__BASE);
        }
      }
      {
        if ((_source0) == ((byte)(57))) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Depends on memory expansion");
        }
      }
      {
        if ((_source0) == ((byte)(58))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__BASE);
        }
      }
      {
        if ((_source0) == ((byte)(59))) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Depends on memory expansion");
        }
      }
      {
        if ((_source0) == ((byte)(60))) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Depends on memory expansion");
        }
      }
      {
        if ((_source0) == ((byte)(61))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__BASE);
        }
      }
      {
        if ((_source0) == ((byte)(62))) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Depends on memory expansion");
        }
      }
      {
        if ((_source0) == ((byte)(63))) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Depends on memory expansion");
        }
      }
      {
        if ((_source0) == ((byte)(64))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__BLOCKHASH);
        }
      }
      {
        if ((_source0) == ((byte)(65))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__BASE);
        }
      }
      {
        if ((_source0) == ((byte)(66))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__BASE);
        }
      }
      {
        if ((_source0) == ((byte)(67))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__BASE);
        }
      }
      {
        if ((_source0) == ((byte)(68))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__BASE);
        }
      }
      {
        if ((_source0) == ((byte)(69))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__BASE);
        }
      }
      {
        if ((_source0) == ((byte)(70))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__BASE);
        }
      }
      {
        if ((_source0) == ((byte)(71))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__LOW);
        }
      }
      {
        if ((_source0) == ((byte)(72))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__BASE);
        }
      }
      {
        if ((_source0) == ((byte)(80))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__BASE);
        }
      }
      {
        if ((_source0) == ((byte)(81))) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Depends on memory expansion");
        }
      }
      {
        if ((_source0) == ((byte)(82))) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Depends on memory expansion");
        }
      }
      {
        if ((_source0) == ((byte)(83))) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Depends on memory expansion");
        }
      }
      {
        if ((_source0) == ((byte)(84))) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Depends on memory expansion");
        }
      }
      {
        if ((_source0) == ((byte)(85))) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Depends on memory expansion");
        }
      }
      {
        if ((_source0) == ((byte)(86))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__MID);
        }
      }
      {
        if ((_source0) == ((byte)(87))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__HIGH);
        }
      }
      {
        if ((_source0) == ((byte)(88))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__BASE);
        }
      }
      {
        if ((_source0) == ((byte)(89))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__BASE);
        }
      }
      {
        if ((_source0) == ((byte)(90))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__BASE);
        }
      }
      {
        if ((_source0) == ((byte)(91))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__JUMPDEST);
        }
      }
      {
        if ((_source0) == ((byte)(95))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        if ((_source0) == ((byte)(96))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        if ((_source0) == ((byte)(97))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        if ((_source0) == ((byte)(98))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        if ((_source0) == ((byte)(99))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        if ((_source0) == ((byte)(100))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        if ((_source0) == ((byte)(101))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        if ((_source0) == ((byte)(102))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        if ((_source0) == ((byte)(103))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        if ((_source0) == ((byte)(104))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        if ((_source0) == ((byte)(105))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        if ((_source0) == ((byte)(106))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        if ((_source0) == ((byte)(107))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        if ((_source0) == ((byte)(108))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        if ((_source0) == ((byte)(109))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        if ((_source0) == ((byte)(110))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        if ((_source0) == ((byte)(111))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        if ((_source0) == ((byte)(112))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        if ((_source0) == ((byte)(113))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        if ((_source0) == ((byte)(114))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        if ((_source0) == ((byte)(115))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        if ((_source0) == ((byte)(116))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        if ((_source0) == ((byte)(117))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        if ((_source0) == ((byte)(118))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        if ((_source0) == ((byte)(119))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        if ((_source0) == ((byte)(120))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        if ((_source0) == ((byte)(121))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        if ((_source0) == ((byte)(122))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        if ((_source0) == ((byte)(123))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        if ((_source0) == ((byte)(124))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        if ((_source0) == ((byte)(125))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        if ((_source0) == ((byte)(126))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        if ((_source0) == ((byte)(127))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        if ((_source0) == ((byte)(128))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        if ((_source0) == ((byte)(129))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        if ((_source0) == ((byte)(130))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        if ((_source0) == ((byte)(131))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        if ((_source0) == ((byte)(132))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        if ((_source0) == ((byte)(133))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        if ((_source0) == ((byte)(134))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        if ((_source0) == ((byte)(135))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        if ((_source0) == ((byte)(136))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        if ((_source0) == ((byte)(137))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        if ((_source0) == ((byte)(138))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        if ((_source0) == ((byte)(139))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        if ((_source0) == ((byte)(140))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        if ((_source0) == ((byte)(141))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        if ((_source0) == ((byte)(142))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        if ((_source0) == ((byte)(143))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        if ((_source0) == ((byte)(144))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        if ((_source0) == ((byte)(145))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        if ((_source0) == ((byte)(146))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        if ((_source0) == ((byte)(147))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        if ((_source0) == ((byte)(148))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        if ((_source0) == ((byte)(149))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        if ((_source0) == ((byte)(150))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        if ((_source0) == ((byte)(151))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        if ((_source0) == ((byte)(152))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        if ((_source0) == ((byte)(153))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        if ((_source0) == ((byte)(154))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        if ((_source0) == ((byte)(155))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        if ((_source0) == ((byte)(156))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        if ((_source0) == ((byte)(157))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        if ((_source0) == ((byte)(158))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        if ((_source0) == ((byte)(159))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        if ((_source0) == ((byte)(160))) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Depends on memory expansion");
        }
      }
      {
        if ((_source0) == ((byte)(161))) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Depends on memory expansion");
        }
      }
      {
        if ((_source0) == ((byte)(162))) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Depends on memory expansion");
        }
      }
      {
        if ((_source0) == ((byte)(163))) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Depends on memory expansion");
        }
      }
      {
        if ((_source0) == ((byte)(164))) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Depends on memory expansion");
        }
      }
      {
        if ((_source0) == ((byte)(240))) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Depends on memory expansion");
        }
      }
      {
        if ((_source0) == ((byte)(241))) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Depends on memory expansion");
        }
      }
      {
        if ((_source0) == ((byte)(242))) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Depends on memory expansion");
        }
      }
      {
        if ((_source0) == ((byte)(243))) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Depends on memory expansion");
        }
      }
      {
        if ((_source0) == ((byte)(244))) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Depends on memory expansion");
        }
      }
      {
        if ((_source0) == ((byte)(245))) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Depends on memory expansion");
        }
      }
      {
        if ((_source0) == ((byte)(250))) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Depends on memory expansion");
        }
      }
      {
        if ((_source0) == ((byte)(253))) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Depends on memory expansion");
        }
      }
      {
        if ((_source0) == ((byte)(255))) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Depends on memory expansion");
        }
      }
      {
        if ((_source0) == ((byte)(254))) {
          return Int.__default.NatToString(EVMToolTips.__default.G__VERYLOW);
        }
      }
      {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Unknown opcode");
      }
    }
    public static BigInteger G__ZERO { get {
      return BigInteger.Zero;
    } }
    public static BigInteger G__VERYLOW { get {
      return new BigInteger(3);
    } }
    public static BigInteger G__LOW { get {
      return new BigInteger(5);
    } }
    public static BigInteger G__MID { get {
      return new BigInteger(8);
    } }
    public static BigInteger G__BASE { get {
      return new BigInteger(2);
    } }
    public static BigInteger G__BLOCKHASH { get {
      return new BigInteger(20);
    } }
    public static BigInteger G__HIGH { get {
      return new BigInteger(10);
    } }
    public static BigInteger G__JUMPDEST { get {
      return BigInteger.One;
    } }
    public static Dafny.ISequence<Dafny.Rune> bytecodeRefLine { get {
      return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("https://github.com/Consensys/evm-dafny/blob/60bce44ee75978a4c97b9eab8e03424c9c233bbd/src/dafny/bytecode.dfy#L");
    } }
    public static Dafny.ISequence<Dafny.Rune> gasRefLine { get {
      return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("https://github.com/Consensys/evm-dafny/blob/60bce44ee75978a4c97b9eab8e03424c9c233bbd/src/dafny/evm.dfy#L103");
    } }
    public static BigInteger G__WARMACCESS { get {
      return new BigInteger(100);
    } }
    public static BigInteger G__COLDACCOUNTACCESS { get {
      return new BigInteger(2600);
    } }
    public static BigInteger G__COLDSLOAD { get {
      return new BigInteger(2100);
    } }
    public static BigInteger G__SSET { get {
      return new BigInteger(20000);
    } }
    public static BigInteger G__SRESET { get {
      return new BigInteger(2900);
    } }
    public static BigInteger R__SCLEAR { get {
      return new BigInteger(15000);
    } }
    public static BigInteger R__SELFDESTRUCT { get {
      return new BigInteger(24000);
    } }
    public static BigInteger G__SELFDESTRUCT { get {
      return new BigInteger(5000);
    } }
    public static BigInteger G__CREATE { get {
      return new BigInteger(32000);
    } }
    public static BigInteger G__CODEDEPOSIT { get {
      return new BigInteger(200);
    } }
    public static BigInteger G__CALLVALUE { get {
      return new BigInteger(9000);
    } }
    public static BigInteger G__CALLSTIPEND { get {
      return new BigInteger(2300);
    } }
    public static BigInteger G__NEWACCOUNT { get {
      return new BigInteger(25000);
    } }
    public static BigInteger G__EXP { get {
      return new BigInteger(10);
    } }
    public static BigInteger G__EXPBYTE { get {
      return new BigInteger(50);
    } }
    public static BigInteger G__MEMORY { get {
      return new BigInteger(3);
    } }
    public static BigInteger G__TXCREATE { get {
      return new BigInteger(32000);
    } }
    public static BigInteger G__TXDATAZERO { get {
      return new BigInteger(4);
    } }
    public static BigInteger G__TXDATANONZERO { get {
      return new BigInteger(16);
    } }
    public static BigInteger G__TRANSACTION { get {
      return new BigInteger(21000);
    } }
    public static BigInteger G__LOG { get {
      return new BigInteger(375);
    } }
    public static BigInteger G__LOGDATA { get {
      return new BigInteger(8);
    } }
    public static BigInteger G__LOGTOPIC { get {
      return new BigInteger(375);
    } }
    public static BigInteger G__KECCAK256 { get {
      return new BigInteger(30);
    } }
    public static BigInteger G__KECCAK256WORD { get {
      return new BigInteger(6);
    } }
    public static BigInteger G__COPY { get {
      return new BigInteger(3);
    } }
  }
} // end of namespace EVMToolTips
namespace Instructions {

  public partial class __default {
    public static BigInteger GetArgValuePush(Dafny.ISequence<Dafny.Rune> xc) {
      Dafny.ISequence<Dafny.Rune> _0_pad = ((System.Func<Dafny.ISequence<Dafny.Rune>>) (() => {
        BigInteger dim7 = (new BigInteger(64)) - (new BigInteger((xc).Count));
        var arr7 = new Dafny.Rune[Dafny.Helpers.ToIntChecked(dim7, "array size exceeds memory limit")];
        for (int i7 = 0; i7 < dim7; i7++) {
          var _1___v149 = (BigInteger) i7;
          arr7[(int)(_1___v149)] = new Dafny.Rune('0');
        }
        return Dafny.Sequence<Dafny.Rune>.FromArray(arr7);
      }))();
      return (Hex.__default.HexToU256(Dafny.Sequence<Dafny.Rune>.Concat(_0_pad, xc))).Extract();
    }
    public static Dafny.ISequence<Dafny.Rune> ToDot(Dafny.ISequence<Instructions._IInstruction> xi) {
      Dafny.ISequence<Dafny.Rune> _0___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((xi).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.Concat(_0___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      } else {
        _0___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_0___accumulator, ((xi).Select(BigInteger.Zero)).ToHTML());
        Dafny.ISequence<Instructions._IInstruction> _in0 = (xi).Drop(BigInteger.One);
        xi = _in0;
        goto TAIL_CALL_START;
      }
    }
    public static _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> Colours(Instructions._IInstruction i) {
      EVMOpcodes._IOpcode _source0 = (i).dtor_op;
      {
        if (_source0.is_ArithOp) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#316152"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#c6eb76"));
        }
      }
      {
        if (_source0.is_CompOp) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("darkgoldenrod"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bisque"));
        }
      }
      {
        if (_source0.is_BitwiseOp) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("orange"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#f3f383"));
        }
      }
      {
        if (_source0.is_KeccakOp) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("grey"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("linen"));
        }
      }
      {
        if (_source0.is_EnvOp) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("darkslategrey"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("lightgrey"));
        }
      }
      {
        if (_source0.is_MemOp) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("sienna"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("wheat"));
        }
      }
      {
        if (_source0.is_StorageOp) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fuchsia"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mistyrose"));
        }
      }
      {
        if (_source0.is_JumpOp) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("purple"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("thistle"));
        }
      }
      {
        if (_source0.is_RunOp) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("sienna"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("tan"));
        }
      }
      {
        if (_source0.is_StackOp) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("royalblue"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("powderblue"));
        }
      }
      {
        if (_source0.is_LogOp) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("cornflowerblue"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("lavender"));
        }
      }
      {
        byte _0_opcode = _source0.dtor_opcode;
        if (((_0_opcode) == (EVMConstants.__default.STOP)) || ((_0_opcode) == (EVMConstants.__default.REVERT))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("brown"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("lightsalmon"));
        } else if ((_0_opcode) == (EVMConstants.__default.RETURN)) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("teal"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("greenyellow"));
        } else if (((((_0_opcode) == (EVMConstants.__default.CALL)) || ((_0_opcode) == (EVMConstants.__default.CALLCODE))) || ((_0_opcode) == (EVMConstants.__default.DELEGATECALL))) || ((_0_opcode) == (EVMConstants.__default.STATICCALL))) {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("sienna"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("tan"));
        } else {
          return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("brown"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("salmon"));
        }
      }
    }
  }

  public partial class ValidInstruction {
    private static readonly Instructions._IInstruction Witness = Instructions.Instruction.create(EVMOpcodes.Opcode.create_SysOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("STOP"), EVMConstants.__default.STOP, BigInteger.Zero, BigInteger.Zero, BigInteger.Zero, BigInteger.Zero), Dafny.Sequence<Dafny.Rune>.FromElements(), BigInteger.Zero);
    public static Instructions._IInstruction Default() {
      return Witness;
    }
    private static readonly Dafny.TypeDescriptor<Instructions._IInstruction> _TYPE = new Dafny.TypeDescriptor<Instructions._IInstruction>(Instructions.ValidInstruction.Default());
    public static Dafny.TypeDescriptor<Instructions._IInstruction> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public interface _IInstruction {
    bool is_Instruction { get; }
    EVMOpcodes._IOpcode dtor_op { get; }
    Dafny.ISequence<Dafny.Rune> dtor_arg { get; }
    BigInteger dtor_address { get; }
    _IInstruction DowncastClone();
    BigInteger Size();
    Dafny.ISequence<Dafny.Rune> _ToString();
    bool Equiv(Instructions._IInstruction i);
    Dafny.ISequence<Dafny.Rune> ToHTML();
    Dafny.ISequence<Dafny.Rune> ToHTMLTable(Dafny.ISequence<Dafny.Rune> entryPortTag, Dafny.ISequence<Dafny.Rune> exitPortTag);
    bool IsTerminal();
    bool IsJumpDest();
    bool IsJump();
    BigInteger StackEffect();
    BigInteger WeakestPreOperands(BigInteger post);
    BigInteger WeakestPreCapacity(BigInteger post);
    MiscTypes._IEither<StackElement._IStackElem, BigInteger> StackPosBackWardTracker(BigInteger pos_k);
    State._IAState NextState(State._IAState s, Dafny.ISequence<BigInteger> jumpDests, BigInteger exit);
    WeakPre._ICond WPre(WeakPre._ICond c);
  }
  public class Instruction : _IInstruction {
    public readonly EVMOpcodes._IOpcode _op;
    public readonly Dafny.ISequence<Dafny.Rune> _arg;
    public readonly BigInteger _address;
    public Instruction(EVMOpcodes._IOpcode op, Dafny.ISequence<Dafny.Rune> arg, BigInteger address) {
      this._op = op;
      this._arg = arg;
      this._address = address;
    }
    public _IInstruction DowncastClone() {
      if (this is _IInstruction dt) { return dt; }
      return new Instruction(_op, _arg, _address);
    }
    public override bool Equals(object other) {
      var oth = other as Instructions.Instruction;
      return oth != null && object.Equals(this._op, oth._op) && object.Equals(this._arg, oth._arg) && this._address == oth._address;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._op));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arg));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._address));
      return (int) hash;
    }
    public override string ToString() {
      string s = "Instructions.Instruction.Instruction";
      s += "(";
      s += Dafny.Helpers.ToString(this._op);
      s += ", ";
      s += this._arg.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._address);
      s += ")";
      return s;
    }
    private static readonly Instructions._IInstruction theDefault = create(EVMOpcodes.ValidOpcode.Default(), Dafny.Sequence<Dafny.Rune>.Empty, BigInteger.Zero);
    public static Instructions._IInstruction Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<Instructions._IInstruction> _TYPE = new Dafny.TypeDescriptor<Instructions._IInstruction>(Instructions.Instruction.Default());
    public static Dafny.TypeDescriptor<Instructions._IInstruction> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IInstruction create(EVMOpcodes._IOpcode op, Dafny.ISequence<Dafny.Rune> arg, BigInteger address) {
      return new Instruction(op, arg, address);
    }
    public static _IInstruction create_Instruction(EVMOpcodes._IOpcode op, Dafny.ISequence<Dafny.Rune> arg, BigInteger address) {
      return create(op, arg, address);
    }
    public bool is_Instruction { get { return true; } }
    public EVMOpcodes._IOpcode dtor_op {
      get {
        return this._op;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_arg {
      get {
        return this._arg;
      }
    }
    public BigInteger dtor_address {
      get {
        return this._address;
      }
    }
    public BigInteger Size() {
      return (BigInteger.One) + (Dafny.Helpers.EuclideanDivision(new BigInteger(((this).dtor_arg).Count), new BigInteger(2)));
    }
    public Dafny.ISequence<Dafny.Rune> _ToString() {
      Dafny.ISequence<Dafny.Rune> _0_x = (this).dtor_arg;
      if ((((this).dtor_op).dtor_opcode) == (EVMConstants.__default.INVALID)) {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(((this).dtor_op).Name(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _0_x);
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(((this).dtor_op).Name(), (((new BigInteger((_0_x).Count)).Sign == 1) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" 0x"), _0_x)) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))));
      }
    }
    public bool Equiv(Instructions._IInstruction i) {
      return (object.Equals((this).dtor_op, (i).dtor_op)) && (((this).dtor_arg).Equals((i).dtor_arg));
    }
    public Dafny.ISequence<Dafny.Rune> ToHTML() {
      Dafny.ISequence<Dafny.Rune> _0_x = (this).dtor_arg;
      _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> _1_cols = Instructions.__default.Colours(this);
      Dafny.ISequence<Dafny.Rune> _2_formattedAddress = Dafny.Sequence<Dafny.Rune>.Concat(((System.Func<Dafny.ISequence<Dafny.Rune>>) (() => {
        BigInteger dim8 = Dafny.Helpers.EuclideanModulus(new BigInteger((Hex.__default.NatToHex((this).dtor_address)).Count), new BigInteger(2));
        var arr8 = new Dafny.Rune[Dafny.Helpers.ToIntChecked(dim8, "array size exceeds memory limit")];
        for (int i8 = 0; i8 < dim8; i8++) {
          var _3___v0 = (BigInteger) i8;
          arr8[(int)(_3___v0)] = new Dafny.Rune('0');
        }
        return Dafny.Sequence<Dafny.Rune>.FromArray(arr8);
      }))(), Hex.__default.NatToHex((this).dtor_address));
      Dafny.ISequence<Dafny.Rune> _4_insText = (((((this).dtor_op).dtor_opcode) == (EVMConstants.__default.INVALID)) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<FONT color=\""), (_1_cols).dtor__0), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\">")), ((this).dtor_op).Name()), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("</FONT>")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _0_x)) : (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<FONT color=\""), (_1_cols).dtor__0), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\">")), ((this).dtor_op).Name()), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("</FONT>")), (((new BigInteger((_0_x).Count)).Sign == 1) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" 0x"), _0_x)) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))))));
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0x"), _2_formattedAddress), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(":")), _4_insText), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" <BR ALIGN=\"LEFT\"/>\n"));
    }
    public Dafny.ISequence<Dafny.Rune> ToHTMLTable(Dafny.ISequence<Dafny.Rune> entryPortTag, Dafny.ISequence<Dafny.Rune> exitPortTag)
    {
      _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> _0_cols = Instructions.__default.Colours(this);
      Dafny.ISequence<Dafny.Rune> _1_formattedAddress = Dafny.Sequence<Dafny.Rune>.Concat(((System.Func<Dafny.ISequence<Dafny.Rune>>) (() => {
        BigInteger dim9 = Dafny.Helpers.EuclideanModulus(new BigInteger((Hex.__default.NatToHex((this).dtor_address)).Count), new BigInteger(2));
        var arr9 = new Dafny.Rune[Dafny.Helpers.ToIntChecked(dim9, "array size exceeds memory limit")];
        for (int i9 = 0; i9 < dim9; i9++) {
          var _2___v1 = (BigInteger) i9;
          arr9[(int)(_2___v1)] = new Dafny.Rune('0');
        }
        return Dafny.Sequence<Dafny.Rune>.FromArray(arr9);
      }))(), Hex.__default.NatToHex((this).dtor_address));
      Dafny.ISequence<Dafny.Rune> _3_gasLine = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&#9981; ");
      Dafny.ISequence<Dafny.Rune> _4_oplineTD = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<TD width=\"7\" fixedsize=\"false\" align=\"left\" cellpadding=\"1\" tooltip=\"Gas: "), EVMToolTips.__default.Gas(((this).dtor_op).dtor_opcode)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" \" ")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("target=\"_blank\" href=\"")), EVMToolTips.__default.gasRefLine), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\"")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">")), _3_gasLine), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("</TD>")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<TD width=\"1\" fixedsize=\"false\" align=\"left\" cellpadding=\"1\" ")), entryPortTag), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0x")), _1_formattedAddress), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" </TD>\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<TD width=\"1\" fixedsize=\"true\" style=\"Rounded\" BORDER=\"0\" BGCOLOR=\"")), (_0_cols).dtor__1), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\" align=\"left\" cellpadding=\"3\" ")), exitPortTag), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" href=\"")), EVMToolTips.__default.bytecodeRefLine), Int.__default.NatToString((EVMToolTips.__default.ToolTip(((this).dtor_op).dtor_opcode)).dtor__1)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\" target=\"_blank\" ")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" tooltip=\"")), (EVMToolTips.__default.ToolTip(((this).dtor_op).dtor_opcode)).dtor__0), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\" ")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<FONT color=\"")), (_0_cols).dtor__0), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\">")), ((this).dtor_op).Name()), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("</FONT>")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("</TD>"));
      Dafny.ISequence<Dafny.Rune> _5_arglineTD = (((new BigInteger(((this).dtor_arg).Count)).Sign == 1) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<TD width=\"1\" fixedsize=\"true\" align=\"left\">"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("  0x")), (this).dtor_arg), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("</TD>"))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")));
      Dafny.ISequence<Dafny.Rune> _6_lineTR = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<TR>"), _4_oplineTD), _5_arglineTD), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("</TR>"));
      Dafny.ISequence<Dafny.Rune> _7_itemTable = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<TABLE  border=\"0\" cellpadding=\"0\" cellborder=\"0\" CELLSPACING=\"1\">"), _6_lineTR), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("</TABLE>"));
      return _7_itemTable;
    }
    public bool IsTerminal() {
      return ((this).dtor_op).IsTerminal();
    }
    public bool IsJumpDest() {
      return ((this).dtor_op).IsJumpDest();
    }
    public bool IsJump() {
      return ((this).dtor_op).IsJump();
    }
    public BigInteger StackEffect() {
      return ((this).dtor_op).StackEffect();
    }
    public BigInteger WeakestPreOperands(BigInteger post) {
      return ((this).dtor_op).WeakestPreOperands(post);
    }
    public BigInteger WeakestPreCapacity(BigInteger post) {
      return ((this).dtor_op).WeakestPreCapacity(post);
    }
    public MiscTypes._IEither<StackElement._IStackElem, BigInteger> StackPosBackWardTracker(BigInteger pos_k) {
      EVMOpcodes._IOpcode _source0 = (this).dtor_op;
      {
        if (_source0.is_ArithOp) {
          BigInteger _0_pushes = _source0.dtor_pushes;
          BigInteger _1_pops = _source0.dtor_pops;
          if ((pos_k) >= (BigInteger.One)) {
            return MiscTypes.Either<StackElement._IStackElem, BigInteger>.create_Right((pos_k) + (BigInteger.One));
          } else {
            return MiscTypes.Either<StackElement._IStackElem, BigInteger>.create_Left(StackElement.StackElem.create_Random(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("More than one predecessor. Arithmetic operator with target 0")));
          }
        }
      }
      {
        if (_source0.is_CompOp) {
          BigInteger _2_pushes = _source0.dtor_pushes;
          BigInteger _3_pops = _source0.dtor_pops;
          if ((pos_k) >= (BigInteger.One)) {
            return MiscTypes.Either<StackElement._IStackElem, BigInteger>.create_Right(((pos_k) + (_3_pops)) - (_2_pushes));
          } else {
            return MiscTypes.Either<StackElement._IStackElem, BigInteger>.create_Left(StackElement.StackElem.create_Random(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("More than one predecessor. Comparison operator with target 0")));
          }
        }
      }
      {
        if (_source0.is_BitwiseOp) {
          BigInteger _4_pushes = _source0.dtor_pushes;
          BigInteger _5_pops = _source0.dtor_pops;
          if ((pos_k) >= (BigInteger.One)) {
            return MiscTypes.Either<StackElement._IStackElem, BigInteger>.create_Right(((pos_k) + (_5_pops)) - (_4_pushes));
          } else {
            return MiscTypes.Either<StackElement._IStackElem, BigInteger>.create_Left(StackElement.StackElem.create_Random(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("More than one predecessor. Bitwise operator with target 0")));
          }
        }
      }
      {
        if (_source0.is_KeccakOp) {
          BigInteger _6_pushes = _source0.dtor_pushes;
          BigInteger _7_pops = _source0.dtor_pops;
          if ((pos_k) >= (BigInteger.One)) {
            return MiscTypes.Either<StackElement._IStackElem, BigInteger>.create_Right((pos_k) + (BigInteger.One));
          } else {
            return MiscTypes.Either<StackElement._IStackElem, BigInteger>.create_Left(StackElement.StackElem.create_Random(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("More than one predecessor. Keccak operator with target 0")));
          }
        }
      }
      {
        if (_source0.is_EnvOp) {
          BigInteger _8_pushes = _source0.dtor_pushes;
          BigInteger _9_pops = _source0.dtor_pops;
          if (((_8_pushes) == (BigInteger.One)) && ((_9_pops).Sign == 0)) {
            if ((pos_k).Sign == 0) {
              return MiscTypes.Either<StackElement._IStackElem, BigInteger>.create_Left(StackElement.StackElem.create_Random(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("More than one predecessor. Env operator with target 0")));
            } else {
              return MiscTypes.Either<StackElement._IStackElem, BigInteger>.create_Right((pos_k) - (BigInteger.One));
            }
          } else if (((_8_pushes) == (BigInteger.One)) && ((_9_pops) == (BigInteger.One))) {
            if ((pos_k).Sign == 0) {
              return MiscTypes.Either<StackElement._IStackElem, BigInteger>.create_Left(StackElement.StackElem.create_Random(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("More than one predecessor. Env operator with target 0")));
            } else {
              return MiscTypes.Either<StackElement._IStackElem, BigInteger>.create_Right(pos_k);
            }
          } else {
            return MiscTypes.Either<StackElement._IStackElem, BigInteger>.create_Right(((pos_k) + (_9_pops)) - (_8_pushes));
          }
        }
      }
      {
        if (_source0.is_MemOp) {
          BigInteger _10_pushes = _source0.dtor_pushes;
          BigInteger _11_pops = _source0.dtor_pops;
          if ((_10_pushes).Sign == 0) {
            return MiscTypes.Either<StackElement._IStackElem, BigInteger>.create_Right((pos_k) + (new BigInteger(2)));
          } else {
            if ((pos_k).Sign == 0) {
              return MiscTypes.Either<StackElement._IStackElem, BigInteger>.create_Left(StackElement.StackElem.create_Random(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("More than one predecessor. Mem operator with target 0")));
            } else {
              return MiscTypes.Either<StackElement._IStackElem, BigInteger>.create_Right(pos_k);
            }
          }
        }
      }
      {
        if (_source0.is_StorageOp) {
          BigInteger _12_pushes = _source0.dtor_pushes;
          BigInteger _13_pops = _source0.dtor_pops;
          if ((_12_pushes).Sign == 0) {
            return MiscTypes.Either<StackElement._IStackElem, BigInteger>.create_Right((pos_k) + (new BigInteger(2)));
          } else {
            if ((pos_k).Sign == 0) {
              return MiscTypes.Either<StackElement._IStackElem, BigInteger>.create_Left(StackElement.StackElem.create_Random(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("More than one predecessor. Storage operator with target 0")));
            } else {
              return MiscTypes.Either<StackElement._IStackElem, BigInteger>.create_Right(pos_k);
            }
          }
        }
      }
      {
        if (_source0.is_JumpOp) {
          byte _14_opcode = _source0.dtor_opcode;
          if ((_14_opcode) == (EVMConstants.__default.JUMPDEST)) {
            return MiscTypes.Either<StackElement._IStackElem, BigInteger>.create_Right(pos_k);
          } else if (((EVMConstants.__default.JUMP) <= (_14_opcode)) && ((_14_opcode) <= (EVMConstants.__default.JUMPI))) {
            byte _15_k = (byte)(((byte)((_14_opcode) - (EVMConstants.__default.JUMP))) + ((byte)(1)));
            return MiscTypes.Either<StackElement._IStackElem, BigInteger>.create_Right((pos_k) + (new BigInteger(_15_k)));
          } else {
            return MiscTypes.Either<StackElement._IStackElem, BigInteger>.create_Left(StackElement.StackElem.create_Random(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Not implemented")));
          }
        }
      }
      {
        if (_source0.is_RunOp) {
          BigInteger _16_pushes = _source0.dtor_pushes;
          BigInteger _17_pops = _source0.dtor_pops;
          if ((pos_k).Sign == 0) {
            return MiscTypes.Either<StackElement._IStackElem, BigInteger>.create_Left(StackElement.StackElem.create_Random(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("More than one predecessor. Run operator with target 0")));
          } else {
            return MiscTypes.Either<StackElement._IStackElem, BigInteger>.create_Right((pos_k) - (BigInteger.One));
          }
        }
      }
      {
        if (_source0.is_StackOp) {
          byte _18_opcode = _source0.dtor_opcode;
          if (((EVMConstants.__default.PUSH0) <= (_18_opcode)) && ((_18_opcode) <= (EVMConstants.__default.PUSH32))) {
            if ((pos_k).Sign == 0) {
              return MiscTypes.Either<StackElement._IStackElem, BigInteger>.create_Left(StackElement.StackElem.create_Value(Instructions.__default.GetArgValuePush((this).dtor_arg)));
            } else {
              return MiscTypes.Either<StackElement._IStackElem, BigInteger>.create_Right((pos_k) - (BigInteger.One));
            }
          } else if (((EVMConstants.__default.DUP1) <= (_18_opcode)) && ((_18_opcode) <= (EVMConstants.__default.DUP16))) {
            return MiscTypes.Either<StackElement._IStackElem, BigInteger>.create_Right((((pos_k).Sign == 0) ? (new BigInteger((byte)((_18_opcode) - (EVMConstants.__default.DUP1)))) : ((pos_k) - (BigInteger.One))));
          } else if (((EVMConstants.__default.SWAP1) <= (_18_opcode)) && ((_18_opcode) <= (EVMConstants.__default.SWAP16))) {
            BigInteger _19_k = (new BigInteger((byte)((_18_opcode) - (EVMConstants.__default.SWAP1)))) + (BigInteger.One);
            return MiscTypes.Either<StackElement._IStackElem, BigInteger>.create_Right((((pos_k).Sign == 0) ? (_19_k) : ((((pos_k) == (_19_k)) ? (BigInteger.Zero) : (pos_k)))));
          } else {
            return MiscTypes.Either<StackElement._IStackElem, BigInteger>.create_Right((pos_k) + (BigInteger.One));
          }
        }
      }
      {
        if (_source0.is_LogOp) {
          BigInteger _20_pushes = _source0.dtor_pushes;
          BigInteger _21_pops = _source0.dtor_pops;
          return MiscTypes.Either<StackElement._IStackElem, BigInteger>.create_Right((pos_k) + (_21_pops));
        }
      }
      {
        BigInteger _22_pushes = _source0.dtor_pushes;
        BigInteger _23_pops = _source0.dtor_pops;
        if ((_22_pushes).Sign == 0) {
          return MiscTypes.Either<StackElement._IStackElem, BigInteger>.create_Right((pos_k) + (_23_pops));
        } else {
          if ((pos_k).Sign == 0) {
            return MiscTypes.Either<StackElement._IStackElem, BigInteger>.create_Left(StackElement.StackElem.create_Random(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("More than one predecessor. Sys operator with target 0")));
          } else {
            return MiscTypes.Either<StackElement._IStackElem, BigInteger>.create_Right((pos_k) + (_23_pops));
          }
        }
      }
    }
    public State._IAState NextState(State._IAState s, Dafny.ISequence<BigInteger> jumpDests, BigInteger exit)
    {
      EVMOpcodes._IOpcode _source0 = (this).dtor_op;
      {
        if (_source0.is_ArithOp) {
          BigInteger _0_pushes = _source0.dtor_pushes;
          BigInteger _1_pops = _source0.dtor_pops;
          if (((s).Size()) >= (_1_pops)) {
            return (((s).PopN(_1_pops)).PushNRandom(_0_pushes)).Skip(BigInteger.One);
          } else {
            return State.AState.create_Error(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Stack underflow"));
          }
        }
      }
      {
        if (_source0.is_CompOp) {
          BigInteger _2_pushes = _source0.dtor_pushes;
          BigInteger _3_pops = _source0.dtor_pops;
          if (((s).Size()) >= (_3_pops)) {
            return (((s).PopN(_3_pops)).PushNRandom(_2_pushes)).Skip(BigInteger.One);
          } else {
            return State.AState.create_Error(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Stack underflow"));
          }
        }
      }
      {
        if (_source0.is_BitwiseOp) {
          BigInteger _4_pushes = _source0.dtor_pushes;
          BigInteger _5_pops = _source0.dtor_pops;
          if (((s).Size()) >= (_5_pops)) {
            return (((s).PopN(_5_pops)).PushNRandom(_4_pushes)).Skip(BigInteger.One);
          } else {
            return State.AState.create_Error(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Stack underflow"));
          }
        }
      }
      {
        if (_source0.is_KeccakOp) {
          BigInteger _6_pushes = _source0.dtor_pushes;
          BigInteger _7_pops = _source0.dtor_pops;
          if (((s).Size()) >= (new BigInteger(2))) {
            return (((s).PopN(new BigInteger(2))).Push(StackElement.StackElem.create_Random(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))).Skip(BigInteger.One);
          } else {
            return State.AState.create_Error(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Stack underflow"));
          }
        }
      }
      {
        if (_source0.is_EnvOp) {
          BigInteger _8_pushes = _source0.dtor_pushes;
          BigInteger _9_pops = _source0.dtor_pops;
          if (((s).Size()) >= (_9_pops)) {
            return (((s).PopN(_9_pops)).PushNRandom(_8_pushes)).Skip(BigInteger.One);
          } else {
            return State.AState.create_Error(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("EnvOp error"));
          }
        }
      }
      {
        if (_source0.is_MemOp) {
          BigInteger _10_pushes = _source0.dtor_pushes;
          BigInteger _11_pops = _source0.dtor_pops;
          if (((s).Size()) >= (_11_pops)) {
            return (((s).PopN(_11_pops)).PushNRandom(_10_pushes)).Skip(BigInteger.One);
          } else {
            return State.AState.create_Error(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("MemOp error"));
          }
        }
      }
      {
        if (_source0.is_StorageOp) {
          BigInteger _12_pushes = _source0.dtor_pushes;
          BigInteger _13_pops = _source0.dtor_pops;
          if (((s).Size()) >= (_13_pops)) {
            return (((s).PopN(_13_pops)).PushNRandom(_12_pushes)).Skip(BigInteger.One);
          } else {
            return State.AState.create_Error(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Storage Op error"));
          }
        }
      }
      {
        if (_source0.is_JumpOp) {
          byte _14_opcode = _source0.dtor_opcode;
          BigInteger _15_pushes = _source0.dtor_pushes;
          BigInteger _16_pops = _source0.dtor_pops;
          if ((_14_opcode) == (EVMConstants.__default.JUMPDEST)) {
            return (s).Skip(BigInteger.One);
          } else if ((_14_opcode) == (EVMConstants.__default.JUMP)) {
            if (((s).Size()) >= (BigInteger.One)) {
              StackElement._IStackElem _source1 = (s).Peek(BigInteger.Zero);
              {
                if (_source1.is_Value) {
                  BigInteger _17_v = _source1.dtor_v;
                  return ((s).Pop()).Goto(_17_v);
                }
              }
              {
                return State.AState.create_Error(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Jump to Random() unknown PC error"));
              }
            } else {
              return State.AState.create_Error(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Cannot execute JUMP/exit false or stack underflow"));
            }
          } else if ((_14_opcode) == (EVMConstants.__default.JUMPI)) {
            if (((s).Size()) >= (new BigInteger(2))) {
              StackElement._IStackElem _source2 = (s).Peek(BigInteger.Zero);
              {
                if (_source2.is_Value) {
                  BigInteger _18_v = _source2.dtor_v;
                  if ((exit) >= (BigInteger.One)) {
                    return ((s).PopN(new BigInteger(2))).Goto(_18_v);
                  } else {
                    return ((s).PopN(new BigInteger(2))).Skip(BigInteger.One);
                  }
                }
              }
              {
                return State.AState.create_Error(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("JumpI to Random() error"));
              }
            } else {
              return State.AState.create_Error(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Cannot execute JUMPI/strack underflow"));
            }
          } else {
            return State.AState.create_Error(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("RJUMPs not implemented"));
          }
        }
      }
      {
        if (_source0.is_RunOp) {
          BigInteger _19_pushes = _source0.dtor_pushes;
          BigInteger _20_pops = _source0.dtor_pops;
          return ((s).Push(StackElement.StackElem.create_Random(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))).Skip(BigInteger.One);
        }
      }
      {
        if (_source0.is_StackOp) {
          byte _21_opcode = _source0.dtor_opcode;
          BigInteger _22_pushes = _source0.dtor_pushes;
          BigInteger _23_pops = _source0.dtor_pops;
          if (((_21_opcode) == (EVMConstants.__default.POP)) && (((s).Size()) >= (BigInteger.One))) {
            return ((s).Pop()).Skip(BigInteger.One);
          } else if (((EVMConstants.__default.PUSH0) <= (_21_opcode)) && ((_21_opcode) <= (EVMConstants.__default.PUSH32))) {
            StackElement._IStackElem _24_valToPush = (((jumpDests).Contains(Instructions.__default.GetArgValuePush((this).dtor_arg))) ? (StackElement.StackElem.create_Value(Instructions.__default.GetArgValuePush((this).dtor_arg))) : (StackElement.StackElem.create_Random(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))));
            return ((s).Push(_24_valToPush)).Skip((BigInteger.One) + (new BigInteger((byte)((_21_opcode) - (EVMConstants.__default.PUSH0)))));
          } else if ((((EVMConstants.__default.DUP1) <= (_21_opcode)) && ((_21_opcode) <= (EVMConstants.__default.DUP16))) && (((s).Size()) >= ((new BigInteger((byte)((_21_opcode) - (EVMConstants.__default.DUP1)))) + (BigInteger.One)))) {
            return ((s).Dup((new BigInteger((byte)((_21_opcode) - (EVMConstants.__default.DUP1)))) + (BigInteger.One))).Skip(BigInteger.One);
          } else if ((((EVMConstants.__default.SWAP1) <= (_21_opcode)) && ((_21_opcode) <= (EVMConstants.__default.SWAP16))) && (((s).Size()) > ((new BigInteger((byte)((_21_opcode) - (EVMConstants.__default.SWAP1)))) + (BigInteger.One)))) {
            return ((s).Swap((new BigInteger((byte)((_21_opcode) - (EVMConstants.__default.SWAP1)))) + (BigInteger.One))).Skip(BigInteger.One);
          } else {
            return State.AState.create_Error(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Stack Op error"));
          }
        }
      }
      {
        if (_source0.is_LogOp) {
          BigInteger _25_pushes = _source0.dtor_pushes;
          BigInteger _26_pops = _source0.dtor_pops;
          if (((s).Size()) >= (_26_pops)) {
            return ((s).PopN(_26_pops)).Skip(BigInteger.One);
          } else {
            return State.AState.create_Error(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("LogOp error"));
          }
        }
      }
      {
        byte _27_op = _source0.dtor_opcode;
        BigInteger _28_pushes = _source0.dtor_pushes;
        BigInteger _29_pops = _source0.dtor_pops;
        if ((((_27_op) == (EVMConstants.__default.INVALID)) || ((_27_op) == (EVMConstants.__default.STOP))) || ((_27_op) == (EVMConstants.__default.REVERT))) {
          return State.AState.create_Error(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("SysOp error"));
        } else if (((s).Size()) >= (_29_pops)) {
          return (((s).PopN(_29_pops)).PushNRandom(_28_pushes)).Skip(BigInteger.One);
        } else {
          return State.AState.create_Error(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("SysOp error"));
        }
      }
    }
    public WeakPre._ICond WPre(WeakPre._ICond c) {
      EVMOpcodes._IOpcode _source0 = (this).dtor_op;
      {
        if (_source0.is_ArithOp) {
          BigInteger _0_pushes = _source0.dtor_pushes;
          BigInteger _1_pops = _source0.dtor_pops;
          if (((c).TrackedPos()).Contains(BigInteger.Zero)) {
            return WeakPre.Cond.create_StFalse();
          } else {
            Dafny.ISequence<BigInteger> _2_shiftByOne = MiscTypes.__default.Map<BigInteger, BigInteger>((c).TrackedPos(), ((System.Func<BigInteger, BigInteger>)((_3_pos) => {
              return (_3_pos) + (BigInteger.One);
            })));
            return WeakPre.Cond.create_StCond(_2_shiftByOne, (c).TrackedVals());
          }
        }
      }
      {
        if (_source0.is_CompOp) {
          BigInteger _4_pushes = _source0.dtor_pushes;
          BigInteger _5_pops = _source0.dtor_pops;
          if (((c).TrackedPos()).Contains(BigInteger.Zero)) {
            return WeakPre.Cond.create_StFalse();
          } else {
            Dafny.ISequence<BigInteger> _6_shiftBy = MiscTypes.__default.Map<BigInteger, BigInteger>((c).TrackedPos(), Dafny.Helpers.Id<Func<BigInteger, BigInteger, Func<BigInteger, BigInteger>>>((_7_pops, _8_pushes) => ((System.Func<BigInteger, BigInteger>)((_9_pos) => {
              return ((_9_pos) + (_7_pops)) - (_8_pushes);
            })))(_5_pops, _4_pushes));
            return WeakPre.Cond.create_StCond(_6_shiftBy, (c).TrackedVals());
          }
        }
      }
      {
        if (_source0.is_BitwiseOp) {
          BigInteger _10_pushes = _source0.dtor_pushes;
          BigInteger _11_pops = _source0.dtor_pops;
          if (((c).TrackedPos()).Contains(BigInteger.Zero)) {
            return WeakPre.Cond.create_StFalse();
          } else {
            Dafny.ISequence<BigInteger> _12_shiftBy = MiscTypes.__default.Map<BigInteger, BigInteger>((c).TrackedPos(), Dafny.Helpers.Id<Func<BigInteger, BigInteger, Func<BigInteger, BigInteger>>>((_13_pops, _14_pushes) => ((System.Func<BigInteger, BigInteger>)((_15_pos) => {
              return ((_15_pos) + (_13_pops)) - (_14_pushes);
            })))(_11_pops, _10_pushes));
            return WeakPre.Cond.create_StCond(_12_shiftBy, (c).TrackedVals());
          }
        }
      }
      {
        if (_source0.is_KeccakOp) {
          BigInteger _16_pushes = _source0.dtor_pushes;
          BigInteger _17_pops = _source0.dtor_pops;
          if (((c).TrackedPos()).Contains(BigInteger.Zero)) {
            return WeakPre.Cond.create_StFalse();
          } else {
            Dafny.ISequence<BigInteger> _18_shiftByOne = MiscTypes.__default.Map<BigInteger, BigInteger>((c).TrackedPos(), ((System.Func<BigInteger, BigInteger>)((_19_pos) => {
              return (_19_pos) + (BigInteger.One);
            })));
            return WeakPre.Cond.create_StCond(_18_shiftByOne, (c).TrackedVals());
          }
        }
      }
      {
        if (_source0.is_EnvOp) {
          BigInteger _20_pushes = _source0.dtor_pushes;
          BigInteger _21_pops = _source0.dtor_pops;
          if (((_20_pushes) == (BigInteger.One)) && ((_21_pops).Sign == 0)) {
            if (((c).TrackedPos()).Contains(BigInteger.Zero)) {
              return WeakPre.Cond.create_StFalse();
            } else {
              Dafny.ISequence<BigInteger> _22_shiftByOne = MiscTypes.__default.Map<BigInteger, BigInteger>((c).TrackedPos(), ((System.Func<BigInteger, BigInteger>)((_23_pos) => {
                return (_23_pos) - (BigInteger.One);
              })));
              return WeakPre.Cond.create_StCond(_22_shiftByOne, (c).TrackedVals());
            }
          } else if (((_20_pushes) == (BigInteger.One)) && ((_21_pops) == (BigInteger.One))) {
            if (((c).TrackedPos()).Contains(BigInteger.Zero)) {
              return WeakPre.Cond.create_StFalse();
            } else {
              return c;
            }
          } else {
            Dafny.ISequence<BigInteger> _24_shiftBy = MiscTypes.__default.Map<BigInteger, BigInteger>((c).TrackedPos(), Dafny.Helpers.Id<Func<BigInteger, BigInteger, Func<BigInteger, BigInteger>>>((_25_pops, _26_pushes) => ((System.Func<BigInteger, BigInteger>)((_27_pos) => {
              return ((_27_pos) + (_25_pops)) - (_26_pushes);
            })))(_21_pops, _20_pushes));
            return WeakPre.Cond.create_StCond(_24_shiftBy, (c).TrackedVals());
          }
        }
      }
      {
        if (_source0.is_MemOp) {
          BigInteger _28_pushes = _source0.dtor_pushes;
          BigInteger _29_pops = _source0.dtor_pops;
          if ((_28_pushes).Sign == 0) {
            Dafny.ISequence<BigInteger> _30_shiftByTwo = MiscTypes.__default.Map<BigInteger, BigInteger>((c).TrackedPos(), ((System.Func<BigInteger, BigInteger>)((_31_pos) => {
              return (_31_pos) + (new BigInteger(2));
            })));
            return WeakPre.Cond.create_StCond(_30_shiftByTwo, (c).TrackedVals());
          } else {
            if (((c).TrackedPos()).Contains(BigInteger.Zero)) {
              return WeakPre.Cond.create_StFalse();
            } else {
              return c;
            }
          }
        }
      }
      {
        if (_source0.is_StorageOp) {
          BigInteger _32_pushes = _source0.dtor_pushes;
          BigInteger _33_pops = _source0.dtor_pops;
          if ((_32_pushes).Sign == 0) {
            Dafny.ISequence<BigInteger> _34_shiftByTwo = MiscTypes.__default.Map<BigInteger, BigInteger>((c).TrackedPos(), ((System.Func<BigInteger, BigInteger>)((_35_pos) => {
              return (_35_pos) + (new BigInteger(2));
            })));
            return WeakPre.Cond.create_StCond(_34_shiftByTwo, (c).TrackedVals());
          } else {
            if (((c).TrackedPos()).Contains(BigInteger.Zero)) {
              return WeakPre.Cond.create_StFalse();
            } else {
              return c;
            }
          }
        }
      }
      {
        if (_source0.is_JumpOp) {
          byte _36_opcode = _source0.dtor_opcode;
          if ((_36_opcode) == (EVMConstants.__default.JUMPDEST)) {
            return c;
          } else if (((EVMConstants.__default.JUMP) <= (_36_opcode)) && ((_36_opcode) <= (EVMConstants.__default.JUMPI))) {
            byte _37_k = (byte)(((byte)((_36_opcode) - (EVMConstants.__default.JUMP))) + ((byte)(1)));
            Dafny.ISequence<BigInteger> _38_shiftBy = MiscTypes.__default.Map<BigInteger, BigInteger>((c).TrackedPos(), Dafny.Helpers.Id<Func<byte, Func<BigInteger, BigInteger>>>((_39_k) => ((System.Func<BigInteger, BigInteger>)((_40_pos) => {
              return (_40_pos) + (new BigInteger(_39_k));
            })))(_37_k));
            return WeakPre.Cond.create_StCond(_38_shiftBy, (c).TrackedVals());
          } else {
            return WeakPre.Cond.create_StFalse();
          }
        }
      }
      {
        if (_source0.is_RunOp) {
          byte _41_opcode = _source0.dtor_opcode;
          if (((c).TrackedPos()).Contains(BigInteger.Zero)) {
            return WeakPre.Cond.create_StFalse();
          } else {
            Dafny.ISequence<BigInteger> _42_shiftByOne = MiscTypes.__default.Map<BigInteger, BigInteger>((c).TrackedPos(), ((System.Func<BigInteger, BigInteger>)((_43_pos) => {
              return (_43_pos) - (BigInteger.One);
            })));
            return WeakPre.Cond.create_StCond(_42_shiftByOne, (c).TrackedVals());
          }
        }
      }
      {
        if (_source0.is_StackOp) {
          byte _44_opcode = _source0.dtor_opcode;
          if (((EVMConstants.__default.PUSH0) <= (_44_opcode)) && ((_44_opcode) <= (EVMConstants.__default.PUSH32))) {
            MiscTypes._IOption<BigInteger> _source1 = MiscTypes.__default.Find<BigInteger>((c).TrackedPos(), BigInteger.Zero);
            {
              if (_source1.is_None) {
                Dafny.ISequence<BigInteger> _45_shiftByMinusOne = MiscTypes.__default.Map<BigInteger, BigInteger>((c).TrackedPos(), ((System.Func<BigInteger, BigInteger>)((_46_pos) => {
                  return (_46_pos) - (BigInteger.One);
                })));
                return WeakPre.Cond.create_StCond(_45_shiftByMinusOne, (c).TrackedVals());
              }
            }
            {
              BigInteger _47_i = _source1.dtor_v;
              MiscTypes._IOption<BigInteger> _48_argVal = Hex.__default.HexToU256(Dafny.Sequence<Dafny.Rune>.Concat(((System.Func<Dafny.ISequence<Dafny.Rune>>) (() => {
                BigInteger dim10 = (new BigInteger(64)) - (new BigInteger(((this).dtor_arg).Count));
                var arr10 = new Dafny.Rune[Dafny.Helpers.ToIntChecked(dim10, "array size exceeds memory limit")];
                for (int i10 = 0; i10 < dim10; i10++) {
                  var _49___v142 = (BigInteger) i10;
                  arr10[(int)(_49___v142)] = new Dafny.Rune('0');
                }
                return Dafny.Sequence<Dafny.Rune>.FromArray(arr10);
              }))(), (this).dtor_arg));
              if (((c).TrackedValAt(_47_i)) == ((_48_argVal).Extract())) {
                Dafny.ISequence<BigInteger> _50_filtered = Dafny.Sequence<BigInteger>.Concat(((c).TrackedPos()).Take(_47_i), ((c).TrackedPos()).Drop((_47_i) + (BigInteger.One)));
                if ((new BigInteger((_50_filtered).Count)).Sign == 0) {
                  return WeakPre.Cond.create_StTrue();
                } else {
                  Dafny.ISequence<BigInteger> _51_shiftByMinusOne = MiscTypes.__default.Map<BigInteger, BigInteger>(_50_filtered, ((System.Func<BigInteger, BigInteger>)((_52_pos) => {
                    return (_52_pos) - (BigInteger.One);
                  })));
                  return WeakPre.Cond.create_StCond(_51_shiftByMinusOne, Dafny.Sequence<BigInteger>.Concat(((c).TrackedVals()).Take(_47_i), ((c).TrackedVals()).Drop((_47_i) + (BigInteger.One))));
                }
              } else {
                return WeakPre.Cond.create_StFalse();
              }
            }
          } else if (((EVMConstants.__default.DUP1) <= (_44_opcode)) && ((_44_opcode) <= (EVMConstants.__default.DUP16))) {
            MiscTypes._IOption<BigInteger> _source2 = MiscTypes.__default.Find<BigInteger>((c).TrackedPos(), BigInteger.Zero);
            {
              if (_source2.is_None) {
                Dafny.ISequence<BigInteger> _53_shiftByMinusOneButZero = MiscTypes.__default.Map<BigInteger, BigInteger>((c).TrackedPos(), ((System.Func<BigInteger, BigInteger>)((_54_pos) => {
                  return (_54_pos) - (BigInteger.One);
                })));
                return WeakPre.Cond.create_StCond(_53_shiftByMinusOneButZero, (c).TrackedVals());
              }
            }
            {
              BigInteger _55_index0 = _source2.dtor_v;
              MiscTypes._IOption<BigInteger> _source3 = MiscTypes.__default.Find<BigInteger>((c).TrackedPos(), (new BigInteger((byte)((_44_opcode) - (EVMConstants.__default.DUP1)))) + (BigInteger.One));
              {
                if (_source3.is_Some) {
                  BigInteger _56_index = _source3.dtor_v;
                  if (((c).TrackedValAt(_55_index0)) == ((c).TrackedValAt(_56_index))) {
                    Dafny.ISequence<BigInteger> _57_filtered = Dafny.Sequence<BigInteger>.Concat(((c).TrackedPos()).Take(_55_index0), ((c).TrackedPos()).Drop((_55_index0) + (BigInteger.One)));
                    Dafny.ISequence<BigInteger> _58_shiftByMinusOne = MiscTypes.__default.Map<BigInteger, BigInteger>(_57_filtered, ((System.Func<BigInteger, BigInteger>)((_59_pos) => {
                      return (_59_pos) - (BigInteger.One);
                    })));
                    return WeakPre.Cond.create_StCond(_58_shiftByMinusOne, Dafny.Sequence<BigInteger>.Concat(((c).TrackedVals()).Take(_55_index0), ((c).TrackedVals()).Drop((_55_index0) + (BigInteger.One))));
                  } else {
                    return WeakPre.Cond.create_StFalse();
                  }
                }
              }
              {
                Dafny.ISequence<BigInteger> _60_shiftByMinusOneButZero = MiscTypes.__default.Map<BigInteger, BigInteger>((c).TrackedPos(), Dafny.Helpers.Id<Func<byte, Func<BigInteger, BigInteger>>>((_61_opcode) => ((System.Func<BigInteger, BigInteger>)((_62_pos) => {
                  return (((_62_pos).Sign == 0) ? (new BigInteger((byte)((_61_opcode) - (EVMConstants.__default.DUP1)))) : ((_62_pos) - (BigInteger.One)));
                })))(_44_opcode));
                return WeakPre.Cond.create_StCond(_60_shiftByMinusOneButZero, (c).TrackedVals());
              }
            }
          } else if (((EVMConstants.__default.SWAP1) <= (_44_opcode)) && ((_44_opcode) <= (EVMConstants.__default.SWAP16))) {
            BigInteger _63_k = (new BigInteger((byte)((_44_opcode) - (EVMConstants.__default.SWAP1)))) + (BigInteger.One);
            Dafny.ISequence<BigInteger> _64_swapZeroAndk = MiscTypes.__default.Map<BigInteger, BigInteger>((c).TrackedPos(), Dafny.Helpers.Id<Func<BigInteger, Func<BigInteger, BigInteger>>>((_65_k) => ((System.Func<BigInteger, BigInteger>)((_66_pos) => {
              return (((_66_pos).Sign == 0) ? (_65_k) : ((((_66_pos) == (_65_k)) ? (BigInteger.Zero) : (_66_pos))));
            })))(_63_k));
            return WeakPre.Cond.create_StCond(_64_swapZeroAndk, (c).TrackedVals());
          } else {
            Dafny.ISequence<BigInteger> _67_shiftByOne = MiscTypes.__default.Map<BigInteger, BigInteger>((c).TrackedPos(), ((System.Func<BigInteger, BigInteger>)((_68_i) => {
              return (_68_i) + (BigInteger.One);
            })));
            return WeakPre.Cond.create_StCond(_67_shiftByOne, (c).TrackedVals());
          }
        }
      }
      {
        if (_source0.is_LogOp) {
          byte _69_opcode = _source0.dtor_opcode;
          BigInteger _70_pushes = _source0.dtor_pushes;
          BigInteger _71_pops = _source0.dtor_pops;
          Dafny.ISequence<BigInteger> _72_shiftBy = MiscTypes.__default.Map<BigInteger, BigInteger>((c).TrackedPos(), Dafny.Helpers.Id<Func<BigInteger, Func<BigInteger, BigInteger>>>((_73_pops) => ((System.Func<BigInteger, BigInteger>)((_74_pos) => {
            return (_74_pos) + (_73_pops);
          })))(_71_pops));
          return WeakPre.Cond.create_StCond(_72_shiftBy, (c).TrackedVals());
        }
      }
      {
        byte _75_opcode = _source0.dtor_opcode;
        BigInteger _76_pushes = _source0.dtor_pushes;
        BigInteger _77_pops = _source0.dtor_pops;
        if ((_76_pushes).Sign == 0) {
          Dafny.ISequence<BigInteger> _78_shiftBy = MiscTypes.__default.Map<BigInteger, BigInteger>((c).TrackedPos(), Dafny.Helpers.Id<Func<BigInteger, Func<BigInteger, BigInteger>>>((_79_pops) => ((System.Func<BigInteger, BigInteger>)((_80_pos) => {
            return (_80_pos) + (_79_pops);
          })))(_77_pops));
          return WeakPre.Cond.create_StCond(_78_shiftBy, (c).TrackedVals());
        } else {
          if (((c).TrackedPos()).Contains(BigInteger.Zero)) {
            return WeakPre.Cond.create_StFalse();
          } else {
            Dafny.ISequence<BigInteger> _81_shiftBy = MiscTypes.__default.Map<BigInteger, BigInteger>((c).TrackedPos(), Dafny.Helpers.Id<Func<BigInteger, Func<BigInteger, BigInteger>>>((_82_pops) => ((System.Func<BigInteger, BigInteger>)((_83_pos) => {
              return (_83_pos) + (_82_pops);
            })))(_77_pops));
            return WeakPre.Cond.create_StCond(_81_shiftBy, (c).TrackedVals());
          }
        }
      }
    }
  }
} // end of namespace Instructions
namespace BinaryDecoder {

  public partial class __default {
    public static Dafny.ISequence<Instructions._IInstruction> Disassemble(Dafny.ISequence<Dafny.Rune> s, Dafny.ISequence<Instructions._IInstruction> p, BigInteger next)
    {
    TAIL_CALL_START: ;
      if ((new BigInteger((s).Count)).Sign == 0) {
        return p;
      } else if ((new BigInteger((s).Count)) == (BigInteger.One)) {
        return Dafny.Sequence<Instructions._IInstruction>.Concat(p, Dafny.Sequence<Instructions._IInstruction>.FromElements(Instructions.Instruction.create(OpcodeDecoder.__default.Decode(EVMConstants.__default.INVALID), Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Odd number of characters ending in "), s), next)));
      } else {
        MiscTypes._IOption<byte> _source0 = Hex.__default.HexToU8((s).Take(new BigInteger(2)));
        {
          if (_source0.is_None) {
            return Dafny.Sequence<Instructions._IInstruction>.Concat(p, Dafny.Sequence<Instructions._IInstruction>.FromElements(Instructions.Instruction.create(OpcodeDecoder.__default.Decode(EVMConstants.__default.INVALID), Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("'"), (s).Take(new BigInteger(2))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("' is not an Hex number")), next)));
          }
        }
        {
          byte _0_v = _source0.dtor_v;
          EVMOpcodes._IOpcode _1_op = OpcodeDecoder.__default.Decode(_0_v);
          if (((_1_op).Args()).Sign == 1) {
            if (((new BigInteger(((s).Drop(new BigInteger(2))).Count)) < ((new BigInteger(2)) * ((_1_op).Args()))) || (!(Hex.__default.IsHexString(((s).Drop(new BigInteger(2))).Take((new BigInteger(2)) * ((_1_op).Args())))))) {
              return Dafny.Sequence<Instructions._IInstruction>.Concat(p, Dafny.Sequence<Instructions._IInstruction>.FromElements(Instructions.Instruction.create(OpcodeDecoder.__default.Decode(EVMConstants.__default.INVALID), Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("not enough arguments for opcode "), (_1_op).dtor_name), next)));
            } else {
              Dafny.ISequence<Dafny.Rune> _in0 = ((s).Drop(new BigInteger(2))).Drop((new BigInteger(2)) * ((_1_op).Args()));
              Dafny.ISequence<Instructions._IInstruction> _in1 = Dafny.Sequence<Instructions._IInstruction>.Concat(p, Dafny.Sequence<Instructions._IInstruction>.FromElements(Instructions.Instruction.create(_1_op, ((s).Drop(new BigInteger(2))).Take((new BigInteger(2)) * ((_1_op).Args())), next)));
              BigInteger _in2 = ((next) + (BigInteger.One)) + ((_1_op).Args());
              s = _in0;
              p = _in1;
              next = _in2;
              goto TAIL_CALL_START;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _in3 = (s).Drop(new BigInteger(2));
            Dafny.ISequence<Instructions._IInstruction> _in4 = Dafny.Sequence<Instructions._IInstruction>.Concat(p, Dafny.Sequence<Instructions._IInstruction>.FromElements(Instructions.Instruction.create(_1_op, Dafny.Sequence<Dafny.Rune>.FromElements(), next)));
            BigInteger _in5 = (next) + (BigInteger.One);
            s = _in3;
            p = _in4;
            next = _in5;
            goto TAIL_CALL_START;
          }
        }
      }
    }
    public static Dafny.ISequence<Instructions._IInstruction> DisassembleU8(Dafny.ISequence<byte> s, Dafny.ISequence<Instructions._IInstruction> p, BigInteger next)
    {
    TAIL_CALL_START: ;
      if ((new BigInteger((s).Count)).Sign == 0) {
        return p;
      } else {
        EVMOpcodes._IOpcode _0_op = OpcodeDecoder.__default.Decode((s).Select(BigInteger.Zero));
        if (((_0_op).Args()).Sign == 1) {
          if ((new BigInteger(((s).Drop(BigInteger.One)).Count)) < ((_0_op).Args())) {
            return Dafny.Sequence<Instructions._IInstruction>.Concat(p, Dafny.Sequence<Instructions._IInstruction>.FromElements(Instructions.Instruction.create(OpcodeDecoder.__default.Decode(EVMConstants.__default.INVALID), Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("not enough arguments for opcode "), (_0_op).dtor_name), next)));
          } else {
            Dafny.ISequence<byte> _in0 = ((s).Drop(BigInteger.One)).Drop((_0_op).Args());
            Dafny.ISequence<Instructions._IInstruction> _in1 = Dafny.Sequence<Instructions._IInstruction>.Concat(p, Dafny.Sequence<Instructions._IInstruction>.FromElements(Instructions.Instruction.create(_0_op, Hex.__default.HexHelper(((s).Drop(BigInteger.One)).Take((_0_op).Args())), next)));
            BigInteger _in2 = ((next) + (BigInteger.One)) + ((_0_op).Args());
            s = _in0;
            p = _in1;
            next = _in2;
            goto TAIL_CALL_START;
          }
        } else {
          Dafny.ISequence<byte> _in3 = (s).Drop(BigInteger.One);
          Dafny.ISequence<Instructions._IInstruction> _in4 = Dafny.Sequence<Instructions._IInstruction>.Concat(p, Dafny.Sequence<Instructions._IInstruction>.FromElements(Instructions.Instruction.create(_0_op, Dafny.Sequence<Dafny.Rune>.FromElements(), next)));
          BigInteger _in5 = (next) + (BigInteger.One);
          s = _in3;
          p = _in4;
          next = _in5;
          goto TAIL_CALL_START;
        }
      }
    }
  }
} // end of namespace BinaryDecoder
namespace LinSegments {

  public partial class __default {
    public static BigInteger StackEffectHelper(Dafny.ISequence<Instructions._IInstruction> xs) {
      BigInteger _0___accumulator = BigInteger.Zero;
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return (BigInteger.Zero) + (_0___accumulator);
      } else {
        _0___accumulator = (_0___accumulator) + (((xs).Select(BigInteger.Zero)).StackEffect());
        Dafny.ISequence<Instructions._IInstruction> _in0 = (xs).Drop(BigInteger.One);
        xs = _in0;
        goto TAIL_CALL_START;
      }
    }
    public static BigInteger WeakestPreCapacityHelper(Dafny.ISequence<Instructions._IInstruction> xs, BigInteger postCond)
    {
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return postCond;
      } else {
        Instructions._IInstruction _0_lastI = (xs).Select((new BigInteger((xs).Count)) - (BigInteger.One));
        BigInteger _1_e = (_0_lastI).WeakestPreCapacity(postCond);
        Dafny.ISequence<Instructions._IInstruction> _in0 = (xs).Take((new BigInteger((xs).Count)) - (BigInteger.One));
        BigInteger _in1 = _1_e;
        xs = _in0;
        postCond = _in1;
        goto TAIL_CALL_START;
      }
    }
    public static State._IAState RunIns(Dafny.ISequence<Instructions._IInstruction> xs, State._IAState s, Dafny.ISequence<BigInteger> jumpDests)
    {
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return s;
      } else {
        State._IAState _0_next = ((xs).Select(BigInteger.Zero)).NextState(s, jumpDests, BigInteger.Zero);
        State._IAState _source0 = _0_next;
        {
          if (_source0.is_Error) {
            return _0_next;
          }
        }
        {
          Dafny.ISequence<Instructions._IInstruction> _in0 = (xs).Drop(BigInteger.One);
          State._IAState _in1 = _0_next;
          Dafny.ISequence<BigInteger> _in2 = jumpDests;
          xs = _in0;
          s = _in1;
          jumpDests = _in2;
          goto TAIL_CALL_START;
        }
      }
    }
    public static WeakPre._ICond WPreIns(Dafny.ISequence<Instructions._IInstruction> xs, WeakPre._ICond c)
    {
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return c;
      } else if (!((c).is_StCond)) {
        return c;
      } else {
        WeakPre._ICond _0_c1 = ((xs).Select((new BigInteger((xs).Count)) - (BigInteger.One))).WPre(c);
        Dafny.ISequence<Instructions._IInstruction> _in0 = (xs).Take((new BigInteger((xs).Count)) - (BigInteger.One));
        WeakPre._ICond _in1 = _0_c1;
        xs = _in0;
        c = _in1;
        goto TAIL_CALL_START;
      }
    }
    public static WeakPre._ICond WPreSeqSegs(Dafny.ISequence<BigInteger> path, Dafny.ISequence<BigInteger> exits, WeakPre._ICond c, Dafny.ISequence<LinSegments._ILinSeg> xs, BigInteger tgtPC)
    {
    TAIL_CALL_START: ;
      if ((new BigInteger((path).Count)).Sign == 0) {
        return c;
      } else {
        WeakPre._ICond _0_w1 = ((xs).Select((path).Select((new BigInteger((path).Count)) - (BigInteger.One)))).WPre(c);
        WeakPre._ICond _1_wp2 = ((xs).Select((path).Select((new BigInteger((path).Count)) - (BigInteger.One)))).LeadsTo(tgtPC, (exits).Select((new BigInteger((exits).Count)) - (BigInteger.One)));
        Dafny.ISequence<BigInteger> _in0 = (path).Take((new BigInteger((path).Count)) - (BigInteger.One));
        Dafny.ISequence<BigInteger> _in1 = (exits).Take((new BigInteger((exits).Count)) - (BigInteger.One));
        WeakPre._ICond _in2 = (_0_w1).And(_1_wp2);
        Dafny.ISequence<LinSegments._ILinSeg> _in3 = xs;
        BigInteger _in4 = ((xs).Select((path).Select((new BigInteger((path).Count)) - (BigInteger.One)))).StartAddress();
        path = _in0;
        exits = _in1;
        c = _in2;
        xs = _in3;
        tgtPC = _in4;
        goto TAIL_CALL_START;
      }
    }
    public static bool EquivSeg(LinSegments._ILinSeg s1, LinSegments._ILinSeg s2)
    {
      LinSegments._ILinSeg _source0 = s1;
      {
        if (_source0.is_JUMPSeg) {
          return ((((s2).is_JUMPSeg) && (((new BigInteger(((s1).Ins()).Count)) == (new BigInteger(((s2).Ins()).Count))) && ((new BigInteger(((s2).Ins()).Count)) >= (new BigInteger(2))))) && ((((EVMConstants.__default.PUSH1) <= (((((s1).dtor_ins).Select((new BigInteger(((s1).dtor_ins).Count)) - (BigInteger.One))).dtor_op).dtor_opcode)) && ((((((s1).dtor_ins).Select((new BigInteger(((s1).dtor_ins).Count)) - (BigInteger.One))).dtor_op).dtor_opcode) == (((((s2).dtor_ins).Select((new BigInteger(((s1).dtor_ins).Count)) - (BigInteger.One))).dtor_op).dtor_opcode))) && ((((((s2).dtor_ins).Select((new BigInteger(((s1).dtor_ins).Count)) - (BigInteger.One))).dtor_op).dtor_opcode) <= (EVMConstants.__default.PUSH32)))) && (Dafny.Helpers.Id<Func<LinSegments._ILinSeg, LinSegments._ILinSeg, bool>>((_0_s1, _1_s2) => Dafny.Helpers.Quantifier<BigInteger>(Dafny.Helpers.IntegerRange(BigInteger.Zero, (new BigInteger(((_0_s1).dtor_ins).Count)) - (BigInteger.One)), true, (((_forall_var_0) => {
            BigInteger _2_i = (BigInteger)_forall_var_0;
            return !(((_2_i).Sign != -1) && ((_2_i) < ((new BigInteger(((_0_s1).dtor_ins).Count)) - (BigInteger.One)))) || ((((_0_s1).dtor_ins).Select(_2_i)).Equiv(((_1_s2).dtor_ins).Select(_2_i)));
          }))))(s1, s2));
        }
      }
      {
        if (_source0.is_JUMPISeg) {
          return ((((s2).is_JUMPISeg) && (((new BigInteger(((s1).Ins()).Count)) == (new BigInteger(((s2).Ins()).Count))) && ((new BigInteger(((s2).Ins()).Count)) >= (new BigInteger(2))))) && ((((EVMConstants.__default.PUSH1) <= (((((s1).dtor_ins).Select((new BigInteger(((s1).dtor_ins).Count)) - (BigInteger.One))).dtor_op).dtor_opcode)) && ((((((s1).dtor_ins).Select((new BigInteger(((s1).dtor_ins).Count)) - (BigInteger.One))).dtor_op).dtor_opcode) == (((((s2).dtor_ins).Select((new BigInteger(((s1).dtor_ins).Count)) - (BigInteger.One))).dtor_op).dtor_opcode))) && ((((((s2).dtor_ins).Select((new BigInteger(((s1).dtor_ins).Count)) - (BigInteger.One))).dtor_op).dtor_opcode) <= (EVMConstants.__default.PUSH32)))) && (Dafny.Helpers.Id<Func<LinSegments._ILinSeg, LinSegments._ILinSeg, bool>>((_3_s1, _4_s2) => Dafny.Helpers.Quantifier<BigInteger>(Dafny.Helpers.IntegerRange(BigInteger.Zero, (new BigInteger(((_3_s1).dtor_ins).Count)) - (BigInteger.One)), true, (((_forall_var_1) => {
            BigInteger _5_i = (BigInteger)_forall_var_1;
            return !(((_5_i).Sign != -1) && ((_5_i) < ((new BigInteger(((_3_s1).dtor_ins).Count)) - (BigInteger.One)))) || ((((_3_s1).dtor_ins).Select(_5_i)).Equiv(((_4_s2).dtor_ins).Select(_5_i)));
          }))))(s1, s2));
        }
      }
      {
        if (_source0.is_RETURNSeg) {
          return (((s2).is_RETURNSeg) && ((new BigInteger(((s1).Ins()).Count)) == (new BigInteger(((s2).Ins()).Count)))) && (Dafny.Helpers.Id<Func<LinSegments._ILinSeg, LinSegments._ILinSeg, bool>>((_6_s1, _7_s2) => Dafny.Helpers.Quantifier<BigInteger>(Dafny.Helpers.IntegerRange(BigInteger.Zero, new BigInteger(((_6_s1).Ins()).Count)), true, (((_forall_var_2) => {
            BigInteger _8_i = (BigInteger)_forall_var_2;
            return !(((_8_i).Sign != -1) && ((_8_i) < (new BigInteger(((_6_s1).Ins()).Count)))) || ((((_6_s1).Ins()).Select(_8_i)).Equiv(((_7_s2).Ins()).Select(_8_i)));
          }))))(s1, s2));
        }
      }
      {
        if (_source0.is_STOPSeg) {
          return (((s2).is_STOPSeg) && ((new BigInteger(((s1).Ins()).Count)) == (new BigInteger(((s2).Ins()).Count)))) && (Dafny.Helpers.Id<Func<LinSegments._ILinSeg, LinSegments._ILinSeg, bool>>((_9_s1, _10_s2) => Dafny.Helpers.Quantifier<BigInteger>(Dafny.Helpers.IntegerRange(BigInteger.Zero, new BigInteger(((_9_s1).Ins()).Count)), true, (((_forall_var_3) => {
            BigInteger _11_i = (BigInteger)_forall_var_3;
            return !(((_11_i).Sign != -1) && ((_11_i) < (new BigInteger(((_9_s1).Ins()).Count)))) || ((((_9_s1).Ins()).Select(_11_i)).Equiv(((_10_s2).Ins()).Select(_11_i)));
          }))))(s1, s2));
        }
      }
      {
        if (_source0.is_CONTSeg) {
          return (((s2).is_CONTSeg) && ((new BigInteger(((s1).Ins()).Count)) == (new BigInteger(((s2).Ins()).Count)))) && (Dafny.Helpers.Id<Func<LinSegments._ILinSeg, LinSegments._ILinSeg, bool>>((_12_s1, _13_s2) => Dafny.Helpers.Quantifier<BigInteger>(Dafny.Helpers.IntegerRange(BigInteger.Zero, new BigInteger(((_12_s1).Ins()).Count)), true, (((_forall_var_4) => {
            BigInteger _14_i = (BigInteger)_forall_var_4;
            return !(((_14_i).Sign != -1) && ((_14_i) < (new BigInteger(((_12_s1).Ins()).Count)))) || ((((_12_s1).Ins()).Select(_14_i)).Equiv(((_13_s2).Ins()).Select(_14_i)));
          }))))(s1, s2));
        }
      }
      {
        return (((s2).is_INVALIDSeg) && ((new BigInteger(((s1).Ins()).Count)) == (new BigInteger(((s2).Ins()).Count)))) && (Dafny.Helpers.Id<Func<LinSegments._ILinSeg, LinSegments._ILinSeg, bool>>((_15_s1, _16_s2) => Dafny.Helpers.Quantifier<BigInteger>(Dafny.Helpers.IntegerRange(BigInteger.Zero, new BigInteger(((_15_s1).Ins()).Count)), true, (((_forall_var_5) => {
          BigInteger _17_i = (BigInteger)_forall_var_5;
          return !(((_17_i).Sign != -1) && ((_17_i) < (new BigInteger(((_15_s1).Ins()).Count)))) || ((((_15_s1).Ins()).Select(_17_i)).Equiv(((_16_s2).Ins()).Select(_17_i)));
        }))))(s1, s2));
      }
    }
  }

  public partial class ValidLinSeg {
    private static readonly LinSegments._ILinSeg Witness = LinSegments.LinSeg.create_CONTSeg(Dafny.Sequence<Instructions._IInstruction>.FromElements(), Instructions.Instruction.create(EVMOpcodes.Opcode.create_ArithOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("ADD"), EVMConstants.__default.ADD, BigInteger.Zero, new BigInteger(2), BigInteger.One, new BigInteger(2)), Dafny.Sequence<Dafny.Rune>.FromElements(), BigInteger.Zero), LinSegments.__default.StackEffectHelper(Dafny.Sequence<Instructions._IInstruction>.Concat(Dafny.Sequence<Instructions._IInstruction>.FromElements(), Dafny.Sequence<Instructions._IInstruction>.FromElements(Instructions.Instruction.create(EVMOpcodes.Opcode.create_ArithOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("ADD"), EVMConstants.__default.ADD, BigInteger.Zero, new BigInteger(2), BigInteger.One, new BigInteger(2)), Dafny.Sequence<Dafny.Rune>.FromElements(), BigInteger.Zero)))));
    public static LinSegments._ILinSeg Default() {
      return Witness;
    }
    private static readonly Dafny.TypeDescriptor<LinSegments._ILinSeg> _TYPE = new Dafny.TypeDescriptor<LinSegments._ILinSeg>(LinSegments.ValidLinSeg.Default());
    public static Dafny.TypeDescriptor<LinSegments._ILinSeg> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public interface _ILinSeg {
    bool is_JUMPSeg { get; }
    bool is_JUMPISeg { get; }
    bool is_RETURNSeg { get; }
    bool is_STOPSeg { get; }
    bool is_CONTSeg { get; }
    bool is_INVALIDSeg { get; }
    Dafny.ISequence<Instructions._IInstruction> dtor_ins { get; }
    Instructions._IInstruction dtor_lastIns { get; }
    BigInteger dtor_netOpEffect { get; }
    _ILinSeg DowncastClone();
    Dafny.ISequence<Instructions._IInstruction> Ins();
    BigInteger Size(Dafny.ISequence<Instructions._IInstruction> xi);
    BigInteger StartAddress();
    BigInteger NetOpEffect();
    BigInteger NetCapEffect();
    BigInteger StackEffect();
    BigInteger StartAddressNextSeg();
    Dafny.ISequence<BigInteger> CollectJumpDest();
    BigInteger WeakestPreOperands(Dafny.ISequence<Instructions._IInstruction> xs, BigInteger postCond);
    BigInteger FastWeakestPreOperands(BigInteger k, BigInteger wpre0);
    BigInteger WeakestPreCapacity(BigInteger n);
    State._IAState Run(State._IAState s, BigInteger exit, Dafny.ISequence<BigInteger> jumpDests);
    WeakPre._ICond WPre(WeakPre._ICond c);
    BigInteger NumberOfExits();
    bool IsJump();
    WeakPre._ICond LeadsTo(BigInteger k, BigInteger exit);
    Dafny.ISequence<Dafny.Rune> SegTypeName();
  }
  public abstract class LinSeg : _ILinSeg {
    public LinSeg() {
    }
    private static readonly LinSegments._ILinSeg theDefault = create_JUMPSeg(Dafny.Sequence<Instructions._IInstruction>.Empty, Instructions.ValidInstruction.Default(), BigInteger.Zero);
    public static LinSegments._ILinSeg Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<LinSegments._ILinSeg> _TYPE = new Dafny.TypeDescriptor<LinSegments._ILinSeg>(LinSegments.LinSeg.Default());
    public static Dafny.TypeDescriptor<LinSegments._ILinSeg> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ILinSeg create_JUMPSeg(Dafny.ISequence<Instructions._IInstruction> ins, Instructions._IInstruction lastIns, BigInteger netOpEffect) {
      return new LinSeg_JUMPSeg(ins, lastIns, netOpEffect);
    }
    public static _ILinSeg create_JUMPISeg(Dafny.ISequence<Instructions._IInstruction> ins, Instructions._IInstruction lastIns, BigInteger netOpEffect) {
      return new LinSeg_JUMPISeg(ins, lastIns, netOpEffect);
    }
    public static _ILinSeg create_RETURNSeg(Dafny.ISequence<Instructions._IInstruction> ins, Instructions._IInstruction lastIns, BigInteger netOpEffect) {
      return new LinSeg_RETURNSeg(ins, lastIns, netOpEffect);
    }
    public static _ILinSeg create_STOPSeg(Dafny.ISequence<Instructions._IInstruction> ins, Instructions._IInstruction lastIns, BigInteger netOpEffect) {
      return new LinSeg_STOPSeg(ins, lastIns, netOpEffect);
    }
    public static _ILinSeg create_CONTSeg(Dafny.ISequence<Instructions._IInstruction> ins, Instructions._IInstruction lastIns, BigInteger netOpEffect) {
      return new LinSeg_CONTSeg(ins, lastIns, netOpEffect);
    }
    public static _ILinSeg create_INVALIDSeg(Dafny.ISequence<Instructions._IInstruction> ins, Instructions._IInstruction lastIns, BigInteger netOpEffect) {
      return new LinSeg_INVALIDSeg(ins, lastIns, netOpEffect);
    }
    public bool is_JUMPSeg { get { return this is LinSeg_JUMPSeg; } }
    public bool is_JUMPISeg { get { return this is LinSeg_JUMPISeg; } }
    public bool is_RETURNSeg { get { return this is LinSeg_RETURNSeg; } }
    public bool is_STOPSeg { get { return this is LinSeg_STOPSeg; } }
    public bool is_CONTSeg { get { return this is LinSeg_CONTSeg; } }
    public bool is_INVALIDSeg { get { return this is LinSeg_INVALIDSeg; } }
    public Dafny.ISequence<Instructions._IInstruction> dtor_ins {
      get {
        var d = this;
        if (d is LinSeg_JUMPSeg) { return ((LinSeg_JUMPSeg)d)._ins; }
        if (d is LinSeg_JUMPISeg) { return ((LinSeg_JUMPISeg)d)._ins; }
        if (d is LinSeg_RETURNSeg) { return ((LinSeg_RETURNSeg)d)._ins; }
        if (d is LinSeg_STOPSeg) { return ((LinSeg_STOPSeg)d)._ins; }
        if (d is LinSeg_CONTSeg) { return ((LinSeg_CONTSeg)d)._ins; }
        return ((LinSeg_INVALIDSeg)d)._ins;
      }
    }
    public Instructions._IInstruction dtor_lastIns {
      get {
        var d = this;
        if (d is LinSeg_JUMPSeg) { return ((LinSeg_JUMPSeg)d)._lastIns; }
        if (d is LinSeg_JUMPISeg) { return ((LinSeg_JUMPISeg)d)._lastIns; }
        if (d is LinSeg_RETURNSeg) { return ((LinSeg_RETURNSeg)d)._lastIns; }
        if (d is LinSeg_STOPSeg) { return ((LinSeg_STOPSeg)d)._lastIns; }
        if (d is LinSeg_CONTSeg) { return ((LinSeg_CONTSeg)d)._lastIns; }
        return ((LinSeg_INVALIDSeg)d)._lastIns;
      }
    }
    public BigInteger dtor_netOpEffect {
      get {
        var d = this;
        if (d is LinSeg_JUMPSeg) { return ((LinSeg_JUMPSeg)d)._netOpEffect; }
        if (d is LinSeg_JUMPISeg) { return ((LinSeg_JUMPISeg)d)._netOpEffect; }
        if (d is LinSeg_RETURNSeg) { return ((LinSeg_RETURNSeg)d)._netOpEffect; }
        if (d is LinSeg_STOPSeg) { return ((LinSeg_STOPSeg)d)._netOpEffect; }
        if (d is LinSeg_CONTSeg) { return ((LinSeg_CONTSeg)d)._netOpEffect; }
        return ((LinSeg_INVALIDSeg)d)._netOpEffect;
      }
    }
    public abstract _ILinSeg DowncastClone();
    public Dafny.ISequence<Instructions._IInstruction> Ins() {
      return Dafny.Sequence<Instructions._IInstruction>.Concat((this).dtor_ins, Dafny.Sequence<Instructions._IInstruction>.FromElements((this).dtor_lastIns));
    }
    public BigInteger Size(Dafny.ISequence<Instructions._IInstruction> xi) {
      BigInteger _0___accumulator = BigInteger.Zero;
      _ILinSeg _this = this;
    TAIL_CALL_START: ;
      if ((new BigInteger((xi).Count)).Sign == 0) {
        return (BigInteger.Zero) + (_0___accumulator);
      } else {
        _0___accumulator = (_0___accumulator) + (((xi).Select(BigInteger.Zero)).Size());
        LinSegments._ILinSeg _in0 = _this;
        Dafny.ISequence<Instructions._IInstruction> _in1 = (xi).Drop(BigInteger.One);
        _this = _in0;
        ;
        xi = _in1;
        goto TAIL_CALL_START;
      }
    }
    public BigInteger StartAddress() {
      return (((this).Ins()).Select(BigInteger.Zero)).dtor_address;
    }
    public BigInteger NetOpEffect() {
      return (this).dtor_netOpEffect;
    }
    public BigInteger NetCapEffect() {
      return (BigInteger.Zero) - ((this).dtor_netOpEffect);
    }
    public BigInteger StackEffect() {
      return (this).dtor_netOpEffect;
    }
    public BigInteger StartAddressNextSeg() {
      return ((((this).dtor_lastIns).dtor_address) + (BigInteger.One)) + (Dafny.Helpers.EuclideanDivision(new BigInteger((((this).dtor_lastIns).dtor_arg).Count), new BigInteger(2)));
    }
    public Dafny.ISequence<BigInteger> CollectJumpDest() {
      if ((((((this).Ins()).Select(BigInteger.Zero)).dtor_op).dtor_opcode) == (EVMConstants.__default.JUMPDEST)) {
        return Dafny.Sequence<BigInteger>.FromElements((((this).Ins()).Select(BigInteger.Zero)).dtor_address);
      } else {
        return Dafny.Sequence<BigInteger>.FromElements();
      }
    }
    public BigInteger WeakestPreOperands(Dafny.ISequence<Instructions._IInstruction> xs, BigInteger postCond)
    {
      _ILinSeg _this = this;
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return postCond;
      } else {
        Instructions._IInstruction _0_lastI = (xs).Select((new BigInteger((xs).Count)) - (BigInteger.One));
        BigInteger _1_e = (_0_lastI).WeakestPreOperands(postCond);
        LinSegments._ILinSeg _in0 = _this;
        Dafny.ISequence<Instructions._IInstruction> _in1 = (xs).Take((new BigInteger((xs).Count)) - (BigInteger.One));
        BigInteger _in2 = _1_e;
        _this = _in0;
        ;
        xs = _in1;
        postCond = _in2;
        goto TAIL_CALL_START;
      }
    }
    public BigInteger FastWeakestPreOperands(BigInteger k, BigInteger wpre0)
    {
      if ((k) <= ((this).StackEffect())) {
        return wpre0;
      } else {
        return Int.__default.Max(wpre0, (k) - ((this).StackEffect()));
      }
    }
    public BigInteger WeakestPreCapacity(BigInteger n) {
      return LinSegments.__default.WeakestPreCapacityHelper((this).Ins(), n);
    }
    public State._IAState Run(State._IAState s, BigInteger exit, Dafny.ISequence<BigInteger> jumpDests)
    {
      State._IAState _0_s_k = LinSegments.__default.RunIns((this).dtor_ins, s, jumpDests);
      if ((_0_s_k).is_Error) {
        return _0_s_k;
      } else {
        return ((this).dtor_lastIns).NextState(_0_s_k, jumpDests, exit);
      }
    }
    public WeakPre._ICond WPre(WeakPre._ICond c) {
      return LinSegments.__default.WPreIns((this).Ins(), c);
    }
    public BigInteger NumberOfExits() {
      LinSegments._ILinSeg _source0 = this;
      {
        if (_source0.is_JUMPISeg) {
          return new BigInteger(2);
        }
      }
      {
        if (_source0.is_JUMPSeg) {
          return BigInteger.One;
        }
      }
      {
        if (_source0.is_CONTSeg) {
          return BigInteger.One;
        }
      }
      {
        return BigInteger.Zero;
      }
    }
    public bool IsJump() {
      return ((this).is_JUMPSeg) || ((this).is_JUMPISeg);
    }
    public WeakPre._ICond LeadsTo(BigInteger k, BigInteger exit)
    {
      if ((k) >= (Int.__default.TWO__256)) {
        return WeakPre.Cond.create_StFalse();
      } else {
        LinSegments._ILinSeg _source0 = this;
        {
          if (_source0.is_JUMPSeg) {
            if ((exit).Sign == 0) {
              WeakPre._ICond _0_c = WeakPre.Cond.create_StCond(Dafny.Sequence<BigInteger>.FromElements(BigInteger.Zero), Dafny.Sequence<BigInteger>.FromElements(k));
              return LinSegments.__default.WPreIns((this).dtor_ins, _0_c);
            } else {
              return WeakPre.Cond.create_StFalse();
            }
          }
        }
        {
          if (_source0.is_JUMPISeg) {
            if ((exit) == (BigInteger.One)) {
              WeakPre._ICond _1_c = WeakPre.Cond.create_StCond(Dafny.Sequence<BigInteger>.FromElements(BigInteger.Zero), Dafny.Sequence<BigInteger>.FromElements(k));
              return LinSegments.__default.WPreIns((this).dtor_ins, _1_c);
            } else if ((k) == ((this).StartAddressNextSeg())) {
              return WeakPre.Cond.create_StTrue();
            } else {
              return WeakPre.Cond.create_StFalse();
            }
          }
        }
        {
          if (_source0.is_CONTSeg) {
            if (((exit).Sign == 0) && ((k) == ((this).StartAddressNextSeg()))) {
              return WeakPre.Cond.create_StTrue();
            } else {
              return WeakPre.Cond.create_StFalse();
            }
          }
        }
        {
          if (_source0.is_RETURNSeg) {
            return WeakPre.Cond.create_StTrue();
          }
        }
        {
          if (_source0.is_STOPSeg) {
            return WeakPre.Cond.create_StTrue();
          }
        }
        {
          return WeakPre.Cond.create_StFalse();
        }
      }
    }
    public Dafny.ISequence<Dafny.Rune> SegTypeName() {
      LinSegments._ILinSeg _source0 = this;
      {
        if (_source0.is_JUMPSeg) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("JUMP Segment");
        }
      }
      {
        if (_source0.is_JUMPISeg) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("JUMPI Segment");
        }
      }
      {
        if (_source0.is_RETURNSeg) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("RETURN Segment");
        }
      }
      {
        if (_source0.is_STOPSeg) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("STOP Segment");
        }
      }
      {
        if (_source0.is_CONTSeg) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("CONT Segment");
        }
      }
      {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("INVALID Segment");
      }
    }
  }
  public class LinSeg_JUMPSeg : LinSeg {
    public readonly Dafny.ISequence<Instructions._IInstruction> _ins;
    public readonly Instructions._IInstruction _lastIns;
    public readonly BigInteger _netOpEffect;
    public LinSeg_JUMPSeg(Dafny.ISequence<Instructions._IInstruction> ins, Instructions._IInstruction lastIns, BigInteger netOpEffect) : base() {
      this._ins = ins;
      this._lastIns = lastIns;
      this._netOpEffect = netOpEffect;
    }
    public override _ILinSeg DowncastClone() {
      if (this is _ILinSeg dt) { return dt; }
      return new LinSeg_JUMPSeg(_ins, _lastIns, _netOpEffect);
    }
    public override bool Equals(object other) {
      var oth = other as LinSegments.LinSeg_JUMPSeg;
      return oth != null && object.Equals(this._ins, oth._ins) && object.Equals(this._lastIns, oth._lastIns) && this._netOpEffect == oth._netOpEffect;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._ins));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lastIns));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._netOpEffect));
      return (int) hash;
    }
    public override string ToString() {
      string s = "LinSegments.LinSeg.JUMPSeg";
      s += "(";
      s += Dafny.Helpers.ToString(this._ins);
      s += ", ";
      s += Dafny.Helpers.ToString(this._lastIns);
      s += ", ";
      s += Dafny.Helpers.ToString(this._netOpEffect);
      s += ")";
      return s;
    }
  }
  public class LinSeg_JUMPISeg : LinSeg {
    public readonly Dafny.ISequence<Instructions._IInstruction> _ins;
    public readonly Instructions._IInstruction _lastIns;
    public readonly BigInteger _netOpEffect;
    public LinSeg_JUMPISeg(Dafny.ISequence<Instructions._IInstruction> ins, Instructions._IInstruction lastIns, BigInteger netOpEffect) : base() {
      this._ins = ins;
      this._lastIns = lastIns;
      this._netOpEffect = netOpEffect;
    }
    public override _ILinSeg DowncastClone() {
      if (this is _ILinSeg dt) { return dt; }
      return new LinSeg_JUMPISeg(_ins, _lastIns, _netOpEffect);
    }
    public override bool Equals(object other) {
      var oth = other as LinSegments.LinSeg_JUMPISeg;
      return oth != null && object.Equals(this._ins, oth._ins) && object.Equals(this._lastIns, oth._lastIns) && this._netOpEffect == oth._netOpEffect;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._ins));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lastIns));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._netOpEffect));
      return (int) hash;
    }
    public override string ToString() {
      string s = "LinSegments.LinSeg.JUMPISeg";
      s += "(";
      s += Dafny.Helpers.ToString(this._ins);
      s += ", ";
      s += Dafny.Helpers.ToString(this._lastIns);
      s += ", ";
      s += Dafny.Helpers.ToString(this._netOpEffect);
      s += ")";
      return s;
    }
  }
  public class LinSeg_RETURNSeg : LinSeg {
    public readonly Dafny.ISequence<Instructions._IInstruction> _ins;
    public readonly Instructions._IInstruction _lastIns;
    public readonly BigInteger _netOpEffect;
    public LinSeg_RETURNSeg(Dafny.ISequence<Instructions._IInstruction> ins, Instructions._IInstruction lastIns, BigInteger netOpEffect) : base() {
      this._ins = ins;
      this._lastIns = lastIns;
      this._netOpEffect = netOpEffect;
    }
    public override _ILinSeg DowncastClone() {
      if (this is _ILinSeg dt) { return dt; }
      return new LinSeg_RETURNSeg(_ins, _lastIns, _netOpEffect);
    }
    public override bool Equals(object other) {
      var oth = other as LinSegments.LinSeg_RETURNSeg;
      return oth != null && object.Equals(this._ins, oth._ins) && object.Equals(this._lastIns, oth._lastIns) && this._netOpEffect == oth._netOpEffect;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._ins));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lastIns));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._netOpEffect));
      return (int) hash;
    }
    public override string ToString() {
      string s = "LinSegments.LinSeg.RETURNSeg";
      s += "(";
      s += Dafny.Helpers.ToString(this._ins);
      s += ", ";
      s += Dafny.Helpers.ToString(this._lastIns);
      s += ", ";
      s += Dafny.Helpers.ToString(this._netOpEffect);
      s += ")";
      return s;
    }
  }
  public class LinSeg_STOPSeg : LinSeg {
    public readonly Dafny.ISequence<Instructions._IInstruction> _ins;
    public readonly Instructions._IInstruction _lastIns;
    public readonly BigInteger _netOpEffect;
    public LinSeg_STOPSeg(Dafny.ISequence<Instructions._IInstruction> ins, Instructions._IInstruction lastIns, BigInteger netOpEffect) : base() {
      this._ins = ins;
      this._lastIns = lastIns;
      this._netOpEffect = netOpEffect;
    }
    public override _ILinSeg DowncastClone() {
      if (this is _ILinSeg dt) { return dt; }
      return new LinSeg_STOPSeg(_ins, _lastIns, _netOpEffect);
    }
    public override bool Equals(object other) {
      var oth = other as LinSegments.LinSeg_STOPSeg;
      return oth != null && object.Equals(this._ins, oth._ins) && object.Equals(this._lastIns, oth._lastIns) && this._netOpEffect == oth._netOpEffect;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._ins));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lastIns));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._netOpEffect));
      return (int) hash;
    }
    public override string ToString() {
      string s = "LinSegments.LinSeg.STOPSeg";
      s += "(";
      s += Dafny.Helpers.ToString(this._ins);
      s += ", ";
      s += Dafny.Helpers.ToString(this._lastIns);
      s += ", ";
      s += Dafny.Helpers.ToString(this._netOpEffect);
      s += ")";
      return s;
    }
  }
  public class LinSeg_CONTSeg : LinSeg {
    public readonly Dafny.ISequence<Instructions._IInstruction> _ins;
    public readonly Instructions._IInstruction _lastIns;
    public readonly BigInteger _netOpEffect;
    public LinSeg_CONTSeg(Dafny.ISequence<Instructions._IInstruction> ins, Instructions._IInstruction lastIns, BigInteger netOpEffect) : base() {
      this._ins = ins;
      this._lastIns = lastIns;
      this._netOpEffect = netOpEffect;
    }
    public override _ILinSeg DowncastClone() {
      if (this is _ILinSeg dt) { return dt; }
      return new LinSeg_CONTSeg(_ins, _lastIns, _netOpEffect);
    }
    public override bool Equals(object other) {
      var oth = other as LinSegments.LinSeg_CONTSeg;
      return oth != null && object.Equals(this._ins, oth._ins) && object.Equals(this._lastIns, oth._lastIns) && this._netOpEffect == oth._netOpEffect;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._ins));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lastIns));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._netOpEffect));
      return (int) hash;
    }
    public override string ToString() {
      string s = "LinSegments.LinSeg.CONTSeg";
      s += "(";
      s += Dafny.Helpers.ToString(this._ins);
      s += ", ";
      s += Dafny.Helpers.ToString(this._lastIns);
      s += ", ";
      s += Dafny.Helpers.ToString(this._netOpEffect);
      s += ")";
      return s;
    }
  }
  public class LinSeg_INVALIDSeg : LinSeg {
    public readonly Dafny.ISequence<Instructions._IInstruction> _ins;
    public readonly Instructions._IInstruction _lastIns;
    public readonly BigInteger _netOpEffect;
    public LinSeg_INVALIDSeg(Dafny.ISequence<Instructions._IInstruction> ins, Instructions._IInstruction lastIns, BigInteger netOpEffect) : base() {
      this._ins = ins;
      this._lastIns = lastIns;
      this._netOpEffect = netOpEffect;
    }
    public override _ILinSeg DowncastClone() {
      if (this is _ILinSeg dt) { return dt; }
      return new LinSeg_INVALIDSeg(_ins, _lastIns, _netOpEffect);
    }
    public override bool Equals(object other) {
      var oth = other as LinSegments.LinSeg_INVALIDSeg;
      return oth != null && object.Equals(this._ins, oth._ins) && object.Equals(this._lastIns, oth._lastIns) && this._netOpEffect == oth._netOpEffect;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._ins));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lastIns));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._netOpEffect));
      return (int) hash;
    }
    public override string ToString() {
      string s = "LinSegments.LinSeg.INVALIDSeg";
      s += "(";
      s += Dafny.Helpers.ToString(this._ins);
      s += ", ";
      s += Dafny.Helpers.ToString(this._lastIns);
      s += ", ";
      s += Dafny.Helpers.ToString(this._netOpEffect);
      s += ")";
      return s;
    }
  }
} // end of namespace LinSegments
namespace Splitter {

  public partial class __default {
    public static LinSegments._ILinSeg BuildSeg(Dafny.ISequence<Instructions._IInstruction> xs, Instructions._IInstruction lastInst)
    {
      byte _source0 = ((lastInst).dtor_op).dtor_opcode;
      {
        if ((_source0) == ((byte)(86))) {
          return LinSegments.LinSeg.create_JUMPSeg(xs, lastInst, LinSegments.__default.StackEffectHelper(Dafny.Sequence<Instructions._IInstruction>.Concat(xs, Dafny.Sequence<Instructions._IInstruction>.FromElements(lastInst))));
        }
      }
      {
        if ((_source0) == ((byte)(87))) {
          return LinSegments.LinSeg.create_JUMPISeg(xs, lastInst, LinSegments.__default.StackEffectHelper(Dafny.Sequence<Instructions._IInstruction>.Concat(xs, Dafny.Sequence<Instructions._IInstruction>.FromElements(lastInst))));
        }
      }
      {
        if ((_source0) == ((byte)(243))) {
          return LinSegments.LinSeg.create_RETURNSeg(xs, lastInst, LinSegments.__default.StackEffectHelper(Dafny.Sequence<Instructions._IInstruction>.Concat(xs, Dafny.Sequence<Instructions._IInstruction>.FromElements(lastInst))));
        }
      }
      {
        if ((_source0) == ((byte)(253))) {
          return LinSegments.LinSeg.create_STOPSeg(xs, lastInst, LinSegments.__default.StackEffectHelper(Dafny.Sequence<Instructions._IInstruction>.Concat(xs, Dafny.Sequence<Instructions._IInstruction>.FromElements(lastInst))));
        }
      }
      {
        if ((_source0) == ((byte)(0))) {
          return LinSegments.LinSeg.create_STOPSeg(xs, lastInst, LinSegments.__default.StackEffectHelper(Dafny.Sequence<Instructions._IInstruction>.Concat(xs, Dafny.Sequence<Instructions._IInstruction>.FromElements(lastInst))));
        }
      }
      {
        if ((_source0) == ((byte)(254))) {
          return LinSegments.LinSeg.create_INVALIDSeg(xs, lastInst, LinSegments.__default.StackEffectHelper(Dafny.Sequence<Instructions._IInstruction>.Concat(xs, Dafny.Sequence<Instructions._IInstruction>.FromElements(lastInst))));
        }
      }
      {
        return LinSegments.LinSeg.create_CONTSeg(xs, lastInst, LinSegments.__default.StackEffectHelper(Dafny.Sequence<Instructions._IInstruction>.Concat(xs, Dafny.Sequence<Instructions._IInstruction>.FromElements(lastInst))));
      }
    }
    public static Dafny.ISequence<LinSegments._ILinSeg> SplitUpToTerminal(Dafny.ISequence<Instructions._IInstruction> xs, MiscTypes._IOption<BigInteger> maxSegSize, Dafny.ISequence<Instructions._IInstruction> curseq, Dafny.ISequence<LinSegments._ILinSeg> collected)
    {
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        if ((new BigInteger((curseq).Count)).Sign == 0) {
          return collected;
        } else {
          LinSegments._ILinSeg _0_newSeg = Splitter.__default.BuildSeg((curseq).Take((new BigInteger((curseq).Count)) - (BigInteger.One)), (curseq).Select((new BigInteger((curseq).Count)) - (BigInteger.One)));
          return Dafny.Sequence<LinSegments._ILinSeg>.Concat(collected, Dafny.Sequence<LinSegments._ILinSeg>.FromElements(_0_newSeg));
        }
      } else if (((((xs).Select(BigInteger.Zero)).dtor_op).dtor_opcode) == (EVMConstants.__default.JUMPDEST)) {
        if ((new BigInteger((curseq).Count)).Sign == 0) {
          Dafny.ISequence<Instructions._IInstruction> _in0 = (xs).Drop(BigInteger.One);
          MiscTypes._IOption<BigInteger> _in1 = maxSegSize;
          Dafny.ISequence<Instructions._IInstruction> _in2 = Dafny.Sequence<Instructions._IInstruction>.FromElements((xs).Select(BigInteger.Zero));
          Dafny.ISequence<LinSegments._ILinSeg> _in3 = collected;
          xs = _in0;
          maxSegSize = _in1;
          curseq = _in2;
          collected = _in3;
          goto TAIL_CALL_START;
        } else {
          LinSegments._ILinSeg _1_newSeg = Splitter.__default.BuildSeg((curseq).Take((new BigInteger((curseq).Count)) - (BigInteger.One)), (curseq).Select((new BigInteger((curseq).Count)) - (BigInteger.One)));
          Dafny.ISequence<Instructions._IInstruction> _in4 = (xs).Drop(BigInteger.One);
          MiscTypes._IOption<BigInteger> _in5 = maxSegSize;
          Dafny.ISequence<Instructions._IInstruction> _in6 = Dafny.Sequence<Instructions._IInstruction>.FromElements((xs).Select(BigInteger.Zero));
          Dafny.ISequence<LinSegments._ILinSeg> _in7 = Dafny.Sequence<LinSegments._ILinSeg>.Concat(collected, Dafny.Sequence<LinSegments._ILinSeg>.FromElements(_1_newSeg));
          xs = _in4;
          maxSegSize = _in5;
          curseq = _in6;
          collected = _in7;
          goto TAIL_CALL_START;
        }
      } else if (((xs).Select(BigInteger.Zero)).IsTerminal()) {
        LinSegments._ILinSeg _2_newSeg = Splitter.__default.BuildSeg(curseq, (xs).Select(BigInteger.Zero));
        Dafny.ISequence<Instructions._IInstruction> _in8 = (xs).Drop(BigInteger.One);
        MiscTypes._IOption<BigInteger> _in9 = maxSegSize;
        Dafny.ISequence<Instructions._IInstruction> _in10 = Dafny.Sequence<Instructions._IInstruction>.FromElements();
        Dafny.ISequence<LinSegments._ILinSeg> _in11 = Dafny.Sequence<LinSegments._ILinSeg>.Concat(collected, Dafny.Sequence<LinSegments._ILinSeg>.FromElements(_2_newSeg));
        xs = _in8;
        maxSegSize = _in9;
        curseq = _in10;
        collected = _in11;
        goto TAIL_CALL_START;
      } else if (((maxSegSize).is_Some) && ((new BigInteger((curseq).Count)) >= ((maxSegSize).dtor_v))) {
        LinSegments._ILinSeg _3_newSeg = Splitter.__default.BuildSeg(curseq, (xs).Select(BigInteger.Zero));
        Dafny.ISequence<Instructions._IInstruction> _in12 = (xs).Drop(BigInteger.One);
        MiscTypes._IOption<BigInteger> _in13 = maxSegSize;
        Dafny.ISequence<Instructions._IInstruction> _in14 = Dafny.Sequence<Instructions._IInstruction>.FromElements();
        Dafny.ISequence<LinSegments._ILinSeg> _in15 = Dafny.Sequence<LinSegments._ILinSeg>.Concat(collected, Dafny.Sequence<LinSegments._ILinSeg>.FromElements(_3_newSeg));
        xs = _in12;
        maxSegSize = _in13;
        curseq = _in14;
        collected = _in15;
        goto TAIL_CALL_START;
      } else {
        Dafny.ISequence<Instructions._IInstruction> _in16 = (xs).Drop(BigInteger.One);
        MiscTypes._IOption<BigInteger> _in17 = maxSegSize;
        Dafny.ISequence<Instructions._IInstruction> _in18 = Dafny.Sequence<Instructions._IInstruction>.Concat(curseq, Dafny.Sequence<Instructions._IInstruction>.FromElements((xs).Select(BigInteger.Zero)));
        Dafny.ISequence<LinSegments._ILinSeg> _in19 = collected;
        xs = _in16;
        maxSegSize = _in17;
        curseq = _in18;
        collected = _in19;
        goto TAIL_CALL_START;
      }
    }
  }
} // end of namespace Splitter
namespace SegBuilder {

  public partial class __default {
    public static MiscTypes._IEither<StackElement._IStackElem, BigInteger> JUMPResolver(LinSegments._ILinSeg s) {
      return SegBuilder.__default.StackPositionTracker((s).dtor_ins, BigInteger.Zero);
    }
    public static MiscTypes._IEither<StackElement._IStackElem, BigInteger> StackPositionTracker(Dafny.ISequence<Instructions._IInstruction> xs, BigInteger pos)
    {
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return MiscTypes.Either<StackElement._IStackElem, BigInteger>.create_Right(pos);
      } else {
        MiscTypes._IEither<StackElement._IStackElem, BigInteger> _0_x = ((xs).Select((new BigInteger((xs).Count)) - (BigInteger.One))).StackPosBackWardTracker(pos);
        MiscTypes._IEither<StackElement._IStackElem, BigInteger> _source0 = _0_x;
        {
          if (_source0.is_Left) {
            StackElement._IStackElem _1_v = _source0.dtor_l;
            return MiscTypes.Either<StackElement._IStackElem, BigInteger>.create_Left(_1_v);
          }
        }
        {
          BigInteger _2_v = _source0.dtor_r;
          Dafny.ISequence<Instructions._IInstruction> _in0 = (xs).Take((new BigInteger((xs).Count)) - (BigInteger.One));
          BigInteger _in1 = _2_v;
          xs = _in0;
          pos = _in1;
          goto TAIL_CALL_START;
        }
      }
    }
  }
} // end of namespace SegBuilder
namespace CFGState {

  public partial class __default {
    public static CFGState._IGState DEFAULT__GSTATE { get {
      return CFGState.GState.create_EGState(BigInteger.Zero, Dafny.Sequence<StackElement._IStackElem>.FromElements());
    } }
  }

  public interface _IGState {
    bool is_EGState { get; }
    bool is_ErrorGState { get; }
    BigInteger dtor_segNum { get; }
    Dafny.ISequence<StackElement._IStackElem> dtor_st { get; }
    Dafny.ISequence<Dafny.Rune> dtor_msg { get; }
    _IGState DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString();
    Dafny.ISequence<Dafny.Rune> StackToHTML();
    bool IsBounded(BigInteger n);
  }
  public abstract class GState : _IGState {
    public GState() {
    }
    private static readonly CFGState._IGState theDefault = create_EGState(BigInteger.Zero, Dafny.Sequence<StackElement._IStackElem>.Empty);
    public static CFGState._IGState Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<CFGState._IGState> _TYPE = new Dafny.TypeDescriptor<CFGState._IGState>(CFGState.GState.Default());
    public static Dafny.TypeDescriptor<CFGState._IGState> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IGState create_EGState(BigInteger segNum, Dafny.ISequence<StackElement._IStackElem> st) {
      return new GState_EGState(segNum, st);
    }
    public static _IGState create_ErrorGState(Dafny.ISequence<Dafny.Rune> msg) {
      return new GState_ErrorGState(msg);
    }
    public bool is_EGState { get { return this is GState_EGState; } }
    public bool is_ErrorGState { get { return this is GState_ErrorGState; } }
    public BigInteger dtor_segNum {
      get {
        var d = this;
        return ((GState_EGState)d)._segNum;
      }
    }
    public Dafny.ISequence<StackElement._IStackElem> dtor_st {
      get {
        var d = this;
        return ((GState_EGState)d)._st;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_msg {
      get {
        var d = this;
        return ((GState_ErrorGState)d)._msg;
      }
    }
    public abstract _IGState DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString() {
      CFGState._IGState _source0 = this;
      {
        if (_source0.is_EGState) {
          BigInteger _0_segNum = _source0.dtor_segNum;
          Dafny.ISequence<StackElement._IStackElem> _1_st = _source0.dtor_st;
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), Int.__default.NatToString(_0_segNum)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", [")), StackElement.__default.StackToString(_1_st)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("])"));
        }
      }
      {
        Dafny.ISequence<Dafny.Rune> _2_msg = _source0.dtor_msg;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("ErrorGState("), _2_msg), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      }
    }
    public Dafny.ISequence<Dafny.Rune> StackToHTML() {
      if ((new BigInteger(((this).dtor_st).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      } else {
        Dafny.ISequence<Dafny.Rune> _0_o = CFGState.GState.StackToHTMLHelper((this).dtor_st);
        return (_0_o).Take((new BigInteger((_0_o).Count)) - (BigInteger.One));
      }
    }
    public static Dafny.ISequence<Dafny.Rune> StackToHTMLHelper(Dafny.ISequence<StackElement._IStackElem> s) {
      Dafny.ISequence<Dafny.Rune> _0___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((s).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.Concat(_0___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      } else {
        _0___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_0___accumulator, Dafny.Sequence<Dafny.Rune>.Concat(((s).Select(BigInteger.Zero)).ToHTML(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(",")));
        Dafny.ISequence<StackElement._IStackElem> _in0 = (s).Drop(BigInteger.One);
        s = _in0;
        goto TAIL_CALL_START;
      }
    }
    public bool IsBounded(BigInteger n) {
      return ((this).is_ErrorGState) || (((this).is_EGState) && (((this).dtor_segNum) < (n)));
    }
  }
  public class GState_EGState : GState {
    public readonly BigInteger _segNum;
    public readonly Dafny.ISequence<StackElement._IStackElem> _st;
    public GState_EGState(BigInteger segNum, Dafny.ISequence<StackElement._IStackElem> st) : base() {
      this._segNum = segNum;
      this._st = st;
    }
    public override _IGState DowncastClone() {
      if (this is _IGState dt) { return dt; }
      return new GState_EGState(_segNum, _st);
    }
    public override bool Equals(object other) {
      var oth = other as CFGState.GState_EGState;
      return oth != null && this._segNum == oth._segNum && object.Equals(this._st, oth._st);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._segNum));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._st));
      return (int) hash;
    }
    public override string ToString() {
      string s = "CFGState.GState.EGState";
      s += "(";
      s += Dafny.Helpers.ToString(this._segNum);
      s += ", ";
      s += Dafny.Helpers.ToString(this._st);
      s += ")";
      return s;
    }
  }
  public class GState_ErrorGState : GState {
    public readonly Dafny.ISequence<Dafny.Rune> _msg;
    public GState_ErrorGState(Dafny.ISequence<Dafny.Rune> msg) : base() {
      this._msg = msg;
    }
    public override _IGState DowncastClone() {
      if (this is _IGState dt) { return dt; }
      return new GState_ErrorGState(_msg);
    }
    public override bool Equals(object other) {
      var oth = other as CFGState.GState_ErrorGState;
      return oth != null && object.Equals(this._msg, oth._msg);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._msg));
      return (int) hash;
    }
    public override string ToString() {
      string s = "CFGState.GState.ErrorGState";
      s += "(";
      s += this._msg.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
} // end of namespace CFGState
namespace ProofObject {


  public interface _IStackResolver {
    bool is_StackResolver { get; }
    Dafny.IMap<BigInteger,MiscTypes._IEither<Dafny.ISequence<Dafny.Rune>, BigInteger>> dtor_sp { get; }
  }
  public class StackResolver : _IStackResolver {
    public readonly Dafny.IMap<BigInteger,MiscTypes._IEither<Dafny.ISequence<Dafny.Rune>, BigInteger>> _sp;
    public StackResolver(Dafny.IMap<BigInteger,MiscTypes._IEither<Dafny.ISequence<Dafny.Rune>, BigInteger>> sp) {
      this._sp = sp;
    }
    public static Dafny.IMap<BigInteger,MiscTypes._IEither<Dafny.ISequence<Dafny.Rune>, BigInteger>> DowncastClone(Dafny.IMap<BigInteger,MiscTypes._IEither<Dafny.ISequence<Dafny.Rune>, BigInteger>> _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as ProofObject.StackResolver;
      return oth != null && object.Equals(this._sp, oth._sp);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._sp));
      return (int) hash;
    }
    public override string ToString() {
      string s = "ProofObject.StackResolver.StackResolver";
      s += "(";
      s += Dafny.Helpers.ToString(this._sp);
      s += ")";
      return s;
    }
    private static readonly Dafny.IMap<BigInteger,MiscTypes._IEither<Dafny.ISequence<Dafny.Rune>, BigInteger>> theDefault = Dafny.Map<BigInteger, MiscTypes._IEither<Dafny.ISequence<Dafny.Rune>, BigInteger>>.Empty;
    public static Dafny.IMap<BigInteger,MiscTypes._IEither<Dafny.ISequence<Dafny.Rune>, BigInteger>> Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<Dafny.IMap<BigInteger,MiscTypes._IEither<Dafny.ISequence<Dafny.Rune>, BigInteger>>> _TYPE = new Dafny.TypeDescriptor<Dafny.IMap<BigInteger,MiscTypes._IEither<Dafny.ISequence<Dafny.Rune>, BigInteger>>>(Dafny.Map<BigInteger, MiscTypes._IEither<Dafny.ISequence<Dafny.Rune>, BigInteger>>.Empty);
    public static Dafny.TypeDescriptor<Dafny.IMap<BigInteger,MiscTypes._IEither<Dafny.ISequence<Dafny.Rune>, BigInteger>>> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IStackResolver create(Dafny.IMap<BigInteger,MiscTypes._IEither<Dafny.ISequence<Dafny.Rune>, BigInteger>> sp) {
      return new StackResolver(sp);
    }
    public static _IStackResolver create_StackResolver(Dafny.IMap<BigInteger,MiscTypes._IEither<Dafny.ISequence<Dafny.Rune>, BigInteger>> sp) {
      return create(sp);
    }
    public bool is_StackResolver { get { return true; } }
    public Dafny.IMap<BigInteger,MiscTypes._IEither<Dafny.ISequence<Dafny.Rune>, BigInteger>> dtor_sp {
      get {
        return this._sp;
      }
    }
  }

  public interface _IProofObj {
    bool is_JUMP { get; }
    bool is_CONT { get; }
    bool is_TERMINAL { get; }
    LinSegments._ILinSeg dtor_s { get; }
    BigInteger dtor_wpOp { get; }
    BigInteger dtor_wpCap { get; }
    MiscTypes._IEither<StackElement._IStackElem, BigInteger> dtor_tgt { get; }
    Dafny.IMap<BigInteger,MiscTypes._IEither<Dafny.ISequence<Dafny.Rune>, BigInteger>> dtor_stacks { get; }
    _IProofObj DowncastClone();
    bool IsValid();
    Dafny.ISequence<BigInteger> CollectJumpDest();
    BigInteger StackEffect();
  }
  public abstract class ProofObj : _IProofObj {
    public ProofObj() {
    }
    private static readonly ProofObject._IProofObj theDefault = create_JUMP(LinSegments.ValidLinSeg.Default(), BigInteger.Zero, BigInteger.Zero, MiscTypes.Either<StackElement._IStackElem, BigInteger>.Default(StackElement.StackElem.Default()), Dafny.Map<BigInteger, MiscTypes._IEither<Dafny.ISequence<Dafny.Rune>, BigInteger>>.Empty);
    public static ProofObject._IProofObj Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<ProofObject._IProofObj> _TYPE = new Dafny.TypeDescriptor<ProofObject._IProofObj>(ProofObject.ProofObj.Default());
    public static Dafny.TypeDescriptor<ProofObject._IProofObj> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IProofObj create_JUMP(LinSegments._ILinSeg s, BigInteger wpOp, BigInteger wpCap, MiscTypes._IEither<StackElement._IStackElem, BigInteger> tgt, Dafny.IMap<BigInteger,MiscTypes._IEither<Dafny.ISequence<Dafny.Rune>, BigInteger>> stacks) {
      return new ProofObj_JUMP(s, wpOp, wpCap, tgt, stacks);
    }
    public static _IProofObj create_CONT(LinSegments._ILinSeg s, BigInteger wpOp, BigInteger wpCap, Dafny.IMap<BigInteger,MiscTypes._IEither<Dafny.ISequence<Dafny.Rune>, BigInteger>> stacks) {
      return new ProofObj_CONT(s, wpOp, wpCap, stacks);
    }
    public static _IProofObj create_TERMINAL(LinSegments._ILinSeg s, BigInteger wpOp, BigInteger wpCap, Dafny.IMap<BigInteger,MiscTypes._IEither<Dafny.ISequence<Dafny.Rune>, BigInteger>> stacks) {
      return new ProofObj_TERMINAL(s, wpOp, wpCap, stacks);
    }
    public bool is_JUMP { get { return this is ProofObj_JUMP; } }
    public bool is_CONT { get { return this is ProofObj_CONT; } }
    public bool is_TERMINAL { get { return this is ProofObj_TERMINAL; } }
    public LinSegments._ILinSeg dtor_s {
      get {
        var d = this;
        if (d is ProofObj_JUMP) { return ((ProofObj_JUMP)d)._s; }
        if (d is ProofObj_CONT) { return ((ProofObj_CONT)d)._s; }
        return ((ProofObj_TERMINAL)d)._s;
      }
    }
    public BigInteger dtor_wpOp {
      get {
        var d = this;
        if (d is ProofObj_JUMP) { return ((ProofObj_JUMP)d)._wpOp; }
        if (d is ProofObj_CONT) { return ((ProofObj_CONT)d)._wpOp; }
        return ((ProofObj_TERMINAL)d)._wpOp;
      }
    }
    public BigInteger dtor_wpCap {
      get {
        var d = this;
        if (d is ProofObj_JUMP) { return ((ProofObj_JUMP)d)._wpCap; }
        if (d is ProofObj_CONT) { return ((ProofObj_CONT)d)._wpCap; }
        return ((ProofObj_TERMINAL)d)._wpCap;
      }
    }
    public MiscTypes._IEither<StackElement._IStackElem, BigInteger> dtor_tgt {
      get {
        var d = this;
        return ((ProofObj_JUMP)d)._tgt;
      }
    }
    public Dafny.IMap<BigInteger,MiscTypes._IEither<Dafny.ISequence<Dafny.Rune>, BigInteger>> dtor_stacks {
      get {
        var d = this;
        if (d is ProofObj_JUMP) { return ((ProofObj_JUMP)d)._stacks; }
        if (d is ProofObj_CONT) { return ((ProofObj_CONT)d)._stacks; }
        return ((ProofObj_TERMINAL)d)._stacks;
      }
    }
    public abstract _IProofObj DowncastClone();
    public bool IsValid() {
      ProofObject._IProofObj _source0 = this;
      {
        if (_source0.is_JUMP) {
          return (((this).dtor_s).is_JUMPSeg) || (((this).dtor_s).is_JUMPISeg);
        }
      }
      {
        if (_source0.is_CONT) {
          return ((this).dtor_s).is_CONTSeg;
        }
      }
      {
        return ((((this).dtor_s).is_RETURNSeg) || (((this).dtor_s).is_STOPSeg)) || (((this).dtor_s).is_INVALIDSeg);
      }
    }
    public Dafny.ISequence<BigInteger> CollectJumpDest() {
      return ((this).dtor_s).CollectJumpDest();
    }
    public BigInteger StackEffect() {
      return ((this).dtor_s).StackEffect();
    }
  }
  public class ProofObj_JUMP : ProofObj {
    public readonly LinSegments._ILinSeg _s;
    public readonly BigInteger _wpOp;
    public readonly BigInteger _wpCap;
    public readonly MiscTypes._IEither<StackElement._IStackElem, BigInteger> _tgt;
    public readonly Dafny.IMap<BigInteger,MiscTypes._IEither<Dafny.ISequence<Dafny.Rune>, BigInteger>> _stacks;
    public ProofObj_JUMP(LinSegments._ILinSeg s, BigInteger wpOp, BigInteger wpCap, MiscTypes._IEither<StackElement._IStackElem, BigInteger> tgt, Dafny.IMap<BigInteger,MiscTypes._IEither<Dafny.ISequence<Dafny.Rune>, BigInteger>> stacks) : base() {
      this._s = s;
      this._wpOp = wpOp;
      this._wpCap = wpCap;
      this._tgt = tgt;
      this._stacks = stacks;
    }
    public override _IProofObj DowncastClone() {
      if (this is _IProofObj dt) { return dt; }
      return new ProofObj_JUMP(_s, _wpOp, _wpCap, _tgt, _stacks);
    }
    public override bool Equals(object other) {
      var oth = other as ProofObject.ProofObj_JUMP;
      return oth != null && object.Equals(this._s, oth._s) && this._wpOp == oth._wpOp && this._wpCap == oth._wpCap && object.Equals(this._tgt, oth._tgt) && object.Equals(this._stacks, oth._stacks);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._s));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._wpOp));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._wpCap));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tgt));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._stacks));
      return (int) hash;
    }
    public override string ToString() {
      string ss = "ProofObject.ProofObj.JUMP";
      ss += "(";
      ss += Dafny.Helpers.ToString(this._s);
      ss += ", ";
      ss += Dafny.Helpers.ToString(this._wpOp);
      ss += ", ";
      ss += Dafny.Helpers.ToString(this._wpCap);
      ss += ", ";
      ss += Dafny.Helpers.ToString(this._tgt);
      ss += ", ";
      ss += Dafny.Helpers.ToString(this._stacks);
      ss += ")";
      return ss;
    }
  }
  public class ProofObj_CONT : ProofObj {
    public readonly LinSegments._ILinSeg _s;
    public readonly BigInteger _wpOp;
    public readonly BigInteger _wpCap;
    public readonly Dafny.IMap<BigInteger,MiscTypes._IEither<Dafny.ISequence<Dafny.Rune>, BigInteger>> _stacks;
    public ProofObj_CONT(LinSegments._ILinSeg s, BigInteger wpOp, BigInteger wpCap, Dafny.IMap<BigInteger,MiscTypes._IEither<Dafny.ISequence<Dafny.Rune>, BigInteger>> stacks) : base() {
      this._s = s;
      this._wpOp = wpOp;
      this._wpCap = wpCap;
      this._stacks = stacks;
    }
    public override _IProofObj DowncastClone() {
      if (this is _IProofObj dt) { return dt; }
      return new ProofObj_CONT(_s, _wpOp, _wpCap, _stacks);
    }
    public override bool Equals(object other) {
      var oth = other as ProofObject.ProofObj_CONT;
      return oth != null && object.Equals(this._s, oth._s) && this._wpOp == oth._wpOp && this._wpCap == oth._wpCap && object.Equals(this._stacks, oth._stacks);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._s));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._wpOp));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._wpCap));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._stacks));
      return (int) hash;
    }
    public override string ToString() {
      string ss = "ProofObject.ProofObj.CONT";
      ss += "(";
      ss += Dafny.Helpers.ToString(this._s);
      ss += ", ";
      ss += Dafny.Helpers.ToString(this._wpOp);
      ss += ", ";
      ss += Dafny.Helpers.ToString(this._wpCap);
      ss += ", ";
      ss += Dafny.Helpers.ToString(this._stacks);
      ss += ")";
      return ss;
    }
  }
  public class ProofObj_TERMINAL : ProofObj {
    public readonly LinSegments._ILinSeg _s;
    public readonly BigInteger _wpOp;
    public readonly BigInteger _wpCap;
    public readonly Dafny.IMap<BigInteger,MiscTypes._IEither<Dafny.ISequence<Dafny.Rune>, BigInteger>> _stacks;
    public ProofObj_TERMINAL(LinSegments._ILinSeg s, BigInteger wpOp, BigInteger wpCap, Dafny.IMap<BigInteger,MiscTypes._IEither<Dafny.ISequence<Dafny.Rune>, BigInteger>> stacks) : base() {
      this._s = s;
      this._wpOp = wpOp;
      this._wpCap = wpCap;
      this._stacks = stacks;
    }
    public override _IProofObj DowncastClone() {
      if (this is _IProofObj dt) { return dt; }
      return new ProofObj_TERMINAL(_s, _wpOp, _wpCap, _stacks);
    }
    public override bool Equals(object other) {
      var oth = other as ProofObject.ProofObj_TERMINAL;
      return oth != null && object.Equals(this._s, oth._s) && this._wpOp == oth._wpOp && this._wpCap == oth._wpCap && object.Equals(this._stacks, oth._stacks);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._s));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._wpOp));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._wpCap));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._stacks));
      return (int) hash;
    }
    public override string ToString() {
      string ss = "ProofObject.ProofObj.TERMINAL";
      ss += "(";
      ss += Dafny.Helpers.ToString(this._s);
      ss += ", ";
      ss += Dafny.Helpers.ToString(this._wpOp);
      ss += ", ";
      ss += Dafny.Helpers.ToString(this._wpCap);
      ss += ", ";
      ss += Dafny.Helpers.ToString(this._stacks);
      ss += ")";
      return ss;
    }
  }
} // end of namespace ProofObject
namespace PrettyIns {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> PrintInstructionToDafny(Instructions._IInstruction i, BigInteger src, BigInteger tgt)
    {
      byte _source0 = ((i).dtor_op).dtor_opcode;
      {
        if ((_source0) == ((byte)(0))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := Stop(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(1))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := Add(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(2))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := Mul(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(3))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := Sub(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(4))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := Div(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(5))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := SDiv(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(6))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := Mod(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(7))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := SMod(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(8))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := AddMod(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(9))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := MulMod(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(10))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := Exp(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(11))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := SignExtended(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(16))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := Lt(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(17))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := Gt(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(18))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := SLt(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(19))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := SGt(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(20))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := Eq(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(21))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := IsZero(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(22))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := And(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(23))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := Or(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(24))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := Xor(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(25))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := Not(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(26))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := Byte(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(27))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := Shl(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(28))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := Shr(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(29))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := Sar(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(32))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := Keccak256(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(48))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := Address(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(49))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := Balance(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(50))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := Origin(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(51))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := Caller(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(52))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := CallValue(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(53))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := CallDataLoad(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(54))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := CallDataSize(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(55))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := CallDataCopy(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(56))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := CodeSize(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(57))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := CodeCopy(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(58))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := GasPrice(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(59))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := ExtCodeSize(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(60))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := ExtCodeCopy(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(61))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := ReturnDataSize(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(62))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := ReturnDataCopy(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(63))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := ExtCodeHash(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(64))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := BlockHash(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(65))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := CoinBase(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(66))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := TimeStamp(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(67))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := Number(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(68))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := Difficulty(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(69))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := GasLimit(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(70))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := ChainID(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(71))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := SelfBalance(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(72))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := BaseFee(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(80))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := Pop(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(81))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := MLoad(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(82))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := MStore(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(83))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := MStore8(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(84))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := SLoad(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(85))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := SStore(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(86))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := Jump(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(87))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := JumpI(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(92))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := RJump(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(93))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := RJumpI(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(94))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := RJumpV(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(88))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := PC(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(89))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := MSize(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(90))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := Gas(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(91))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := JumpDest(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(95))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := Push0(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(96))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := Push1(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", 0x")), (i).dtor_arg), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(97))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := Push2(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", 0x")), (i).dtor_arg), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(98))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := Push3(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", 0x")), (i).dtor_arg), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(99))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := Push4(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", 0x")), (i).dtor_arg), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(100))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := PushN(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", 5, 0x")), (i).dtor_arg), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(101))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := PushN(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", 6, 0x")), (i).dtor_arg), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(102))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := PushN(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", 7, 0x")), (i).dtor_arg), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(103))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := Push8(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", 0x")), (i).dtor_arg), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(104))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := PushN(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", 9, 0x")), (i).dtor_arg), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(105))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := PushN(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", 10, 0x")), (i).dtor_arg), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(106))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := PushN(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", 11, 0x")), (i).dtor_arg), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(107))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := PushN(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", 12, 0x")), (i).dtor_arg), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(108))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := PushN(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", 13, 0x")), (i).dtor_arg), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(109))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := PushN(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", 14, 0x")), (i).dtor_arg), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(110))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := PushN(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", 15, 0x")), (i).dtor_arg), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(111))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := PushN(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", 16, 0x")), (i).dtor_arg), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(112))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := PushN(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", 17, 0x")), (i).dtor_arg), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(113))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := PushN(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", 18, 0x")), (i).dtor_arg), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(114))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := PushN(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", 19, 0x")), (i).dtor_arg), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(115))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := Push20(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", 0x")), (i).dtor_arg), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(116))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := PushN(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", 21, 0x")), (i).dtor_arg), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(117))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := PushN(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", 22, 0x")), (i).dtor_arg), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(118))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := PushN(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", 23, 0x")), (i).dtor_arg), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(119))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := PushN(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", 24, 0x")), (i).dtor_arg), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(120))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := PushN(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", 25, 0x")), (i).dtor_arg), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(121))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := PushN(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", 26, 0x")), (i).dtor_arg), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(122))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := PushN(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", 27, 0x")), (i).dtor_arg), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(123))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := PushN(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", 28, 0x")), (i).dtor_arg), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(124))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := PushN(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", 29, 0x")), (i).dtor_arg), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(125))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := PushN(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", 30, 0x")), (i).dtor_arg), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(126))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := PushN(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", 31, 0x")), (i).dtor_arg), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(127))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := Push32(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", 0x")), (i).dtor_arg), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(128))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := Dup1(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(129))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := Dup2(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(130))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := Dup3(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(131))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := Dup4(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(132))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := Dup5(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(133))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := Dup6(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(134))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := Dup7(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(135))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := Dup8(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(136))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := Dup9(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(137))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := Dup10(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(138))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := Dup11(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(139))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := Dup12(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(140))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := Dup13(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(141))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := Dup14(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(142))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := Dup15(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(143))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := Dup16(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(144))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := Swap1(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(145))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := Swap2(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(146))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := Swap3(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(147))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := Swap4(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(148))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := Swap5(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(149))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := Swap6(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(150))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := Swap7(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(151))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := Swap(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", 8);"));
        }
      }
      {
        if ((_source0) == ((byte)(152))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := Swap(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", 9);"));
        }
      }
      {
        if ((_source0) == ((byte)(153))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := Swap(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", 10);"));
        }
      }
      {
        if ((_source0) == ((byte)(154))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := Swap(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", 11);"));
        }
      }
      {
        if ((_source0) == ((byte)(155))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := Swap(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", 12);"));
        }
      }
      {
        if ((_source0) == ((byte)(156))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := Swap(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", 13);"));
        }
      }
      {
        if ((_source0) == ((byte)(157))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := Swap(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", 14);"));
        }
      }
      {
        if ((_source0) == ((byte)(158))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := Swap(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", 15);"));
        }
      }
      {
        if ((_source0) == ((byte)(159))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := Swap(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", 16);"));
        }
      }
      {
        if ((_source0) == ((byte)(160))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := Log0(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(161))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := Log1(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(162))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := Log2(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(163))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := Log3(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(164))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := Log4(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(240))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := Create(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(241))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := Call(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(242))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := CallCode(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(243))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := Return(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(244))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := DelegateCall(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(245))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := Create2(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(250))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := StaticCall(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(253))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := Revert(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(255))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := SelfDestruct(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      }
      {
        if ((_source0) == ((byte)(254))) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var s"), PrettyIns.__default.DecToString(tgt)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" := Stop(s")), PrettyIns.__default.DecToString(src)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("); // Invalid instruction:\n"));
        }
      }
      {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Unknown instruction:"), ((i).dtor_op).dtor_name);
      }
    }
    public static Dafny.Rune DecToChar(BigInteger n) {
      BigInteger _source0 = n;
      {
        if ((_source0) == (BigInteger.Zero)) {
          return new Dafny.Rune('0');
        }
      }
      {
        if ((_source0) == (BigInteger.One)) {
          return new Dafny.Rune('1');
        }
      }
      {
        if ((_source0) == (new BigInteger(2))) {
          return new Dafny.Rune('2');
        }
      }
      {
        if ((_source0) == (new BigInteger(3))) {
          return new Dafny.Rune('3');
        }
      }
      {
        if ((_source0) == (new BigInteger(4))) {
          return new Dafny.Rune('4');
        }
      }
      {
        if ((_source0) == (new BigInteger(5))) {
          return new Dafny.Rune('5');
        }
      }
      {
        if ((_source0) == (new BigInteger(6))) {
          return new Dafny.Rune('6');
        }
      }
      {
        if ((_source0) == (new BigInteger(7))) {
          return new Dafny.Rune('7');
        }
      }
      {
        if ((_source0) == (new BigInteger(8))) {
          return new Dafny.Rune('8');
        }
      }
      {
        return new Dafny.Rune('9');
      }
    }
    public static Dafny.ISequence<Dafny.Rune> DecToString(BigInteger n) {
      Dafny.ISequence<Dafny.Rune> _0___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START: ;
      if ((n) < (new BigInteger(10))) {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements(PrettyIns.__default.DecToChar(n)), _0___accumulator);
      } else {
        _0___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements(PrettyIns.__default.DecToChar(Dafny.Helpers.EuclideanModulus(n, new BigInteger(10)))), _0___accumulator);
        BigInteger _in0 = Dafny.Helpers.EuclideanDivision(n, new BigInteger(10));
        n = _in0;
        goto TAIL_CALL_START;
      }
    }
  }
} // end of namespace PrettyIns
namespace PrettyPrinters {

  public partial class __default {
    public static void PrintInstructions(Dafny.ISequence<Instructions._IInstruction> s)
    {
    TAIL_CALL_START: ;
      if ((new BigInteger((s).Count)).Sign == 1) {
        Dafny.ISequence<Dafny.Rune> _0_formattedAddress;
        if ((((s).Select(BigInteger.Zero)).dtor_address) < (Int.__default.TWO__32)) {
          _0_formattedAddress = Hex.__default.U32ToHex((uint)(((s).Select(BigInteger.Zero)).dtor_address));
        } else {
          _0_formattedAddress = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("OutofRange");
        }
        Dafny.Helpers.Print((_0_formattedAddress).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")).ToVerbatimString(false));
        Dafny.Helpers.Print((((s).Select(BigInteger.Zero))._ToString()).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
        Dafny.ISequence<Instructions._IInstruction> _in0 = (s).Drop(BigInteger.One);
        s = _in0;
        goto TAIL_CALL_START;
      }
    }
    public static void PrintSegments(Dafny.ISequence<LinSegments._ILinSeg> xs, BigInteger num)
    {
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)).Sign == 1) {
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("--------------------------------------------\n")).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Segment ")).ToVerbatimString(false));
        Dafny.Helpers.Print((num));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
        BigInteger _0_k;
        _0_k = ((xs).Select(BigInteger.Zero)).WeakestPreOperands(((xs).Select(BigInteger.Zero)).Ins(), BigInteger.Zero);
        BigInteger _1_l;
        _1_l = ((xs).Select(BigInteger.Zero)).WeakestPreCapacity(BigInteger.Zero);
        if ((((xs).Select(BigInteger.Zero)).is_JUMPSeg) || (((xs).Select(BigInteger.Zero)).is_JUMPISeg)) {
          Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("JUMP/JUMPI: tgt address at the end: ")).ToVerbatimString(false));
          MiscTypes._IEither<StackElement._IStackElem, BigInteger> _2_r;
          _2_r = SegBuilder.__default.JUMPResolver((xs).Select(BigInteger.Zero));
          MiscTypes._IEither<StackElement._IStackElem, BigInteger> _source0 = _2_r;
          {
            if (_source0.is_Left) {
              StackElement._IStackElem _3_v = _source0.dtor_l;
              StackElement._IStackElem _source1 = _3_v;
              {
                if (_source1.is_Value) {
                  BigInteger _4_address = _source1.dtor_v;
                  Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0x"), Hex.__default.NatToHex(_4_address))).ToVerbatimString(false));
                  goto after_match1;
                }
              }
              {
                Dafny.ISequence<Dafny.Rune> _5_msg = _source1.dtor_s;
                Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Could not determine stack value")).ToVerbatimString(false));
              }
            after_match1: ;
              goto after_match0;
            }
          }
          {
            BigInteger _6_stackPos = _source0.dtor_r;
            Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Peek(")).ToVerbatimString(false));
            Dafny.Helpers.Print((_6_stackPos));
            Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")).ToVerbatimString(false));
          }
        after_match0: ;
          Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
        }
        if (((xs).Select(BigInteger.Zero)).is_CONTSeg) {
          if ((((((xs).Select(BigInteger.Zero)).dtor_lastIns).dtor_op).dtor_opcode) != (EVMConstants.__default.INVALID)) {
            BigInteger _7_nextPC;
            _7_nextPC = ((xs).Select(BigInteger.Zero)).StartAddressNextSeg();
            Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("CONT: PC of instruction after last is: "), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" 0x")), Hex.__default.NatToHex(_7_nextPC)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"))).ToVerbatimString(false));
          } else {
            Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("CONT: has an invalid instruction"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"))).ToVerbatimString(false));
          }
          Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("WeakestPre Operands:")).ToVerbatimString(false));
          Dafny.Helpers.Print((_0_k));
          Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
          Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("WeakestPre Capacity:")).ToVerbatimString(false));
          Dafny.Helpers.Print((_1_l));
          Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
          Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Net Stack Effect:")).ToVerbatimString(false));
          Dafny.Helpers.Print((((xs).Select(BigInteger.Zero)).StackEffect()));
          Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
        }
        PrettyPrinters.__default.PrintInstructions(((xs).Select(BigInteger.Zero)).Ins());
        Dafny.ISequence<LinSegments._ILinSeg> _in0 = (xs).Drop(BigInteger.One);
        BigInteger _in1 = (num) + (BigInteger.One);
        xs = _in0;
        num = _in1;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> CollectJumpDest(Dafny.ISequence<ProofObject._IProofObj> xs) {
      Dafny.ISequence<BigInteger> _0___accumulator = Dafny.Sequence<BigInteger>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Dafny.Sequence<BigInteger>.Concat(_0___accumulator, Dafny.Sequence<BigInteger>.FromElements());
      } else {
        _0___accumulator = Dafny.Sequence<BigInteger>.Concat(_0___accumulator, ((xs).Select(BigInteger.Zero)).CollectJumpDest());
        Dafny.ISequence<ProofObject._IProofObj> _in0 = (xs).Drop(BigInteger.One);
        xs = _in0;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> CollectJumpDestAsString(Dafny.ISequence<BigInteger> xs) {
      Dafny.ISequence<Dafny.Rune> _0___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.Concat(_0___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements());
      } else {
        _0___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_0___accumulator, Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ensures s.IsJumpDest(0x"), Hex.__default.NatToHex((xs).Select(BigInteger.Zero))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as u256)\n")));
        Dafny.ISequence<BigInteger> _in0 = (xs).Drop(BigInteger.One);
        xs = _in0;
        goto TAIL_CALL_START;
      }
    }
    public static void PrintProofObjectToDafny(Dafny.ISequence<ProofObject._IProofObj> xs, Dafny.ISequence<Dafny.Rune> pathToEVMDafny)
    {
      if ((new BigInteger((pathToEVMDafny).Count)).Sign == 1) {
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("include \"")).ToVerbatimString(false));
        Dafny.Helpers.Print((pathToEVMDafny).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/src/dafny/state.dfy\"")).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("include \"")).ToVerbatimString(false));
        Dafny.Helpers.Print((pathToEVMDafny).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/src/dafny/bytecode.dfy\"")).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
      }
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("module DafnyEVMProofObject {")).ToVerbatimString(false));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("import opened Int")).ToVerbatimString(false));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("import EvmState")).ToVerbatimString(false));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("import opened Bytecode")).ToVerbatimString(false));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
      Dafny.ISequence<Dafny.Rune> _0_j;
      _0_j = PrettyPrinters.__default.CollectJumpDestAsString(PrettyPrinters.__default.CollectJumpDest(xs));
      if ((new BigInteger((_0_j).Count)).Sign == 1) {
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/** Lemma for Jumpdest */")).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("lemma {:axiom} ValidJumpDest(s: EvmState.ExecutingState)")).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
        Dafny.Helpers.Print((_0_j).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
      }
      PrettyPrinters.__default.PrintProofObjectBody(xs, BigInteger.Zero);
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}")).ToVerbatimString(false));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
    }
    public static void PrintProofObjectBody(Dafny.ISequence<ProofObject._IProofObj> xs, BigInteger num)
    {
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)).Sign == 1) {
        Dafny.ISequence<Dafny.Rune> _0_startAddress;
        _0_startAddress = Hex.__default.NatToHex((((((xs).Select(BigInteger.Zero)).dtor_s).Ins()).Select(BigInteger.Zero)).dtor_address);
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n/** Code starting at 0x")).ToVerbatimString(false));
        Dafny.Helpers.Print((_0_startAddress).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" */\n")).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("function {:opaque} ExecuteFromTag_")).ToVerbatimString(false));
        Dafny.Helpers.Print((num));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(s0: EvmState.ExecutingState): (s': EvmState.State)\n")).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("  requires s0.PC() == 0x")).ToVerbatimString(false));
        Dafny.Helpers.Print((_0_startAddress).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as nat\n")).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("  // Net Operands effect ")).ToVerbatimString(false));
        Dafny.Helpers.Print(((((xs).Select(BigInteger.Zero)).dtor_s).NetOpEffect()));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("  requires s0.Operands() >= ")).ToVerbatimString(false));
        Dafny.Helpers.Print((((xs).Select(BigInteger.Zero)).dtor_wpOp));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("  // Net Capacity effect ")).ToVerbatimString(false));
        Dafny.Helpers.Print(((((xs).Select(BigInteger.Zero)).dtor_s).NetCapEffect()));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("  requires s0.Capacity() >= ")).ToVerbatimString(false));
        Dafny.Helpers.Print((((xs).Select(BigInteger.Zero)).dtor_wpCap));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
        if ((((xs).Select(BigInteger.Zero)).is_JUMP) && ((((((xs).Select(BigInteger.Zero)).dtor_s).dtor_lastIns).dtor_op).IsJump())) {
          {
            MiscTypes._IEither<StackElement._IStackElem, BigInteger> _source0 = ((xs).Select(BigInteger.Zero)).dtor_tgt;
            {
              if (_source0.is_Right) {
                BigInteger _1_v = _source0.dtor_r;
                Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("  requires s0.IsJumpDest(s0.Peek(")).ToVerbatimString(false));
                Dafny.Helpers.Print((_1_v));
                Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))\n")).ToVerbatimString(false));
                goto after_match0;
              }
            }
            {
              Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")).ToVerbatimString(false));
            }
          after_match0: ;
          }
        }
        ProofObject._IProofObj _source1 = (xs).Select(BigInteger.Zero);
        {
          if (_source1.is_JUMP) {
            LinSegments._ILinSeg _2_s = _source1.dtor_s;
            MiscTypes._IEither<StackElement._IStackElem, BigInteger> _3_tgt = _source1.dtor_tgt;
            Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("  ensures s'.EXECUTING?\n")).ToVerbatimString(false));
            Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("  ensures s'.PC() ==  ")).ToVerbatimString(false));
            {
              MiscTypes._IEither<StackElement._IStackElem, BigInteger> _source2 = _3_tgt;
              {
                if (_source2.is_Left) {
                  StackElement._IStackElem _4_xc = _source2.dtor_l;
                  StackElement._IStackElem _source3 = _4_xc;
                  {
                    if (_source3.is_Value) {
                      BigInteger _5_v = _source3.dtor_v;
                      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0x")).ToVerbatimString(false));
                      Dafny.Helpers.Print((Hex.__default.NatToHex((_4_xc).Extract())).ToVerbatimString(false));
                      goto after_match3;
                    }
                  }
                  {
                    Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Could not extract value ")).ToVerbatimString(false));
                  }
                after_match3: ;
                  goto after_match2;
                }
              }
              {
                BigInteger _6_v = _source2.dtor_r;
                Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("s0.Peek(")).ToVerbatimString(false));
                Dafny.Helpers.Print((_6_v));
                Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as nat")).ToVerbatimString(false));
              }
            after_match2: ;
            }
            if (((((_2_s).dtor_lastIns).dtor_op).dtor_opcode) == (EVMConstants.__default.JUMPI)) {
              Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" || s'.PC() == 0x")).ToVerbatimString(false));
              Dafny.Helpers.Print((Hex.__default.NatToHex((((_2_s).dtor_lastIns).dtor_address) + (BigInteger.One))).ToVerbatimString(false));
            }
            Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
            BigInteger _7_n;
            _7_n = ((xs).Select(BigInteger.Zero)).StackEffect();
            Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("  ensures s'.Operands() == s0.Operands()")).ToVerbatimString(false));
            if ((_7_n).Sign != -1) {
              Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" + ")).ToVerbatimString(false));
              Dafny.Helpers.Print((_7_n));
            } else {
              Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" - ")).ToVerbatimString(false));
              Dafny.Helpers.Print(((BigInteger.Zero) - (_7_n)));
            }
            Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
            goto after_match1;
          }
        }
        {
          if (_source1.is_CONT) {
            LinSegments._ILinSeg _8_s = _source1.dtor_s;
            Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("  ensures s'.EXECUTING?\n")).ToVerbatimString(false));
            if (((((_8_s).dtor_lastIns).dtor_op).dtor_opcode) != (EVMConstants.__default.INVALID)) {
              BigInteger _9_nextPC;
              _9_nextPC = (_8_s).StartAddressNextSeg();
              Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("  ensures s'.PC() == 0x"), Hex.__default.NatToHex(_9_nextPC)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"))).ToVerbatimString(false));
              BigInteger _10_n;
              _10_n = ((xs).Select(BigInteger.Zero)).StackEffect();
              Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("  ensures s'.Operands() == s0.Operands()")).ToVerbatimString(false));
              if ((_10_n).Sign != -1) {
                Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" + ")).ToVerbatimString(false));
                Dafny.Helpers.Print((_10_n));
              } else {
                Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" - ")).ToVerbatimString(false));
                Dafny.Helpers.Print(((BigInteger.Zero) - (_10_n)));
              }
            } else {
              Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("  Last instruction is invalid")).ToVerbatimString(false));
            }
            Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
            goto after_match1;
          }
        }
        {
          LinSegments._ILinSeg _11_s = _source1.dtor_s;
          Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("  ensures s'.RETURNS?\n")).ToVerbatimString(false));
        }
      after_match1: ;
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n")).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("  ValidJumpDest(s0);\n")).ToVerbatimString(false));
        PrettyPrinters.__default.PrintInstructionsToDafny((((xs).Select(BigInteger.Zero)).dtor_s).Ins(), BigInteger.Zero);
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("  s")).ToVerbatimString(false));
        Dafny.Helpers.Print((new BigInteger(((((xs).Select(BigInteger.Zero)).dtor_s).Ins()).Count)));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n")).ToVerbatimString(false));
        Dafny.ISequence<ProofObject._IProofObj> _in0 = (xs).Drop(BigInteger.One);
        BigInteger _in1 = (num) + (BigInteger.One);
        xs = _in0;
        num = _in1;
        goto TAIL_CALL_START;
      }
    }
    public static void PrintInstructionsToDafny(Dafny.ISequence<Instructions._IInstruction> xs, BigInteger pos)
    {
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)).Sign == 1) {
        Dafny.ISequence<Dafny.Rune> _0_k;
        _0_k = PrettyIns.__default.PrintInstructionToDafny((xs).Select(BigInteger.Zero), pos, (pos) + (BigInteger.One));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("  ")).ToVerbatimString(false));
        Dafny.Helpers.Print((_0_k).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
        Dafny.ISequence<Instructions._IInstruction> _in0 = (xs).Drop(BigInteger.One);
        BigInteger _in1 = (pos) + (BigInteger.One);
        xs = _in0;
        pos = _in1;
        goto TAIL_CALL_START;
      }
    }
  }
} // end of namespace PrettyPrinters
namespace Automata {


  public partial class ValidAuto<T> {
    public static Automata._IAuto<T> Default() {
      return Automata.Auto<T>.create(Dafny.Map<BigInteger, Dafny.ISequence<BigInteger>>.FromElements(), Dafny.Map<BigInteger, Dafny.ISequence<BigInteger>>.FromElements(), Dafny.Sequence<T>.FromElements(), Dafny.Map<T, BigInteger>.FromElements());
    }
    public static Dafny.TypeDescriptor<Automata._IAuto<T>> _TypeDescriptor(Dafny.TypeDescriptor<T> _td_T) {
      return new Dafny.TypeDescriptor<Automata._IAuto<T>>(Automata.ValidAuto<T>.Default());
    }
  }

  public interface _IAuto<T> {
    bool is_Auto { get; }
    Dafny.IMap<BigInteger,Dafny.ISequence<BigInteger>> dtor_transitionsNat { get; }
    Dafny.IMap<BigInteger,Dafny.ISequence<BigInteger>> dtor_revTransitionsNat { get; }
    Dafny.ISequence<T> dtor_states { get; }
    Dafny.IMap<T,BigInteger> dtor_indexOf { get; }
    _IAuto<__T> DowncastClone<__T>(Func<T, __T> converter0);
    bool Equals(Automata._IAuto<T> b);
    Automata._IAuto<T> AddState(T i);
    Automata._IAuto<T> AddStates(Dafny.ISequence<T> xs);
    Automata._IAuto<T> AddEdge(T i, T j);
    Automata._IAuto<T> AddEdges(T i, Dafny.ISequence<T> js, BigInteger index);
    BigInteger SSize();
    BigInteger TSize(BigInteger index);
    Dafny.ISequence<T> Succ(T s);
    Dafny.ISequence<BigInteger> SuccNat(BigInteger i);
    Dafny.ISequence<BigInteger> PredNat(BigInteger i);
    void ToDot(Func<T, BigInteger, Dafny.ISequence<Dafny.Rune>> nodeToString, Func<T, BigInteger, T, Dafny.ISequence<Dafny.Rune>> labelToString, Dafny.ISequence<Dafny.Rune> prefix, Dafny.ISequence<Dafny.Rune> name);
  }
  public class Auto<T> : _IAuto<T> {
    public readonly Dafny.IMap<BigInteger,Dafny.ISequence<BigInteger>> _transitionsNat;
    public readonly Dafny.IMap<BigInteger,Dafny.ISequence<BigInteger>> _revTransitionsNat;
    public readonly Dafny.ISequence<T> _states;
    public readonly Dafny.IMap<T,BigInteger> _indexOf;
    public Auto(Dafny.IMap<BigInteger,Dafny.ISequence<BigInteger>> transitionsNat, Dafny.IMap<BigInteger,Dafny.ISequence<BigInteger>> revTransitionsNat, Dafny.ISequence<T> states, Dafny.IMap<T,BigInteger> indexOf) {
      this._transitionsNat = transitionsNat;
      this._revTransitionsNat = revTransitionsNat;
      this._states = states;
      this._indexOf = indexOf;
    }
    public _IAuto<__T> DowncastClone<__T>(Func<T, __T> converter0) {
      if (this is _IAuto<__T> dt) { return dt; }
      return new Auto<__T>(_transitionsNat, _revTransitionsNat, (_states).DowncastClone<__T>(Dafny.Helpers.CastConverter<T, __T>), (_indexOf).DowncastClone<__T, BigInteger>(Dafny.Helpers.CastConverter<T, __T>, Dafny.Helpers.Id<BigInteger>));
    }
    public override bool Equals(object other) {
      var oth = other as Automata.Auto<T>;
      return oth != null && object.Equals(this._transitionsNat, oth._transitionsNat) && object.Equals(this._revTransitionsNat, oth._revTransitionsNat) && object.Equals(this._states, oth._states) && object.Equals(this._indexOf, oth._indexOf);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._transitionsNat));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._revTransitionsNat));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._states));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._indexOf));
      return (int) hash;
    }
    public override string ToString() {
      string s = "Automata.Auto.Auto";
      s += "(";
      s += Dafny.Helpers.ToString(this._transitionsNat);
      s += ", ";
      s += Dafny.Helpers.ToString(this._revTransitionsNat);
      s += ", ";
      s += Dafny.Helpers.ToString(this._states);
      s += ", ";
      s += Dafny.Helpers.ToString(this._indexOf);
      s += ")";
      return s;
    }
    public static Automata._IAuto<T> Default() {
      return create(Dafny.Map<BigInteger, Dafny.ISequence<BigInteger>>.Empty, Dafny.Map<BigInteger, Dafny.ISequence<BigInteger>>.Empty, Dafny.Sequence<T>.Empty, Dafny.Map<T, BigInteger>.Empty);
    }
    public static Dafny.TypeDescriptor<Automata._IAuto<T>> _TypeDescriptor() {
      return new Dafny.TypeDescriptor<Automata._IAuto<T>>(Automata.Auto<T>.Default());
    }
    public static _IAuto<T> create(Dafny.IMap<BigInteger,Dafny.ISequence<BigInteger>> transitionsNat, Dafny.IMap<BigInteger,Dafny.ISequence<BigInteger>> revTransitionsNat, Dafny.ISequence<T> states, Dafny.IMap<T,BigInteger> indexOf) {
      return new Auto<T>(transitionsNat, revTransitionsNat, states, indexOf);
    }
    public static _IAuto<T> create_Auto(Dafny.IMap<BigInteger,Dafny.ISequence<BigInteger>> transitionsNat, Dafny.IMap<BigInteger,Dafny.ISequence<BigInteger>> revTransitionsNat, Dafny.ISequence<T> states, Dafny.IMap<T,BigInteger> indexOf) {
      return create(transitionsNat, revTransitionsNat, states, indexOf);
    }
    public bool is_Auto { get { return true; } }
    public Dafny.IMap<BigInteger,Dafny.ISequence<BigInteger>> dtor_transitionsNat {
      get {
        return this._transitionsNat;
      }
    }
    public Dafny.IMap<BigInteger,Dafny.ISequence<BigInteger>> dtor_revTransitionsNat {
      get {
        return this._revTransitionsNat;
      }
    }
    public Dafny.ISequence<T> dtor_states {
      get {
        return this._states;
      }
    }
    public Dafny.IMap<T,BigInteger> dtor_indexOf {
      get {
        return this._indexOf;
      }
    }
    public bool Equals(Automata._IAuto<T> b) {
      return (((this).dtor_transitionsNat).Equals((b).dtor_transitionsNat)) && (((this).dtor_states).Equals((b).dtor_states));
    }
    public Automata._IAuto<T> AddState(T i) {
      if (((this).dtor_states).Contains(i)) {
        return this;
      } else {
        Automata._IAuto<T> _0_dt__update__tmp_h0 = this;
        Dafny.IMap<BigInteger,Dafny.ISequence<BigInteger>> _1_dt__update_hrevTransitionsNat_h0 = Dafny.Map<BigInteger, Dafny.ISequence<BigInteger>>.Update((this).dtor_revTransitionsNat, new BigInteger(((this).dtor_states).Count), Dafny.Sequence<BigInteger>.FromElements());
        Dafny.IMap<BigInteger,Dafny.ISequence<BigInteger>> _2_dt__update_htransitionsNat_h0 = Dafny.Map<BigInteger, Dafny.ISequence<BigInteger>>.Update((this).dtor_transitionsNat, new BigInteger(((this).dtor_states).Count), Dafny.Sequence<BigInteger>.FromElements());
        Dafny.IMap<T,BigInteger> _3_dt__update_hindexOf_h0 = Dafny.Map<T, BigInteger>.Update((this).dtor_indexOf, i, new BigInteger(((this).dtor_states).Count));
        Dafny.ISequence<T> _4_dt__update_hstates_h0 = Dafny.Sequence<T>.Concat((this).dtor_states, Dafny.Sequence<T>.FromElements(i));
        return Automata.Auto<T>.create(_2_dt__update_htransitionsNat_h0, _1_dt__update_hrevTransitionsNat_h0, _4_dt__update_hstates_h0, _3_dt__update_hindexOf_h0);
      }
    }
    public Automata._IAuto<T> AddStates(Dafny.ISequence<T> xs) {
      _IAuto<T> _this = this;
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return _this;
      } else {
        Automata._IAuto<T> _in0 = (_this).AddState((xs).Select(BigInteger.Zero));
        Dafny.ISequence<T> _in1 = (xs).Drop(BigInteger.One);
        _this = _in0;
        ;
        xs = _in1;
        goto TAIL_CALL_START;
      }
    }
    public Automata._IAuto<T> AddEdge(T i, T j)
    {
      var _pat_let_tv0 = j;
      var _pat_let_tv1 = i;
      var _pat_let_tv2 = i;
      var _pat_let_tv3 = j;
      Automata._IAuto<T> _0_a1 = ((this).AddState(i)).AddState(j);
      if ((Dafny.Map<BigInteger, Dafny.ISequence<BigInteger>>.Select((_0_a1).dtor_transitionsNat,Dafny.Map<T, BigInteger>.Select((_0_a1).dtor_indexOf,i))).Contains(Dafny.Map<T, BigInteger>.Select((_0_a1).dtor_indexOf,j))) {
        return _0_a1;
      } else {
        Automata._IAuto<T> _1_w = Dafny.Helpers.Let<Automata._IAuto<T>, Automata._IAuto<T>>(_0_a1, _pat_let0_0 => Dafny.Helpers.Let<Automata._IAuto<T>, Automata._IAuto<T>>(_pat_let0_0, _2_dt__update__tmp_h0 => Dafny.Helpers.Let<Dafny.IMap<BigInteger,Dafny.ISequence<BigInteger>>, Automata._IAuto<T>>(MiscTypes.__default.AddKeyVal<BigInteger>((_0_a1).dtor_revTransitionsNat, Dafny.Map<T, BigInteger>.Select((_0_a1).dtor_indexOf,_pat_let_tv0), Dafny.Map<T, BigInteger>.Select((_0_a1).dtor_indexOf,_pat_let_tv1)), _pat_let1_0 => Dafny.Helpers.Let<Dafny.IMap<BigInteger,Dafny.ISequence<BigInteger>>, Automata._IAuto<T>>(_pat_let1_0, _3_dt__update_hrevTransitionsNat_h0 => Dafny.Helpers.Let<Dafny.IMap<BigInteger,Dafny.ISequence<BigInteger>>, Automata._IAuto<T>>(MiscTypes.__default.AddKeyVal<BigInteger>((_0_a1).dtor_transitionsNat, Dafny.Map<T, BigInteger>.Select((_0_a1).dtor_indexOf,_pat_let_tv2), Dafny.Map<T, BigInteger>.Select((_0_a1).dtor_indexOf,_pat_let_tv3)), _pat_let2_0 => Dafny.Helpers.Let<Dafny.IMap<BigInteger,Dafny.ISequence<BigInteger>>, Automata._IAuto<T>>(_pat_let2_0, _4_dt__update_htransitionsNat_h0 => Automata.Auto<T>.create(_4_dt__update_htransitionsNat_h0, _3_dt__update_hrevTransitionsNat_h0, (_2_dt__update__tmp_h0).dtor_states, (_2_dt__update__tmp_h0).dtor_indexOf)))))));
        return _1_w;
      }
    }
    public Automata._IAuto<T> AddEdges(T i, Dafny.ISequence<T> js, BigInteger index)
    {
      if ((new BigInteger((js).Count)) == (index)) {
        return (this).AddState(i);
      } else {
        Automata._IAuto<T> _0_a1 = (this).AddEdge(i, (js).Select(index));
        Automata._IAuto<T> _1_a2 = (_0_a1).AddEdges(i, js, (index) + (BigInteger.One));
        return _1_a2;
      }
    }
    public BigInteger SSize() {
      return new BigInteger(((this).dtor_states).Count);
    }
    public BigInteger TSize(BigInteger index) {
      BigInteger _0___accumulator = BigInteger.Zero;
      _IAuto<T> _this = this;
    TAIL_CALL_START: ;
      if ((index) == (new BigInteger(((_this).dtor_states).Count))) {
        return (BigInteger.Zero) + (_0___accumulator);
      } else {
        _0___accumulator = (_0___accumulator) + (new BigInteger((Dafny.Map<BigInteger, Dafny.ISequence<BigInteger>>.Select((_this).dtor_transitionsNat,index)).Count));
        Automata._IAuto<T> _in0 = _this;
        BigInteger _in1 = (index) + (BigInteger.One);
        _this = _in0;
        ;
        index = _in1;
        goto TAIL_CALL_START;
      }
    }
    public Dafny.ISequence<T> Succ(T s) {
      return ((System.Func<Dafny.ISequence<T>>) (() => {
        BigInteger dim11 = new BigInteger((Dafny.Map<BigInteger, Dafny.ISequence<BigInteger>>.Select((this).dtor_transitionsNat,Dafny.Map<T, BigInteger>.Select((this).dtor_indexOf,s))).Count);
        var arr11 = new T[Dafny.Helpers.ToIntChecked(dim11, "array size exceeds memory limit")];
        for (int i11 = 0; i11 < dim11; i11++) {
          var _0_i = (BigInteger) i11;
          arr11[(int)(_0_i)] = ((this).dtor_states).Select((Dafny.Map<BigInteger, Dafny.ISequence<BigInteger>>.Select((this).dtor_transitionsNat,Dafny.Map<T, BigInteger>.Select((this).dtor_indexOf,s))).Select(_0_i));
        }
        return Dafny.Sequence<T>.FromArray(arr11);
      }))();
    }
    public Dafny.ISequence<BigInteger> SuccNat(BigInteger i) {
      return Dafny.Map<BigInteger, Dafny.ISequence<BigInteger>>.Select((this).dtor_transitionsNat,i);
    }
    public Dafny.ISequence<BigInteger> PredNat(BigInteger i) {
      return Dafny.Map<BigInteger, Dafny.ISequence<BigInteger>>.Select((this).dtor_revTransitionsNat,i);
    }
    public void ToDot(Func<T, BigInteger, Dafny.ISequence<Dafny.Rune>> nodeToString, Func<T, BigInteger, T, Dafny.ISequence<Dafny.Rune>> labelToString, Dafny.ISequence<Dafny.Rune> prefix, Dafny.ISequence<Dafny.Rune> name)
    {
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("// Number of states: ")).ToVerbatimString(false));
      Dafny.Helpers.Print(((this).SSize()));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("// Number of transitions : ")).ToVerbatimString(false));
      Dafny.Helpers.Print(((this).TSize(BigInteger.Zero)));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("digraph G {\n")).ToVerbatimString(false));
      Dafny.Helpers.Print((prefix).ToVerbatimString(false));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
      BigInteger _hi0 = new BigInteger(((this).dtor_states).Count);
      for (BigInteger _0_i = BigInteger.Zero; _0_i < _hi0; _0_i++) {
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("s_")).ToVerbatimString(false));
        Dafny.Helpers.Print((_0_i));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" [label=")).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Helpers.Id<Func<T, BigInteger, Dafny.ISequence<Dafny.Rune>>>(nodeToString)(((this).dtor_states).Select(_0_i), _0_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]\n"))).ToVerbatimString(false));
      }
      BigInteger _hi1 = new BigInteger(((this).dtor_states).Count);
      for (BigInteger _1_i = BigInteger.Zero; _1_i < _hi1; _1_i++) {
        BigInteger _hi2 = new BigInteger((Dafny.Map<BigInteger, Dafny.ISequence<BigInteger>>.Select((this).dtor_transitionsNat,_1_i)).Count);
        for (BigInteger _2_j = BigInteger.Zero; _2_j < _hi2; _2_j++) {
          Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("s_")).ToVerbatimString(false));
          Dafny.Helpers.Print((_1_i));
          Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" -> ")).ToVerbatimString(false));
          Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("s_")).ToVerbatimString(false));
          Dafny.Helpers.Print(((Dafny.Map<BigInteger, Dafny.ISequence<BigInteger>>.Select((this).dtor_transitionsNat,_1_i)).Select(_2_j)));
          Dafny.Helpers.Print((Dafny.Helpers.Id<Func<T, BigInteger, T, Dafny.ISequence<Dafny.Rune>>>(labelToString)(((this).dtor_states).Select(_1_i), _2_j, ((this).dtor_states).Select((Dafny.Map<BigInteger, Dafny.ISequence<BigInteger>>.Select((this).dtor_transitionsNat,_1_i)).Select(_2_j)))).ToVerbatimString(false));
          Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n")).ToVerbatimString(false));
        }
      }
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n")).ToVerbatimString(false));
    }
  }
} // end of namespace Automata
namespace SeqOfSets {

  public partial class __default {
    public static Dafny.ISet<__T> SetU<__T>(Dafny.ISequence<Dafny.ISet<__T>> xs) {
      Dafny.ISet<__T> _0___accumulator = Dafny.Set<__T>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Dafny.Set<__T>.Union(Dafny.Set<__T>.FromElements(), _0___accumulator);
      } else {
        _0___accumulator = Dafny.Set<__T>.Union(_0___accumulator, (xs).Select(BigInteger.Zero));
        Dafny.ISequence<Dafny.ISet<__T>> _in0 = (xs).Drop(BigInteger.One);
        xs = _in0;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISet<__T> SetI<__T>(Dafny.ISequence<Dafny.ISet<__T>> xs) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Dafny.Set<__T>.FromElements();
      } else if ((new BigInteger((xs).Count)) == (BigInteger.One)) {
        return (xs).Select(BigInteger.Zero);
      } else {
        return Dafny.Set<__T>.Intersect((xs).Select(BigInteger.Zero), SeqOfSets.__default.SetI<__T>((xs).Drop(BigInteger.One)));
      }
    }
    public static _System._ITuple2<Dafny.ISet<BigInteger>, Dafny.ISet<BigInteger>> SplitSet(Dafny.ISet<BigInteger> xs, Func<BigInteger, bool> f)
    {
      Dafny.ISequence<BigInteger> _0_asSeq = SeqOfSets.__default.SetToSequence(xs);
      return SeqOfSets.__default.SplitSeqTail(_0_asSeq, f, Dafny.Set<BigInteger>.FromElements(), Dafny.Set<BigInteger>.FromElements(), BigInteger.Zero);
    }
    public static Dafny.ISequence<_System._ITuple2<Dafny.ISet<BigInteger>, Dafny.ISet<BigInteger>>> SplitSeqOfSet(Dafny.ISequence<Dafny.ISet<BigInteger>> xs, Func<BigInteger, bool> f)
    {
      Dafny.ISequence<_System._ITuple2<Dafny.ISet<BigInteger>, Dafny.ISet<BigInteger>>> _0___accumulator = Dafny.Sequence<_System._ITuple2<Dafny.ISet<BigInteger>, Dafny.ISet<BigInteger>>>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Dafny.Sequence<_System._ITuple2<Dafny.ISet<BigInteger>, Dafny.ISet<BigInteger>>>.Concat(_0___accumulator, Dafny.Sequence<_System._ITuple2<Dafny.ISet<BigInteger>, Dafny.ISet<BigInteger>>>.FromElements());
      } else {
        _0___accumulator = Dafny.Sequence<_System._ITuple2<Dafny.ISet<BigInteger>, Dafny.ISet<BigInteger>>>.Concat(_0___accumulator, Dafny.Sequence<_System._ITuple2<Dafny.ISet<BigInteger>, Dafny.ISet<BigInteger>>>.FromElements(SeqOfSets.__default.SplitSet((xs).Select(BigInteger.Zero), f)));
        Dafny.ISequence<Dafny.ISet<BigInteger>> _in0 = (xs).Drop(BigInteger.One);
        Func<BigInteger, bool> _in1 = f;
        xs = _in0;
        f = _in1;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> SetToSequence(Dafny.ISet<BigInteger> s) {
      Dafny.ISequence<BigInteger> _0___accumulator = Dafny.Sequence<BigInteger>.FromElements();
    TAIL_CALL_START: ;
      var _pat_let_tv0 = s;
      if ((s).Equals(Dafny.Set<BigInteger>.FromElements())) {
        return Dafny.Sequence<BigInteger>.Concat(_0___accumulator, Dafny.Sequence<BigInteger>.FromElements());
      } else {
        return Dafny.Helpers.Let<int, Dafny.ISequence<BigInteger>>(0, _let_dummy_3 =>  {
          BigInteger _1_x = default(BigInteger);
          foreach (BigInteger _assign_such_that_0 in (s).Elements) {
            _1_x = (BigInteger)_assign_such_that_0;
            if (_System.nat._Is(_1_x)) {
              if (((s).Contains(_1_x)) && (Dafny.Helpers.Id<Func<Dafny.ISet<BigInteger>, BigInteger, bool>>((_2_s, _3_x) => Dafny.Helpers.Quantifier<BigInteger>((_2_s).Elements, true, (((_forall_var_0) => {
                BigInteger _4_y = (BigInteger)_forall_var_0;
                if (_System.nat._Is(_4_y)) {
                  return !((_2_s).Contains(_4_y)) || ((_3_x) <= (_4_y));
                } else {
                  return true;
                }
              }))))(s, _1_x))) {
                goto after__ASSIGN_SUCH_THAT_0;
              }
            }
          }
          throw new System.Exception("assign-such-that search produced no value");
        after__ASSIGN_SUCH_THAT_0: ;
          return Dafny.Sequence<BigInteger>.Concat(Dafny.Sequence<BigInteger>.FromElements(_1_x), SeqOfSets.__default.SetToSequence(Dafny.Set<BigInteger>.Difference(_pat_let_tv0, Dafny.Set<BigInteger>.FromElements(_1_x))));
        }
        );
      }
    }
    public static _System._ITuple2<Dafny.ISet<BigInteger>, Dafny.ISet<BigInteger>> SplitSeqTail(Dafny.ISequence<BigInteger> xs, Func<BigInteger, bool> f, Dafny.ISet<BigInteger> cTrue, Dafny.ISet<BigInteger> cFalse, BigInteger index)
    {
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)) == (index)) {
        return _System.Tuple2<Dafny.ISet<BigInteger>, Dafny.ISet<BigInteger>>.create(cTrue, cFalse);
      } else if (Dafny.Helpers.Id<Func<BigInteger, bool>>(f)((xs).Select(index))) {
        Dafny.ISequence<BigInteger> _in0 = xs;
        Func<BigInteger, bool> _in1 = f;
        Dafny.ISet<BigInteger> _in2 = Dafny.Set<BigInteger>.Union(cTrue, Dafny.Set<BigInteger>.FromElements((xs).Select(index)));
        Dafny.ISet<BigInteger> _in3 = cFalse;
        BigInteger _in4 = (index) + (BigInteger.One);
        xs = _in0;
        f = _in1;
        cTrue = _in2;
        cFalse = _in3;
        index = _in4;
        goto TAIL_CALL_START;
      } else {
        Dafny.ISequence<BigInteger> _in5 = xs;
        Func<BigInteger, bool> _in6 = f;
        Dafny.ISet<BigInteger> _in7 = cTrue;
        Dafny.ISet<BigInteger> _in8 = Dafny.Set<BigInteger>.Union(cFalse, Dafny.Set<BigInteger>.FromElements((xs).Select(index)));
        BigInteger _in9 = (index) + (BigInteger.One);
        xs = _in5;
        f = _in6;
        cTrue = _in7;
        cFalse = _in8;
        index = _in9;
        goto TAIL_CALL_START;
      }
    }
  }
} // end of namespace SeqOfSets
namespace PartitionMod {

  public partial class __default {
    public static PartitionMod._IPartition MakeInit(BigInteger n) {
      Dafny.ISet<BigInteger> _0_s = Dafny.Helpers.Id<Func<BigInteger, Dafny.ISet<BigInteger>>>((_1_n) => ((System.Func<Dafny.ISet<BigInteger>>)(() => {
        var _coll0 = new System.Collections.Generic.List<BigInteger>();
        foreach (BigInteger _compr_0 in Dafny.Helpers.IntegerRange(BigInteger.Zero, _1_n)) {
          BigInteger _2_q = (BigInteger)_compr_0;
          if (((_2_q).Sign != -1) && ((_2_q) < (_1_n))) {
            _coll0.Add(_2_q);
          }
        }
        return Dafny.Set<BigInteger>.FromCollection(_coll0);
      }))())(n);
      return PartitionMod.Partition.create(n, Dafny.Sequence<Dafny.ISet<BigInteger>>.FromElements(_0_s));
    }
    public static Dafny.ISequence<Dafny.ISet<BigInteger>> SplitTrueAndFalse(Dafny.ISet<BigInteger> xs, Func<BigInteger, BigInteger, bool> equiv, BigInteger n)
    {
      Dafny.ISequence<Dafny.ISet<BigInteger>> _0___accumulator = Dafny.Sequence<Dafny.ISet<BigInteger>>.FromElements();
    TAIL_CALL_START: ;
      BigInteger _1_first = (SeqOfSets.__default.SetToSequence(xs)).Select(BigInteger.Zero);
      Dafny.ISet<BigInteger> _2_xsTrue = Dafny.Helpers.Id<Func<Dafny.ISet<BigInteger>, Func<BigInteger, BigInteger, bool>, BigInteger, Dafny.ISet<BigInteger>>>((_3_xs, _4_equiv, _5_first) => ((System.Func<Dafny.ISet<BigInteger>>)(() => {
        var _coll0 = new System.Collections.Generic.List<BigInteger>();
        foreach (BigInteger _compr_0 in (_3_xs).Elements) {
          BigInteger _6_x = (BigInteger)_compr_0;
          if (_System.nat._Is(_6_x)) {
            if (((_3_xs).Contains(_6_x)) && (Dafny.Helpers.Id<Func<BigInteger, BigInteger, bool>>(_4_equiv)(_5_first, _6_x))) {
              _coll0.Add(_6_x);
            }
          }
        }
        return Dafny.Set<BigInteger>.FromCollection(_coll0);
      }))())(xs, equiv, _1_first);
      Dafny.ISet<BigInteger> _7_xsFalse = Dafny.Set<BigInteger>.Difference(xs, _2_xsTrue);
      if ((_7_xsFalse).Equals(Dafny.Set<BigInteger>.FromElements())) {
        return Dafny.Sequence<Dafny.ISet<BigInteger>>.Concat(_0___accumulator, Dafny.Sequence<Dafny.ISet<BigInteger>>.FromElements(_2_xsTrue));
      } else {
        _0___accumulator = Dafny.Sequence<Dafny.ISet<BigInteger>>.Concat(_0___accumulator, Dafny.Sequence<Dafny.ISet<BigInteger>>.FromElements(_2_xsTrue));
        Dafny.ISet<BigInteger> _in0 = _7_xsFalse;
        Func<BigInteger, BigInteger, bool> _in1 = equiv;
        BigInteger _in2 = n;
        xs = _in0;
        equiv = _in1;
        n = _in2;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.ISequence<Dafny.ISet<BigInteger>>> SplitAllClasses(Dafny.ISequence<Dafny.ISet<BigInteger>> xs, Func<BigInteger, BigInteger, bool> equiv, BigInteger n)
    {
      return ((System.Func<Dafny.ISequence<Dafny.ISequence<Dafny.ISet<BigInteger>>>>) (() => {
        BigInteger dim12 = new BigInteger((xs).Count);
        var arr12 = new Dafny.ISequence<Dafny.ISet<BigInteger>>[Dafny.Helpers.ToIntChecked(dim12, "array size exceeds memory limit")];
        for (int i12 = 0; i12 < dim12; i12++) {
          var _0_i = (BigInteger) i12;
          arr12[(int)(_0_i)] = PartitionMod.__default.SplitTrueAndFalse((xs).Select(_0_i), equiv, n);
        }
        return Dafny.Sequence<Dafny.ISequence<Dafny.ISet<BigInteger>>>.FromArray(arr12);
      }))();
    }
    public static void PrintPartition(PartitionMod._IPartition p)
    {
      BigInteger _hi0 = new BigInteger(((p).dtor_elem).Count);
      for (BigInteger _0_k = BigInteger.Zero; _0_k < _hi0; _0_k++) {
        Dafny.ISequence<BigInteger> _1_setToSeq;
        _1_setToSeq = SeqOfSets.__default.SetToSequence(((p).dtor_elem).Select(_0_k));
        Dafny.Helpers.Print((_1_setToSeq));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
      }
    }
  }

  public partial class ValidPartition {
    private static readonly PartitionMod._IPartition Witness = PartitionMod.__default.MakeInit(BigInteger.One);
    public static PartitionMod._IPartition Default() {
      return Witness;
    }
    private static readonly Dafny.TypeDescriptor<PartitionMod._IPartition> _TYPE = new Dafny.TypeDescriptor<PartitionMod._IPartition>(PartitionMod.ValidPartition.Default());
    public static Dafny.TypeDescriptor<PartitionMod._IPartition> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public interface _IPartition {
    bool is_Partition { get; }
    BigInteger dtor_n { get; }
    Dafny.ISequence<Dafny.ISet<BigInteger>> dtor_elem { get; }
    _IPartition DowncastClone();
    PartitionMod._IPartition SplitIn2(Func<BigInteger, bool> f);
    PartitionMod._IPartition ComputeFinest(Func<BigInteger, BigInteger, bool> equiv);
    PartitionMod._IPartition RefineAll(Func<BigInteger, BigInteger, bool> equiv);
    BigInteger GetClass(BigInteger x, BigInteger index);
    BigInteger GetClassRepOf(BigInteger x);
    Dafny.ISequence<BigInteger> GetClassRepOfSeqs(Dafny.ISequence<BigInteger> xs);
  }
  public class Partition : _IPartition {
    public readonly BigInteger _n;
    public readonly Dafny.ISequence<Dafny.ISet<BigInteger>> _elem;
    public Partition(BigInteger n, Dafny.ISequence<Dafny.ISet<BigInteger>> elem) {
      this._n = n;
      this._elem = elem;
    }
    public _IPartition DowncastClone() {
      if (this is _IPartition dt) { return dt; }
      return new Partition(_n, _elem);
    }
    public override bool Equals(object other) {
      var oth = other as PartitionMod.Partition;
      return oth != null && this._n == oth._n && object.Equals(this._elem, oth._elem);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._n));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elem));
      return (int) hash;
    }
    public override string ToString() {
      string s = "PartitionMod.Partition.Partition";
      s += "(";
      s += Dafny.Helpers.ToString(this._n);
      s += ", ";
      s += Dafny.Helpers.ToString(this._elem);
      s += ")";
      return s;
    }
    private static readonly PartitionMod._IPartition theDefault = create(BigInteger.Zero, Dafny.Sequence<Dafny.ISet<BigInteger>>.Empty);
    public static PartitionMod._IPartition Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<PartitionMod._IPartition> _TYPE = new Dafny.TypeDescriptor<PartitionMod._IPartition>(PartitionMod.Partition.Default());
    public static Dafny.TypeDescriptor<PartitionMod._IPartition> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IPartition create(BigInteger n, Dafny.ISequence<Dafny.ISet<BigInteger>> elem) {
      return new Partition(n, elem);
    }
    public static _IPartition create_Partition(BigInteger n, Dafny.ISequence<Dafny.ISet<BigInteger>> elem) {
      return create(n, elem);
    }
    public bool is_Partition { get { return true; } }
    public BigInteger dtor_n {
      get {
        return this._n;
      }
    }
    public Dafny.ISequence<Dafny.ISet<BigInteger>> dtor_elem {
      get {
        return this._elem;
      }
    }
    public PartitionMod._IPartition SplitIn2(Func<BigInteger, bool> f) {
      Dafny.ISet<BigInteger> _0_sTrue = Dafny.Helpers.Id<Func<Func<BigInteger, bool>, Dafny.ISet<BigInteger>>>((_1_f) => ((System.Func<Dafny.ISet<BigInteger>>)(() => {
        var _coll0 = new System.Collections.Generic.List<BigInteger>();
        foreach (BigInteger _compr_0 in (SeqOfSets.__default.SetU<BigInteger>((this).dtor_elem)).Elements) {
          BigInteger _2_q = (BigInteger)_compr_0;
          if (_System.nat._Is(_2_q)) {
            if (((SeqOfSets.__default.SetU<BigInteger>((this).dtor_elem)).Contains(_2_q)) && (Dafny.Helpers.Id<Func<BigInteger, bool>>(_1_f)(_2_q))) {
              _coll0.Add(_2_q);
            }
          }
        }
        return Dafny.Set<BigInteger>.FromCollection(_coll0);
      }))())(f);
      Dafny.ISet<BigInteger> _3_sFalse = Dafny.Set<BigInteger>.Difference(SeqOfSets.__default.SetU<BigInteger>((this).dtor_elem), _0_sTrue);
      Dafny.ISequence<Dafny.ISet<BigInteger>> _4_d = Dafny.Sequence<Dafny.ISet<BigInteger>>.Concat(((!(_0_sTrue).Equals(Dafny.Set<BigInteger>.FromElements())) ? (Dafny.Sequence<Dafny.ISet<BigInteger>>.FromElements(_0_sTrue)) : (Dafny.Sequence<Dafny.ISet<BigInteger>>.FromElements())), ((!(_3_sFalse).Equals(Dafny.Set<BigInteger>.FromElements())) ? (Dafny.Sequence<Dafny.ISet<BigInteger>>.FromElements(_3_sFalse)) : (Dafny.Sequence<Dafny.ISet<BigInteger>>.FromElements())));
      PartitionMod._IPartition _5_e = Dafny.Helpers.Let<PartitionMod._IPartition, PartitionMod._IPartition>(this, _pat_let4_0 => Dafny.Helpers.Let<PartitionMod._IPartition, PartitionMod._IPartition>(_pat_let4_0, _6_dt__update__tmp_h0 => Dafny.Helpers.Let<Dafny.ISequence<Dafny.ISet<BigInteger>>, PartitionMod._IPartition>(_4_d, _pat_let5_0 => Dafny.Helpers.Let<Dafny.ISequence<Dafny.ISet<BigInteger>>, PartitionMod._IPartition>(_pat_let5_0, _7_dt__update_helem_h0 => PartitionMod.Partition.create((_6_dt__update__tmp_h0).dtor_n, _7_dt__update_helem_h0)))));
      return _5_e;
    }
    public PartitionMod._IPartition ComputeFinest(Func<BigInteger, BigInteger, bool> equiv) {
      Dafny.ISequence<Dafny.ISet<BigInteger>> _0_k = PartitionMod.__default.SplitTrueAndFalse(SeqOfSets.__default.SetU<BigInteger>((this).dtor_elem), equiv, (this).dtor_n);
      PartitionMod._IPartition _1_dt__update__tmp_h0 = this;
      Dafny.ISequence<Dafny.ISet<BigInteger>> _2_dt__update_helem_h0 = _0_k;
      return PartitionMod.Partition.create((_1_dt__update__tmp_h0).dtor_n, _2_dt__update_helem_h0);
    }
    public PartitionMod._IPartition RefineAll(Func<BigInteger, BigInteger, bool> equiv) {
      Dafny.ISequence<Dafny.ISequence<Dafny.ISet<BigInteger>>> _0_k = PartitionMod.__default.SplitAllClasses((this).dtor_elem, equiv, (this).dtor_n);
      Dafny.ISequence<Dafny.ISet<BigInteger>> _1_d = MiscTypes.__default.Flatten<Dafny.ISet<BigInteger>>(_0_k);
      PartitionMod._IPartition _2_e = Dafny.Helpers.Let<PartitionMod._IPartition, PartitionMod._IPartition>(this, _pat_let6_0 => Dafny.Helpers.Let<PartitionMod._IPartition, PartitionMod._IPartition>(_pat_let6_0, _3_dt__update__tmp_h0 => Dafny.Helpers.Let<Dafny.ISequence<Dafny.ISet<BigInteger>>, PartitionMod._IPartition>(_1_d, _pat_let7_0 => Dafny.Helpers.Let<Dafny.ISequence<Dafny.ISet<BigInteger>>, PartitionMod._IPartition>(_pat_let7_0, _4_dt__update_helem_h0 => PartitionMod.Partition.create((_3_dt__update__tmp_h0).dtor_n, _4_dt__update_helem_h0)))));
      return _2_e;
    }
    public BigInteger GetClass(BigInteger x, BigInteger index)
    {
      _IPartition _this = this;
    TAIL_CALL_START: ;
      if ((((_this).dtor_elem).Select(index)).Contains(x)) {
        return index;
      } else {
        PartitionMod._IPartition _in0 = _this;
        BigInteger _in1 = x;
        BigInteger _in2 = (index) + (BigInteger.One);
        _this = _in0;
        ;
        x = _in1;
        index = _in2;
        goto TAIL_CALL_START;
      }
    }
    public BigInteger GetClassRepOf(BigInteger x) {
      BigInteger _0_c = (this).GetClass(x, BigInteger.Zero);
      return (SeqOfSets.__default.SetToSequence(((this).dtor_elem).Select(_0_c))).Select(BigInteger.Zero);
    }
    public Dafny.ISequence<BigInteger> GetClassRepOfSeqs(Dafny.ISequence<BigInteger> xs) {
      Dafny.ISequence<BigInteger> _0___accumulator = Dafny.Sequence<BigInteger>.FromElements();
      _IPartition _this = this;
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Dafny.Sequence<BigInteger>.Concat(_0___accumulator, Dafny.Sequence<BigInteger>.FromElements());
      } else {
        _0___accumulator = Dafny.Sequence<BigInteger>.Concat(_0___accumulator, Dafny.Sequence<BigInteger>.FromElements((_this).GetClassRepOf((xs).Select(BigInteger.Zero))));
        PartitionMod._IPartition _in0 = _this;
        Dafny.ISequence<BigInteger> _in1 = (xs).Drop(BigInteger.One);
        _this = _in0;
        ;
        xs = _in1;
        goto TAIL_CALL_START;
      }
    }
  }
} // end of namespace PartitionMod
namespace GStateMinimiser {

  public partial class __default {
    public static GStateMinimiser._IPair MakeInit(Automata._IAuto<CFGState._IGState> aut, PartitionMod._IPartition clazz)
    {
      return GStateMinimiser.Pair.create(aut, clazz);
    }
    public static CFGState._IGState DEFAULT__STATE { get {
      return CFGState.__default.DEFAULT__GSTATE;
    } }
  }

  public partial class ValidPair {
    private static readonly GStateMinimiser._IPair Witness = GStateMinimiser.Pair.create((Automata.Auto<CFGState._IGState>.create(Dafny.Map<BigInteger, Dafny.ISequence<BigInteger>>.FromElements(), Dafny.Map<BigInteger, Dafny.ISequence<BigInteger>>.FromElements(), Dafny.Sequence<CFGState._IGState>.FromElements(), Dafny.Map<CFGState._IGState, BigInteger>.FromElements())).AddState(GStateMinimiser.__default.DEFAULT__STATE), PartitionMod.__default.MakeInit(BigInteger.One));
    public static GStateMinimiser._IPair Default() {
      return Witness;
    }
    private static readonly Dafny.TypeDescriptor<GStateMinimiser._IPair> _TYPE = new Dafny.TypeDescriptor<GStateMinimiser._IPair>(GStateMinimiser.ValidPair.Default());
    public static Dafny.TypeDescriptor<GStateMinimiser._IPair> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public interface _IPair {
    bool is_Pair { get; }
    Automata._IAuto<CFGState._IGState> dtor_aut { get; }
    PartitionMod._IPartition dtor_clazz { get; }
    _IPair DowncastClone();
    Dafny.ISequence<BigInteger> ClassSucc(BigInteger x);
    GStateMinimiser._IPair ClassSplitter();
    bool Splitter(BigInteger x, BigInteger y);
    Automata._IAuto<CFGState._IGState> Minimise();
    Automata._IAuto<CFGState._IGState> MapToClasses(Automata._IAuto<CFGState._IGState> acc, BigInteger index);
  }
  public class Pair : _IPair {
    public readonly Automata._IAuto<CFGState._IGState> _aut;
    public readonly PartitionMod._IPartition _clazz;
    public Pair(Automata._IAuto<CFGState._IGState> aut, PartitionMod._IPartition clazz) {
      this._aut = aut;
      this._clazz = clazz;
    }
    public _IPair DowncastClone() {
      if (this is _IPair dt) { return dt; }
      return new Pair(_aut, _clazz);
    }
    public override bool Equals(object other) {
      var oth = other as GStateMinimiser.Pair;
      return oth != null && object.Equals(this._aut, oth._aut) && object.Equals(this._clazz, oth._clazz);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._aut));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._clazz));
      return (int) hash;
    }
    public override string ToString() {
      string s = "GStateMinimiser.Pair.Pair";
      s += "(";
      s += Dafny.Helpers.ToString(this._aut);
      s += ", ";
      s += Dafny.Helpers.ToString(this._clazz);
      s += ")";
      return s;
    }
    private static readonly GStateMinimiser._IPair theDefault = create(Automata.ValidAuto<CFGState._IGState>.Default(), PartitionMod.ValidPartition.Default());
    public static GStateMinimiser._IPair Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<GStateMinimiser._IPair> _TYPE = new Dafny.TypeDescriptor<GStateMinimiser._IPair>(GStateMinimiser.Pair.Default());
    public static Dafny.TypeDescriptor<GStateMinimiser._IPair> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IPair create(Automata._IAuto<CFGState._IGState> aut, PartitionMod._IPartition clazz) {
      return new Pair(aut, clazz);
    }
    public static _IPair create_Pair(Automata._IAuto<CFGState._IGState> aut, PartitionMod._IPartition clazz) {
      return create(aut, clazz);
    }
    public bool is_Pair { get { return true; } }
    public Automata._IAuto<CFGState._IGState> dtor_aut {
      get {
        return this._aut;
      }
    }
    public PartitionMod._IPartition dtor_clazz {
      get {
        return this._clazz;
      }
    }
    public Dafny.ISequence<BigInteger> ClassSucc(BigInteger x) {
      Dafny.ISequence<BigInteger> _0_l = ((this).dtor_aut).SuccNat(x);
      return ((System.Func<Dafny.ISequence<BigInteger>>) (() => {
        BigInteger dim13 = new BigInteger((_0_l).Count);
        var arr13 = new BigInteger[Dafny.Helpers.ToIntChecked(dim13, "array size exceeds memory limit")];
        for (int i13 = 0; i13 < dim13; i13++) {
          var _1_z = (BigInteger) i13;
          arr13[(int)(_1_z)] = ((this).dtor_clazz).GetClass((_0_l).Select(_1_z), BigInteger.Zero);
        }
        return Dafny.Sequence<BigInteger>.FromArray(arr13);
      }))();
    }
    public GStateMinimiser._IPair ClassSplitter() {
      GStateMinimiser._IPair _0_dt__update__tmp_h0 = this;
      PartitionMod._IPartition _1_dt__update_hclazz_h0 = ((this).dtor_clazz).RefineAll(this.Splitter);
      return GStateMinimiser.Pair.create((_0_dt__update__tmp_h0).dtor_aut, _1_dt__update_hclazz_h0);
    }
    public bool Splitter(BigInteger x, BigInteger y)
    {
      return ((this).ClassSucc(x)).Equals((this).ClassSucc(y));
    }
    public Automata._IAuto<CFGState._IGState> Minimise() {
      GStateMinimiser._IPair _0_p1 = GStateMinimiser.Pair.IterSplit(this);
      return (_0_p1).MapToClasses(Automata.Auto<CFGState._IGState>.create(Dafny.Map<BigInteger, Dafny.ISequence<BigInteger>>.FromElements(), Dafny.Map<BigInteger, Dafny.ISequence<BigInteger>>.FromElements(), Dafny.Sequence<CFGState._IGState>.FromElements(), Dafny.Map<CFGState._IGState, BigInteger>.FromElements()), BigInteger.Zero);
    }
    public Automata._IAuto<CFGState._IGState> MapToClasses(Automata._IAuto<CFGState._IGState> acc, BigInteger index)
    {
      if ((index) == (new BigInteger((((this).dtor_aut).dtor_states).Count))) {
        return acc;
      } else {
        Dafny.ISequence<CFGState._IGState> _0_succs = MiscTypes.__default.MapP<BigInteger, CFGState._IGState>(((this).dtor_clazz).GetClassRepOfSeqs(Dafny.Map<BigInteger, Dafny.ISequence<BigInteger>>.Select(((this).dtor_aut).dtor_transitionsNat,index)), ((System.Func<BigInteger, CFGState._IGState>)((_1_i) => {
          return (((this).dtor_aut).dtor_states).Select(_1_i);
        })));
        Automata._IAuto<CFGState._IGState> _2_a_k = (this).MapToClasses((acc).AddEdges((((this).dtor_aut).dtor_states).Select(((this).dtor_clazz).GetClassRepOf(index)), _0_succs, BigInteger.Zero), (index) + (BigInteger.One));
        return _2_a_k;
      }
    }
    public static GStateMinimiser._IPair IterSplit(GStateMinimiser._IPair pp) {
    TAIL_CALL_START: ;
      GStateMinimiser._IPair _0_p1 = (pp).ClassSplitter();
      if ((new BigInteger((((_0_p1).dtor_clazz).dtor_elem).Count)) == (new BigInteger((((pp).dtor_clazz).dtor_elem).Count))) {
        return pp;
      } else {
        GStateMinimiser._IPair _in0 = _0_p1;
        pp = _in0;
        goto TAIL_CALL_START;
      }
    }
  }
} // end of namespace GStateMinimiser
namespace Statistics {

  public partial class __default {
    public static Statistics._IStats DEFAULT__STATS { get {
      return Statistics.Stats.create(false, BigInteger.Zero, BigInteger.Zero, BigInteger.Zero, _System.Tuple2<BigInteger, BigInteger>.create(BigInteger.Zero, BigInteger.Zero));
    } }
  }

  public interface _IStats {
    bool is_Stats { get; }
    bool dtor_maxDepthReached { get; }
    BigInteger dtor_visitedStates { get; }
    BigInteger dtor_wPreInvSuccess { get; }
    BigInteger dtor_errorState { get; }
    _System._ITuple2<BigInteger, BigInteger> dtor_nonMinimisedSize { get; }
    _IStats DowncastClone();
    Statistics._IStats SetMaxDepth();
    Statistics._IStats IncVisited();
    Statistics._IStats IncWpre();
    Statistics._IStats IncError();
    Dafny.ISequence<Dafny.Rune> PrettyPrint();
  }
  public class Stats : _IStats {
    public readonly bool _maxDepthReached;
    public readonly BigInteger _visitedStates;
    public readonly BigInteger _wPreInvSuccess;
    public readonly BigInteger _errorState;
    public readonly _System._ITuple2<BigInteger, BigInteger> _nonMinimisedSize;
    public Stats(bool maxDepthReached, BigInteger visitedStates, BigInteger wPreInvSuccess, BigInteger errorState, _System._ITuple2<BigInteger, BigInteger> nonMinimisedSize) {
      this._maxDepthReached = maxDepthReached;
      this._visitedStates = visitedStates;
      this._wPreInvSuccess = wPreInvSuccess;
      this._errorState = errorState;
      this._nonMinimisedSize = nonMinimisedSize;
    }
    public _IStats DowncastClone() {
      if (this is _IStats dt) { return dt; }
      return new Stats(_maxDepthReached, _visitedStates, _wPreInvSuccess, _errorState, _nonMinimisedSize);
    }
    public override bool Equals(object other) {
      var oth = other as Statistics.Stats;
      return oth != null && this._maxDepthReached == oth._maxDepthReached && this._visitedStates == oth._visitedStates && this._wPreInvSuccess == oth._wPreInvSuccess && this._errorState == oth._errorState && object.Equals(this._nonMinimisedSize, oth._nonMinimisedSize);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._maxDepthReached));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._visitedStates));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._wPreInvSuccess));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._errorState));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._nonMinimisedSize));
      return (int) hash;
    }
    public override string ToString() {
      string s = "Statistics.Stats.Stats";
      s += "(";
      s += Dafny.Helpers.ToString(this._maxDepthReached);
      s += ", ";
      s += Dafny.Helpers.ToString(this._visitedStates);
      s += ", ";
      s += Dafny.Helpers.ToString(this._wPreInvSuccess);
      s += ", ";
      s += Dafny.Helpers.ToString(this._errorState);
      s += ", ";
      s += Dafny.Helpers.ToString(this._nonMinimisedSize);
      s += ")";
      return s;
    }
    private static readonly Statistics._IStats theDefault = create(false, BigInteger.Zero, BigInteger.Zero, BigInteger.Zero, _System.Tuple2<BigInteger, BigInteger>.Default(BigInteger.Zero, BigInteger.Zero));
    public static Statistics._IStats Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<Statistics._IStats> _TYPE = new Dafny.TypeDescriptor<Statistics._IStats>(Statistics.Stats.Default());
    public static Dafny.TypeDescriptor<Statistics._IStats> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IStats create(bool maxDepthReached, BigInteger visitedStates, BigInteger wPreInvSuccess, BigInteger errorState, _System._ITuple2<BigInteger, BigInteger> nonMinimisedSize) {
      return new Stats(maxDepthReached, visitedStates, wPreInvSuccess, errorState, nonMinimisedSize);
    }
    public static _IStats create_Stats(bool maxDepthReached, BigInteger visitedStates, BigInteger wPreInvSuccess, BigInteger errorState, _System._ITuple2<BigInteger, BigInteger> nonMinimisedSize) {
      return create(maxDepthReached, visitedStates, wPreInvSuccess, errorState, nonMinimisedSize);
    }
    public bool is_Stats { get { return true; } }
    public bool dtor_maxDepthReached {
      get {
        return this._maxDepthReached;
      }
    }
    public BigInteger dtor_visitedStates {
      get {
        return this._visitedStates;
      }
    }
    public BigInteger dtor_wPreInvSuccess {
      get {
        return this._wPreInvSuccess;
      }
    }
    public BigInteger dtor_errorState {
      get {
        return this._errorState;
      }
    }
    public _System._ITuple2<BigInteger, BigInteger> dtor_nonMinimisedSize {
      get {
        return this._nonMinimisedSize;
      }
    }
    public Statistics._IStats SetMaxDepth() {
      Statistics._IStats _0_dt__update__tmp_h0 = this;
      bool _1_dt__update_hmaxDepthReached_h0 = true;
      return Statistics.Stats.create(_1_dt__update_hmaxDepthReached_h0, (_0_dt__update__tmp_h0).dtor_visitedStates, (_0_dt__update__tmp_h0).dtor_wPreInvSuccess, (_0_dt__update__tmp_h0).dtor_errorState, (_0_dt__update__tmp_h0).dtor_nonMinimisedSize);
    }
    public Statistics._IStats IncVisited() {
      Statistics._IStats _0_dt__update__tmp_h0 = this;
      BigInteger _1_dt__update_hvisitedStates_h0 = ((this).dtor_visitedStates) + (BigInteger.One);
      return Statistics.Stats.create((_0_dt__update__tmp_h0).dtor_maxDepthReached, _1_dt__update_hvisitedStates_h0, (_0_dt__update__tmp_h0).dtor_wPreInvSuccess, (_0_dt__update__tmp_h0).dtor_errorState, (_0_dt__update__tmp_h0).dtor_nonMinimisedSize);
    }
    public Statistics._IStats IncWpre() {
      Statistics._IStats _0_dt__update__tmp_h0 = this;
      BigInteger _1_dt__update_hwPreInvSuccess_h0 = ((this).dtor_wPreInvSuccess) + (BigInteger.One);
      return Statistics.Stats.create((_0_dt__update__tmp_h0).dtor_maxDepthReached, (_0_dt__update__tmp_h0).dtor_visitedStates, _1_dt__update_hwPreInvSuccess_h0, (_0_dt__update__tmp_h0).dtor_errorState, (_0_dt__update__tmp_h0).dtor_nonMinimisedSize);
    }
    public Statistics._IStats IncError() {
      Statistics._IStats _0_dt__update__tmp_h0 = this;
      BigInteger _1_dt__update_herrorState_h0 = ((this).dtor_errorState) + (BigInteger.One);
      return Statistics.Stats.create((_0_dt__update__tmp_h0).dtor_maxDepthReached, (_0_dt__update__tmp_h0).dtor_visitedStates, (_0_dt__update__tmp_h0).dtor_wPreInvSuccess, _1_dt__update_herrorState_h0, (_0_dt__update__tmp_h0).dtor_nonMinimisedSize);
    }
    public Dafny.ISequence<Dafny.Rune> PrettyPrint() {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("MaxDepth reached:"), (((this).dtor_maxDepthReached) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("ErrorStates reached:")), Int.__default.NatToString((this).dtor_errorState)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("States seen:")), Int.__default.NatToString((this).dtor_visitedStates)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("WPre success:")), Int.__default.NatToString((this).dtor_wPreInvSuccess)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
    }
  }
} // end of namespace Statistics
namespace HTML {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> Font(Dafny.ISequence<Dafny.Rune> s, Dafny.ISequence<Dafny.Rune> colour)
    {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<FONT"), ((!(colour).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" COLOR=\""), colour), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\"> "))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> ")))), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("</FONT>"));
    }
    public static Dafny.ISequence<Dafny.Rune> RowTR(Dafny.ISequence<Dafny.Rune> s) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<TR>"), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("</TR>\n"));
    }
    public static Dafny.ISequence<Dafny.Rune> CellTD(Dafny.ISequence<Dafny.Rune> body, Dafny.ISequence<Dafny.Rune> align, bool fixedsize, Dafny.ISequence<Dafny.Rune> width, Dafny.ISequence<Dafny.Rune> border, Dafny.ISequence<Dafny.Rune> sides, Dafny.ISequence<Dafny.Rune> colspan, Dafny.ISequence<Dafny.Rune> rowspan, Dafny.ISequence<Dafny.Rune> bgcolour, Dafny.ISequence<Dafny.Rune> cellspacing, Dafny.ISequence<Dafny.Rune> cellpadding, Dafny.ISequence<Dafny.Rune> href, Dafny.ISequence<Dafny.Rune> tooltip)
    {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<TD "), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("ALIGN=\"")), align), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\" ")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fixedsize=\"")), ((fixedsize) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\" ")), ((!(width).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("WIDTH=\""), width), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\" "))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("BORDER=\"")), border), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\" ")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("SIDES=\"")), sides), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\" ")), ((!(bgcolour).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("BGCOLOR=\""), bgcolour), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\" "))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("CELLPADDING=\"")), cellpadding), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\" ")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("CELLSPACING=\"")), cellspacing), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\" ")), ((!(colspan).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"))) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("COLSPAN=\""), colspan), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\" "))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), ((!(rowspan).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("1"))) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("ROWSPAN=\""), rowspan), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\" "))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("href=\"")), href), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\" ")), ((!(tooltip).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("tooltip=\""), tooltip), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\" "))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">")), body), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("</TD>\n"));
    }
    public static Dafny.ISequence<Dafny.Rune> Table(Dafny.ISequence<Dafny.Rune> body, Dafny.ISequence<Dafny.Rune> align, Dafny.ISequence<Dafny.Rune> colour, Dafny.ISequence<Dafny.Rune> bgcolour, Dafny.ISequence<Dafny.Rune> cellborder, Dafny.ISequence<Dafny.Rune> border, Dafny.ISequence<Dafny.Rune> cellpadding, Dafny.ISequence<Dafny.Rune> cellspacing)
    {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<TABLE "), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("ALIGN=\"")), align), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\" ")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("BORDER=\"")), border), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\" ")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("CELLBORDER=\"")), cellborder), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\" ")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("CELLPADDING=\"")), cellpadding), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\" ")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("CELLSPACING=\"")), cellspacing), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\" ")), ((!(bgcolour).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("BGCOLOR=\""), bgcolour), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\" "))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("COLOR=\"")), colour), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\" ")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">")), body), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("</TABLE>\n"));
    }
    public static _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> DOTSeg(LinSegments._ILinSeg s, BigInteger numSeg, MiscTypes._IOption<BigInteger> minStackSize, BigInteger index)
    {
      Dafny.ISequence<Dafny.Rune> _0_jumpTip = ((((s).is_JUMPSeg) || ((s).is_JUMPISeg)) ? (Dafny.Helpers.Let<MiscTypes._IEither<StackElement._IStackElem, BigInteger>, Dafny.ISequence<Dafny.Rune>>(SegBuilder.__default.JUMPResolver(s), _pat_let8_0 => Dafny.Helpers.Let<MiscTypes._IEither<StackElement._IStackElem, BigInteger>, Dafny.ISequence<Dafny.Rune>>(_pat_let8_0, _1_r => ((System.Func<Dafny.ISequence<Dafny.Rune>>)(() => {
        MiscTypes._IEither<StackElement._IStackElem, BigInteger> _source0 = _1_r;
        {
          if (_source0.is_Left) {
            StackElement._IStackElem _2_v = _source0.dtor_l;
            StackElement._IStackElem _source1 = _2_v;
            {
              if (_source1.is_Value) {
                BigInteger _3_address = _source1.dtor_v;
                return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(HTML.__default.LINE__FEED__SYMBOL, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Exit Jump target: Constant 0x")), Hex.__default.NatToHex(_3_address));
              }
            }
            {
              Dafny.ISequence<Dafny.Rune> _4_msg = _source1.dtor_s;
              return Dafny.Sequence<Dafny.Rune>.Concat(HTML.__default.LINE__FEED__SYMBOL, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Exit Jump target: Unknown"));
            }
          }
        }
        {
          BigInteger _5_stackPos = _source0.dtor_r;
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(HTML.__default.LINE__FEED__SYMBOL, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Exit Jump target: Stack on Entry.Peek(")), Int.__default.NatToString(_5_stackPos)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
        }
      }))()))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")));
      Dafny.ISequence<Dafny.Rune> _6_stackSizeEffect = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Stack Size "), HTML.__default.DELTA__SYMBOL), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" : ")), Int.__default.IntToString((s).StackEffect()));
      Dafny.ISequence<Dafny.Rune> _7_minNumOpe = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(HTML.__default.LINE__FEED__SYMBOL, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Stack Size on Entry for this segment ")), HTML.__default.LARGER__OR__EQ__SYMBOL), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), Int.__default.NatToString((s).WeakestPreOperands((s).Ins(), BigInteger.Zero)));
      Dafny.ISequence<Dafny.Rune> _8_minNumOpAtNode = (((minStackSize).is_Some) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(HTML.__default.LINE__FEED__SYMBOL, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Stack Size on Entry for this segment at this node ")), HTML.__default.LARGER__OR__EQ__SYMBOL), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), Int.__default.NatToString((minStackSize).dtor_v))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")));
      Dafny.ISequence<Dafny.Rune> _9_prefix = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<B>Segment "), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#")), Int.__default.NatToString(index)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("|")), Int.__default.NatToString(numSeg)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" [0x")), Hex.__default.NatToHex((s).StartAddress())), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]</B><BR ALIGN=\"CENTER\"/>\n"));
      Dafny.ISequence<Dafny.Rune> _10_body = Instructions.__default.ToDot((s).Ins());
      return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.Concat(_9_prefix, _10_body), Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_6_stackSizeEffect, _0_jumpTip), _7_minNumOpe), _8_minNumOpAtNode));
    }
    public static Dafny.ISequence<Dafny.Rune> DOTSegTable(LinSegments._ILinSeg s, CFGState._IGState a, MiscTypes._IOption<BigInteger> minStackSize, BigInteger index)
    {
      Dafny.ISequence<Dafny.Rune> _0_jumpTip = ((((s).is_JUMPSeg) || ((s).is_JUMPISeg)) ? (Dafny.Helpers.Let<MiscTypes._IEither<StackElement._IStackElem, BigInteger>, Dafny.ISequence<Dafny.Rune>>(SegBuilder.__default.JUMPResolver(s), _pat_let9_0 => Dafny.Helpers.Let<MiscTypes._IEither<StackElement._IStackElem, BigInteger>, Dafny.ISequence<Dafny.Rune>>(_pat_let9_0, _1_r => ((System.Func<Dafny.ISequence<Dafny.Rune>>)(() => {
        MiscTypes._IEither<StackElement._IStackElem, BigInteger> _source0 = _1_r;
        {
          if (_source0.is_Left) {
            StackElement._IStackElem _2_v = _source0.dtor_l;
            StackElement._IStackElem _source1 = _2_v;
            {
              if (_source1.is_Value) {
                BigInteger _3_address = _source1.dtor_v;
                return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Exit Jump target: Constant 0x"), Hex.__default.NatToHex(_3_address));
              }
            }
            {
              Dafny.ISequence<Dafny.Rune> _4_msg = _source1.dtor_s;
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Exit Jump target: Unknown");
            }
          }
        }
        {
          BigInteger _5_stackPos = _source0.dtor_r;
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Exit Jump target: Stack on Entry.Peek("), Int.__default.NatToString(_5_stackPos)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
        }
      }))()))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")));
      Dafny.ISequence<Dafny.Rune> _6_gasSymbol = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&#9981; ");
      return HTML.__default.Table(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(HTML.__default.RowTR(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(HTML.__default.CellTD(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#"), Int.__default.NatToString(index)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("|")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Segment ")), Int.__default.NatToString((a).dtor_segNum)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" [0x")), Hex.__default.NatToHex((s).StartAddress())), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("left"), false, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("1"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")), HTML.__default.CellTD(HTML.__default.Font(HTML.__default.INFO__SYMBOL, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("left"), false, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("1"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Stack Size "), HTML.__default.DELTA__SYMBOL), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), Int.__default.IntToString((s).StackEffect())), HTML.__default.LINE__FEED__SYMBOL), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Abstract stack at this node: [")), (a).StackToHTML()), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]")), (((minStackSize).is_Some) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(HTML.__default.LINE__FEED__SYMBOL, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Stack Size on Entry at this node ")), HTML.__default.LARGER__OR__EQ__SYMBOL), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), Int.__default.NatToString((minStackSize).dtor_v))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), HTML.__default.LINE__FEED__SYMBOL), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Stack Size on Entry for this segment ")), HTML.__default.LARGER__OR__EQ__SYMBOL), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), Int.__default.NatToString((s).WeakestPreOperands((s).Ins(), BigInteger.Zero))), ((!(_0_jumpTip).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.Concat(HTML.__default.LINE__FEED__SYMBOL, _0_jumpTip)) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))))), HTML.__default.CellTD(_6_gasSymbol, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("left"), false, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("1"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("lots of gas!")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<HR/>")), HTML.__default.DOTInsTable((s).Ins(), true)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("left"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("black"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("1"));
    }
    public static Dafny.ISequence<Dafny.Rune> DOTInsTable(Dafny.ISequence<Instructions._IInstruction> xi, bool isFirst)
    {
      Dafny.ISequence<Dafny.Rune> _0___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((xi).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.Concat(_0___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      } else {
        Dafny.ISequence<Dafny.Rune> _1_prefix = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<TR><TD width=\"1\" fixedsize=\"true\" align=\"left\">\n");
        Dafny.ISequence<Dafny.Rune> _2_suffix = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("</TD></TR>\n");
        Dafny.ISequence<Dafny.Rune> _3_exitPortTag = ((((xi).Select(BigInteger.Zero)).IsJump()) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("PORT=\"exit\"")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")));
        Dafny.ISequence<Dafny.Rune> _4_entryPortTag = ((isFirst) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("PORT=\"entry\"")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")));
        Dafny.ISequence<Dafny.Rune> _5_a = ((xi).Select(BigInteger.Zero)).ToHTMLTable(_4_entryPortTag, _3_exitPortTag);
        _0___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_0___accumulator, Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1_prefix, _5_a), _2_suffix));
        Dafny.ISequence<Instructions._IInstruction> _in0 = (xi).Drop(BigInteger.One);
        bool _in1 = false;
        xi = _in0;
        isFirst = _in1;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> LINE__FEED__SYMBOL { get {
      return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&#10;");
    } }
    public static Dafny.ISequence<Dafny.Rune> DELTA__SYMBOL { get {
      return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&#916;");
    } }
    public static Dafny.ISequence<Dafny.Rune> LARGER__OR__EQ__SYMBOL { get {
      return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&#8805;");
    } }
    public static Dafny.ISequence<Dafny.Rune> INFO__SYMBOL { get {
      return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&#8505;&#65039;");
    } }
    public static Dafny.ISequence<Dafny.Rune> WHITE__SPACE__SYMBOL { get {
      return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&#160;");
    } }
  }
} // end of namespace HTML
namespace EVMObject {

  public partial class __default {
    public static Dafny.ISequence<BigInteger> CollectJumpDests(Dafny.ISequence<LinSegments._ILinSeg> xs) {
      Dafny.ISequence<BigInteger> _0___accumulator = Dafny.Sequence<BigInteger>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Dafny.Sequence<BigInteger>.Concat(_0___accumulator, Dafny.Sequence<BigInteger>.FromElements());
      } else {
        _0___accumulator = Dafny.Sequence<BigInteger>.Concat(_0___accumulator, ((xs).Select(BigInteger.Zero)).CollectJumpDest());
        Dafny.ISequence<LinSegments._ILinSeg> _in0 = (xs).Drop(BigInteger.One);
        xs = _in0;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.IMap<BigInteger,BigInteger> CollectThem(Dafny.ISequence<LinSegments._ILinSeg> xs) {
      return EVMObject.__default.CollectPCToSeg(xs, Dafny.Map<BigInteger, BigInteger>.FromElements(), BigInteger.Zero);
    }
    public static Dafny.IMap<BigInteger,BigInteger> CollectPCToSeg(Dafny.ISequence<LinSegments._ILinSeg> xs, Dafny.IMap<BigInteger,BigInteger> m, BigInteger index)
    {
    TAIL_CALL_START: ;
      if ((index) == (new BigInteger((xs).Count))) {
        return m;
      } else {
        Dafny.ISequence<LinSegments._ILinSeg> _in0 = xs;
        Dafny.IMap<BigInteger,BigInteger> _in1 = Dafny.Map<BigInteger, BigInteger>.Update(m, ((xs).Select(index)).StartAddress(), index);
        BigInteger _in2 = (index) + (BigInteger.One);
        xs = _in0;
        m = _in1;
        index = _in2;
        goto TAIL_CALL_START;
      }
    }
  }

  public interface _IPath<T> {
    bool is_Path { get; }
    Dafny.ISequence<T> dtor_states { get; }
    Dafny.ISequence<BigInteger> dtor_exits { get; }
    _IPath<__T> DowncastClone<__T>(Func<T, __T> converter0);
  }
  public class Path<T> : _IPath<T> {
    public readonly Dafny.ISequence<T> _states;
    public readonly Dafny.ISequence<BigInteger> _exits;
    public Path(Dafny.ISequence<T> states, Dafny.ISequence<BigInteger> exits) {
      this._states = states;
      this._exits = exits;
    }
    public _IPath<__T> DowncastClone<__T>(Func<T, __T> converter0) {
      if (this is _IPath<__T> dt) { return dt; }
      return new Path<__T>((_states).DowncastClone<__T>(Dafny.Helpers.CastConverter<T, __T>), _exits);
    }
    public override bool Equals(object other) {
      var oth = other as EVMObject.Path<T>;
      return oth != null && object.Equals(this._states, oth._states) && object.Equals(this._exits, oth._exits);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._states));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._exits));
      return (int) hash;
    }
    public override string ToString() {
      string s = "EVMObject.Path.Path";
      s += "(";
      s += Dafny.Helpers.ToString(this._states);
      s += ", ";
      s += Dafny.Helpers.ToString(this._exits);
      s += ")";
      return s;
    }
    public static EVMObject._IPath<T> Default() {
      return create(Dafny.Sequence<T>.Empty, Dafny.Sequence<BigInteger>.Empty);
    }
    public static Dafny.TypeDescriptor<EVMObject._IPath<T>> _TypeDescriptor() {
      return new Dafny.TypeDescriptor<EVMObject._IPath<T>>(EVMObject.Path<T>.Default());
    }
    public static _IPath<T> create(Dafny.ISequence<T> states, Dafny.ISequence<BigInteger> exits) {
      return new Path<T>(states, exits);
    }
    public static _IPath<T> create_Path(Dafny.ISequence<T> states, Dafny.ISequence<BigInteger> exits) {
      return create(states, exits);
    }
    public bool is_Path { get { return true; } }
    public Dafny.ISequence<T> dtor_states {
      get {
        return this._states;
      }
    }
    public Dafny.ISequence<BigInteger> dtor_exits {
      get {
        return this._exits;
      }
    }
  }

  public partial class ValidSeqValidLinSeg {
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<LinSegments._ILinSeg>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<LinSegments._ILinSeg>>(Dafny.Sequence<LinSegments._ILinSeg>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<LinSegments._ILinSeg>> _TypeDescriptor() {
      return _TYPE;
    }
    public static bool _Is(Dafny.ISequence<LinSegments._ILinSeg> __source) {
      Dafny.ISequence<LinSegments._ILinSeg> _0_xs = __source;
      return Dafny.Helpers.Id<Func<Dafny.ISequence<LinSegments._ILinSeg>, bool>>((_1_xs) => Dafny.Helpers.Quantifier<BigInteger>(Dafny.Helpers.IntegerRange(BigInteger.Zero, new BigInteger((_1_xs).Count)), true, (((_forall_var_0) => {
        BigInteger _2_i = (BigInteger)_forall_var_0;
        return Dafny.Helpers.Quantifier<BigInteger>(Dafny.Helpers.IntegerRange((_2_i) + (BigInteger.One), new BigInteger((_1_xs).Count)), true, (((_forall_var_1) => {
          BigInteger _3_i_k = (BigInteger)_forall_var_1;
          return !((((_2_i).Sign != -1) && ((_2_i) < (_3_i_k))) && ((_3_i_k) < (new BigInteger((_1_xs).Count)))) || ((((_1_xs).Select(_2_i)).StartAddress()) < (((_1_xs).Select(_3_i_k)).StartAddress()));
        })));
      }))))(_0_xs);
    }
  }

  public partial class ValidEVMObj {
    private static readonly EVMObject._IEVMObj Witness = EVMObject.EVMObj.create(Dafny.Sequence<LinSegments._ILinSeg>.FromElements(), Dafny.Sequence<BigInteger>.FromElements(), EVMObject.__default.CollectThem(Dafny.Sequence<LinSegments._ILinSeg>.FromElements()));
    public static EVMObject._IEVMObj Default() {
      return Witness;
    }
    private static readonly Dafny.TypeDescriptor<EVMObject._IEVMObj> _TYPE = new Dafny.TypeDescriptor<EVMObject._IEVMObj>(EVMObject.ValidEVMObj.Default());
    public static Dafny.TypeDescriptor<EVMObject._IEVMObj> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public interface _IEVMObj {
    bool is_EVMObj { get; }
    Dafny.ISequence<LinSegments._ILinSeg> dtor_xs { get; }
    Dafny.ISequence<BigInteger> dtor_jumpDests { get; }
    Dafny.IMap<BigInteger,BigInteger> dtor_PCToSegMap { get; }
    _IEVMObj DowncastClone();
    BigInteger StartAddress(BigInteger i);
    BigInteger StackEffect(BigInteger i);
    BigInteger CapEffect(BigInteger i);
    BigInteger WpOp(BigInteger i);
    bool IsJump(BigInteger i);
    BigInteger WpCap(BigInteger i);
    BigInteger Size(Dafny.ISequence<LinSegments._ILinSeg> ls);
    Dafny.ISequence<CFGState._IGState> NextG(CFGState._IGState s);
    State._IAState RunAll(Dafny.ISequence<BigInteger> exits, State._IAState s);
    bool PreservesCond(WeakPre._ICond c, Dafny.ISequence<BigInteger> exits, BigInteger initpc);
    MiscTypes._IOption<BigInteger> SafeLoopFound(BigInteger i, Dafny.ISequence<CFGState._IGState> pStates, Dafny.ISequence<BigInteger> pExits);
    MiscTypes._IOption<BigInteger> FindFirstNodeWithSegIndex(BigInteger i, Dafny.ISequence<CFGState._IGState> gs, BigInteger index);
    void DFS(EVMObject._IPath<CFGState._IGState> p, Automata._IAuto<CFGState._IGState> a, BigInteger maxDepth, bool debugInfo, Statistics._IStats stats, out Automata._IAuto<CFGState._IGState> a_k, out Statistics._IStats stats_k);
    void BuildCFG(BigInteger maxDepth, bool minimise, out Automata._IAuto<CFGState._IGState> a, out Statistics._IStats stats);
    Dafny.ISequence<Dafny.Rune> ToHTML(CFGState._IGState a, bool withTable, MiscTypes._IOption<BigInteger> minStackSizeForState, BigInteger index);
    Dafny.ISequence<Dafny.Rune> DotLabel(CFGState._IGState s, BigInteger exit);
    MiscTypes._IEither<Dafny.ISequence<BigInteger>, Dafny.ISequence<BigInteger>> Fix(Automata._IAuto<CFGState._IGState> a, Dafny.ISequence<BigInteger> wpre0, Dafny.ISet<BigInteger> xu, Dafny.ISequence<BigInteger> xc, BigInteger maxIter);
    _System._ITuple2<Dafny.ISequence<BigInteger>, Dafny.ISet<BigInteger>> UpdateValues(Automata._IAuto<CFGState._IGState> a, Dafny.ISequence<BigInteger> wpre0, Dafny.ISequence<BigInteger> xc, Dafny.ISet<BigInteger> xu, Dafny.ISequence<BigInteger> newxc, Dafny.ISet<BigInteger> newxu, BigInteger index);
    MiscTypes._IEither<Dafny.ISequence<BigInteger>, Dafny.ISequence<BigInteger>> ComputeWPreOperands(Automata._IAuto<CFGState._IGState> a);
    bool HasNoErrorState(Automata._IAuto<CFGState._IGState> a);
    void PrintByteCodeInfo();
    void PrintSegmentInfo();
  }
  public class EVMObj : _IEVMObj {
    public readonly Dafny.ISequence<LinSegments._ILinSeg> _xs;
    public readonly Dafny.ISequence<BigInteger> _jumpDests;
    public readonly Dafny.IMap<BigInteger,BigInteger> _PCToSegMap;
    public EVMObj(Dafny.ISequence<LinSegments._ILinSeg> xs, Dafny.ISequence<BigInteger> jumpDests, Dafny.IMap<BigInteger,BigInteger> PCToSegMap) {
      this._xs = xs;
      this._jumpDests = jumpDests;
      this._PCToSegMap = PCToSegMap;
    }
    public _IEVMObj DowncastClone() {
      if (this is _IEVMObj dt) { return dt; }
      return new EVMObj(_xs, _jumpDests, _PCToSegMap);
    }
    public override bool Equals(object other) {
      var oth = other as EVMObject.EVMObj;
      return oth != null && object.Equals(this._xs, oth._xs) && object.Equals(this._jumpDests, oth._jumpDests) && object.Equals(this._PCToSegMap, oth._PCToSegMap);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._xs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._jumpDests));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._PCToSegMap));
      return (int) hash;
    }
    public override string ToString() {
      string s = "EVMObject.EVMObj.EVMObj";
      s += "(";
      s += Dafny.Helpers.ToString(this._xs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._jumpDests);
      s += ", ";
      s += Dafny.Helpers.ToString(this._PCToSegMap);
      s += ")";
      return s;
    }
    private static readonly EVMObject._IEVMObj theDefault = create(Dafny.Sequence<LinSegments._ILinSeg>.Empty, Dafny.Sequence<BigInteger>.Empty, Dafny.Map<BigInteger, BigInteger>.Empty);
    public static EVMObject._IEVMObj Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<EVMObject._IEVMObj> _TYPE = new Dafny.TypeDescriptor<EVMObject._IEVMObj>(EVMObject.EVMObj.Default());
    public static Dafny.TypeDescriptor<EVMObject._IEVMObj> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IEVMObj create(Dafny.ISequence<LinSegments._ILinSeg> xs, Dafny.ISequence<BigInteger> jumpDests, Dafny.IMap<BigInteger,BigInteger> PCToSegMap) {
      return new EVMObj(xs, jumpDests, PCToSegMap);
    }
    public static _IEVMObj create_EVMObj(Dafny.ISequence<LinSegments._ILinSeg> xs, Dafny.ISequence<BigInteger> jumpDests, Dafny.IMap<BigInteger,BigInteger> PCToSegMap) {
      return create(xs, jumpDests, PCToSegMap);
    }
    public bool is_EVMObj { get { return true; } }
    public Dafny.ISequence<LinSegments._ILinSeg> dtor_xs {
      get {
        return this._xs;
      }
    }
    public Dafny.ISequence<BigInteger> dtor_jumpDests {
      get {
        return this._jumpDests;
      }
    }
    public Dafny.IMap<BigInteger,BigInteger> dtor_PCToSegMap {
      get {
        return this._PCToSegMap;
      }
    }
    public BigInteger StartAddress(BigInteger i) {
      return (((this).dtor_xs).Select(i)).StartAddress();
    }
    public BigInteger StackEffect(BigInteger i) {
      return (((this).dtor_xs).Select(i)).StackEffect();
    }
    public BigInteger CapEffect(BigInteger i) {
      return (((this).dtor_xs).Select(i)).NetCapEffect();
    }
    public BigInteger WpOp(BigInteger i) {
      return (((this).dtor_xs).Select(i)).WeakestPreOperands((((this).dtor_xs).Select(i)).Ins(), BigInteger.Zero);
    }
    public bool IsJump(BigInteger i) {
      return (((this).dtor_xs).Select(i)).IsJump();
    }
    public BigInteger WpCap(BigInteger i) {
      return (((this).dtor_xs).Select(i)).WeakestPreCapacity(BigInteger.Zero);
    }
    public BigInteger Size(Dafny.ISequence<LinSegments._ILinSeg> ls) {
      BigInteger _0___accumulator = BigInteger.Zero;
      _IEVMObj _this = this;
    TAIL_CALL_START: ;
      if ((new BigInteger((ls).Count)).Sign == 0) {
        return (BigInteger.Zero) + (_0___accumulator);
      } else {
        _0___accumulator = (_0___accumulator) + (((ls).Select(BigInteger.Zero)).Size(((ls).Select(BigInteger.Zero)).Ins()));
        EVMObject._IEVMObj _in0 = _this;
        Dafny.ISequence<LinSegments._ILinSeg> _in1 = (ls).Drop(BigInteger.One);
        _this = _in0;
        ;
        ls = _in1;
        goto TAIL_CALL_START;
      }
    }
    public Dafny.ISequence<CFGState._IGState> NextG(CFGState._IGState s) {
      CFGState._IGState _source0 = s;
      {
        if (_source0.is_ErrorGState) {
          return Dafny.Sequence<CFGState._IGState>.FromElements();
        }
      }
      {
        BigInteger _0_segNum = _source0.dtor_segNum;
        Dafny.ISequence<StackElement._IStackElem> _1_st = _source0.dtor_st;
        LinSegments._ILinSeg _2_srcSeg = ((this).dtor_xs).Select(_0_segNum);
        State._IAState _3_src = State.AState.create_EState((_2_srcSeg).StartAddress(), _1_st);
        Dafny.ISequence<State._IAState> _4_successors = ((System.Func<Dafny.ISequence<State._IAState>>) (() => {
          BigInteger dim14 = (_2_srcSeg).NumberOfExits();
          var arr14 = new State._IAState[Dafny.Helpers.ToIntChecked(dim14, "array size exceeds memory limit")];
          for (int i14 = 0; i14 < dim14; i14++) {
            var _5_i = (BigInteger) i14;
            arr14[(int)(_5_i)] = (_2_srcSeg).Run(_3_src, _5_i, (this).dtor_jumpDests);
          }
          return Dafny.Sequence<State._IAState>.FromArray(arr14);
        }))();
        Dafny.ISequence<CFGState._IGState> _6_succGStates = MiscTypes.__default.Map<State._IAState, CFGState._IGState>(_4_successors, ((System.Func<State._IAState, CFGState._IGState>)((_7_s_k) => {
          return ((System.Func<CFGState._IGState>)(() => {
            State._IAState _source1 = _7_s_k;
            {
              if (_source1.is_Error) {
                Dafny.ISequence<Dafny.Rune> _8_msg = _source1.dtor_msg;
                return CFGState.GState.create_ErrorGState(_8_msg);
              }
            }
            {
              BigInteger _9_pc = _source1.dtor_pc;
              Dafny.ISequence<StackElement._IStackElem> _10_st = _source1.dtor_stack;
              if (((this).dtor_PCToSegMap).Contains(_9_pc)) {
                return CFGState.GState.create_EGState(Dafny.Map<BigInteger, BigInteger>.Select((this).dtor_PCToSegMap,_9_pc), (_7_s_k).dtor_stack);
              } else {
                return CFGState.GState.create_ErrorGState(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NextG:  "), Int.__default.NatToString(_9_pc)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" not defined")));
              }
            }
          }))();
        })));
        return _6_succGStates;
      }
    }
    public State._IAState RunAll(Dafny.ISequence<BigInteger> exits, State._IAState s)
    {
      _IEVMObj _this = this;
    TAIL_CALL_START: ;
      if ((new BigInteger((exits).Count)).Sign == 0) {
        return s;
      } else if (((_this).dtor_PCToSegMap).Contains((s).dtor_pc)) {
        BigInteger _0_seg = Dafny.Map<BigInteger, BigInteger>.Select((_this).dtor_PCToSegMap,(s).dtor_pc);
        if (((((_this).dtor_xs).Select(_0_seg)).NumberOfExits()) > ((exits).Select(BigInteger.Zero))) {
          State._IAState _1_s_k = (((_this).dtor_xs).Select(_0_seg)).Run(s, (exits).Select(BigInteger.Zero), (_this).dtor_jumpDests);
          if ((_1_s_k).is_EState) {
            EVMObject._IEVMObj _in0 = _this;
            Dafny.ISequence<BigInteger> _in1 = (exits).Drop(BigInteger.One);
            State._IAState _in2 = _1_s_k;
            _this = _in0;
            ;
            exits = _in1;
            s = _in2;
            goto TAIL_CALL_START;
          } else {
            return State.AState.create_Error(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Successor state of "), (s)._ToString()), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" is not an EState")));
          }
        } else {
          return State.AState.create_Error(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Exit does not exist"));
        }
      } else {
        return State.AState.create_Error(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("No segment found for state "), (s)._ToString()));
      }
    }
    public bool PreservesCond(WeakPre._ICond c, Dafny.ISequence<BigInteger> exits, BigInteger initpc)
    {
      var _pat_let_tv0 = initpc;
      State._IAState _0_initState = Dafny.Helpers.Let<State._IAState, State._IAState>(State.__default.BuildInitState(c, BigInteger.Zero), _pat_let10_0 => Dafny.Helpers.Let<State._IAState, State._IAState>(_pat_let10_0, _1_dt__update__tmp_h0 => Dafny.Helpers.Let<BigInteger, State._IAState>(_pat_let_tv0, _pat_let11_0 => Dafny.Helpers.Let<BigInteger, State._IAState>(_pat_let11_0, _2_dt__update_hpc_h0 => State.AState.create_EState(_2_dt__update_hpc_h0, (_1_dt__update__tmp_h0).dtor_stack)))));
      State._IAState _3_endState = (this).RunAll(exits, _0_initState);
      if ((_3_endState).is_EState) {
        return (_3_endState).Sat(c);
      } else {
        return false;
      }
    }
    public MiscTypes._IOption<BigInteger> SafeLoopFound(BigInteger i, Dafny.ISequence<CFGState._IGState> pStates, Dafny.ISequence<BigInteger> pExits)
    {
      _IEVMObj _this = this;
    TAIL_CALL_START: ;
      MiscTypes._IOption<BigInteger> _source0 = (_this).FindFirstNodeWithSegIndex(i, pStates, BigInteger.Zero);
      {
        if (_source0.is_Some) {
          BigInteger _0_index = _source0.dtor_v;
          Dafny.ISequence<CFGState._IGState> _1_pathFromIndex = (pStates).Drop(_0_index);
          Dafny.ISequence<BigInteger> _2_exitsFromIndex = (pExits).Drop(_0_index);
          Dafny.ISequence<BigInteger> _3_segmentsOnPathFromIndex = ((System.Func<Dafny.ISequence<BigInteger>>) (() => {
            BigInteger dim15 = new BigInteger((_1_pathFromIndex).Count);
            var arr15 = new BigInteger[Dafny.Helpers.ToIntChecked(dim15, "array size exceeds memory limit")];
            for (int i15 = 0; i15 < dim15; i15++) {
              var _4_i = (BigInteger) i15;
              arr15[(int)(_4_i)] = ((_1_pathFromIndex).Select(_4_i)).dtor_segNum;
            }
            return Dafny.Sequence<BigInteger>.FromArray(arr15);
          }))();
          WeakPre._ICond _5_tgtCond = (((_this).dtor_xs).Select((MiscTypes.__default.Last<CFGState._IGState>(pStates)).dtor_segNum)).LeadsTo((((_this).dtor_xs).Select(i)).StartAddress(), MiscTypes.__default.Last<BigInteger>(pExits));
          WeakPre._ICond _6_w1 = LinSegments.__default.WPreSeqSegs(_3_segmentsOnPathFromIndex, _2_exitsFromIndex, (_5_tgtCond).And(WeakPre.__default.StackToCond(((pStates).Select(_0_index)).dtor_st)), (_this).dtor_xs, (((_this).dtor_xs).Select(i)).StartAddress());
          if ((_6_w1).is_StTrue) {
            return MiscTypes.Option<BigInteger>.create_Some(_0_index);
          } else if ((_6_w1).is_StFalse) {
            return MiscTypes.Option<BigInteger>.create_None();
          } else if ((_this).PreservesCond(_6_w1, _2_exitsFromIndex, (((_this).dtor_xs).Select(i)).StartAddress())) {
            return MiscTypes.Option<BigInteger>.create_Some(_0_index);
          } else if ((new BigInteger((_1_pathFromIndex).Count)).Sign == 1) {
            EVMObject._IEVMObj _in0 = _this;
            BigInteger _in1 = i;
            Dafny.ISequence<CFGState._IGState> _in2 = (_1_pathFromIndex).Drop(BigInteger.One);
            Dafny.ISequence<BigInteger> _in3 = (_2_exitsFromIndex).Drop(BigInteger.One);
            _this = _in0;
            ;
            i = _in1;
            pStates = _in2;
            pExits = _in3;
            goto TAIL_CALL_START;
          } else {
            return MiscTypes.Option<BigInteger>.create_None();
          }
        }
      }
      {
        return MiscTypes.Option<BigInteger>.create_None();
      }
    }
    public MiscTypes._IOption<BigInteger> FindFirstNodeWithSegIndex(BigInteger i, Dafny.ISequence<CFGState._IGState> gs, BigInteger index)
    {
      _IEVMObj _this = this;
    TAIL_CALL_START: ;
      if ((new BigInteger((gs).Count)) == (index)) {
        return MiscTypes.Option<BigInteger>.create_None();
      } else {
        CFGState._IGState _source0 = (gs).Select(index);
        {
          if (_source0.is_EGState) {
            BigInteger _0_i_k = _source0.dtor_segNum;
            Dafny.ISequence<StackElement._IStackElem> _1_st = _source0.dtor_st;
            if ((_0_i_k) == (i)) {
              return MiscTypes.Option<BigInteger>.create_Some(index);
            } else {
              EVMObject._IEVMObj _in0 = _this;
              BigInteger _in1 = i;
              Dafny.ISequence<CFGState._IGState> _in2 = gs;
              BigInteger _in3 = (index) + (BigInteger.One);
              _this = _in0;
              ;
              i = _in1;
              gs = _in2;
              index = _in3;
              goto TAIL_CALL_START;
            }
          }
        }
        {
          Dafny.ISequence<Dafny.Rune> _2_m = _source0.dtor_msg;
          return MiscTypes.Option<BigInteger>.create_None();
        }
      }
    }
    public void DFS(EVMObject._IPath<CFGState._IGState> p, Automata._IAuto<CFGState._IGState> a, BigInteger maxDepth, bool debugInfo, Statistics._IStats stats, out Automata._IAuto<CFGState._IGState> a_k, out Statistics._IStats stats_k)
    {
      a_k = Automata.ValidAuto<CFGState._IGState>.Default();
      stats_k = Statistics.Stats.Default();
      CFGState._IGState _0_lastOnPath;
      _0_lastOnPath = MiscTypes.__default.Last<CFGState._IGState>((p).dtor_states);
      if (((maxDepth).Sign == 0) || ((_0_lastOnPath).is_ErrorGState)) {
        Statistics._IStats _1_stats_k;
        if ((maxDepth).Sign == 0) {
          _1_stats_k = (stats).SetMaxDepth();
        } else {
          _1_stats_k = stats;
        }
        Automata._IAuto<CFGState._IGState> _rhs0 = a;
        Statistics._IStats _rhs1 = _1_stats_k;
        a_k = _rhs0;
        stats_k = _rhs1;
        return ;
      } else {
        a_k = a;
        stats_k = stats;
        BigInteger _hi0 = new BigInteger(((this).NextG(_0_lastOnPath)).Count);
        for (BigInteger _2_i = BigInteger.Zero; _2_i < _hi0; _2_i++) {
          CFGState._IGState _3_i__th__succ;
          _3_i__th__succ = ((this).NextG(_0_lastOnPath)).Select(_2_i);
          if ((_3_i__th__succ).is_ErrorGState) {
            Automata._IAuto<CFGState._IGState> _rhs2 = (a_k).AddEdge(_0_lastOnPath, _3_i__th__succ);
            Statistics._IStats _rhs3 = (stats_k).IncError();
            a_k = _rhs2;
            stats_k = _rhs3;
          } else if (((a_k).dtor_indexOf).Contains(_3_i__th__succ)) {
            Automata._IAuto<CFGState._IGState> _rhs4 = (a_k).AddEdge(_0_lastOnPath, ((a_k).dtor_states).Select(Dafny.Map<CFGState._IGState, BigInteger>.Select((a_k).dtor_indexOf,_3_i__th__succ)));
            Statistics._IStats _rhs5 = (stats_k).IncVisited();
            a_k = _rhs4;
            stats_k = _rhs5;
          } else if (!((((this).dtor_xs).Select((_0_lastOnPath).dtor_segNum)).IsJump())) {
            Automata._IAuto<CFGState._IGState> _4_j;
            _4_j = (a_k).AddEdge(_0_lastOnPath, _3_i__th__succ);
            EVMObject._IPath<CFGState._IGState> _5_p_k;
            _5_p_k = EVMObject.Path<CFGState._IGState>.create(Dafny.Sequence<CFGState._IGState>.Concat((p).dtor_states, Dafny.Sequence<CFGState._IGState>.FromElements(_3_i__th__succ)), Dafny.Sequence<BigInteger>.Concat((p).dtor_exits, Dafny.Sequence<BigInteger>.FromElements(_2_i)));
            Automata._IAuto<CFGState._IGState> _out0;
            Statistics._IStats _out1;
            (this).DFS(_5_p_k, _4_j, (maxDepth) - (BigInteger.One), debugInfo, stats_k, out _out0, out _out1);
            a_k = _out0;
            stats_k = _out1;
          } else {
            MiscTypes._IOption<BigInteger> _source0 = (this).SafeLoopFound((_3_i__th__succ).dtor_segNum, (p).dtor_states, Dafny.Sequence<BigInteger>.Concat((p).dtor_exits, Dafny.Sequence<BigInteger>.FromElements(_2_i)));
            {
              if (_source0.is_Some) {
                BigInteger _6_index = _source0.dtor_v;
                Automata._IAuto<CFGState._IGState> _rhs6 = (a_k).AddEdge(_0_lastOnPath, ((p).dtor_states).Select(_6_index));
                Statistics._IStats _rhs7 = (stats_k).IncWpre();
                a_k = _rhs6;
                stats_k = _rhs7;
                goto after_match0;
              }
            }
            {
              Automata._IAuto<CFGState._IGState> _out2;
              Statistics._IStats _out3;
              (this).DFS(EVMObject.Path<CFGState._IGState>.create(Dafny.Sequence<CFGState._IGState>.Concat((p).dtor_states, Dafny.Sequence<CFGState._IGState>.FromElements(_3_i__th__succ)), Dafny.Sequence<BigInteger>.Concat((p).dtor_exits, Dafny.Sequence<BigInteger>.FromElements(_2_i))), (a_k).AddEdge(_0_lastOnPath, _3_i__th__succ), (maxDepth) - (BigInteger.One), debugInfo, stats_k, out _out2, out _out3);
              a_k = _out2;
              stats_k = _out3;
            }
          after_match0: ;
          }
        }
      }
    }
    public void BuildCFG(BigInteger maxDepth, bool minimise, out Automata._IAuto<CFGState._IGState> a, out Statistics._IStats stats)
    {
      a = Automata.ValidAuto<CFGState._IGState>.Default();
      stats = Statistics.Stats.Default();
      Automata._IAuto<CFGState._IGState> _0_a1;
      Statistics._IStats _1_s1;
      Automata._IAuto<CFGState._IGState> _out0;
      Statistics._IStats _out1;
      (this).DFS(EVMObject.Path<CFGState._IGState>.create(Dafny.Sequence<CFGState._IGState>.FromElements(CFGState.__default.DEFAULT__GSTATE), Dafny.Sequence<BigInteger>.FromElements()), (Automata.Auto<CFGState._IGState>.create(Dafny.Map<BigInteger, Dafny.ISequence<BigInteger>>.FromElements(), Dafny.Map<BigInteger, Dafny.ISequence<BigInteger>>.FromElements(), Dafny.Sequence<CFGState._IGState>.FromElements(), Dafny.Map<CFGState._IGState, BigInteger>.FromElements())).AddState(CFGState.__default.DEFAULT__GSTATE), maxDepth, true, Statistics.Stats.create(false, BigInteger.Zero, BigInteger.Zero, BigInteger.Zero, _System.Tuple2<BigInteger, BigInteger>.create(BigInteger.Zero, BigInteger.Zero)), out _out0, out _out1);
      _0_a1 = _out0;
      _1_s1 = _out1;
      if ((!(minimise)) || (((_0_a1).SSize()).Sign == 0)) {
        Automata._IAuto<CFGState._IGState> _rhs0 = _0_a1;
        Statistics._IStats _rhs1 = _1_s1;
        a = _rhs0;
        stats = _rhs1;
        return ;
      } else {
        PartitionMod._IPartition _2_p1;
        _2_p1 = PartitionMod.__default.MakeInit((_0_a1).SSize());
        Func<BigInteger, BigInteger, bool> _3_e;
        _3_e = Dafny.Helpers.Id<Func<Automata._IAuto<CFGState._IGState>, Func<BigInteger, BigInteger, bool>>>((_4_a1) => ((System.Func<BigInteger, BigInteger, bool>)((_5_x, _6_y) => {
          return (((_5_x) == (_6_y)) ? (true) : (((System.Func<bool>)(() => {
            _System._ITuple2<CFGState._IGState, CFGState._IGState> _source0 = _System.Tuple2<CFGState._IGState, CFGState._IGState>.create(((_4_a1).dtor_states).Select(_5_x), ((_4_a1).dtor_states).Select(_6_y));
            {
              CFGState._IGState _00 = _source0.dtor__0;
              if (_00.is_EGState) {
                BigInteger _7_s1 = _00.dtor_segNum;
                CFGState._IGState _10 = _source0.dtor__1;
                if (_10.is_EGState) {
                  BigInteger _8_s2 = _10.dtor_segNum;
                  return (_7_s1) == (_8_s2);
                }
              }
            }
            {
              return false;
            }
          }))()));
        })))(_0_a1);
        PartitionMod._IPartition _9_p2;
        _9_p2 = (_2_p1).ComputeFinest(_3_e);
        GStateMinimiser._IPair _10_vp;
        _10_vp = GStateMinimiser.Pair.create(_0_a1, _9_p2);
        Automata._IAuto<CFGState._IGState> _11_a2;
        _11_a2 = (_10_vp).Minimise();
        var _pat_let_tv0 = _0_a1;
        var _pat_let_tv1 = _0_a1;
        Automata._IAuto<CFGState._IGState> _rhs2 = _11_a2;
        Statistics._IStats _rhs3 = Dafny.Helpers.Let<Statistics._IStats, Statistics._IStats>(_1_s1, _pat_let12_0 => Dafny.Helpers.Let<Statistics._IStats, Statistics._IStats>(_pat_let12_0, _12_dt__update__tmp_h0 => Dafny.Helpers.Let<_System._ITuple2<BigInteger, BigInteger>, Statistics._IStats>(_System.Tuple2<BigInteger, BigInteger>.create((_pat_let_tv0).SSize(), (_pat_let_tv1).TSize(BigInteger.Zero)), _pat_let13_0 => Dafny.Helpers.Let<_System._ITuple2<BigInteger, BigInteger>, Statistics._IStats>(_pat_let13_0, _13_dt__update_hnonMinimisedSize_h0 => Statistics.Stats.create((_12_dt__update__tmp_h0).dtor_maxDepthReached, (_12_dt__update__tmp_h0).dtor_visitedStates, (_12_dt__update__tmp_h0).dtor_wPreInvSuccess, (_12_dt__update__tmp_h0).dtor_errorState, _13_dt__update_hnonMinimisedSize_h0)))));
        a = _rhs2;
        stats = _rhs3;
        return ;
      }
    }
    public Dafny.ISequence<Dafny.Rune> ToHTML(CFGState._IGState a, bool withTable, MiscTypes._IOption<BigInteger> minStackSizeForState, BigInteger index)
    {
      if ((a).is_ErrorGState) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<ErrorEnd <BR ALIGN=\"CENTER\"/>>");
      } else if (withTable) {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), HTML.__default.DOTSegTable(((this).dtor_xs).Select((a).dtor_segNum), a, minStackSizeForState, index)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), (HTML.__default.DOTSeg(((this).dtor_xs).Select((a).dtor_segNum), (a).dtor_segNum, minStackSizeForState, index)).dtor__0), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
    }
    public Dafny.ISequence<Dafny.Rune> DotLabel(CFGState._IGState s, BigInteger exit)
    {
      Dafny.ISequence<Dafny.Rune> _0_lab = (((s).is_ErrorGState) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Error")) : (((((s).is_EGState) && ((exit) < ((((this).dtor_xs).Select((s).dtor_segNum)).NumberOfExits()))) ? (((((((this).dtor_xs).Select((s).dtor_segNum)).IsJump()) && ((exit) == (((((this).dtor_xs).Select((s).dtor_segNum)).NumberOfExits()) - (BigInteger.One)))) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("tooltip=\"Jump\",style=dashed")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("tooltip=\"Next\"")))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Error Number of exits")))));
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ["), _0_lab), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
    }
    public MiscTypes._IEither<Dafny.ISequence<BigInteger>, Dafny.ISequence<BigInteger>> Fix(Automata._IAuto<CFGState._IGState> a, Dafny.ISequence<BigInteger> wpre0, Dafny.ISet<BigInteger> xu, Dafny.ISequence<BigInteger> xc, BigInteger maxIter)
    {
      _IEVMObj _this = this;
    TAIL_CALL_START: ;
      if ((xu).Equals(Dafny.Set<BigInteger>.FromElements())) {
        return MiscTypes.Either<Dafny.ISequence<BigInteger>, Dafny.ISequence<BigInteger>>.create_Left(xc);
      } else if ((maxIter).Sign == 0) {
        return MiscTypes.Either<Dafny.ISequence<BigInteger>, Dafny.ISequence<BigInteger>>.create_Right(xc);
      } else {
        _System._ITuple2<Dafny.ISequence<BigInteger>, Dafny.ISet<BigInteger>> _0_newV = (_this).UpdateValues(a, wpre0, xc, xu, Dafny.Sequence<BigInteger>.FromElements(), Dafny.Set<BigInteger>.FromElements(), BigInteger.Zero);
        EVMObject._IEVMObj _in0 = _this;
        Automata._IAuto<CFGState._IGState> _in1 = a;
        Dafny.ISequence<BigInteger> _in2 = wpre0;
        Dafny.ISet<BigInteger> _in3 = (_0_newV).dtor__1;
        Dafny.ISequence<BigInteger> _in4 = (_0_newV).dtor__0;
        BigInteger _in5 = (maxIter) - (BigInteger.One);
        _this = _in0;
        ;
        a = _in1;
        wpre0 = _in2;
        xu = _in3;
        xc = _in4;
        maxIter = _in5;
        goto TAIL_CALL_START;
      }
    }
    public _System._ITuple2<Dafny.ISequence<BigInteger>, Dafny.ISet<BigInteger>> UpdateValues(Automata._IAuto<CFGState._IGState> a, Dafny.ISequence<BigInteger> wpre0, Dafny.ISequence<BigInteger> xc, Dafny.ISet<BigInteger> xu, Dafny.ISequence<BigInteger> newxc, Dafny.ISet<BigInteger> newxu, BigInteger index)
    {
      _IEVMObj _this = this;
    TAIL_CALL_START: ;
      var _pat_let_tv0 = a;
      var _pat_let_tv1 = index;
      var _pat_let_tv2 = wpre0;
      var _pat_let_tv3 = index;
      var _pat_let_tv4 = a;
      var _pat_let_tv5 = index;
      var _pat_let_tv6 = xc;
      var _pat_let_tv7 = index;
      if ((new BigInteger((xc).Count)) == (index)) {
        return _System.Tuple2<Dafny.ISequence<BigInteger>, Dafny.ISet<BigInteger>>.create(newxc, newxu);
      } else {
        _System._ITuple2<BigInteger, Dafny.ISet<BigInteger>> _0_n = (((xu).Contains(index)) ? (Dafny.Helpers.Let<LinSegments._ILinSeg, _System._ITuple2<BigInteger, Dafny.ISet<BigInteger>>>(((_this).dtor_xs).Select((((a).dtor_states).Select(index)).dtor_segNum), _pat_let14_0 => Dafny.Helpers.Let<LinSegments._ILinSeg, _System._ITuple2<BigInteger, Dafny.ISet<BigInteger>>>(_pat_let14_0, _1_seg => Dafny.Helpers.Let<Dafny.ISequence<BigInteger>, _System._ITuple2<BigInteger, Dafny.ISet<BigInteger>>>(((System.Func<Dafny.ISequence<BigInteger>>) (() => {
          BigInteger dim16 = new BigInteger(((_pat_let_tv0).SuccNat(_pat_let_tv1)).Count);
          var arr16 = new BigInteger[Dafny.Helpers.ToIntChecked(dim16, "array size exceeds memory limit")];
          for (int i16 = 0; i16 < dim16; i16++) {
            var _2_i = (BigInteger) i16;
            arr16[(int)(_2_i)] = (xc).Select(((a).SuccNat(index)).Select(_2_i));
          }
          return Dafny.Sequence<BigInteger>.FromArray(arr16);
        }))(), _pat_let15_0 => Dafny.Helpers.Let<Dafny.ISequence<BigInteger>, _System._ITuple2<BigInteger, Dafny.ISet<BigInteger>>>(_pat_let15_0, _3_succWPre => Dafny.Helpers.Let<BigInteger, _System._ITuple2<BigInteger, Dafny.ISet<BigInteger>>>(EVMObject.EVMObj.MaxNatSeq(_3_succWPre), _pat_let16_0 => Dafny.Helpers.Let<BigInteger, _System._ITuple2<BigInteger, Dafny.ISet<BigInteger>>>(_pat_let16_0, _4_m => Dafny.Helpers.Let<BigInteger, _System._ITuple2<BigInteger, Dafny.ISet<BigInteger>>>((_1_seg).FastWeakestPreOperands(_4_m, (_pat_let_tv2).Select(_pat_let_tv3)), _pat_let17_0 => Dafny.Helpers.Let<BigInteger, _System._ITuple2<BigInteger, Dafny.ISet<BigInteger>>>(_pat_let17_0, _5_d => _System.Tuple2<BigInteger, Dafny.ISet<BigInteger>>.create(_5_d, (((_5_d) > ((_pat_let_tv6).Select(_pat_let_tv7))) ? (MiscTypes.__default.SeqToSet<BigInteger>((_pat_let_tv4).PredNat(_pat_let_tv5))) : (Dafny.Set<BigInteger>.FromElements())))))))))))) : (_System.Tuple2<BigInteger, Dafny.ISet<BigInteger>>.create((xc).Select(index), Dafny.Set<BigInteger>.FromElements())));
        EVMObject._IEVMObj _in0 = _this;
        Automata._IAuto<CFGState._IGState> _in1 = a;
        Dafny.ISequence<BigInteger> _in2 = wpre0;
        Dafny.ISequence<BigInteger> _in3 = xc;
        Dafny.ISet<BigInteger> _in4 = xu;
        Dafny.ISequence<BigInteger> _in5 = Dafny.Sequence<BigInteger>.Concat(newxc, Dafny.Sequence<BigInteger>.FromElements((_0_n).dtor__0));
        Dafny.ISet<BigInteger> _in6 = Dafny.Set<BigInteger>.Union(newxu, (_0_n).dtor__1);
        BigInteger _in7 = (index) + (BigInteger.One);
        _this = _in0;
        ;
        a = _in1;
        wpre0 = _in2;
        xc = _in3;
        xu = _in4;
        newxc = _in5;
        newxu = _in6;
        index = _in7;
        goto TAIL_CALL_START;
      }
    }
    public static BigInteger MaxNat(BigInteger a, BigInteger b)
    {
      if ((a) > (b)) {
        return a;
      } else {
        return b;
      }
    }
    public static BigInteger MaxNatSeq(Dafny.ISequence<BigInteger> xs) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return BigInteger.Zero;
      } else {
        return EVMObject.EVMObj.MaxNat((xs).Select(BigInteger.Zero), EVMObject.EVMObj.MaxNatSeq((xs).Drop(BigInteger.One)));
      }
    }
    public MiscTypes._IEither<Dafny.ISequence<BigInteger>, Dafny.ISequence<BigInteger>> ComputeWPreOperands(Automata._IAuto<CFGState._IGState> a) {
      Dafny.ISequence<BigInteger> _0_wpre0 = MiscTypes.__default.MapP<BigInteger, BigInteger>(((System.Func<Dafny.ISequence<BigInteger>>) (() => {
        BigInteger dim17 = new BigInteger(((a).dtor_states).Count);
        var arr17 = new BigInteger[Dafny.Helpers.ToIntChecked(dim17, "array size exceeds memory limit")];
        for (int i17 = 0; i17 < dim17; i17++) {
          var _1_i = (BigInteger) i17;
          arr17[(int)(_1_i)] = _1_i;
        }
        return Dafny.Sequence<BigInteger>.FromArray(arr17);
      }))(), Dafny.Helpers.Id<Func<Automata._IAuto<CFGState._IGState>, Func<BigInteger, BigInteger>>>((_2_a) => ((System.Func<BigInteger, BigInteger>)((_3_i) => {
        return (((this).dtor_xs).Select((((_2_a).dtor_states).Select(_3_i)).dtor_segNum)).WeakestPreOperands((((this).dtor_xs).Select((((_2_a).dtor_states).Select(_3_i)).dtor_segNum)).Ins(), BigInteger.Zero);
      })))(a));
      return (this).Fix(a, _0_wpre0, Dafny.Helpers.Id<Func<Automata._IAuto<CFGState._IGState>, Dafny.ISet<BigInteger>>>((_4_a) => ((System.Func<Dafny.ISet<BigInteger>>)(() => {
        var _coll0 = new System.Collections.Generic.List<BigInteger>();
        foreach (BigInteger _compr_0 in Dafny.Helpers.IntegerRange(BigInteger.Zero, new BigInteger(((_4_a).dtor_states).Count))) {
          BigInteger _5_z = (BigInteger)_compr_0;
          if (((_5_z).Sign != -1) && ((_5_z) < (new BigInteger(((_4_a).dtor_states).Count)))) {
            _coll0.Add(_5_z);
          }
        }
        return Dafny.Set<BigInteger>.FromCollection(_coll0);
      }))())(a), _0_wpre0, (new BigInteger(((a).dtor_states).Count)) + (BigInteger.One));
    }
    public bool HasNoErrorState(Automata._IAuto<CFGState._IGState> a) {
      return Dafny.Helpers.Id<Func<Automata._IAuto<CFGState._IGState>, bool>>((_0_a) => Dafny.Helpers.Quantifier<CFGState._IGState>(((_0_a).dtor_states).UniqueElements, true, (((_forall_var_0) => {
        CFGState._IGState _1_s = (CFGState._IGState)_forall_var_0;
        return !(((_0_a).dtor_states).Contains(_1_s)) || ((_1_s).is_EGState);
      }))))(a);
    }
    public void PrintByteCodeInfo()
    {
      Dafny.ISequence<Instructions._IInstruction> _0_listIns;
      _0_listIns = MiscTypes.__default.Flatten<Instructions._IInstruction>(MiscTypes.__default.Map<LinSegments._ILinSeg, Dafny.ISequence<Instructions._IInstruction>>((this).dtor_xs, ((System.Func<LinSegments._ILinSeg, Dafny.ISequence<Instructions._IInstruction>>)((_1_s) => {
        return (_1_s).Ins();
      }))));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Bytecode Size: ")).ToVerbatimString(false));
      Dafny.Helpers.Print(((this).Size((this).dtor_xs)));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" Bytes\n")).ToVerbatimString(false));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Number of instructions: ")).ToVerbatimString(false));
      Dafny.Helpers.Print((new BigInteger((_0_listIns).Count)));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Arithmetic opcodes: ")).ToVerbatimString(false));
      Dafny.Helpers.Print((new BigInteger((MiscTypes.__default.Filter<Instructions._IInstruction>(_0_listIns, ((System.Func<Instructions._IInstruction, bool>)((_2_i) => {
  return ((_2_i).dtor_op).is_ArithOp;
})))).Count)));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Comparison opcodes: ")).ToVerbatimString(false));
      Dafny.Helpers.Print((new BigInteger((MiscTypes.__default.Filter<Instructions._IInstruction>(_0_listIns, ((System.Func<Instructions._IInstruction, bool>)((_3_i) => {
  return ((_3_i).dtor_op).is_CompOp;
})))).Count)));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Bitwise opcodes: ")).ToVerbatimString(false));
      Dafny.Helpers.Print((new BigInteger((MiscTypes.__default.Filter<Instructions._IInstruction>(_0_listIns, ((System.Func<Instructions._IInstruction, bool>)((_4_i) => {
  return ((_4_i).dtor_op).is_BitwiseOp;
})))).Count)));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Keccak opcodes: ")).ToVerbatimString(false));
      Dafny.Helpers.Print((new BigInteger((MiscTypes.__default.Filter<Instructions._IInstruction>(_0_listIns, ((System.Func<Instructions._IInstruction, bool>)((_5_i) => {
  return ((_5_i).dtor_op).is_KeccakOp;
})))).Count)));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Environmental opcodes: ")).ToVerbatimString(false));
      Dafny.Helpers.Print((new BigInteger((MiscTypes.__default.Filter<Instructions._IInstruction>(_0_listIns, ((System.Func<Instructions._IInstruction, bool>)((_6_i) => {
  return ((_6_i).dtor_op).is_EnvOp;
})))).Count)));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Storage opcodes: ")).ToVerbatimString(false));
      Dafny.Helpers.Print((new BigInteger((MiscTypes.__default.Filter<Instructions._IInstruction>(_0_listIns, ((System.Func<Instructions._IInstruction, bool>)((_7_i) => {
  return ((_7_i).dtor_op).is_StorageOp;
})))).Count)));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Memory opcodes: ")).ToVerbatimString(false));
      Dafny.Helpers.Print((new BigInteger((MiscTypes.__default.Filter<Instructions._IInstruction>(_0_listIns, ((System.Func<Instructions._IInstruction, bool>)((_8_i) => {
  return ((_8_i).dtor_op).is_MemOp;
})))).Count)));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Stack opcodes: ")).ToVerbatimString(false));
      Dafny.Helpers.Print((new BigInteger((MiscTypes.__default.Filter<Instructions._IInstruction>(_0_listIns, ((System.Func<Instructions._IInstruction, bool>)((_9_i) => {
  return ((_9_i).dtor_op).is_StackOp;
})))).Count)));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Jump opcodes: ")).ToVerbatimString(false));
      Dafny.Helpers.Print((new BigInteger((MiscTypes.__default.Filter<Instructions._IInstruction>(_0_listIns, ((System.Func<Instructions._IInstruction, bool>)((_10_i) => {
  return ((_10_i).dtor_op).is_JumpOp;
})))).Count)));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Log opcodes: ")).ToVerbatimString(false));
      Dafny.Helpers.Print((new BigInteger((MiscTypes.__default.Filter<Instructions._IInstruction>(_0_listIns, ((System.Func<Instructions._IInstruction, bool>)((_11_i) => {
  return ((_11_i).dtor_op).is_LogOp;
})))).Count)));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Revert/stop opcodes: ")).ToVerbatimString(false));
      Dafny.Helpers.Print((new BigInteger((MiscTypes.__default.Filter<Instructions._IInstruction>(_0_listIns, ((System.Func<Instructions._IInstruction, bool>)((_12_i) => {
  return (((_12_i).dtor_op).is_SysOp) && (((_12_i).dtor_op).IsRevertStop());
})))).Count)));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Return opcodes: ")).ToVerbatimString(false));
      Dafny.Helpers.Print((new BigInteger((MiscTypes.__default.Filter<Instructions._IInstruction>(_0_listIns, ((System.Func<Instructions._IInstruction, bool>)((_13_i) => {
  return (((_13_i).dtor_op).is_SysOp) && (((_13_i).dtor_op).IsReturn());
})))).Count)));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Invalid opcodes: ")).ToVerbatimString(false));
      Dafny.Helpers.Print((new BigInteger((MiscTypes.__default.Filter<Instructions._IInstruction>(_0_listIns, ((System.Func<Instructions._IInstruction, bool>)((_14_i) => {
  return (((_14_i).dtor_op).is_SysOp) && (((_14_i).dtor_op).IsInvalid());
})))).Count)));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Other Systems opcodes: ")).ToVerbatimString(false));
      Dafny.Helpers.Print((new BigInteger((MiscTypes.__default.Filter<Instructions._IInstruction>(_0_listIns, ((System.Func<Instructions._IInstruction, bool>)((_15_i) => {
  return (((((_15_i).dtor_op).is_SysOp) && (!(((_15_i).dtor_op).IsInvalid()))) && (!(((_15_i).dtor_op).IsRevertStop()))) && (!(((_15_i).dtor_op).IsReturn()));
})))).Count)));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
    }
    public void PrintSegmentInfo()
    {
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Total number of segments: ")).ToVerbatimString(false));
      Dafny.Helpers.Print((new BigInteger(((this).dtor_xs).Count)));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("# of JUMP segments: ")).ToVerbatimString(false));
      Dafny.Helpers.Print((new BigInteger((MiscTypes.__default.Filter<LinSegments._ILinSeg>((this).dtor_xs, ((System.Func<LinSegments._ILinSeg, bool>)((_0_s) => {
  return (_0_s).is_JUMPSeg;
})))).Count)));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("# of JUMPI segments: ")).ToVerbatimString(false));
      Dafny.Helpers.Print((new BigInteger((MiscTypes.__default.Filter<LinSegments._ILinSeg>((this).dtor_xs, ((System.Func<LinSegments._ILinSeg, bool>)((_1_s) => {
  return (_1_s).is_JUMPISeg;
})))).Count)));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("# of RETURN segments: ")).ToVerbatimString(false));
      Dafny.Helpers.Print((new BigInteger((MiscTypes.__default.Filter<LinSegments._ILinSeg>((this).dtor_xs, ((System.Func<LinSegments._ILinSeg, bool>)((_2_s) => {
  return (_2_s).is_RETURNSeg;
})))).Count)));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("# of STOP segments: ")).ToVerbatimString(false));
      Dafny.Helpers.Print((new BigInteger((MiscTypes.__default.Filter<LinSegments._ILinSeg>((this).dtor_xs, ((System.Func<LinSegments._ILinSeg, bool>)((_3_s) => {
  return (_3_s).is_STOPSeg;
})))).Count)));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("# of CONT segments: ")).ToVerbatimString(false));
      Dafny.Helpers.Print((new BigInteger((MiscTypes.__default.Filter<LinSegments._ILinSeg>((this).dtor_xs, ((System.Func<LinSegments._ILinSeg, bool>)((_4_s) => {
  return (_4_s).is_CONTSeg;
})))).Count)));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("# of INVALID segments: ")).ToVerbatimString(false));
      Dafny.Helpers.Print((new BigInteger((MiscTypes.__default.Filter<LinSegments._ILinSeg>((this).dtor_xs, ((System.Func<LinSegments._ILinSeg, bool>)((_5_s) => {
  return (_5_s).is_INVALIDSeg;
})))).Count)));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
    }
  }
} // end of namespace EVMObject
namespace ArgParser {

  public partial class __default {
    public static void _default_Main()
    {
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("hello! Testing ArgParser!\n")).ToVerbatimString(false));
      ArgParser.ArgumentParser _0_cli;
      ArgParser.ArgumentParser _nw0 = new ArgParser.ArgumentParser();
      _nw0.__ctor(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<filename>"));
      _0_cli = _nw0;
      (_0_cli).AddOption(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("-o"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("--one"), BigInteger.Zero, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("No help provided"));
      (_0_cli).AddOption(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("-tw"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("--two"), new BigInteger(2), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("don't do that!"));
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1_r;
      _1_r = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("-one"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("--two"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("a1"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("a2"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("-unknwon"));
      MiscTypes._ITry<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source0 = (_0_cli).GetArgs(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("-o"), _1_r);
      {
        if (_source0.is_Success) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2_a = _source0.dtor_v;
          Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Success -o! has arguments:")).ToVerbatimString(false));
          Dafny.Helpers.Print((_2_a));
          Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
          goto after_match0;
        }
      }
      {
        Dafny.ISequence<Dafny.Rune> _3_m = _source0.dtor_msg;
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("No -o! ")).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
      }
    after_match0: ;
      MiscTypes._ITry<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source1 = (_0_cli).GetArgs(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("--two"), _1_r);
      {
        if (_source1.is_Success) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4_a = _source1.dtor_v;
          Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Success -two! has arguments: ")).ToVerbatimString(false));
          Dafny.Helpers.Print((_4_a));
          Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
          goto after_match1;
        }
      }
      {
        Dafny.ISequence<Dafny.Rune> _5_m = _source1.dtor_msg;
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("No --two! ")).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
      }
    after_match1: ;
      (_0_cli).PrintHelp();
    }
  }

  public interface _ICLIOption {
    bool is_CLIOption { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    BigInteger dtor_numArgs { get; }
    Dafny.ISequence<Dafny.Rune> dtor_desc { get; }
    _ICLIOption DowncastClone();
  }
  public class CLIOption : _ICLIOption {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly BigInteger _numArgs;
    public readonly Dafny.ISequence<Dafny.Rune> _desc;
    public CLIOption(Dafny.ISequence<Dafny.Rune> name, BigInteger numArgs, Dafny.ISequence<Dafny.Rune> desc) {
      this._name = name;
      this._numArgs = numArgs;
      this._desc = desc;
    }
    public _ICLIOption DowncastClone() {
      if (this is _ICLIOption dt) { return dt; }
      return new CLIOption(_name, _numArgs, _desc);
    }
    public override bool Equals(object other) {
      var oth = other as ArgParser.CLIOption;
      return oth != null && object.Equals(this._name, oth._name) && this._numArgs == oth._numArgs && object.Equals(this._desc, oth._desc);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._numArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._desc));
      return (int) hash;
    }
    public override string ToString() {
      string s = "ArgParser.CLIOption.CLIOption";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._numArgs);
      s += ", ";
      s += this._desc.ToVerbatimString(true);
      s += ")";
      return s;
    }
    private static readonly ArgParser._ICLIOption theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, BigInteger.Zero, Dafny.Sequence<Dafny.Rune>.Empty);
    public static ArgParser._ICLIOption Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<ArgParser._ICLIOption> _TYPE = new Dafny.TypeDescriptor<ArgParser._ICLIOption>(ArgParser.CLIOption.Default());
    public static Dafny.TypeDescriptor<ArgParser._ICLIOption> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ICLIOption create(Dafny.ISequence<Dafny.Rune> name, BigInteger numArgs, Dafny.ISequence<Dafny.Rune> desc) {
      return new CLIOption(name, numArgs, desc);
    }
    public static _ICLIOption create_CLIOption(Dafny.ISequence<Dafny.Rune> name, BigInteger numArgs, Dafny.ISequence<Dafny.Rune> desc) {
      return create(name, numArgs, desc);
    }
    public bool is_CLIOption { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public BigInteger dtor_numArgs {
      get {
        return this._numArgs;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_desc {
      get {
        return this._desc;
      }
    }
  }

  public partial class ArgumentParser {
    public ArgumentParser() {
      this.knownArgs = Dafny.Map<Dafny.ISequence<Dafny.Rune>, ArgParser._ICLIOption>.Empty;
      this.knownNameArgs = Dafny.Map<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.Empty;
      this.knownKeys = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty;
      this.usageSuffix = Dafny.Sequence<Dafny.Rune>.Empty;
    }
    public Dafny.IMap<Dafny.ISequence<Dafny.Rune>,ArgParser._ICLIOption> knownArgs {get; set;}
    public Dafny.IMap<Dafny.ISequence<Dafny.Rune>,Dafny.ISequence<Dafny.Rune>> knownNameArgs {get; set;}
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> knownKeys {get; set;}
    public Dafny.ISequence<Dafny.Rune> usageSuffix {get; set;}
    public void __ctor(Dafny.ISequence<Dafny.Rune> s)
    {
      (this).usageSuffix = s;
      (this).knownArgs = Dafny.Map<Dafny.ISequence<Dafny.Rune>, ArgParser._ICLIOption>.FromElements(new Dafny.Pair<Dafny.ISequence<Dafny.Rune>, ArgParser._ICLIOption>(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("--help"), ArgParser.CLIOption.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("-h"), BigInteger.Zero, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Display help and exit"))));
      (this).knownNameArgs = Dafny.Map<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.FromElements(new Dafny.Pair<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("-h"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("--help")));
      (this).knownKeys = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("--help"));
    }
    public void AddOption(Dafny.ISequence<Dafny.Rune> opname, Dafny.ISequence<Dafny.Rune> name, BigInteger numArgs, Dafny.ISequence<Dafny.Rune> help)
    {
      (this).knownArgs = Dafny.Map<Dafny.ISequence<Dafny.Rune>, ArgParser._ICLIOption>.Update(this.knownArgs, name, ArgParser.CLIOption.create(opname, numArgs, help));
      (this).knownNameArgs = Dafny.Map<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.Update(this.knownNameArgs, opname, name);
      if (!(this.knownKeys).Contains(name)) {
        (this).knownKeys = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(this.knownKeys, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(name));
      }
    }
    public void PrintHelp()
    {
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("usage: <this program> ")).ToVerbatimString(false));
      BigInteger _hi0 = new BigInteger((this.knownKeys).Count);
      for (BigInteger _0_i = BigInteger.Zero; _0_i < _hi0; _0_i++) {
        ArgParser._ICLIOption _1_k;
        _1_k = Dafny.Map<Dafny.ISequence<Dafny.Rune>, ArgParser._ICLIOption>.Select(this.knownArgs,(this.knownKeys).Select(_0_i));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" [")).ToVerbatimString(false));
        Dafny.Helpers.Print(((this.knownKeys).Select(_0_i)).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("] ")).ToVerbatimString(false));
        BigInteger _hi1 = (_1_k).dtor_numArgs;
        for (BigInteger _2_i = BigInteger.Zero; _2_i < _hi1; _2_i++) {
          Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" arg")).ToVerbatimString(false));
          Dafny.Helpers.Print((_2_i));
        }
      }
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")).ToVerbatimString(false));
      Dafny.Helpers.Print((this.usageSuffix).ToVerbatimString(false));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n\n")).ToVerbatimString(false));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("options")).ToVerbatimString(false));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
      BigInteger _3_maxL;
      _3_maxL = (this).MaxValueFast(this.knownKeys, BigInteger.Zero);
      BigInteger _hi2 = new BigInteger((this.knownKeys).Count);
      for (BigInteger _4_i = BigInteger.Zero; _4_i < _hi2; _4_i++) {
        ArgParser._ICLIOption _5_k;
        _5_k = Dafny.Map<Dafny.ISequence<Dafny.Rune>, ArgParser._ICLIOption>.Select(this.knownArgs,(this.knownKeys).Select(_4_i));
        Dafny.Helpers.Print(((this.knownKeys).Select(_4_i)).ToVerbatimString(false));
        Dafny.Helpers.Print((((System.Func<Dafny.ISequence<Dafny.Rune>>) (() => {
  BigInteger dim18 = ((_3_maxL) - (new BigInteger(((this.knownKeys).Select(_4_i)).Count))) + (new BigInteger(2));
  var arr18 = new Dafny.Rune[Dafny.Helpers.ToIntChecked(dim18, "array size exceeds memory limit")];
  for (int i18 = 0; i18 < dim18; i18++) {
    var _6___v0 = (BigInteger) i18;
    arr18[(int)(_6___v0)] = new Dafny.Rune(' ');
  }
  return Dafny.Sequence<Dafny.Rune>.FromArray(arr18);
}))()).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" [")).ToVerbatimString(false));
        Dafny.Helpers.Print(((_5_k).dtor_name).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("] ")).ToVerbatimString(false));
        Dafny.Helpers.Print(((_5_k).dtor_desc).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
      }
    }
    public MiscTypes._ITry<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> GetArgs(Dafny.ISequence<Dafny.Rune> key, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> s)
    {
      var _this = this;
    TAIL_CALL_START: ;
      if ((new BigInteger((s).Count)).Sign == 0) {
        return MiscTypes.Try<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>>.create_Failure(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Not found"));
      } else if (!((_this.knownArgs).Keys).Contains(key)) {
        return MiscTypes.Try<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>>.create_Failure(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Not a key"));
      } else if (((_this).Canonical((s).Select(BigInteger.Zero))).Equals(key)) {
        ArgParser._ICLIOption _0_opt = Dafny.Map<Dafny.ISequence<Dafny.Rune>, ArgParser._ICLIOption>.Select(_this.knownArgs,key);
        BigInteger _1_numArgs = (_0_opt).dtor_numArgs;
        if ((new BigInteger(((s).Drop(BigInteger.One)).Count)) < (_1_numArgs)) {
          return MiscTypes.Try<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>>.create_Failure(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("argument "), (s).Select(BigInteger.Zero)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" needs more arguments")));
        } else {
          return MiscTypes.Try<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>>.create_Success(((s).Drop(BigInteger.One)).Take(_1_numArgs));
        }
      } else {
        ArgParser.ArgumentParser _in0 = _this;
        Dafny.ISequence<Dafny.Rune> _in1 = key;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _in2 = (s).Drop(BigInteger.One);
        _this = _in0;
        ;
        key = _in1;
        s = _in2;
        goto TAIL_CALL_START;
      }
    }
    public Dafny.ISequence<Dafny.Rune> Canonical(Dafny.ISequence<Dafny.Rune> s) {
      if ((this.knownNameArgs).Contains(s)) {
        return Dafny.Map<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.Select(this.knownNameArgs,s);
      } else {
        return s;
      }
    }
    public BigInteger MaxValueFast(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> s, BigInteger max)
    {
      var _this = this;
    TAIL_CALL_START: ;
      if ((new BigInteger((s).Count)).Sign == 0) {
        return max;
      } else {
        ArgParser.ArgumentParser _in0 = _this;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _in1 = (s).Drop(BigInteger.One);
        BigInteger _in2 = Int.__default.Max(new BigInteger(((s).Select(BigInteger.Zero)).Count), max);
        _this = _in0;
        ;
        s = _in1;
        max = _in2;
        goto TAIL_CALL_START;
      }
    }
  }
} // end of namespace ArgParser
namespace CFGObject {


  public interface _ICFGObj {
    bool is_CFGObj { get; }
    EVMObject._IEVMObj dtor_prog { get; }
    BigInteger dtor_maxDepth { get; }
    Automata._IAuto<CFGState._IGState> dtor_a { get; }
    bool dtor_minimised { get; }
    Statistics._IStats dtor_stats { get; }
    _ICFGObj DowncastClone();
    bool HasNoErrorState();
    void ToDot(bool noTable, Dafny.ISequence<Dafny.Rune> name);
    Dafny.ISequence<CFGState._IGState> ReachableInvalidSegs();
    Dafny.ISequence<Dafny.Rune> MakeTitle(Dafny.ISequence<Dafny.Rune> name, BigInteger numNodes, BigInteger numEdges, BigInteger maxDepth, bool reached);
    void ToDafny(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> pathToEVMDafny);
    void CFGCheckerToDafny(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> pathToEVMDafny);
    void CFGRefineToDafny(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> pathToEVMDafny);
    void PrintProofObjectBody(BigInteger index);
    void PrintCFGVerifierBody(BigInteger index);
    void PrintInstructionsToDafny(Dafny.ISequence<Instructions._IInstruction> xs, State._IAState currentState, BigInteger pos);
  }
  public class CFGObj : _ICFGObj {
    public readonly EVMObject._IEVMObj _prog;
    public readonly BigInteger _maxDepth;
    public readonly Automata._IAuto<CFGState._IGState> _a;
    public readonly bool _minimised;
    public readonly Statistics._IStats _stats;
    public CFGObj(EVMObject._IEVMObj prog, BigInteger maxDepth, Automata._IAuto<CFGState._IGState> a, bool minimised, Statistics._IStats stats) {
      this._prog = prog;
      this._maxDepth = maxDepth;
      this._a = a;
      this._minimised = minimised;
      this._stats = stats;
    }
    public _ICFGObj DowncastClone() {
      if (this is _ICFGObj dt) { return dt; }
      return new CFGObj(_prog, _maxDepth, _a, _minimised, _stats);
    }
    public override bool Equals(object other) {
      var oth = other as CFGObject.CFGObj;
      return oth != null && object.Equals(this._prog, oth._prog) && this._maxDepth == oth._maxDepth && object.Equals(this._a, oth._a) && this._minimised == oth._minimised && object.Equals(this._stats, oth._stats);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._prog));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._maxDepth));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._minimised));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._stats));
      return (int) hash;
    }
    public override string ToString() {
      string s = "CFGObject.CFGObj.CFGObj";
      s += "(";
      s += Dafny.Helpers.ToString(this._prog);
      s += ", ";
      s += Dafny.Helpers.ToString(this._maxDepth);
      s += ", ";
      s += Dafny.Helpers.ToString(this._a);
      s += ", ";
      s += Dafny.Helpers.ToString(this._minimised);
      s += ", ";
      s += Dafny.Helpers.ToString(this._stats);
      s += ")";
      return s;
    }
    private static readonly CFGObject._ICFGObj theDefault = create(EVMObject.ValidEVMObj.Default(), BigInteger.Zero, Automata.ValidAuto<CFGState._IGState>.Default(), false, Statistics.Stats.Default());
    public static CFGObject._ICFGObj Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<CFGObject._ICFGObj> _TYPE = new Dafny.TypeDescriptor<CFGObject._ICFGObj>(CFGObject.CFGObj.Default());
    public static Dafny.TypeDescriptor<CFGObject._ICFGObj> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ICFGObj create(EVMObject._IEVMObj prog, BigInteger maxDepth, Automata._IAuto<CFGState._IGState> a, bool minimised, Statistics._IStats stats) {
      return new CFGObj(prog, maxDepth, a, minimised, stats);
    }
    public static _ICFGObj create_CFGObj(EVMObject._IEVMObj prog, BigInteger maxDepth, Automata._IAuto<CFGState._IGState> a, bool minimised, Statistics._IStats stats) {
      return create(prog, maxDepth, a, minimised, stats);
    }
    public bool is_CFGObj { get { return true; } }
    public EVMObject._IEVMObj dtor_prog {
      get {
        return this._prog;
      }
    }
    public BigInteger dtor_maxDepth {
      get {
        return this._maxDepth;
      }
    }
    public Automata._IAuto<CFGState._IGState> dtor_a {
      get {
        return this._a;
      }
    }
    public bool dtor_minimised {
      get {
        return this._minimised;
      }
    }
    public Statistics._IStats dtor_stats {
      get {
        return this._stats;
      }
    }
    public bool HasNoErrorState() {
      return ((this).dtor_prog).HasNoErrorState((this).dtor_a);
    }
    public void ToDot(bool noTable, Dafny.ISequence<Dafny.Rune> name)
    {
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/*\n")).ToVerbatimString(false));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("maxDepth is:")).ToVerbatimString(false));
      Dafny.Helpers.Print(((this).dtor_maxDepth));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
      Dafny.Helpers.Print((((this).dtor_stats).PrettyPrint()).ToVerbatimString(false));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("# of reachable invalid segments is: ")).ToVerbatimString(false));
      Dafny.Helpers.Print((new BigInteger(((this).ReachableInvalidSegs()).Count)));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
      if (!((this).dtor_minimised)) {
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Size of CFG: ")).ToVerbatimString(false));
        Dafny.Helpers.Print((((this).dtor_a).SSize()));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" nodes, ")).ToVerbatimString(false));
        Dafny.Helpers.Print((((this).dtor_a).TSize(BigInteger.Zero)));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" edges\n")).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Raw CFG\n")).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*/\n")).ToVerbatimString(false));
      } else {
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Size of non minimised CFG: ")).ToVerbatimString(false));
        Dafny.Helpers.Print(((((this).dtor_stats).dtor_nonMinimisedSize).dtor__0));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" nodes, ")).ToVerbatimString(false));
        Dafny.Helpers.Print(((((this).dtor_stats).dtor_nonMinimisedSize).dtor__1));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" edges\n")).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Size of minimised CFG: ")).ToVerbatimString(false));
        Dafny.Helpers.Print((((this).dtor_a).SSize()));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" nodes, ")).ToVerbatimString(false));
        Dafny.Helpers.Print((((this).dtor_a).TSize(BigInteger.Zero)));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" edges\n")).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Minimised CFG\n")).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*/\n")).ToVerbatimString(false));
      }
      ((this).dtor_a).ToDot(Dafny.Helpers.Id<Func<bool, Func<CFGState._IGState, BigInteger, Dafny.ISequence<Dafny.Rune>>>>((_0_noTable) => ((System.Func<CFGState._IGState, BigInteger, Dafny.ISequence<Dafny.Rune>>)((_1_s, _2_k) => {
        return ((this).dtor_prog).ToHTML(_1_s, !(_0_noTable), (((_1_s).is_ErrorGState) ? (MiscTypes.Option<BigInteger>.create_None()) : (MiscTypes.Option<BigInteger>.create_Some(new BigInteger(((_1_s).dtor_st).Count)))), _2_k);
      })))(noTable), ((System.Func<CFGState._IGState, BigInteger, CFGState._IGState, Dafny.ISequence<Dafny.Rune>>)((_3_s, _4_l, _5___v0) => {
        return ((this).dtor_prog).DotLabel(_3_s, _4_l);
      })), Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("graph[labelloc=\"t\", labeljust=\"l\", label=<"), (this).MakeTitle(name, ((this).dtor_a).SSize(), ((this).dtor_a).TSize(BigInteger.Zero), (this).dtor_maxDepth, ((this).dtor_stats).dtor_maxDepthReached)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">]\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("node [shape=none, fontname=arial, style=\"rounded, filled\", fillcolor= \"whitesmoke\"]\nedge [fontname=arial]\nranking=TB")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("G"));
      if (!((this).dtor_minimised)) {
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("//----------------- Raw CFG -------------------\n")).ToVerbatimString(false));
      } else {
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("//----------------- Minimised CFG -------------------\n")).ToVerbatimString(false));
      }
    }
    public Dafny.ISequence<CFGState._IGState> ReachableInvalidSegs() {
      return MiscTypes.__default.Filter<CFGState._IGState>(((this).dtor_a).dtor_states, ((System.Func<CFGState._IGState, bool>)((_0_s) => {
        return (((_0_s).is_EGState) && ((_0_s).IsBounded(new BigInteger((((this).dtor_prog).dtor_xs).Count)))) && (((((this).dtor_prog).dtor_xs).Select((_0_s).dtor_segNum)).is_INVALIDSeg);
      })));
    }
    public Dafny.ISequence<Dafny.Rune> MakeTitle(Dafny.ISequence<Dafny.Rune> name, BigInteger numNodes, BigInteger numEdges, BigInteger maxDepth, bool reached)
    {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<B>Program Name: </B> "), name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<BR ALIGN=\"left\"/>")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<B>Control Flow Graph Info: </B><BR ALIGN=\"left\"/>")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Max depth: ")), Int.__default.NatToString(maxDepth)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" [")), ((reached) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Was reached")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Was not reached")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<BR ALIGN=\"left\"/>")), Int.__default.NatToString(numNodes)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" nodes/")), Int.__default.NatToString(numEdges)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" edges<BR ALIGN=\"left\"/>"));
    }
    public void ToDafny(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> pathToEVMDafny)
    {
      if ((new BigInteger((pathToEVMDafny).Count)).Sign == 1) {
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
      }
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("include \"./src/dafny/AbstractSemantics/AbstractSemantics.dfy\"")).ToVerbatimString(false));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n\n")).ToVerbatimString(false));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("module "), name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {"))).ToVerbatimString(false));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n\n")).ToVerbatimString(false));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("import opened AbstractSemantics")).ToVerbatimString(false));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("import opened AbstractState")).ToVerbatimString(false));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
      (this).PrintProofObjectBody(BigInteger.Zero);
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}")).ToVerbatimString(false));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
    }
    public void CFGCheckerToDafny(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> pathToEVMDafny)
    {
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("include \"../../../src/dafny/AbstractSemantics/AbstractSemantics.dfy\"")).ToVerbatimString(false));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n\n")).ToVerbatimString(false));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("module  {:disableNonlinearArithmetic} "), name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {"))).ToVerbatimString(false));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n\n")).ToVerbatimString(false));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("import opened AbstractSemantics")).ToVerbatimString(false));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("import opened AbstractState")).ToVerbatimString(false));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
      (this).PrintCFGVerifierBody(BigInteger.Zero);
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}")).ToVerbatimString(false));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
    }
    public void CFGRefineToDafny(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> pathToEVMDafny)
    {
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("include "), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\"")), pathToEVMDafny), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/src/dafny/state.dfy\""))).ToVerbatimString(false));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("include "), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\"")), pathToEVMDafny), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/src/dafny/bytecode.dfy\""))).ToVerbatimString(false));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("module {:disableNonlinearArithmetic} "), name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {"))).ToVerbatimString(false));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n\n")).ToVerbatimString(false));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("import EvmState")).ToVerbatimString(false));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("import opened Bytecode")).ToVerbatimString(false));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("function SafeJump(s: EvmState.State): (s': EvmState.State)")).ToVerbatimString(false));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
      (this).PrintProofObjectBody(BigInteger.Zero);
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}")).ToVerbatimString(false));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
    }
    public void PrintProofObjectBody(BigInteger index)
    {
      _ICFGObj _this = this;
    TAIL_CALL_START: ;
      if ((index) < (new BigInteger((((_this).dtor_a).dtor_states).Count))) {
        CFGState._IGState _0_currentState;
        _0_currentState = (((_this).dtor_a).dtor_states).Select(index);
        BigInteger _1_startAddress;
        _1_startAddress = ((_this).dtor_prog).StartAddress((_0_currentState).dtor_segNum);
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n/** Node ")).ToVerbatimString(false));
        Dafny.Helpers.Print((index));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("* Segment Id for this node is: ")).ToVerbatimString(false));
        Dafny.Helpers.Print(((_0_currentState).dtor_segNum));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("* Starting at 0x")).ToVerbatimString(false));
        Dafny.Helpers.Print((Hex.__default.NatToHex(_1_startAddress)).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("* Segment type is: ")).ToVerbatimString(false));
        Dafny.Helpers.Print((((((_this).dtor_prog).dtor_xs).Select((_0_currentState).dtor_segNum)).SegTypeName()).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("* Minimum stack size for this segment to prevent stack underflow: ")).ToVerbatimString(false));
        Dafny.Helpers.Print((((_this).dtor_prog).WpOp((_0_currentState).dtor_segNum)));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
        BigInteger _2_minCap;
        _2_minCap = ((_this).dtor_prog).WpCap((_0_currentState).dtor_segNum);
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("* Minimum capacity for this segment to prevent stack overflow: ")).ToVerbatimString(false));
        Dafny.Helpers.Print((_2_minCap));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
        BigInteger _3_netStackEffect;
        _3_netStackEffect = ((_this).dtor_prog).StackEffect((_0_currentState).dtor_segNum);
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("* Net Stack Effect: ")).ToVerbatimString(false));
        Dafny.Helpers.Print(((((_3_netStackEffect).Sign != -1) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("+")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))).ToVerbatimString(false));
        Dafny.Helpers.Print((_3_netStackEffect));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
        BigInteger _4_netCapEffect;
        _4_netCapEffect = ((_this).dtor_prog).CapEffect((_0_currentState).dtor_segNum);
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("* Net Capacity Effect: ")).ToVerbatimString(false));
        Dafny.Helpers.Print(((((_4_netCapEffect).Sign != -1) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("+")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))).ToVerbatimString(false));
        Dafny.Helpers.Print((_4_netCapEffect));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*/\n")).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("function ExecuteFromCFGNode_s")).ToVerbatimString(false));
        Dafny.Helpers.Print((index));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(s0: EvmState.State): (s': EvmState.State)\n")).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("  // Writes permission for this segment.")).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("  // PC requirement for this node.")).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("  requires s0.EXECUTING?")).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("  requires s0.WritesPermitted()")).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("  requires s0.PC() == 0x")).ToVerbatimString(false));
        Dafny.Helpers.Print((Hex.__default.NatToHex(_1_startAddress)).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as nat\n")).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("  // Stack requirements for this node.")).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("  requires s0.Operands()")).ToVerbatimString(false));
        Dafny.Helpers.Print(((((index).Sign == 0) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" >= ")))).ToVerbatimString(false));
        Dafny.Helpers.Print((new BigInteger(((_0_currentState).dtor_st).Count)));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("  requires s0.Capacity() >= ")).ToVerbatimString(false));
        Dafny.Helpers.Print((_2_minCap));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
        BigInteger _hi0 = new BigInteger(((_0_currentState).dtor_st).Count);
        for (BigInteger _5_k = BigInteger.Zero; _5_k < _hi0; _5_k++) {
          if ((((_0_currentState).dtor_st).Select(_5_k)).is_Value) {
            Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n  requires s0.Peek(")).ToVerbatimString(false));
            Dafny.Helpers.Print((_5_k));
            Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") == ")).ToVerbatimString(false));
            Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0x"), Hex.__default.NatToHex((((_0_currentState).dtor_st).Select(_5_k)).Extract()))).ToVerbatimString(false));
            Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
          }
        }
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
        Dafny.Helpers.Print((((System.Func<Dafny.ISequence<Dafny.Rune>>)(() => {
  LinSegments._ILinSeg _source0 = (((_this).dtor_prog).dtor_xs).Select((_0_currentState).dtor_segNum);
  {
    if (_source0.is_STOPSeg) {
      return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("  ensures  s'.ERROR?\n");
    }
  }
  {
    return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("  ensures  s'.EXECUTING??\n");
  }
}))()).ToVerbatimString(false));
        Dafny.ISequence<Instructions._IInstruction> _6_nodeInstructions;
        _6_nodeInstructions = ((((_this).dtor_prog).dtor_xs).Select((_0_currentState).dtor_segNum)).dtor_ins;
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n")).ToVerbatimString(false));
        (_this).PrintInstructionsToDafny(_6_nodeInstructions, State.AState.create_EState(_1_startAddress, (_0_currentState).dtor_st), BigInteger.Zero);
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("   ")).ToVerbatimString(false));
        Dafny.Helpers.Print((PrettyIns.__default.PrintInstructionToDafny(((((_this).dtor_prog).dtor_xs).Select((_0_currentState).dtor_segNum)).dtor_lastIns, new BigInteger((_6_nodeInstructions).Count), (new BigInteger((_6_nodeInstructions).Count)) + (BigInteger.One))).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("  s")).ToVerbatimString(false));
        Dafny.Helpers.Print(((new BigInteger((_6_nodeInstructions).Count)) + (BigInteger.One)));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n")).ToVerbatimString(false));
        CFGObject._ICFGObj _in0 = _this;
        BigInteger _in1 = (index) + (BigInteger.One);
        _this = _in0;
        ;
        index = _in1;
        goto TAIL_CALL_START;
      }
    }
    public void PrintCFGVerifierBody(BigInteger index)
    {
      _ICFGObj _this = this;
    TAIL_CALL_START: ;
      if ((index) < (new BigInteger((((_this).dtor_a).dtor_states).Count))) {
        CFGState._IGState _0_currentState;
        _0_currentState = (((_this).dtor_a).dtor_states).Select(index);
        BigInteger _1_startAddress;
        _1_startAddress = ((_this).dtor_prog).StartAddress((_0_currentState).dtor_segNum);
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n/** Node ")).ToVerbatimString(false));
        Dafny.Helpers.Print((index));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("* Segment Id for this node is: ")).ToVerbatimString(false));
        Dafny.Helpers.Print(((_0_currentState).dtor_segNum));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("* Starting at 0x")).ToVerbatimString(false));
        Dafny.Helpers.Print((Hex.__default.NatToHex(_1_startAddress)).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("* Segment type is: ")).ToVerbatimString(false));
        Dafny.Helpers.Print((((((_this).dtor_prog).dtor_xs).Select((_0_currentState).dtor_segNum)).SegTypeName()).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("* Minimum stack size for this segment to prevent stack underflow: ")).ToVerbatimString(false));
        Dafny.Helpers.Print((((_this).dtor_prog).WpOp((_0_currentState).dtor_segNum)));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
        BigInteger _2_minCap;
        _2_minCap = ((_this).dtor_prog).WpCap((_0_currentState).dtor_segNum);
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("* Minimum capacity for this segment to prevent stack overflow: ")).ToVerbatimString(false));
        Dafny.Helpers.Print((_2_minCap));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
        BigInteger _3_netStackEffect;
        _3_netStackEffect = ((_this).dtor_prog).StackEffect((_0_currentState).dtor_segNum);
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("* Net Stack Effect: ")).ToVerbatimString(false));
        Dafny.Helpers.Print(((((_3_netStackEffect).Sign != -1) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("+")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))).ToVerbatimString(false));
        Dafny.Helpers.Print((_3_netStackEffect));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
        BigInteger _4_netCapEffect;
        _4_netCapEffect = ((_this).dtor_prog).CapEffect((_0_currentState).dtor_segNum);
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("* Net Capacity Effect: ")).ToVerbatimString(false));
        Dafny.Helpers.Print(((((_4_netCapEffect).Sign != -1) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("+")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))).ToVerbatimString(false));
        Dafny.Helpers.Print((_4_netCapEffect));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*/\n")).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("function {:opaque} {:verify true} ExecuteFromCFGNode_s")).ToVerbatimString(false));
        Dafny.Helpers.Print((index));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(s0: EState, gas: nat): (s': EState)\n")).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("  // PC requirement for this node.")).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("  requires s0.pc == 0x")).ToVerbatimString(false));
        Dafny.Helpers.Print((Hex.__default.NatToHex(_1_startAddress)).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as nat\n")).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("  // Stack requirements for this node.")).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("  requires s0.Operands()")).ToVerbatimString(false));
        Dafny.Helpers.Print(((((index).Sign == 0) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" >= ")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" >= ")))).ToVerbatimString(false));
        Dafny.Helpers.Print((new BigInteger(((_0_currentState).dtor_st).Count)));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
        BigInteger _hi0 = new BigInteger(((_0_currentState).dtor_st).Count);
        for (BigInteger _5_k = BigInteger.Zero; _5_k < _hi0; _5_k++) {
          if ((((_0_currentState).dtor_st).Select(_5_k)).is_Value) {
            Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n  requires s0.stack[")).ToVerbatimString(false));
            Dafny.Helpers.Print((_5_k));
            Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("] == ")).ToVerbatimString(false));
            Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0x"), Hex.__default.NatToHex((((_0_currentState).dtor_st).Select(_5_k)).Extract()))).ToVerbatimString(false));
            Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
          }
        }
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("  decreases gas\n")).ToVerbatimString(false));
        Dafny.ISequence<Instructions._IInstruction> _6_nodeInstructions;
        _6_nodeInstructions = ((((_this).dtor_prog).dtor_xs).Select((_0_currentState).dtor_segNum)).dtor_ins;
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n")).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if gas == 0 then s0")).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("else\n")).ToVerbatimString(false));
        (_this).PrintInstructionsToDafny(_6_nodeInstructions, State.AState.create_EState(_1_startAddress, (_0_currentState).dtor_st), BigInteger.Zero);
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("  ")).ToVerbatimString(false));
        Dafny.Helpers.Print((PrettyIns.__default.PrintInstructionToDafny(((((_this).dtor_prog).dtor_xs).Select((_0_currentState).dtor_segNum)).dtor_lastIns, new BigInteger((_6_nodeInstructions).Count), (new BigInteger((_6_nodeInstructions).Count)) + (BigInteger.One))).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
        if ((new BigInteger((((_this).dtor_a).SuccNat(index)).Count)).Sign == 0) {
          Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("  // Segment is terminal (Revert, Stop or Return)\n")).ToVerbatimString(false));
          Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("  s")).ToVerbatimString(false));
          Dafny.Helpers.Print(((new BigInteger((_6_nodeInstructions).Count)) + (BigInteger.One)));
          Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
        } else if ((new BigInteger((((_this).dtor_a).SuccNat(index)).Count)) == (BigInteger.One)) {
          Dafny.ISequence<Dafny.Rune> _7_commLine;
          LinSegments._ILinSeg _source0 = (((_this).dtor_prog).dtor_xs).Select((_0_currentState).dtor_segNum);
          {
            if (_source0.is_CONTSeg) {
              _7_commLine = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("//  Go to the next instruction at pc + 1");
              goto after_match0;
            }
          }
          {
            if (_source0.is_JUMPSeg) {
              _7_commLine = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("//  JUMP to the target at Peek(0)");
              goto after_match0;
            }
          }
          {
            _7_commLine = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("// Segment has one successor but is not a JUMP nor a CONT");
          }
        after_match0: ;
          Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("  ")).ToVerbatimString(false));
          Dafny.Helpers.Print((_7_commLine).ToVerbatimString(false));
          Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
          Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("  ExecuteFromCFGNode_s")).ToVerbatimString(false));
          Dafny.Helpers.Print(((((_this).dtor_a).SuccNat(index)).Select(BigInteger.Zero)));
          Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(s")).ToVerbatimString(false));
          Dafny.Helpers.Print(((new BigInteger((_6_nodeInstructions).Count)) + (BigInteger.One)));
          Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", gas - 1)\n")).ToVerbatimString(false));
        } else {
          Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("  // This is a JUMPI segment, determine next pc using second top-most element of stack\n")).ToVerbatimString(false));
          Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("  if s")).ToVerbatimString(false));
          Dafny.Helpers.Print((new BigInteger((_6_nodeInstructions).Count)));
          Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".stack[1] > 0 then\n")).ToVerbatimString(false));
          Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("   ExecuteFromCFGNode_s")).ToVerbatimString(false));
          Dafny.Helpers.Print(((((_this).dtor_a).SuccNat(index)).Select(BigInteger.One)));
          Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(s")).ToVerbatimString(false));
          Dafny.Helpers.Print(((new BigInteger((_6_nodeInstructions).Count)) + (BigInteger.One)));
          Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", gas - 1)\n")).ToVerbatimString(false));
          Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("  else\n")).ToVerbatimString(false));
          Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("    ExecuteFromCFGNode_s")).ToVerbatimString(false));
          Dafny.Helpers.Print(((((_this).dtor_a).SuccNat(index)).Select(BigInteger.Zero)));
          Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(s")).ToVerbatimString(false));
          Dafny.Helpers.Print(((new BigInteger((_6_nodeInstructions).Count)) + (BigInteger.One)));
          Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", gas - 1)")).ToVerbatimString(false));
          Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
        }
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n")).ToVerbatimString(false));
        CFGObject._ICFGObj _in0 = _this;
        BigInteger _in1 = (index) + (BigInteger.One);
        _this = _in0;
        ;
        index = _in1;
        goto TAIL_CALL_START;
      }
    }
    public void PrintInstructionsToDafny(Dafny.ISequence<Instructions._IInstruction> xs, State._IAState currentState, BigInteger pos)
    {
      _ICFGObj _this = this;
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)).Sign == 1) {
        Dafny.ISequence<Dafny.Rune> _0_k;
        _0_k = PrettyIns.__default.PrintInstructionToDafny((xs).Select(BigInteger.Zero), pos, (pos) + (BigInteger.One));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("  ")).ToVerbatimString(false));
        Dafny.Helpers.Print((_0_k).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
        State._IAState _1_newState;
        if ((currentState).is_EState) {
          _1_newState = ((xs).Select(BigInteger.Zero)).NextState(currentState, ((_this).dtor_prog).dtor_jumpDests, BigInteger.Zero);
        } else {
          _1_newState = currentState;
        }
        if ((((_1_newState).is_EState) && ((pos).Sign == 1)) && ((Dafny.Helpers.EuclideanModulus(pos, new BigInteger(10))).Sign == 0)) {
          BigInteger _hi0 = new BigInteger(((_1_newState).dtor_stack).Count);
          for (BigInteger _2_j = BigInteger.Zero; _2_j < _hi0; _2_j++) {
            if ((((_1_newState).dtor_stack).Select(_2_j)).is_Value) {
              Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("   assert s")).ToVerbatimString(false));
              Dafny.Helpers.Print(((pos) + (BigInteger.One)));
              Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".Peek(")).ToVerbatimString(false));
              Dafny.Helpers.Print((_2_j));
              Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") == ")).ToVerbatimString(false));
              Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0x"), Hex.__default.NatToHex((((_1_newState).dtor_stack).Select(_2_j)).Extract()))).ToVerbatimString(false));
              Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n")).ToVerbatimString(false));
            }
          }
        }
        CFGObject._ICFGObj _in0 = _this;
        Dafny.ISequence<Instructions._IInstruction> _in1 = (xs).Drop(BigInteger.One);
        State._IAState _in2 = _1_newState;
        BigInteger _in3 = (pos) + (BigInteger.One);
        _this = _in0;
        ;
        xs = _in1;
        currentState = _in2;
        pos = _in3;
        goto TAIL_CALL_START;
      }
    }
  }
} // end of namespace CFGObject
namespace Driver {

  public partial class __default {
    public static void _Main(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> args)
    {
      ArgParser.ArgumentParser _0_optionParser;
      ArgParser.ArgumentParser _nw0 = new ArgParser.ArgumentParser();
      _nw0.__ctor(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<string>"));
      _0_optionParser = _nw0;
      (_0_optionParser).AddOption(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("-d"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("--dis"), BigInteger.Zero, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Disassemble <string>"));
      (_0_optionParser).AddOption(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("-p"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("--proof"), BigInteger.One, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Generate proof object to verify/use the CFG for <string>"));
      (_0_optionParser).AddOption(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("-e"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("--refine"), BigInteger.One, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Generate proof object with distinct segments <string>"));
      (_0_optionParser).AddOption(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("-s"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("--segment"), BigInteger.Zero, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Print segment of <string>"));
      (_0_optionParser).AddOption(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("-l"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("--lib"), BigInteger.One, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("The path to the Dafny-EVM source code. Used to add includes files in the proof object. "));
      (_0_optionParser).AddOption(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("-c"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("--cfg"), BigInteger.One, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Max depth. Control flow graph in DOT format"));
      (_0_optionParser).AddOption(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("-r"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("--raw"), BigInteger.Zero, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Display non-minimised and minimised CFGs"));
      (_0_optionParser).AddOption(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("-z"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("--size"), BigInteger.One, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("The max size of segments. Default is upto terminal instructions or JUMPDEST."));
      (_0_optionParser).AddOption(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("-n"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("--notable"), BigInteger.Zero, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Don't use tables to pretty-print DOT file. Reduces size of the DOT file."));
      (_0_optionParser).AddOption(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("-t"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("--title"), BigInteger.One, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("The name of the program."));
      (_0_optionParser).AddOption(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("-i"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("--info"), BigInteger.Zero, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("The stats of the program (size, segments)."));
      if (((new BigInteger((args).Count)) < (new BigInteger(2))) || (((args).Select(BigInteger.One)).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("--help")))) {
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Not enough arguments\n")).ToVerbatimString(false));
        (_0_optionParser).PrintHelp();
      } else if ((new BigInteger((args).Count)) == (new BigInteger(2))) {
        if ((new BigInteger(((args).Select(BigInteger.One)).Count)).Sign == 0) {
          Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("String must be non empty \n")).ToVerbatimString(false));
        } else if ((Dafny.Helpers.EuclideanModulus(new BigInteger(((args).Select(BigInteger.One)).Count), new BigInteger(2))).Sign != 0) {
          Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("String must be non empty and have even length, length is ")).ToVerbatimString(false));
          Dafny.Helpers.Print((new BigInteger(((args).Select(BigInteger.One)).Count)));
          Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
        } else if (Hex.__default.IsHexString((((((args).Select(BigInteger.One)).Take(new BigInteger(2))).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0x"))) ? (((args).Select(BigInteger.One)).Drop(new BigInteger(2))) : ((args).Select(BigInteger.One))))) {
          Dafny.ISequence<Instructions._IInstruction> _1_x;
          _1_x = BinaryDecoder.__default.Disassemble((((((args).Select(BigInteger.One)).Take(new BigInteger(2))).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0x"))) ? (((args).Select(BigInteger.One)).Drop(new BigInteger(2))) : ((args).Select(BigInteger.One))), Dafny.Sequence<Instructions._IInstruction>.FromElements(), BigInteger.Zero);
          Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Disassembled code:\n")).ToVerbatimString(false));
          PrettyPrinters.__default.PrintInstructions(_1_x);
          Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("--------------- Disassembled ---------------------\n")).ToVerbatimString(false));
        } else {
          Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("String must be hexadecimal\n")).ToVerbatimString(false));
        }
      } else if ((((args).Select(BigInteger.One)).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("--help"))) || (((args).Select(BigInteger.One)).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("-h")))) {
        (_0_optionParser).PrintHelp();
      } else {
        Dafny.ISequence<Dafny.Rune> _2_stringToProcess;
        _2_stringToProcess = (args).Select((new BigInteger((args).Count)) - (BigInteger.One));
        if ((new BigInteger((_2_stringToProcess).Count)).Sign == 0) {
          Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("String must be non empty \n")).ToVerbatimString(false));
        } else if ((Dafny.Helpers.EuclideanModulus(new BigInteger((_2_stringToProcess).Count), new BigInteger(2))).Sign != 0) {
          Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("String must have even length, length is ")).ToVerbatimString(false));
          Dafny.Helpers.Print((new BigInteger((_2_stringToProcess).Count)));
          Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
        } else if (!(Hex.__default.IsHexString(((((_2_stringToProcess).Take(new BigInteger(2))).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0x"))) ? ((_2_stringToProcess).Drop(new BigInteger(2))) : (_2_stringToProcess))))) {
          Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("String must be hexadecimal\n")).ToVerbatimString(false));
        } else {
          Dafny.ISequence<Instructions._IInstruction> _3_x;
          _3_x = BinaryDecoder.__default.Disassemble(((((_2_stringToProcess).Take(new BigInteger(2))).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0x"))) ? ((_2_stringToProcess).Drop(new BigInteger(2))) : (_2_stringToProcess)), Dafny.Sequence<Instructions._IInstruction>.FromElements(), BigInteger.Zero);
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4_optArgs;
          _4_optArgs = (args).Subsequence(BigInteger.One, (new BigInteger((args).Count)) - (BigInteger.One));
          bool _5_disOpt;
          if (((_0_optionParser).GetArgs(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("--dis"), _4_optArgs)).is_Success) {
            _5_disOpt = true;
          } else {
            _5_disOpt = false;
          }
          bool _6_segmentOpt;
          if (((_0_optionParser).GetArgs(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("--segment"), _4_optArgs)).is_Success) {
            _6_segmentOpt = true;
          } else {
            _6_segmentOpt = false;
          }
          bool _7_proofOpt;
          if (((_0_optionParser).GetArgs(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("--proof"), _4_optArgs)).is_Success) {
            _7_proofOpt = true;
          } else {
            _7_proofOpt = false;
          }
          bool _8_proofRefine;
          if (((_0_optionParser).GetArgs(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("--refine"), _4_optArgs)).is_Success) {
            _8_proofRefine = true;
          } else {
            _8_proofRefine = false;
          }
          Dafny.ISequence<Dafny.Rune> _9_libOpt;
          MiscTypes._ITry<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source0 = (_0_optionParser).GetArgs(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("--lib"), _4_optArgs);
          {
            if (_source0.is_Success) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _10_p = _source0.dtor_v;
              _9_libOpt = (_10_p).Select(BigInteger.Zero);
              goto after_match0;
            }
          }
          {
            _9_libOpt = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          }
        after_match0: ;
          BigInteger _11_cfgDepthOpt;
          MiscTypes._ITry<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source1 = (_0_optionParser).GetArgs(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("--cfg"), _4_optArgs);
          {
            if (_source1.is_Success) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _12_args = _source1.dtor_v;
              if (((new BigInteger(((_12_args).Select(BigInteger.Zero)).Count)) >= (BigInteger.One)) && (Int.__default.IsNatNumber((_12_args).Select(BigInteger.Zero)))) {
                _11_cfgDepthOpt = Int.__default.StringToNat((_12_args).Select(BigInteger.Zero), BigInteger.Zero);
              } else {
                _11_cfgDepthOpt = BigInteger.Zero;
              }
              goto after_match1;
            }
          }
          {
            _11_cfgDepthOpt = BigInteger.Zero;
          }
        after_match1: ;
          bool _13_rawOpt;
          if (((_0_optionParser).GetArgs(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("--raw"), _4_optArgs)).is_Success) {
            _13_rawOpt = true;
          } else {
            _13_rawOpt = false;
          }
          bool _14_noTable;
          if (((_0_optionParser).GetArgs(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("--notable"), _4_optArgs)).is_Success) {
            _14_noTable = true;
          } else {
            _14_noTable = false;
          }
          bool _15_info;
          if (((_0_optionParser).GetArgs(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("--info"), _4_optArgs)).is_Success) {
            _15_info = true;
          } else {
            _15_info = false;
          }
          MiscTypes._IOption<BigInteger> _16_maxSegSize;
          MiscTypes._ITry<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source2 = (_0_optionParser).GetArgs(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("--size"), _4_optArgs);
          {
            if (_source2.is_Success) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _17_args = _source2.dtor_v;
              if (((new BigInteger(((_17_args).Select(BigInteger.Zero)).Count)) >= (BigInteger.One)) && (Int.__default.IsNatNumber((_17_args).Select(BigInteger.Zero)))) {
                _16_maxSegSize = MiscTypes.Option<BigInteger>.create_Some(Int.__default.StringToNat((_17_args).Select(BigInteger.Zero), BigInteger.Zero));
              } else {
                _16_maxSegSize = MiscTypes.Option<BigInteger>.create_None();
              }
              goto after_match2;
            }
          }
          {
            _16_maxSegSize = MiscTypes.Option<BigInteger>.create_None();
          }
        after_match2: ;
          Dafny.ISequence<Dafny.Rune> _18_name;
          MiscTypes._ITry<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source3 = (_0_optionParser).GetArgs(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("--title"), _4_optArgs);
          {
            if (_source3.is_Success) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _19_args = _source3.dtor_v;
              _18_name = (_19_args).Select(BigInteger.Zero);
              goto after_match3;
            }
          }
          {
            _18_name = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Name not set");
          }
        after_match3: ;
          if (_5_disOpt) {
            Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Disassembled code:\n")).ToVerbatimString(false));
            PrettyPrinters.__default.PrintInstructions(_3_x);
            Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("--------------- Disassembled ---------------------\n")).ToVerbatimString(false));
          }
          Dafny.ISequence<LinSegments._ILinSeg> _20_y;
          _20_y = Splitter.__default.SplitUpToTerminal(_3_x, _16_maxSegSize, Dafny.Sequence<Instructions._IInstruction>.FromElements(), Dafny.Sequence<LinSegments._ILinSeg>.FromElements());
          EVMObject._IEVMObj _21_prog;
          _21_prog = EVMObject.EVMObj.create(_20_y, EVMObject.__default.CollectJumpDests(_20_y), EVMObject.__default.CollectThem(_20_y));
          if (_15_info) {
            Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("-------- Program Stats ---------\n")).ToVerbatimString(false));
            (_21_prog).PrintByteCodeInfo();
            Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("-------- End Program Stats ---------\n")).ToVerbatimString(false));
            Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("-------- Segment Stats ---------\n")).ToVerbatimString(false));
            (_21_prog).PrintSegmentInfo();
            Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("-------- End Segment Stats ---------\n")).ToVerbatimString(false));
          }
          if (_6_segmentOpt) {
            Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Segments:\n")).ToVerbatimString(false));
            PrettyPrinters.__default.PrintSegments(_20_y, BigInteger.Zero);
            Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("----------------- Segments -------------------\n")).ToVerbatimString(false));
          }
          if ((((_11_cfgDepthOpt).Sign == 1) && ((new BigInteger((_20_y).Count)).Sign == 1)) && ((((_20_y).Select(BigInteger.Zero)).StartAddress()).Sign == 0)) {
            Automata._IAuto<CFGState._IGState> _22_a1;
            Statistics._IStats _23_s1;
            Automata._IAuto<CFGState._IGState> _out0;
            Statistics._IStats _out1;
            (_21_prog).BuildCFG(_11_cfgDepthOpt, !(_13_rawOpt), out _out0, out _out1);
            _22_a1 = _out0;
            _23_s1 = _out1;
            CFGObject._ICFGObj _24_cfgObj;
            _24_cfgObj = CFGObject.CFGObj.create(_21_prog, _11_cfgDepthOpt, _22_a1, !(_13_rawOpt), _23_s1);
            if (_7_proofOpt) {
              if ((_24_cfgObj).HasNoErrorState()) {
                (_24_cfgObj).CFGCheckerToDafny(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("EVMProofObject"), _9_libOpt);
              } else {
                Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("The CFG has some error states and the Dafny proof object cannot be generated\n")).ToVerbatimString(false));
              }
            } else if (_8_proofRefine) {
              if ((_24_cfgObj).HasNoErrorState()) {
                (_24_cfgObj).CFGRefineToDafny(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("EVMProofObject"), _9_libOpt);
              } else {
                Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("The CFG has some error states and the Dafny proof object cannot be generated\n")).ToVerbatimString(false));
              }
            } else {
              (_24_cfgObj).ToDot(_14_noTable, _18_name);
            }
          }
        }
      }
    }
  }
} // end of namespace Driver
namespace _module {

} // end of namespace _module
class __CallToMain {
  public static void Main(string[] args) {
    Dafny.Helpers.WithHaltHandling(() => Driver.__default._Main(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.UnicodeFromMainArguments(args)));
  }
}
