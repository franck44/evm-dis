include "../../../../src/dafny/AbstractSemantics/AbstractSemantics.dfy"

module  {:disableNonlinearArithmetic} EVMProofObject {

  import opened AbstractSemantics
  import opened AbstractState

  /** Node 0
    * Segment Id for this node is: 0
    * Starting at 0x0
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s0(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x0 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 0

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push1(s0, 0x80);
      var s2 := Push1(s1, 0x40);
      var s3 := MStore(s2);
      var s4 := Push1(s3, 0x04);
      var s5 := CallDataSize(s4);
      var s6 := Lt(s5);
      var s7 := Push2(s6, 0x00dd);
      var s8 := JumpI(s7);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s7.stack[1] > 0 then
        ExecuteFromCFGNode_s778(s8, gas - 1)
      else
        ExecuteFromCFGNode_s1(s8, gas - 1)
  }

  /** Node 1
    * Segment Id for this node is: 1
    * Starting at 0xd
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s1(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xd as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 0

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push1(s0, 0x00);
      var s2 := CallDataLoad(s1);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shr(s3);
      var s5 := Dup1(s4);
      var s6 := Push4(s5, 0xa217fddf);
      var s7 := Gt(s6);
      var s8 := Push2(s7, 0x007f);
      var s9 := JumpI(s8);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s8.stack[1] > 0 then
        ExecuteFromCFGNode_s329(s9, gas - 1)
      else
        ExecuteFromCFGNode_s2(s9, gas - 1)
  }

  /** Node 2
    * Segment Id for this node is: 2
    * Starting at 0x1e
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s2(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x1e as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 1

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Dup1(s0);
      var s2 := Push4(s1, 0xe30081a0);
      var s3 := Gt(s2);
      var s4 := Push2(s3, 0x0059);
      var s5 := JumpI(s4);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s4.stack[1] > 0 then
        ExecuteFromCFGNode_s165(s5, gas - 1)
      else
        ExecuteFromCFGNode_s3(s5, gas - 1)
  }

  /** Node 3
    * Segment Id for this node is: 3
    * Starting at 0x29
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s3(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x29 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 1

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Dup1(s0);
      var s2 := Push4(s1, 0xe30081a0);
      var s3 := Eq(s2);
      var s4 := Push2(s3, 0x025c);
      var s5 := JumpI(s4);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s4.stack[1] > 0 then
        ExecuteFromCFGNode_s24(s5, gas - 1)
      else
        ExecuteFromCFGNode_s4(s5, gas - 1)
  }

  /** Node 4
    * Segment Id for this node is: 4
    * Starting at 0x34
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s4(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x34 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 1

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Dup1(s0);
      var s2 := Push4(s1, 0xec87621c);
      var s3 := Eq(s2);
      var s4 := Push2(s3, 0x027c);
      var s5 := JumpI(s4);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s4.stack[1] > 0 then
        ExecuteFromCFGNode_s19(s5, gas - 1)
      else
        ExecuteFromCFGNode_s5(s5, gas - 1)
  }

  /** Node 5
    * Segment Id for this node is: 5
    * Starting at 0x3f
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s5(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x3f as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 1

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Dup1(s0);
      var s2 := Push4(s1, 0xf6326fb3);
      var s3 := Eq(s2);
      var s4 := Push2(s3, 0x02b0);
      var s5 := JumpI(s4);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s4.stack[1] > 0 then
        ExecuteFromCFGNode_s13(s5, gas - 1)
      else
        ExecuteFromCFGNode_s6(s5, gas - 1)
  }

  /** Node 6
    * Segment Id for this node is: 6
    * Starting at 0x4a
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s6(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x4a as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 1

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Dup1(s0);
      var s2 := Push4(s1, 0xfffe42e9);
      var s3 := Eq(s2);
      var s4 := Push2(s3, 0x02b8);
      var s5 := JumpI(s4);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s4.stack[1] > 0 then
        ExecuteFromCFGNode_s8(s5, gas - 1)
      else
        ExecuteFromCFGNode_s7(s5, gas - 1)
  }

  /** Node 7
    * Segment Id for this node is: 7
    * Starting at 0x55
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s7(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x55 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 1

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push1(s0, 0x00);
      var s2 := Dup1(s1);
      var s3 := Revert(s2);
      // Segment is terminal (Revert, Stop or Return)
      s3
  }

  /** Node 8
    * Segment Id for this node is: 73
    * Starting at 0x2b8
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s8(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x2b8 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 1

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      var s2 := CallValue(s1);
      var s3 := Dup1(s2);
      var s4 := IsZero(s3);
      var s5 := Push2(s4, 0x02c4);
      var s6 := JumpI(s5);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s5.stack[1] > 0 then
        ExecuteFromCFGNode_s10(s6, gas - 1)
      else
        ExecuteFromCFGNode_s9(s6, gas - 1)
  }

  /** Node 9
    * Segment Id for this node is: 74
    * Starting at 0x2c0
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s9(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x2c0 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 2

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push1(s0, 0x00);
      var s2 := Dup1(s1);
      var s3 := Revert(s2);
      // Segment is terminal (Revert, Stop or Return)
      s3
  }

  /** Node 10
    * Segment Id for this node is: 75
    * Starting at 0x2c4
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s10(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x2c4 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 2

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      var s2 := Pop(s1);
      var s3 := Push1(s2, 0x01);
      var s4 := SLoad(s3);
      var s5 := Push2(s4, 0x02d8);
      var s6 := Swap1(s5);
      var s7 := Push1(s6, 0x01);
      var s8 := Push1(s7, 0x01);
      var s9 := Push1(s8, 0xa0);
      var s10 := Shl(s9);
      var s11 := Sub(s10);
      assert s11.Peek(2) == 0x2d8;
      var s12 := And(s11);
      var s13 := Dup2(s12);
      var s14 := Jump(s13);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s11(s14, gas - 1)
  }

  /** Node 11
    * Segment Id for this node is: 76
    * Starting at 0x2d8
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s11(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x2d8 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 3

    requires s0.stack[1] == 0x2d8

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(1) == 0x2d8;
      var s2 := Push1(s1, 0x40);
      var s3 := MLoad(s2);
      var s4 := Push1(s3, 0x01);
      var s5 := Push1(s4, 0x01);
      var s6 := Push1(s5, 0xa0);
      var s7 := Shl(s6);
      var s8 := Sub(s7);
      var s9 := Swap1(s8);
      var s10 := Swap2(s9);
      var s11 := And(s10);
      assert s11.Peek(2) == 0x2d8;
      var s12 := Dup2(s11);
      var s13 := MStore(s12);
      var s14 := Push1(s13, 0x20);
      var s15 := Add(s14);
      var s16 := Push2(s15, 0x010e);
      var s17 := Jump(s16);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s12(s17, gas - 1)
  }

  /** Node 12
    * Segment Id for this node is: 27
    * Starting at 0x10e
    * Segment type is: RETURN Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: -1
    * Net Capacity Effect: +1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s12(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x10e as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 3

    requires s0.stack[1] == 0x2d8

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(1) == 0x2d8;
      var s2 := Push1(s1, 0x40);
      var s3 := MLoad(s2);
      var s4 := Dup1(s3);
      var s5 := Swap2(s4);
      var s6 := Sub(s5);
      var s7 := Swap1(s6);
      var s8 := Return(s7);
      // Segment is terminal (Revert, Stop or Return)
      s8
  }

  /** Node 13
    * Segment Id for this node is: 72
    * Starting at 0x2b0
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s13(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x2b0 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 1

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      var s2 := Push2(s1, 0x0175);
      var s3 := Push2(s2, 0x07a3);
      var s4 := Jump(s3);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s14(s4, gas - 1)
  }

  /** Node 14
    * Segment Id for this node is: 119
    * Starting at 0x7a3
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s14(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x7a3 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 2

    requires s0.stack[0] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0x175;
      var s2 := Push1(s1, 0x00);
      var s3 := CallValue(s2);
      var s4 := Gt(s3);
      var s5 := Push2(s4, 0x07e5);
      var s6 := JumpI(s5);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s5.stack[1] > 0 then
        ExecuteFromCFGNode_s17(s6, gas - 1)
      else
        ExecuteFromCFGNode_s15(s6, gas - 1)
  }

  /** Node 15
    * Segment Id for this node is: 120
    * Starting at 0x7ac
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s15(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x7ac as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 2

    requires s0.stack[0] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push1(s0, 0x40);
      assert s1.Peek(1) == 0x175;
      var s2 := MLoad(s1);
      var s3 := Push3(s2, 0x461bcd);
      var s4 := Push1(s3, 0xe5);
      var s5 := Shl(s4);
      var s6 := Dup2(s5);
      var s7 := MStore(s6);
      var s8 := Push1(s7, 0x20);
      var s9 := Push1(s8, 0x04);
      var s10 := Dup3(s9);
      var s11 := Add(s10);
      assert s11.Peek(3) == 0x175;
      var s12 := MStore(s11);
      var s13 := Push1(s12, 0x0f);
      var s14 := Push1(s13, 0x24);
      var s15 := Dup3(s14);
      var s16 := Add(s15);
      var s17 := MStore(s16);
      var s18 := PushN(s17, 15, 0x1b5cd9cb9d985b1d59481b1a5b5a5d);
      var s19 := Push1(s18, 0x8a);
      var s20 := Shl(s19);
      var s21 := Push1(s20, 0x44);
      assert s21.Peek(3) == 0x175;
      var s22 := Dup3(s21);
      var s23 := Add(s22);
      var s24 := MStore(s23);
      var s25 := Push1(s24, 0x64);
      var s26 := Add(s25);
      var s27 := Push2(s26, 0x0391);
      var s28 := Jump(s27);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s16(s28, gas - 1)
  }

  /** Node 16
    * Segment Id for this node is: 85
    * Starting at 0x391
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: -1
    * Net Capacity Effect: +1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s16(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x391 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 3

    requires s0.stack[1] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(1) == 0x175;
      var s2 := Push1(s1, 0x40);
      var s3 := MLoad(s2);
      var s4 := Dup1(s3);
      var s5 := Swap2(s4);
      var s6 := Sub(s5);
      var s7 := Swap1(s6);
      var s8 := Revert(s7);
      // Segment is terminal (Revert, Stop or Return)
      s8
  }

  /** Node 17
    * Segment Id for this node is: 121
    * Starting at 0x7e5
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 5
    * Net Stack Effect: -1
    * Net Capacity Effect: +1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s17(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x7e5 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 2

    requires s0.stack[0] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0x175;
      var s2 := Push1(s1, 0x40);
      var s3 := Dup1(s2);
      var s4 := MLoad(s3);
      var s5 := Caller(s4);
      var s6 := Dup2(s5);
      var s7 := MStore(s6);
      var s8 := Push1(s7, 0x00);
      var s9 := Push1(s8, 0x20);
      var s10 := Dup3(s9);
      var s11 := Add(s10);
      assert s11.Peek(4) == 0x175;
      var s12 := MStore(s11);
      var s13 := CallValue(s12);
      var s14 := Dup2(s13);
      var s15 := Dup4(s14);
      var s16 := Add(s15);
      var s17 := MStore(s16);
      var s18 := Swap1(s17);
      var s19 := MLoad(s18);
      var s20 := Push32(s19, 0x5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f62);
      var s21 := Swap2(s20);
      assert s21.Peek(3) == 0x175;
      var s22 := Dup2(s21);
      var s23 := Swap1(s22);
      var s24 := Sub(s23);
      var s25 := Push1(s24, 0x60);
      var s26 := Add(s25);
      var s27 := Swap1(s26);
      var s28 := Log1(s27);
      var s29 := Jump(s28);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s18(s29, gas - 1)
  }

  /** Node 18
    * Segment Id for this node is: 37
    * Starting at 0x175
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s18(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x175 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 1

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      var s2 := Stop(s1);
      // Segment is terminal (Revert, Stop or Return)
      s2
  }

  /** Node 19
    * Segment Id for this node is: 69
    * Starting at 0x27c
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s19(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x27c as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 1

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      var s2 := CallValue(s1);
      var s3 := Dup1(s2);
      var s4 := IsZero(s3);
      var s5 := Push2(s4, 0x0288);
      var s6 := JumpI(s5);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s5.stack[1] > 0 then
        ExecuteFromCFGNode_s21(s6, gas - 1)
      else
        ExecuteFromCFGNode_s20(s6, gas - 1)
  }

  /** Node 20
    * Segment Id for this node is: 70
    * Starting at 0x284
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s20(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x284 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 2

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push1(s0, 0x00);
      var s2 := Dup1(s1);
      var s3 := Revert(s2);
      // Segment is terminal (Revert, Stop or Return)
      s3
  }

  /** Node 21
    * Segment Id for this node is: 71
    * Starting at 0x288
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s21(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x288 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 2

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      var s2 := Pop(s1);
      var s3 := Push2(s2, 0x0147);
      var s4 := Push32(s3, 0x241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b08);
      var s5 := Dup2(s4);
      var s6 := Jump(s5);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s22(s6, gas - 1)
  }

  /** Node 22
    * Segment Id for this node is: 32
    * Starting at 0x147
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s22(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x147 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 3

    requires s0.stack[1] == 0x147

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(1) == 0x147;
      var s2 := Push1(s1, 0x40);
      var s3 := MLoad(s2);
      var s4 := Swap1(s3);
      var s5 := Dup2(s4);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x20);
      var s8 := Add(s7);
      var s9 := Push2(s8, 0x010e);
      var s10 := Jump(s9);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s23(s10, gas - 1)
  }

  /** Node 23
    * Segment Id for this node is: 27
    * Starting at 0x10e
    * Segment type is: RETURN Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: -1
    * Net Capacity Effect: +1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s23(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x10e as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 3

    requires s0.stack[1] == 0x147

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(1) == 0x147;
      var s2 := Push1(s1, 0x40);
      var s3 := MLoad(s2);
      var s4 := Dup1(s3);
      var s5 := Swap2(s4);
      var s6 := Sub(s5);
      var s7 := Swap1(s6);
      var s8 := Return(s7);
      // Segment is terminal (Revert, Stop or Return)
      s8
  }

  /** Node 24
    * Segment Id for this node is: 65
    * Starting at 0x25c
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s24(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x25c as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 1

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      var s2 := CallValue(s1);
      var s3 := Dup1(s2);
      var s4 := IsZero(s3);
      var s5 := Push2(s4, 0x0268);
      var s6 := JumpI(s5);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s5.stack[1] > 0 then
        ExecuteFromCFGNode_s26(s6, gas - 1)
      else
        ExecuteFromCFGNode_s25(s6, gas - 1)
  }

  /** Node 25
    * Segment Id for this node is: 66
    * Starting at 0x264
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s25(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x264 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 2

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push1(s0, 0x00);
      var s2 := Dup1(s1);
      var s3 := Revert(s2);
      // Segment is terminal (Revert, Stop or Return)
      s3
  }

  /** Node 26
    * Segment Id for this node is: 67
    * Starting at 0x268
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +3
    * Net Capacity Effect: -3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s26(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x268 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 2

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      var s2 := Pop(s1);
      var s3 := Push2(s2, 0x0175);
      var s4 := Push2(s3, 0x0277);
      var s5 := CallDataSize(s4);
      var s6 := Push1(s5, 0x04);
      var s7 := Push2(s6, 0x0d51);
      var s8 := Jump(s7);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s27(s8, gas - 1)
  }

  /** Node 27
    * Segment Id for this node is: 196
    * Starting at 0xd51
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s27(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xd51 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 5

    requires s0.stack[2] == 0x277

    requires s0.stack[3] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0x277;
      assert s1.Peek(3) == 0x175;
      var s2 := Push1(s1, 0x00);
      var s3 := Push1(s2, 0x20);
      var s4 := Dup3(s3);
      var s5 := Dup5(s4);
      var s6 := Sub(s5);
      var s7 := SLt(s6);
      var s8 := IsZero(s7);
      var s9 := Push2(s8, 0x0d63);
      var s10 := JumpI(s9);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s9.stack[1] > 0 then
        ExecuteFromCFGNode_s29(s10, gas - 1)
      else
        ExecuteFromCFGNode_s28(s10, gas - 1)
  }

  /** Node 28
    * Segment Id for this node is: 197
    * Starting at 0xd5f
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s28(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xd5f as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 6

    requires s0.stack[3] == 0x277

    requires s0.stack[4] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push1(s0, 0x00);
      assert s1.Peek(4) == 0x277;
      assert s1.Peek(5) == 0x175;
      var s2 := Dup1(s1);
      var s3 := Revert(s2);
      // Segment is terminal (Revert, Stop or Return)
      s3
  }

  /** Node 29
    * Segment Id for this node is: 198
    * Starting at 0xd63
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +2
    * Net Capacity Effect: -2
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s29(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xd63 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 6

    requires s0.stack[3] == 0x277

    requires s0.stack[4] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0x277;
      assert s1.Peek(4) == 0x175;
      var s2 := Push2(s1, 0x0c53);
      var s3 := Dup3(s2);
      var s4 := Push2(s3, 0x0c9d);
      var s5 := Jump(s4);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s30(s5, gas - 1)
  }

  /** Node 30
    * Segment Id for this node is: 180
    * Starting at 0xc9d
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s30(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xc9d as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 8

    requires s0.stack[1] == 0xc53

    requires s0.stack[5] == 0x277

    requires s0.stack[6] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(1) == 0xc53;
      assert s1.Peek(5) == 0x277;
      assert s1.Peek(6) == 0x175;
      var s2 := Dup1(s1);
      var s3 := CallDataLoad(s2);
      var s4 := Push1(s3, 0x01);
      var s5 := Push1(s4, 0x01);
      var s6 := Push1(s5, 0xa0);
      var s7 := Shl(s6);
      var s8 := Sub(s7);
      var s9 := Dup2(s8);
      var s10 := And(s9);
      var s11 := Dup2(s10);
      assert s11.Peek(4) == 0xc53;
      assert s11.Peek(8) == 0x277;
      assert s11.Peek(9) == 0x175;
      var s12 := Eq(s11);
      var s13 := Push2(s12, 0x0cb4);
      var s14 := JumpI(s13);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s13.stack[1] > 0 then
        ExecuteFromCFGNode_s32(s14, gas - 1)
      else
        ExecuteFromCFGNode_s31(s14, gas - 1)
  }

  /** Node 31
    * Segment Id for this node is: 181
    * Starting at 0xcb0
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s31(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xcb0 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 9

    requires s0.stack[2] == 0xc53

    requires s0.stack[6] == 0x277

    requires s0.stack[7] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push1(s0, 0x00);
      assert s1.Peek(3) == 0xc53;
      assert s1.Peek(7) == 0x277;
      assert s1.Peek(8) == 0x175;
      var s2 := Dup1(s1);
      var s3 := Revert(s2);
      // Segment is terminal (Revert, Stop or Return)
      s3
  }

  /** Node 32
    * Segment Id for this node is: 182
    * Starting at 0xcb4
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 3
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -2
    * Net Capacity Effect: +2
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s32(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xcb4 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 9

    requires s0.stack[2] == 0xc53

    requires s0.stack[6] == 0x277

    requires s0.stack[7] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0xc53;
      assert s1.Peek(6) == 0x277;
      assert s1.Peek(7) == 0x175;
      var s2 := Swap2(s1);
      var s3 := Swap1(s2);
      var s4 := Pop(s3);
      var s5 := Jump(s4);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s33(s5, gas - 1)
  }

  /** Node 33
    * Segment Id for this node is: 172
    * Starting at 0xc53
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 5
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -4
    * Net Capacity Effect: +4
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s33(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xc53 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 7

    requires s0.stack[4] == 0x277

    requires s0.stack[5] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(4) == 0x277;
      assert s1.Peek(5) == 0x175;
      var s2 := Swap4(s1);
      var s3 := Swap3(s2);
      var s4 := Pop(s3);
      var s5 := Pop(s4);
      var s6 := Pop(s5);
      var s7 := Jump(s6);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s34(s7, gas - 1)
  }

  /** Node 34
    * Segment Id for this node is: 68
    * Starting at 0x277
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 1
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s34(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x277 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 3

    requires s0.stack[1] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(1) == 0x175;
      var s2 := Push2(s1, 0x0756);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s35(s3, gas - 1)
  }

  /** Node 35
    * Segment Id for this node is: 117
    * Starting at 0x756
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +3
    * Net Capacity Effect: -3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s35(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x756 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 3

    requires s0.stack[1] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(1) == 0x175;
      var s2 := Push32(s1, 0x241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b08);
      var s3 := Push2(s2, 0x0780);
      var s4 := Dup2(s3);
      var s5 := Push2(s4, 0x0826);
      var s6 := Jump(s5);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s36(s6, gas - 1)
  }

  /** Node 36
    * Segment Id for this node is: 122
    * Starting at 0x826
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +3
    * Net Capacity Effect: -3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s36(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x826 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 6

    requires s0.stack[1] == 0x780

    requires s0.stack[4] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(1) == 0x780;
      assert s1.Peek(4) == 0x175;
      var s2 := Push2(s1, 0x0830);
      var s3 := Dup2(s2);
      var s4 := Caller(s3);
      var s5 := Push2(s4, 0x0a4c);
      var s6 := Jump(s5);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s37(s6, gas - 1)
  }

  /** Node 37
    * Segment Id for this node is: 143
    * Starting at 0xa4c
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +3
    * Net Capacity Effect: -3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s37(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xa4c as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 9

    requires s0.stack[2] == 0x830

    requires s0.stack[4] == 0x780

    requires s0.stack[7] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0x830;
      assert s1.Peek(4) == 0x780;
      assert s1.Peek(7) == 0x175;
      var s2 := Push2(s1, 0x0a56);
      var s3 := Dup3(s2);
      var s4 := Dup3(s3);
      var s5 := Push2(s4, 0x0708);
      var s6 := Jump(s5);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s38(s6, gas - 1)
  }

  /** Node 38
    * Segment Id for this node is: 114
    * Starting at 0x708
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 3
    * Minimum capacity for this segment to prevent stack overflow: 6
    * Net Stack Effect: -2
    * Net Capacity Effect: +2
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s38(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x708 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 12

    requires s0.stack[2] == 0xa56

    requires s0.stack[5] == 0x830

    requires s0.stack[7] == 0x780

    requires s0.stack[10] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0xa56;
      assert s1.Peek(5) == 0x830;
      assert s1.Peek(7) == 0x780;
      assert s1.Peek(10) == 0x175;
      var s2 := Push1(s1, 0x00);
      var s3 := Swap2(s2);
      var s4 := Dup3(s3);
      var s5 := MStore(s4);
      var s6 := Push1(s5, 0x20);
      var s7 := Dup3(s6);
      var s8 := Dup2(s7);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x40);
      var s11 := Dup1(s10);
      assert s11.Peek(5) == 0xa56;
      assert s11.Peek(8) == 0x830;
      assert s11.Peek(10) == 0x780;
      assert s11.Peek(13) == 0x175;
      var s12 := Dup5(s11);
      var s13 := Keccak256(s12);
      var s14 := Push1(s13, 0x01);
      var s15 := Push1(s14, 0x01);
      var s16 := Push1(s15, 0xa0);
      var s17 := Shl(s16);
      var s18 := Sub(s17);
      var s19 := Swap4(s18);
      var s20 := Swap1(s19);
      var s21 := Swap4(s20);
      assert s21.Peek(6) == 0xa56;
      assert s21.Peek(9) == 0x830;
      assert s21.Peek(11) == 0x780;
      assert s21.Peek(14) == 0x175;
      var s22 := And(s21);
      var s23 := Dup5(s22);
      var s24 := MStore(s23);
      var s25 := Swap2(s24);
      var s26 := Swap1(s25);
      var s27 := MStore(s26);
      var s28 := Swap1(s27);
      var s29 := Keccak256(s28);
      var s30 := SLoad(s29);
      var s31 := Push1(s30, 0xff);
      assert s31.Peek(2) == 0xa56;
      assert s31.Peek(5) == 0x830;
      assert s31.Peek(7) == 0x780;
      assert s31.Peek(10) == 0x175;
      var s32 := And(s31);
      var s33 := Swap1(s32);
      var s34 := Jump(s33);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s39(s34, gas - 1)
  }

  /** Node 39
    * Segment Id for this node is: 144
    * Starting at 0xa56
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 1
    * Net Stack Effect: -1
    * Net Capacity Effect: +1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s39(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xa56 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 10

    requires s0.stack[3] == 0x830

    requires s0.stack[5] == 0x780

    requires s0.stack[8] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0x830;
      assert s1.Peek(5) == 0x780;
      assert s1.Peek(8) == 0x175;
      var s2 := Push2(s1, 0x05af);
      var s3 := JumpI(s2);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s2.stack[1] > 0 then
        ExecuteFromCFGNode_s162(s3, gas - 1)
      else
        ExecuteFromCFGNode_s40(s3, gas - 1)
  }

  /** Node 40
    * Segment Id for this node is: 145
    * Starting at 0xa5b
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +2
    * Net Capacity Effect: -2
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s40(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xa5b as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 9

    requires s0.stack[2] == 0x830

    requires s0.stack[4] == 0x780

    requires s0.stack[7] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0a63);
      assert s1.Peek(0) == 0xa63;
      assert s1.Peek(3) == 0x830;
      assert s1.Peek(5) == 0x780;
      assert s1.Peek(8) == 0x175;
      var s2 := Dup2(s1);
      var s3 := Push2(s2, 0x0aa5);
      var s4 := Jump(s3);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s41(s4, gas - 1)
  }

  /** Node 41
    * Segment Id for this node is: 149
    * Starting at 0xaa5
    * Segment type is: CONT Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 5
    * Net Stack Effect: +4
    * Net Capacity Effect: -4
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s41(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xaa5 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 11

    requires s0.stack[1] == 0xa63

    requires s0.stack[4] == 0x830

    requires s0.stack[6] == 0x780

    requires s0.stack[9] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(1) == 0xa63;
      assert s1.Peek(4) == 0x830;
      assert s1.Peek(6) == 0x780;
      assert s1.Peek(9) == 0x175;
      var s2 := Push1(s1, 0x60);
      var s3 := Push2(s2, 0x0321);
      var s4 := Push1(s3, 0x01);
      var s5 := Push1(s4, 0x01);
      var s6 := Push1(s5, 0xa0);
      var s7 := Shl(s6);
      var s8 := Sub(s7);
      var s9 := Dup4(s8);
      var s10 := And(s9);
      var s11 := Push1(s10, 0x14);
      //  Go to the next instruction at pc + 1
      ExecuteFromCFGNode_s42(s11, gas - 1)
  }

  /** Node 42
    * Segment Id for this node is: 150
    * Starting at 0xab7
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 6
    * Net Stack Effect: +5
    * Net Capacity Effect: -5
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s42(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xab7 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 15

    requires s0.stack[2] == 0x321

    requires s0.stack[5] == 0xa63

    requires s0.stack[8] == 0x830

    requires s0.stack[10] == 0x780

    requires s0.stack[13] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0x321;
      assert s1.Peek(5) == 0xa63;
      assert s1.Peek(8) == 0x830;
      assert s1.Peek(10) == 0x780;
      assert s1.Peek(13) == 0x175;
      var s2 := Push1(s1, 0x60);
      var s3 := Push1(s2, 0x00);
      var s4 := Push2(s3, 0x0ac6);
      var s5 := Dup4(s4);
      var s6 := Push1(s5, 0x02);
      var s7 := Push2(s6, 0x0eb8);
      var s8 := Jump(s7);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s43(s8, gas - 1)
  }

  /** Node 43
    * Segment Id for this node is: 220
    * Starting at 0xeb8
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s43(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xeb8 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 20

    requires s0.stack[2] == 0xac6

    requires s0.stack[7] == 0x321

    requires s0.stack[10] == 0xa63

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x780

    requires s0.stack[18] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0xac6;
      assert s1.Peek(7) == 0x321;
      assert s1.Peek(10) == 0xa63;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x780;
      assert s1.Peek(18) == 0x175;
      var s2 := Dup1(s1);
      var s3 := Dup3(s2);
      var s4 := Mul(s3);
      var s5 := Dup2(s4);
      var s6 := IsZero(s5);
      var s7 := Dup3(s6);
      var s8 := Dup3(s7);
      var s9 := Div(s8);
      var s10 := Dup5(s9);
      var s11 := Eq(s10);
      assert s11.Peek(5) == 0xac6;
      assert s11.Peek(10) == 0x321;
      assert s11.Peek(13) == 0xa63;
      assert s11.Peek(16) == 0x830;
      assert s11.Peek(18) == 0x780;
      assert s11.Peek(21) == 0x175;
      var s12 := Or(s11);
      var s13 := Push2(s12, 0x0321);
      var s14 := JumpI(s13);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s13.stack[1] > 0 then
        ExecuteFromCFGNode_s46(s14, gas - 1)
      else
        ExecuteFromCFGNode_s44(s14, gas - 1)
  }

  /** Node 44
    * Segment Id for this node is: 221
    * Starting at 0xec8
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s44(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xec8 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 21

    requires s0.stack[3] == 0xac6

    requires s0.stack[8] == 0x321

    requires s0.stack[11] == 0xa63

    requires s0.stack[14] == 0x830

    requires s0.stack[16] == 0x780

    requires s0.stack[19] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0321);
      assert s1.Peek(0) == 0x321;
      assert s1.Peek(4) == 0xac6;
      assert s1.Peek(9) == 0x321;
      assert s1.Peek(12) == 0xa63;
      assert s1.Peek(15) == 0x830;
      assert s1.Peek(17) == 0x780;
      assert s1.Peek(20) == 0x175;
      var s2 := Push2(s1, 0x0d85);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s45(s3, gas - 1)
  }

  /** Node 45
    * Segment Id for this node is: 202
    * Starting at 0xd85
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s45(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xd85 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 22

    requires s0.stack[0] == 0x321

    requires s0.stack[4] == 0xac6

    requires s0.stack[9] == 0x321

    requires s0.stack[12] == 0xa63

    requires s0.stack[15] == 0x830

    requires s0.stack[17] == 0x780

    requires s0.stack[20] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0x321;
      assert s1.Peek(4) == 0xac6;
      assert s1.Peek(9) == 0x321;
      assert s1.Peek(12) == 0xa63;
      assert s1.Peek(15) == 0x830;
      assert s1.Peek(17) == 0x780;
      assert s1.Peek(20) == 0x175;
      var s2 := Push4(s1, 0x4e487b71);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x11);
      var s8 := Push1(s7, 0x04);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x24);
      var s11 := Push1(s10, 0x00);
      assert s11.Peek(2) == 0x321;
      assert s11.Peek(6) == 0xac6;
      assert s11.Peek(11) == 0x321;
      assert s11.Peek(14) == 0xa63;
      assert s11.Peek(17) == 0x830;
      assert s11.Peek(19) == 0x780;
      assert s11.Peek(22) == 0x175;
      var s12 := Revert(s11);
      // Segment is terminal (Revert, Stop or Return)
      s12
  }

  /** Node 46
    * Segment Id for this node is: 79
    * Starting at 0x321
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 4
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -3
    * Net Capacity Effect: +3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s46(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x321 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 21

    requires s0.stack[3] == 0xac6

    requires s0.stack[8] == 0x321

    requires s0.stack[11] == 0xa63

    requires s0.stack[14] == 0x830

    requires s0.stack[16] == 0x780

    requires s0.stack[19] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0xac6;
      assert s1.Peek(8) == 0x321;
      assert s1.Peek(11) == 0xa63;
      assert s1.Peek(14) == 0x830;
      assert s1.Peek(16) == 0x780;
      assert s1.Peek(19) == 0x175;
      var s2 := Swap3(s1);
      var s3 := Swap2(s2);
      var s4 := Pop(s3);
      var s5 := Pop(s4);
      var s6 := Jump(s5);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s47(s6, gas - 1)
  }

  /** Node 47
    * Segment Id for this node is: 151
    * Starting at 0xac6
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +2
    * Net Capacity Effect: -2
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s47(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xac6 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 18

    requires s0.stack[5] == 0x321

    requires s0.stack[8] == 0xa63

    requires s0.stack[11] == 0x830

    requires s0.stack[13] == 0x780

    requires s0.stack[16] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(5) == 0x321;
      assert s1.Peek(8) == 0xa63;
      assert s1.Peek(11) == 0x830;
      assert s1.Peek(13) == 0x780;
      assert s1.Peek(16) == 0x175;
      var s2 := Push2(s1, 0x0ad1);
      var s3 := Swap1(s2);
      var s4 := Push1(s3, 0x02);
      var s5 := Push2(s4, 0x0ecf);
      var s6 := Jump(s5);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s48(s6, gas - 1)
  }

  /** Node 48
    * Segment Id for this node is: 222
    * Starting at 0xecf
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s48(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xecf as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 20

    requires s0.stack[2] == 0xad1

    requires s0.stack[7] == 0x321

    requires s0.stack[10] == 0xa63

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x780

    requires s0.stack[18] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0xad1;
      assert s1.Peek(7) == 0x321;
      assert s1.Peek(10) == 0xa63;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x780;
      assert s1.Peek(18) == 0x175;
      var s2 := Dup1(s1);
      var s3 := Dup3(s2);
      var s4 := Add(s3);
      var s5 := Dup1(s4);
      var s6 := Dup3(s5);
      var s7 := Gt(s6);
      var s8 := IsZero(s7);
      var s9 := Push2(s8, 0x0321);
      var s10 := JumpI(s9);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s9.stack[1] > 0 then
        ExecuteFromCFGNode_s51(s10, gas - 1)
      else
        ExecuteFromCFGNode_s49(s10, gas - 1)
  }

  /** Node 49
    * Segment Id for this node is: 223
    * Starting at 0xedb
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s49(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xedb as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 21

    requires s0.stack[3] == 0xad1

    requires s0.stack[8] == 0x321

    requires s0.stack[11] == 0xa63

    requires s0.stack[14] == 0x830

    requires s0.stack[16] == 0x780

    requires s0.stack[19] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0321);
      assert s1.Peek(0) == 0x321;
      assert s1.Peek(4) == 0xad1;
      assert s1.Peek(9) == 0x321;
      assert s1.Peek(12) == 0xa63;
      assert s1.Peek(15) == 0x830;
      assert s1.Peek(17) == 0x780;
      assert s1.Peek(20) == 0x175;
      var s2 := Push2(s1, 0x0d85);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s50(s3, gas - 1)
  }

  /** Node 50
    * Segment Id for this node is: 202
    * Starting at 0xd85
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s50(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xd85 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 22

    requires s0.stack[0] == 0x321

    requires s0.stack[4] == 0xad1

    requires s0.stack[9] == 0x321

    requires s0.stack[12] == 0xa63

    requires s0.stack[15] == 0x830

    requires s0.stack[17] == 0x780

    requires s0.stack[20] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0x321;
      assert s1.Peek(4) == 0xad1;
      assert s1.Peek(9) == 0x321;
      assert s1.Peek(12) == 0xa63;
      assert s1.Peek(15) == 0x830;
      assert s1.Peek(17) == 0x780;
      assert s1.Peek(20) == 0x175;
      var s2 := Push4(s1, 0x4e487b71);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x11);
      var s8 := Push1(s7, 0x04);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x24);
      var s11 := Push1(s10, 0x00);
      assert s11.Peek(2) == 0x321;
      assert s11.Peek(6) == 0xad1;
      assert s11.Peek(11) == 0x321;
      assert s11.Peek(14) == 0xa63;
      assert s11.Peek(17) == 0x830;
      assert s11.Peek(19) == 0x780;
      assert s11.Peek(22) == 0x175;
      var s12 := Revert(s11);
      // Segment is terminal (Revert, Stop or Return)
      s12
  }

  /** Node 51
    * Segment Id for this node is: 79
    * Starting at 0x321
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 4
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -3
    * Net Capacity Effect: +3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s51(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x321 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 21

    requires s0.stack[3] == 0xad1

    requires s0.stack[8] == 0x321

    requires s0.stack[11] == 0xa63

    requires s0.stack[14] == 0x830

    requires s0.stack[16] == 0x780

    requires s0.stack[19] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0xad1;
      assert s1.Peek(8) == 0x321;
      assert s1.Peek(11) == 0xa63;
      assert s1.Peek(14) == 0x830;
      assert s1.Peek(16) == 0x780;
      assert s1.Peek(19) == 0x175;
      var s2 := Swap3(s1);
      var s3 := Swap2(s2);
      var s4 := Pop(s3);
      var s5 := Pop(s4);
      var s6 := Jump(s5);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s52(s6, gas - 1)
  }

  /** Node 52
    * Segment Id for this node is: 152
    * Starting at 0xad1
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s52(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xad1 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 18

    requires s0.stack[5] == 0x321

    requires s0.stack[8] == 0xa63

    requires s0.stack[11] == 0x830

    requires s0.stack[13] == 0x780

    requires s0.stack[16] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(5) == 0x321;
      assert s1.Peek(8) == 0xa63;
      assert s1.Peek(11) == 0x830;
      assert s1.Peek(13) == 0x780;
      assert s1.Peek(16) == 0x175;
      var s2 := Push8(s1, 0xffffffffffffffff);
      var s3 := Dup2(s2);
      var s4 := Gt(s3);
      var s5 := IsZero(s4);
      var s6 := Push2(s5, 0x0ae9);
      var s7 := JumpI(s6);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s6.stack[1] > 0 then
        ExecuteFromCFGNode_s55(s7, gas - 1)
      else
        ExecuteFromCFGNode_s53(s7, gas - 1)
  }

  /** Node 53
    * Segment Id for this node is: 153
    * Starting at 0xae2
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s53(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xae2 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 18

    requires s0.stack[5] == 0x321

    requires s0.stack[8] == 0xa63

    requires s0.stack[11] == 0x830

    requires s0.stack[13] == 0x780

    requires s0.stack[16] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0ae9);
      assert s1.Peek(0) == 0xae9;
      assert s1.Peek(6) == 0x321;
      assert s1.Peek(9) == 0xa63;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x780;
      assert s1.Peek(17) == 0x175;
      var s2 := Push2(s1, 0x0ee2);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s54(s3, gas - 1)
  }

  /** Node 54
    * Segment Id for this node is: 224
    * Starting at 0xee2
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s54(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xee2 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 19

    requires s0.stack[0] == 0xae9

    requires s0.stack[6] == 0x321

    requires s0.stack[9] == 0xa63

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x780

    requires s0.stack[17] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0xae9;
      assert s1.Peek(6) == 0x321;
      assert s1.Peek(9) == 0xa63;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x780;
      assert s1.Peek(17) == 0x175;
      var s2 := Push4(s1, 0x4e487b71);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x41);
      var s8 := Push1(s7, 0x04);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x24);
      var s11 := Push1(s10, 0x00);
      assert s11.Peek(2) == 0xae9;
      assert s11.Peek(8) == 0x321;
      assert s11.Peek(11) == 0xa63;
      assert s11.Peek(14) == 0x830;
      assert s11.Peek(16) == 0x780;
      assert s11.Peek(19) == 0x175;
      var s12 := Revert(s11);
      // Segment is terminal (Revert, Stop or Return)
      s12
  }

  /** Node 55
    * Segment Id for this node is: 154
    * Starting at 0xae9
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s55(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xae9 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 18

    requires s0.stack[5] == 0x321

    requires s0.stack[8] == 0xa63

    requires s0.stack[11] == 0x830

    requires s0.stack[13] == 0x780

    requires s0.stack[16] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(5) == 0x321;
      assert s1.Peek(8) == 0xa63;
      assert s1.Peek(11) == 0x830;
      assert s1.Peek(13) == 0x780;
      assert s1.Peek(16) == 0x175;
      var s2 := Push1(s1, 0x40);
      var s3 := MLoad(s2);
      var s4 := Swap1(s3);
      var s5 := Dup1(s4);
      var s6 := Dup3(s5);
      var s7 := MStore(s6);
      var s8 := Dup1(s7);
      var s9 := Push1(s8, 0x1f);
      var s10 := Add(s9);
      var s11 := Push1(s10, 0x1f);
      assert s11.Peek(8) == 0x321;
      assert s11.Peek(11) == 0xa63;
      assert s11.Peek(14) == 0x830;
      assert s11.Peek(16) == 0x780;
      assert s11.Peek(19) == 0x175;
      var s12 := Not(s11);
      var s13 := And(s12);
      var s14 := Push1(s13, 0x20);
      var s15 := Add(s14);
      var s16 := Dup3(s15);
      var s17 := Add(s16);
      var s18 := Push1(s17, 0x40);
      var s19 := MStore(s18);
      var s20 := Dup1(s19);
      var s21 := IsZero(s20);
      assert s21.Peek(7) == 0x321;
      assert s21.Peek(10) == 0xa63;
      assert s21.Peek(13) == 0x830;
      assert s21.Peek(15) == 0x780;
      assert s21.Peek(18) == 0x175;
      var s22 := Push2(s21, 0x0b13);
      var s23 := JumpI(s22);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s22.stack[1] > 0 then
        ExecuteFromCFGNode_s57(s23, gas - 1)
      else
        ExecuteFromCFGNode_s56(s23, gas - 1)
  }

  /** Node 56
    * Segment Id for this node is: 155
    * Starting at 0xb07
    * Segment type is: CONT Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 5
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s56(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xb07 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 19

    requires s0.stack[6] == 0x321

    requires s0.stack[9] == 0xa63

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x780

    requires s0.stack[17] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push1(s0, 0x20);
      assert s1.Peek(7) == 0x321;
      assert s1.Peek(10) == 0xa63;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x780;
      assert s1.Peek(18) == 0x175;
      var s2 := Dup3(s1);
      var s3 := Add(s2);
      var s4 := Dup2(s3);
      var s5 := Dup1(s4);
      var s6 := CallDataSize(s5);
      var s7 := Dup4(s6);
      var s8 := CallDataCopy(s7);
      var s9 := Add(s8);
      var s10 := Swap1(s9);
      var s11 := Pop(s10);
      //  Go to the next instruction at pc + 1
      ExecuteFromCFGNode_s57(s11, gas - 1)
  }

  /** Node 57
    * Segment Id for this node is: 156
    * Starting at 0xb13
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 3
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s57(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xb13 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 19

    requires s0.stack[6] == 0x321

    requires s0.stack[9] == 0xa63

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x780

    requires s0.stack[17] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(6) == 0x321;
      assert s1.Peek(9) == 0xa63;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x780;
      assert s1.Peek(17) == 0x175;
      var s2 := Pop(s1);
      var s3 := Swap1(s2);
      var s4 := Pop(s3);
      var s5 := Push1(s4, 0x03);
      var s6 := Push1(s5, 0xfc);
      var s7 := Shl(s6);
      var s8 := Dup2(s7);
      var s9 := Push1(s8, 0x00);
      var s10 := Dup2(s9);
      var s11 := MLoad(s10);
      assert s11.Peek(8) == 0x321;
      assert s11.Peek(11) == 0xa63;
      assert s11.Peek(14) == 0x830;
      assert s11.Peek(16) == 0x780;
      assert s11.Peek(19) == 0x175;
      var s12 := Dup2(s11);
      var s13 := Lt(s12);
      var s14 := Push2(s13, 0x0b2e);
      var s15 := JumpI(s14);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s14.stack[1] > 0 then
        ExecuteFromCFGNode_s60(s15, gas - 1)
      else
        ExecuteFromCFGNode_s58(s15, gas - 1)
  }

  /** Node 58
    * Segment Id for this node is: 157
    * Starting at 0xb27
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s58(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xb27 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 20

    requires s0.stack[7] == 0x321

    requires s0.stack[10] == 0xa63

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x780

    requires s0.stack[18] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0b2e);
      assert s1.Peek(0) == 0xb2e;
      assert s1.Peek(8) == 0x321;
      assert s1.Peek(11) == 0xa63;
      assert s1.Peek(14) == 0x830;
      assert s1.Peek(16) == 0x780;
      assert s1.Peek(19) == 0x175;
      var s2 := Push2(s1, 0x0ef8);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s59(s3, gas - 1)
  }

  /** Node 59
    * Segment Id for this node is: 225
    * Starting at 0xef8
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s59(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xef8 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 21

    requires s0.stack[0] == 0xb2e

    requires s0.stack[8] == 0x321

    requires s0.stack[11] == 0xa63

    requires s0.stack[14] == 0x830

    requires s0.stack[16] == 0x780

    requires s0.stack[19] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0xb2e;
      assert s1.Peek(8) == 0x321;
      assert s1.Peek(11) == 0xa63;
      assert s1.Peek(14) == 0x830;
      assert s1.Peek(16) == 0x780;
      assert s1.Peek(19) == 0x175;
      var s2 := Push4(s1, 0x4e487b71);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x32);
      var s8 := Push1(s7, 0x04);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x24);
      var s11 := Push1(s10, 0x00);
      assert s11.Peek(2) == 0xb2e;
      assert s11.Peek(10) == 0x321;
      assert s11.Peek(13) == 0xa63;
      assert s11.Peek(16) == 0x830;
      assert s11.Peek(18) == 0x780;
      assert s11.Peek(21) == 0x175;
      var s12 := Revert(s11);
      // Segment is terminal (Revert, Stop or Return)
      s12
  }

  /** Node 60
    * Segment Id for this node is: 158
    * Starting at 0xb2e
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 4
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s60(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xb2e as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 20

    requires s0.stack[7] == 0x321

    requires s0.stack[10] == 0xa63

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x780

    requires s0.stack[18] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(7) == 0x321;
      assert s1.Peek(10) == 0xa63;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x780;
      assert s1.Peek(18) == 0x175;
      var s2 := Push1(s1, 0x20);
      var s3 := Add(s2);
      var s4 := Add(s3);
      var s5 := Swap1(s4);
      var s6 := Push1(s5, 0x01);
      var s7 := Push1(s6, 0x01);
      var s8 := Push1(s7, 0xf8);
      var s9 := Shl(s8);
      var s10 := Sub(s9);
      var s11 := Not(s10);
      assert s11.Peek(7) == 0x321;
      assert s11.Peek(10) == 0xa63;
      assert s11.Peek(13) == 0x830;
      assert s11.Peek(15) == 0x780;
      assert s11.Peek(18) == 0x175;
      var s12 := And(s11);
      var s13 := Swap1(s12);
      var s14 := Dup2(s13);
      var s15 := Push1(s14, 0x00);
      var s16 := Byte(s15);
      var s17 := Swap1(s16);
      var s18 := MStore8(s17);
      var s19 := Pop(s18);
      var s20 := Push1(s19, 0x0f);
      var s21 := Push1(s20, 0xfb);
      assert s21.Peek(6) == 0x321;
      assert s21.Peek(9) == 0xa63;
      assert s21.Peek(12) == 0x830;
      assert s21.Peek(14) == 0x780;
      assert s21.Peek(17) == 0x175;
      var s22 := Shl(s21);
      var s23 := Dup2(s22);
      var s24 := Push1(s23, 0x01);
      var s25 := Dup2(s24);
      var s26 := MLoad(s25);
      var s27 := Dup2(s26);
      var s28 := Lt(s27);
      var s29 := Push2(s28, 0x0b5d);
      var s30 := JumpI(s29);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s29.stack[1] > 0 then
        ExecuteFromCFGNode_s63(s30, gas - 1)
      else
        ExecuteFromCFGNode_s61(s30, gas - 1)
  }

  /** Node 61
    * Segment Id for this node is: 159
    * Starting at 0xb56
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s61(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xb56 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 20

    requires s0.stack[7] == 0x321

    requires s0.stack[10] == 0xa63

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x780

    requires s0.stack[18] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0b5d);
      assert s1.Peek(0) == 0xb5d;
      assert s1.Peek(8) == 0x321;
      assert s1.Peek(11) == 0xa63;
      assert s1.Peek(14) == 0x830;
      assert s1.Peek(16) == 0x780;
      assert s1.Peek(19) == 0x175;
      var s2 := Push2(s1, 0x0ef8);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s62(s3, gas - 1)
  }

  /** Node 62
    * Segment Id for this node is: 225
    * Starting at 0xef8
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s62(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xef8 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 21

    requires s0.stack[0] == 0xb5d

    requires s0.stack[8] == 0x321

    requires s0.stack[11] == 0xa63

    requires s0.stack[14] == 0x830

    requires s0.stack[16] == 0x780

    requires s0.stack[19] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0xb5d;
      assert s1.Peek(8) == 0x321;
      assert s1.Peek(11) == 0xa63;
      assert s1.Peek(14) == 0x830;
      assert s1.Peek(16) == 0x780;
      assert s1.Peek(19) == 0x175;
      var s2 := Push4(s1, 0x4e487b71);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x32);
      var s8 := Push1(s7, 0x04);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x24);
      var s11 := Push1(s10, 0x00);
      assert s11.Peek(2) == 0xb5d;
      assert s11.Peek(10) == 0x321;
      assert s11.Peek(13) == 0xa63;
      assert s11.Peek(16) == 0x830;
      assert s11.Peek(18) == 0x780;
      assert s11.Peek(21) == 0x175;
      var s12 := Revert(s11);
      // Segment is terminal (Revert, Stop or Return)
      s12
  }

  /** Node 63
    * Segment Id for this node is: 160
    * Starting at 0xb5d
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 6
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s63(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xb5d as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 20

    requires s0.stack[7] == 0x321

    requires s0.stack[10] == 0xa63

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x780

    requires s0.stack[18] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(7) == 0x321;
      assert s1.Peek(10) == 0xa63;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x780;
      assert s1.Peek(18) == 0x175;
      var s2 := Push1(s1, 0x20);
      var s3 := Add(s2);
      var s4 := Add(s3);
      var s5 := Swap1(s4);
      var s6 := Push1(s5, 0x01);
      var s7 := Push1(s6, 0x01);
      var s8 := Push1(s7, 0xf8);
      var s9 := Shl(s8);
      var s10 := Sub(s9);
      var s11 := Not(s10);
      assert s11.Peek(7) == 0x321;
      assert s11.Peek(10) == 0xa63;
      assert s11.Peek(13) == 0x830;
      assert s11.Peek(15) == 0x780;
      assert s11.Peek(18) == 0x175;
      var s12 := And(s11);
      var s13 := Swap1(s12);
      var s14 := Dup2(s13);
      var s15 := Push1(s14, 0x00);
      var s16 := Byte(s15);
      var s17 := Swap1(s16);
      var s18 := MStore8(s17);
      var s19 := Pop(s18);
      var s20 := Push1(s19, 0x00);
      var s21 := Push2(s20, 0x0b81);
      assert s21.Peek(0) == 0xb81;
      assert s21.Peek(6) == 0x321;
      assert s21.Peek(9) == 0xa63;
      assert s21.Peek(12) == 0x830;
      assert s21.Peek(14) == 0x780;
      assert s21.Peek(17) == 0x175;
      var s22 := Dup5(s21);
      var s23 := Push1(s22, 0x02);
      var s24 := Push2(s23, 0x0eb8);
      var s25 := Jump(s24);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s64(s25, gas - 1)
  }

  /** Node 64
    * Segment Id for this node is: 220
    * Starting at 0xeb8
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s64(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xeb8 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 21

    requires s0.stack[2] == 0xb81

    requires s0.stack[8] == 0x321

    requires s0.stack[11] == 0xa63

    requires s0.stack[14] == 0x830

    requires s0.stack[16] == 0x780

    requires s0.stack[19] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0xb81;
      assert s1.Peek(8) == 0x321;
      assert s1.Peek(11) == 0xa63;
      assert s1.Peek(14) == 0x830;
      assert s1.Peek(16) == 0x780;
      assert s1.Peek(19) == 0x175;
      var s2 := Dup1(s1);
      var s3 := Dup3(s2);
      var s4 := Mul(s3);
      var s5 := Dup2(s4);
      var s6 := IsZero(s5);
      var s7 := Dup3(s6);
      var s8 := Dup3(s7);
      var s9 := Div(s8);
      var s10 := Dup5(s9);
      var s11 := Eq(s10);
      assert s11.Peek(5) == 0xb81;
      assert s11.Peek(11) == 0x321;
      assert s11.Peek(14) == 0xa63;
      assert s11.Peek(17) == 0x830;
      assert s11.Peek(19) == 0x780;
      assert s11.Peek(22) == 0x175;
      var s12 := Or(s11);
      var s13 := Push2(s12, 0x0321);
      var s14 := JumpI(s13);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s13.stack[1] > 0 then
        ExecuteFromCFGNode_s67(s14, gas - 1)
      else
        ExecuteFromCFGNode_s65(s14, gas - 1)
  }

  /** Node 65
    * Segment Id for this node is: 221
    * Starting at 0xec8
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s65(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xec8 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 22

    requires s0.stack[3] == 0xb81

    requires s0.stack[9] == 0x321

    requires s0.stack[12] == 0xa63

    requires s0.stack[15] == 0x830

    requires s0.stack[17] == 0x780

    requires s0.stack[20] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0321);
      assert s1.Peek(0) == 0x321;
      assert s1.Peek(4) == 0xb81;
      assert s1.Peek(10) == 0x321;
      assert s1.Peek(13) == 0xa63;
      assert s1.Peek(16) == 0x830;
      assert s1.Peek(18) == 0x780;
      assert s1.Peek(21) == 0x175;
      var s2 := Push2(s1, 0x0d85);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s66(s3, gas - 1)
  }

  /** Node 66
    * Segment Id for this node is: 202
    * Starting at 0xd85
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s66(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xd85 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 23

    requires s0.stack[0] == 0x321

    requires s0.stack[4] == 0xb81

    requires s0.stack[10] == 0x321

    requires s0.stack[13] == 0xa63

    requires s0.stack[16] == 0x830

    requires s0.stack[18] == 0x780

    requires s0.stack[21] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0x321;
      assert s1.Peek(4) == 0xb81;
      assert s1.Peek(10) == 0x321;
      assert s1.Peek(13) == 0xa63;
      assert s1.Peek(16) == 0x830;
      assert s1.Peek(18) == 0x780;
      assert s1.Peek(21) == 0x175;
      var s2 := Push4(s1, 0x4e487b71);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x11);
      var s8 := Push1(s7, 0x04);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x24);
      var s11 := Push1(s10, 0x00);
      assert s11.Peek(2) == 0x321;
      assert s11.Peek(6) == 0xb81;
      assert s11.Peek(12) == 0x321;
      assert s11.Peek(15) == 0xa63;
      assert s11.Peek(18) == 0x830;
      assert s11.Peek(20) == 0x780;
      assert s11.Peek(23) == 0x175;
      var s12 := Revert(s11);
      // Segment is terminal (Revert, Stop or Return)
      s12
  }

  /** Node 67
    * Segment Id for this node is: 79
    * Starting at 0x321
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 4
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -3
    * Net Capacity Effect: +3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s67(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x321 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 22

    requires s0.stack[3] == 0xb81

    requires s0.stack[9] == 0x321

    requires s0.stack[12] == 0xa63

    requires s0.stack[15] == 0x830

    requires s0.stack[17] == 0x780

    requires s0.stack[20] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0xb81;
      assert s1.Peek(9) == 0x321;
      assert s1.Peek(12) == 0xa63;
      assert s1.Peek(15) == 0x830;
      assert s1.Peek(17) == 0x780;
      assert s1.Peek(20) == 0x175;
      var s2 := Swap3(s1);
      var s3 := Swap2(s2);
      var s4 := Pop(s3);
      var s5 := Pop(s4);
      var s6 := Jump(s5);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s68(s6, gas - 1)
  }

  /** Node 68
    * Segment Id for this node is: 161
    * Starting at 0xb81
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +2
    * Net Capacity Effect: -2
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s68(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xb81 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 19

    requires s0.stack[6] == 0x321

    requires s0.stack[9] == 0xa63

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x780

    requires s0.stack[17] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(6) == 0x321;
      assert s1.Peek(9) == 0xa63;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x780;
      assert s1.Peek(17) == 0x175;
      var s2 := Push2(s1, 0x0b8c);
      var s3 := Swap1(s2);
      var s4 := Push1(s3, 0x01);
      var s5 := Push2(s4, 0x0ecf);
      var s6 := Jump(s5);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s69(s6, gas - 1)
  }

  /** Node 69
    * Segment Id for this node is: 222
    * Starting at 0xecf
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s69(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xecf as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 21

    requires s0.stack[2] == 0xb8c

    requires s0.stack[8] == 0x321

    requires s0.stack[11] == 0xa63

    requires s0.stack[14] == 0x830

    requires s0.stack[16] == 0x780

    requires s0.stack[19] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0xb8c;
      assert s1.Peek(8) == 0x321;
      assert s1.Peek(11) == 0xa63;
      assert s1.Peek(14) == 0x830;
      assert s1.Peek(16) == 0x780;
      assert s1.Peek(19) == 0x175;
      var s2 := Dup1(s1);
      var s3 := Dup3(s2);
      var s4 := Add(s3);
      var s5 := Dup1(s4);
      var s6 := Dup3(s5);
      var s7 := Gt(s6);
      var s8 := IsZero(s7);
      var s9 := Push2(s8, 0x0321);
      var s10 := JumpI(s9);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s9.stack[1] > 0 then
        ExecuteFromCFGNode_s72(s10, gas - 1)
      else
        ExecuteFromCFGNode_s70(s10, gas - 1)
  }

  /** Node 70
    * Segment Id for this node is: 223
    * Starting at 0xedb
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s70(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xedb as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 22

    requires s0.stack[3] == 0xb8c

    requires s0.stack[9] == 0x321

    requires s0.stack[12] == 0xa63

    requires s0.stack[15] == 0x830

    requires s0.stack[17] == 0x780

    requires s0.stack[20] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0321);
      assert s1.Peek(0) == 0x321;
      assert s1.Peek(4) == 0xb8c;
      assert s1.Peek(10) == 0x321;
      assert s1.Peek(13) == 0xa63;
      assert s1.Peek(16) == 0x830;
      assert s1.Peek(18) == 0x780;
      assert s1.Peek(21) == 0x175;
      var s2 := Push2(s1, 0x0d85);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s71(s3, gas - 1)
  }

  /** Node 71
    * Segment Id for this node is: 202
    * Starting at 0xd85
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s71(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xd85 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 23

    requires s0.stack[0] == 0x321

    requires s0.stack[4] == 0xb8c

    requires s0.stack[10] == 0x321

    requires s0.stack[13] == 0xa63

    requires s0.stack[16] == 0x830

    requires s0.stack[18] == 0x780

    requires s0.stack[21] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0x321;
      assert s1.Peek(4) == 0xb8c;
      assert s1.Peek(10) == 0x321;
      assert s1.Peek(13) == 0xa63;
      assert s1.Peek(16) == 0x830;
      assert s1.Peek(18) == 0x780;
      assert s1.Peek(21) == 0x175;
      var s2 := Push4(s1, 0x4e487b71);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x11);
      var s8 := Push1(s7, 0x04);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x24);
      var s11 := Push1(s10, 0x00);
      assert s11.Peek(2) == 0x321;
      assert s11.Peek(6) == 0xb8c;
      assert s11.Peek(12) == 0x321;
      assert s11.Peek(15) == 0xa63;
      assert s11.Peek(18) == 0x830;
      assert s11.Peek(20) == 0x780;
      assert s11.Peek(23) == 0x175;
      var s12 := Revert(s11);
      // Segment is terminal (Revert, Stop or Return)
      s12
  }

  /** Node 72
    * Segment Id for this node is: 79
    * Starting at 0x321
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 4
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -3
    * Net Capacity Effect: +3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s72(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x321 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 22

    requires s0.stack[3] == 0xb8c

    requires s0.stack[9] == 0x321

    requires s0.stack[12] == 0xa63

    requires s0.stack[15] == 0x830

    requires s0.stack[17] == 0x780

    requires s0.stack[20] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0xb8c;
      assert s1.Peek(9) == 0x321;
      assert s1.Peek(12) == 0xa63;
      assert s1.Peek(15) == 0x830;
      assert s1.Peek(17) == 0x780;
      assert s1.Peek(20) == 0x175;
      var s2 := Swap3(s1);
      var s3 := Swap2(s2);
      var s4 := Pop(s3);
      var s5 := Pop(s4);
      var s6 := Jump(s5);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s73(s6, gas - 1)
  }

  /** Node 73
    * Segment Id for this node is: 162
    * Starting at 0xb8c
    * Segment type is: CONT Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -1
    * Net Capacity Effect: +1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s73(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xb8c as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 19

    requires s0.stack[6] == 0x321

    requires s0.stack[9] == 0xa63

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x780

    requires s0.stack[17] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(6) == 0x321;
      assert s1.Peek(9) == 0xa63;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x780;
      assert s1.Peek(17) == 0x175;
      var s2 := Swap1(s1);
      var s3 := Pop(s2);
      //  Go to the next instruction at pc + 1
      ExecuteFromCFGNode_s74(s3, gas - 1)
  }

  /** Node 74
    * Segment Id for this node is: 163
    * Starting at 0xb8f
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s74(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xb8f as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 18

    requires s0.stack[5] == 0x321

    requires s0.stack[8] == 0xa63

    requires s0.stack[11] == 0x830

    requires s0.stack[13] == 0x780

    requires s0.stack[16] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(5) == 0x321;
      assert s1.Peek(8) == 0xa63;
      assert s1.Peek(11) == 0x830;
      assert s1.Peek(13) == 0x780;
      assert s1.Peek(16) == 0x175;
      var s2 := Push1(s1, 0x01);
      var s3 := Dup2(s2);
      var s4 := Gt(s3);
      var s5 := IsZero(s4);
      var s6 := Push2(s5, 0x0c04);
      var s7 := JumpI(s6);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s6.stack[1] > 0 then
        ExecuteFromCFGNode_s87(s7, gas - 1)
      else
        ExecuteFromCFGNode_s75(s7, gas - 1)
  }

  /** Node 75
    * Segment Id for this node is: 164
    * Starting at 0xb99
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 5
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +2
    * Net Capacity Effect: -2
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s75(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xb99 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 18

    requires s0.stack[5] == 0x321

    requires s0.stack[8] == 0xa63

    requires s0.stack[11] == 0x830

    requires s0.stack[13] == 0x780

    requires s0.stack[16] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := PushN(s0, 16, 0x181899199a1a9b1b9c1cb0b131b232b3);
      assert s1.Peek(6) == 0x321;
      assert s1.Peek(9) == 0xa63;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x780;
      assert s1.Peek(17) == 0x175;
      var s2 := Push1(s1, 0x81);
      var s3 := Shl(s2);
      var s4 := Dup6(s3);
      var s5 := Push1(s4, 0x0f);
      var s6 := And(s5);
      var s7 := Push1(s6, 0x10);
      var s8 := Dup2(s7);
      var s9 := Lt(s8);
      var s10 := Push2(s9, 0x0bc0);
      var s11 := JumpI(s10);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s10.stack[1] > 0 then
        ExecuteFromCFGNode_s78(s11, gas - 1)
      else
        ExecuteFromCFGNode_s76(s11, gas - 1)
  }

  /** Node 76
    * Segment Id for this node is: 165
    * Starting at 0xbb9
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s76(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xbb9 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 20

    requires s0.stack[7] == 0x321

    requires s0.stack[10] == 0xa63

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x780

    requires s0.stack[18] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0bc0);
      assert s1.Peek(0) == 0xbc0;
      assert s1.Peek(8) == 0x321;
      assert s1.Peek(11) == 0xa63;
      assert s1.Peek(14) == 0x830;
      assert s1.Peek(16) == 0x780;
      assert s1.Peek(19) == 0x175;
      var s2 := Push2(s1, 0x0ef8);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s77(s3, gas - 1)
  }

  /** Node 77
    * Segment Id for this node is: 225
    * Starting at 0xef8
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s77(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xef8 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 21

    requires s0.stack[0] == 0xbc0

    requires s0.stack[8] == 0x321

    requires s0.stack[11] == 0xa63

    requires s0.stack[14] == 0x830

    requires s0.stack[16] == 0x780

    requires s0.stack[19] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0xbc0;
      assert s1.Peek(8) == 0x321;
      assert s1.Peek(11) == 0xa63;
      assert s1.Peek(14) == 0x830;
      assert s1.Peek(16) == 0x780;
      assert s1.Peek(19) == 0x175;
      var s2 := Push4(s1, 0x4e487b71);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x32);
      var s8 := Push1(s7, 0x04);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x24);
      var s11 := Push1(s10, 0x00);
      assert s11.Peek(2) == 0xbc0;
      assert s11.Peek(10) == 0x321;
      assert s11.Peek(13) == 0xa63;
      assert s11.Peek(16) == 0x830;
      assert s11.Peek(18) == 0x780;
      assert s11.Peek(21) == 0x175;
      var s12 := Revert(s11);
      // Segment is terminal (Revert, Stop or Return)
      s12
  }

  /** Node 78
    * Segment Id for this node is: 166
    * Starting at 0xbc0
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 4
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s78(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xbc0 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 20

    requires s0.stack[7] == 0x321

    requires s0.stack[10] == 0xa63

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x780

    requires s0.stack[18] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(7) == 0x321;
      assert s1.Peek(10) == 0xa63;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x780;
      assert s1.Peek(18) == 0x175;
      var s2 := Byte(s1);
      var s3 := Push1(s2, 0xf8);
      var s4 := Shl(s3);
      var s5 := Dup3(s4);
      var s6 := Dup3(s5);
      var s7 := Dup2(s6);
      var s8 := MLoad(s7);
      var s9 := Dup2(s8);
      var s10 := Lt(s9);
      var s11 := Push2(s10, 0x0bd6);
      assert s11.Peek(0) == 0xbd6;
      assert s11.Peek(10) == 0x321;
      assert s11.Peek(13) == 0xa63;
      assert s11.Peek(16) == 0x830;
      assert s11.Peek(18) == 0x780;
      assert s11.Peek(21) == 0x175;
      var s12 := JumpI(s11);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s11.stack[1] > 0 then
        ExecuteFromCFGNode_s81(s12, gas - 1)
      else
        ExecuteFromCFGNode_s79(s12, gas - 1)
  }

  /** Node 79
    * Segment Id for this node is: 167
    * Starting at 0xbcf
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s79(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xbcf as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 21

    requires s0.stack[8] == 0x321

    requires s0.stack[11] == 0xa63

    requires s0.stack[14] == 0x830

    requires s0.stack[16] == 0x780

    requires s0.stack[19] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0bd6);
      assert s1.Peek(0) == 0xbd6;
      assert s1.Peek(9) == 0x321;
      assert s1.Peek(12) == 0xa63;
      assert s1.Peek(15) == 0x830;
      assert s1.Peek(17) == 0x780;
      assert s1.Peek(20) == 0x175;
      var s2 := Push2(s1, 0x0ef8);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s80(s3, gas - 1)
  }

  /** Node 80
    * Segment Id for this node is: 225
    * Starting at 0xef8
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s80(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xef8 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 22

    requires s0.stack[0] == 0xbd6

    requires s0.stack[9] == 0x321

    requires s0.stack[12] == 0xa63

    requires s0.stack[15] == 0x830

    requires s0.stack[17] == 0x780

    requires s0.stack[20] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0xbd6;
      assert s1.Peek(9) == 0x321;
      assert s1.Peek(12) == 0xa63;
      assert s1.Peek(15) == 0x830;
      assert s1.Peek(17) == 0x780;
      assert s1.Peek(20) == 0x175;
      var s2 := Push4(s1, 0x4e487b71);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x32);
      var s8 := Push1(s7, 0x04);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x24);
      var s11 := Push1(s10, 0x00);
      assert s11.Peek(2) == 0xbd6;
      assert s11.Peek(11) == 0x321;
      assert s11.Peek(14) == 0xa63;
      assert s11.Peek(17) == 0x830;
      assert s11.Peek(19) == 0x780;
      assert s11.Peek(22) == 0x175;
      var s12 := Revert(s11);
      // Segment is terminal (Revert, Stop or Return)
      s12
  }

  /** Node 81
    * Segment Id for this node is: 168
    * Starting at 0xbd6
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 8
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: -1
    * Net Capacity Effect: +1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s81(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xbd6 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 21

    requires s0.stack[8] == 0x321

    requires s0.stack[11] == 0xa63

    requires s0.stack[14] == 0x830

    requires s0.stack[16] == 0x780

    requires s0.stack[19] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(8) == 0x321;
      assert s1.Peek(11) == 0xa63;
      assert s1.Peek(14) == 0x830;
      assert s1.Peek(16) == 0x780;
      assert s1.Peek(19) == 0x175;
      var s2 := Push1(s1, 0x20);
      var s3 := Add(s2);
      var s4 := Add(s3);
      var s5 := Swap1(s4);
      var s6 := Push1(s5, 0x01);
      var s7 := Push1(s6, 0x01);
      var s8 := Push1(s7, 0xf8);
      var s9 := Shl(s8);
      var s10 := Sub(s9);
      var s11 := Not(s10);
      assert s11.Peek(8) == 0x321;
      assert s11.Peek(11) == 0xa63;
      assert s11.Peek(14) == 0x830;
      assert s11.Peek(16) == 0x780;
      assert s11.Peek(19) == 0x175;
      var s12 := And(s11);
      var s13 := Swap1(s12);
      var s14 := Dup2(s13);
      var s15 := Push1(s14, 0x00);
      var s16 := Byte(s15);
      var s17 := Swap1(s16);
      var s18 := MStore8(s17);
      var s19 := Pop(s18);
      var s20 := Push1(s19, 0x04);
      var s21 := Swap5(s20);
      assert s21.Peek(6) == 0x321;
      assert s21.Peek(9) == 0xa63;
      assert s21.Peek(12) == 0x830;
      assert s21.Peek(14) == 0x780;
      assert s21.Peek(17) == 0x175;
      var s22 := Swap1(s21);
      var s23 := Swap5(s22);
      var s24 := Shr(s23);
      var s25 := Swap4(s24);
      var s26 := Push2(s25, 0x0bfd);
      var s27 := Dup2(s26);
      var s28 := Push2(s27, 0x0f0e);
      var s29 := Jump(s28);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s82(s29, gas - 1)
  }

  /** Node 82
    * Segment Id for this node is: 226
    * Starting at 0xf0e
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s82(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xf0e as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 20

    requires s0.stack[1] == 0xbfd

    requires s0.stack[7] == 0x321

    requires s0.stack[10] == 0xa63

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x780

    requires s0.stack[18] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(1) == 0xbfd;
      assert s1.Peek(7) == 0x321;
      assert s1.Peek(10) == 0xa63;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x780;
      assert s1.Peek(18) == 0x175;
      var s2 := Push1(s1, 0x00);
      var s3 := Dup2(s2);
      var s4 := Push2(s3, 0x0f1d);
      var s5 := JumpI(s4);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s4.stack[1] > 0 then
        ExecuteFromCFGNode_s85(s5, gas - 1)
      else
        ExecuteFromCFGNode_s83(s5, gas - 1)
  }

  /** Node 83
    * Segment Id for this node is: 227
    * Starting at 0xf16
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s83(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xf16 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 21

    requires s0.stack[2] == 0xbfd

    requires s0.stack[8] == 0x321

    requires s0.stack[11] == 0xa63

    requires s0.stack[14] == 0x830

    requires s0.stack[16] == 0x780

    requires s0.stack[19] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0f1d);
      assert s1.Peek(0) == 0xf1d;
      assert s1.Peek(3) == 0xbfd;
      assert s1.Peek(9) == 0x321;
      assert s1.Peek(12) == 0xa63;
      assert s1.Peek(15) == 0x830;
      assert s1.Peek(17) == 0x780;
      assert s1.Peek(20) == 0x175;
      var s2 := Push2(s1, 0x0d85);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s84(s3, gas - 1)
  }

  /** Node 84
    * Segment Id for this node is: 202
    * Starting at 0xd85
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s84(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xd85 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 22

    requires s0.stack[0] == 0xf1d

    requires s0.stack[3] == 0xbfd

    requires s0.stack[9] == 0x321

    requires s0.stack[12] == 0xa63

    requires s0.stack[15] == 0x830

    requires s0.stack[17] == 0x780

    requires s0.stack[20] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0xf1d;
      assert s1.Peek(3) == 0xbfd;
      assert s1.Peek(9) == 0x321;
      assert s1.Peek(12) == 0xa63;
      assert s1.Peek(15) == 0x830;
      assert s1.Peek(17) == 0x780;
      assert s1.Peek(20) == 0x175;
      var s2 := Push4(s1, 0x4e487b71);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x11);
      var s8 := Push1(s7, 0x04);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x24);
      var s11 := Push1(s10, 0x00);
      assert s11.Peek(2) == 0xf1d;
      assert s11.Peek(5) == 0xbfd;
      assert s11.Peek(11) == 0x321;
      assert s11.Peek(14) == 0xa63;
      assert s11.Peek(17) == 0x830;
      assert s11.Peek(19) == 0x780;
      assert s11.Peek(22) == 0x175;
      var s12 := Revert(s11);
      // Segment is terminal (Revert, Stop or Return)
      s12
  }

  /** Node 85
    * Segment Id for this node is: 228
    * Starting at 0xf1d
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 3
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -2
    * Net Capacity Effect: +2
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s85(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xf1d as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 21

    requires s0.stack[2] == 0xbfd

    requires s0.stack[8] == 0x321

    requires s0.stack[11] == 0xa63

    requires s0.stack[14] == 0x830

    requires s0.stack[16] == 0x780

    requires s0.stack[19] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0xbfd;
      assert s1.Peek(8) == 0x321;
      assert s1.Peek(11) == 0xa63;
      assert s1.Peek(14) == 0x830;
      assert s1.Peek(16) == 0x780;
      assert s1.Peek(19) == 0x175;
      var s2 := Pop(s1);
      var s3 := Push1(s2, 0x00);
      var s4 := Not(s3);
      var s5 := Add(s4);
      var s6 := Swap1(s5);
      var s7 := Jump(s6);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s86(s7, gas - 1)
  }

  /** Node 86
    * Segment Id for this node is: 169
    * Starting at 0xbfd
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -1
    * Net Capacity Effect: +1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s86(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xbfd as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 19

    requires s0.stack[6] == 0x321

    requires s0.stack[9] == 0xa63

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x780

    requires s0.stack[17] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(6) == 0x321;
      assert s1.Peek(9) == 0xa63;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x780;
      assert s1.Peek(17) == 0x175;
      var s2 := Swap1(s1);
      var s3 := Pop(s2);
      var s4 := Push2(s3, 0x0b8f);
      var s5 := Jump(s4);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s74(s5, gas - 1)
  }

  /** Node 87
    * Segment Id for this node is: 170
    * Starting at 0xc04
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 5
    * Minimum capacity for this segment to prevent stack overflow: 1
    * Net Stack Effect: -1
    * Net Capacity Effect: +1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s87(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xc04 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 18

    requires s0.stack[5] == 0x321

    requires s0.stack[8] == 0xa63

    requires s0.stack[11] == 0x830

    requires s0.stack[13] == 0x780

    requires s0.stack[16] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(5) == 0x321;
      assert s1.Peek(8) == 0xa63;
      assert s1.Peek(11) == 0x830;
      assert s1.Peek(13) == 0x780;
      assert s1.Peek(16) == 0x175;
      var s2 := Pop(s1);
      var s3 := Dup4(s2);
      var s4 := IsZero(s3);
      var s5 := Push2(s4, 0x0c53);
      var s6 := JumpI(s5);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s5.stack[1] > 0 then
        ExecuteFromCFGNode_s90(s6, gas - 1)
      else
        ExecuteFromCFGNode_s88(s6, gas - 1)
  }

  /** Node 88
    * Segment Id for this node is: 171
    * Starting at 0xc0c
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s88(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xc0c as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 17

    requires s0.stack[4] == 0x321

    requires s0.stack[7] == 0xa63

    requires s0.stack[10] == 0x830

    requires s0.stack[12] == 0x780

    requires s0.stack[15] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push1(s0, 0x40);
      assert s1.Peek(5) == 0x321;
      assert s1.Peek(8) == 0xa63;
      assert s1.Peek(11) == 0x830;
      assert s1.Peek(13) == 0x780;
      assert s1.Peek(16) == 0x175;
      var s2 := MLoad(s1);
      var s3 := Push3(s2, 0x461bcd);
      var s4 := Push1(s3, 0xe5);
      var s5 := Shl(s4);
      var s6 := Dup2(s5);
      var s7 := MStore(s6);
      var s8 := Push1(s7, 0x20);
      var s9 := Push1(s8, 0x04);
      var s10 := Dup3(s9);
      var s11 := Add(s10);
      assert s11.Peek(7) == 0x321;
      assert s11.Peek(10) == 0xa63;
      assert s11.Peek(13) == 0x830;
      assert s11.Peek(15) == 0x780;
      assert s11.Peek(18) == 0x175;
      var s12 := Dup2(s11);
      var s13 := Swap1(s12);
      var s14 := MStore(s13);
      var s15 := Push1(s14, 0x24);
      var s16 := Dup3(s15);
      var s17 := Add(s16);
      var s18 := MStore(s17);
      var s19 := Push32(s18, 0x537472696e67733a20686578206c656e67746820696e73756666696369656e74);
      var s20 := Push1(s19, 0x44);
      var s21 := Dup3(s20);
      assert s21.Peek(8) == 0x321;
      assert s21.Peek(11) == 0xa63;
      assert s21.Peek(14) == 0x830;
      assert s21.Peek(16) == 0x780;
      assert s21.Peek(19) == 0x175;
      var s22 := Add(s21);
      var s23 := MStore(s22);
      var s24 := Push1(s23, 0x64);
      var s25 := Add(s24);
      var s26 := Push2(s25, 0x0391);
      var s27 := Jump(s26);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s89(s27, gas - 1)
  }

  /** Node 89
    * Segment Id for this node is: 85
    * Starting at 0x391
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: -1
    * Net Capacity Effect: +1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s89(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x391 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 18

    requires s0.stack[5] == 0x321

    requires s0.stack[8] == 0xa63

    requires s0.stack[11] == 0x830

    requires s0.stack[13] == 0x780

    requires s0.stack[16] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(5) == 0x321;
      assert s1.Peek(8) == 0xa63;
      assert s1.Peek(11) == 0x830;
      assert s1.Peek(13) == 0x780;
      assert s1.Peek(16) == 0x175;
      var s2 := Push1(s1, 0x40);
      var s3 := MLoad(s2);
      var s4 := Dup1(s3);
      var s5 := Swap2(s4);
      var s6 := Sub(s5);
      var s7 := Swap1(s6);
      var s8 := Revert(s7);
      // Segment is terminal (Revert, Stop or Return)
      s8
  }

  /** Node 90
    * Segment Id for this node is: 172
    * Starting at 0xc53
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 5
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -4
    * Net Capacity Effect: +4
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s90(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xc53 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 17

    requires s0.stack[4] == 0x321

    requires s0.stack[7] == 0xa63

    requires s0.stack[10] == 0x830

    requires s0.stack[12] == 0x780

    requires s0.stack[15] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(4) == 0x321;
      assert s1.Peek(7) == 0xa63;
      assert s1.Peek(10) == 0x830;
      assert s1.Peek(12) == 0x780;
      assert s1.Peek(15) == 0x175;
      var s2 := Swap4(s1);
      var s3 := Swap3(s2);
      var s4 := Pop(s3);
      var s5 := Pop(s4);
      var s6 := Pop(s5);
      var s7 := Jump(s6);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s91(s7, gas - 1)
  }

  /** Node 91
    * Segment Id for this node is: 79
    * Starting at 0x321
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 4
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -3
    * Net Capacity Effect: +3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s91(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x321 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 13

    requires s0.stack[3] == 0xa63

    requires s0.stack[6] == 0x830

    requires s0.stack[8] == 0x780

    requires s0.stack[11] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0xa63;
      assert s1.Peek(6) == 0x830;
      assert s1.Peek(8) == 0x780;
      assert s1.Peek(11) == 0x175;
      var s2 := Swap3(s1);
      var s3 := Swap2(s2);
      var s4 := Pop(s3);
      var s5 := Pop(s4);
      var s6 := Jump(s5);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s92(s6, gas - 1)
  }

  /** Node 92
    * Segment Id for this node is: 146
    * Starting at 0xa63
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 3
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +3
    * Net Capacity Effect: -3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s92(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xa63 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 10

    requires s0.stack[3] == 0x830

    requires s0.stack[5] == 0x780

    requires s0.stack[8] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0x830;
      assert s1.Peek(5) == 0x780;
      assert s1.Peek(8) == 0x175;
      var s2 := Push2(s1, 0x0a6e);
      var s3 := Dup4(s2);
      var s4 := Push1(s3, 0x20);
      var s5 := Push2(s4, 0x0ab7);
      var s6 := Jump(s5);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s93(s6, gas - 1)
  }

  /** Node 93
    * Segment Id for this node is: 150
    * Starting at 0xab7
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 6
    * Net Stack Effect: +5
    * Net Capacity Effect: -5
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s93(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xab7 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 13

    requires s0.stack[2] == 0xa6e

    requires s0.stack[6] == 0x830

    requires s0.stack[8] == 0x780

    requires s0.stack[11] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0xa6e;
      assert s1.Peek(6) == 0x830;
      assert s1.Peek(8) == 0x780;
      assert s1.Peek(11) == 0x175;
      var s2 := Push1(s1, 0x60);
      var s3 := Push1(s2, 0x00);
      var s4 := Push2(s3, 0x0ac6);
      var s5 := Dup4(s4);
      var s6 := Push1(s5, 0x02);
      var s7 := Push2(s6, 0x0eb8);
      var s8 := Jump(s7);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s94(s8, gas - 1)
  }

  /** Node 94
    * Segment Id for this node is: 220
    * Starting at 0xeb8
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s94(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xeb8 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 18

    requires s0.stack[2] == 0xac6

    requires s0.stack[7] == 0xa6e

    requires s0.stack[11] == 0x830

    requires s0.stack[13] == 0x780

    requires s0.stack[16] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0xac6;
      assert s1.Peek(7) == 0xa6e;
      assert s1.Peek(11) == 0x830;
      assert s1.Peek(13) == 0x780;
      assert s1.Peek(16) == 0x175;
      var s2 := Dup1(s1);
      var s3 := Dup3(s2);
      var s4 := Mul(s3);
      var s5 := Dup2(s4);
      var s6 := IsZero(s5);
      var s7 := Dup3(s6);
      var s8 := Dup3(s7);
      var s9 := Div(s8);
      var s10 := Dup5(s9);
      var s11 := Eq(s10);
      assert s11.Peek(5) == 0xac6;
      assert s11.Peek(10) == 0xa6e;
      assert s11.Peek(14) == 0x830;
      assert s11.Peek(16) == 0x780;
      assert s11.Peek(19) == 0x175;
      var s12 := Or(s11);
      var s13 := Push2(s12, 0x0321);
      var s14 := JumpI(s13);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s13.stack[1] > 0 then
        ExecuteFromCFGNode_s97(s14, gas - 1)
      else
        ExecuteFromCFGNode_s95(s14, gas - 1)
  }

  /** Node 95
    * Segment Id for this node is: 221
    * Starting at 0xec8
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s95(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xec8 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 19

    requires s0.stack[3] == 0xac6

    requires s0.stack[8] == 0xa6e

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x780

    requires s0.stack[17] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0321);
      assert s1.Peek(0) == 0x321;
      assert s1.Peek(4) == 0xac6;
      assert s1.Peek(9) == 0xa6e;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x780;
      assert s1.Peek(18) == 0x175;
      var s2 := Push2(s1, 0x0d85);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s96(s3, gas - 1)
  }

  /** Node 96
    * Segment Id for this node is: 202
    * Starting at 0xd85
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s96(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xd85 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 20

    requires s0.stack[0] == 0x321

    requires s0.stack[4] == 0xac6

    requires s0.stack[9] == 0xa6e

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x780

    requires s0.stack[18] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0x321;
      assert s1.Peek(4) == 0xac6;
      assert s1.Peek(9) == 0xa6e;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x780;
      assert s1.Peek(18) == 0x175;
      var s2 := Push4(s1, 0x4e487b71);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x11);
      var s8 := Push1(s7, 0x04);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x24);
      var s11 := Push1(s10, 0x00);
      assert s11.Peek(2) == 0x321;
      assert s11.Peek(6) == 0xac6;
      assert s11.Peek(11) == 0xa6e;
      assert s11.Peek(15) == 0x830;
      assert s11.Peek(17) == 0x780;
      assert s11.Peek(20) == 0x175;
      var s12 := Revert(s11);
      // Segment is terminal (Revert, Stop or Return)
      s12
  }

  /** Node 97
    * Segment Id for this node is: 79
    * Starting at 0x321
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 4
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -3
    * Net Capacity Effect: +3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s97(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x321 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 19

    requires s0.stack[3] == 0xac6

    requires s0.stack[8] == 0xa6e

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x780

    requires s0.stack[17] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0xac6;
      assert s1.Peek(8) == 0xa6e;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x780;
      assert s1.Peek(17) == 0x175;
      var s2 := Swap3(s1);
      var s3 := Swap2(s2);
      var s4 := Pop(s3);
      var s5 := Pop(s4);
      var s6 := Jump(s5);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s98(s6, gas - 1)
  }

  /** Node 98
    * Segment Id for this node is: 151
    * Starting at 0xac6
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +2
    * Net Capacity Effect: -2
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s98(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xac6 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 16

    requires s0.stack[5] == 0xa6e

    requires s0.stack[9] == 0x830

    requires s0.stack[11] == 0x780

    requires s0.stack[14] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(5) == 0xa6e;
      assert s1.Peek(9) == 0x830;
      assert s1.Peek(11) == 0x780;
      assert s1.Peek(14) == 0x175;
      var s2 := Push2(s1, 0x0ad1);
      var s3 := Swap1(s2);
      var s4 := Push1(s3, 0x02);
      var s5 := Push2(s4, 0x0ecf);
      var s6 := Jump(s5);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s99(s6, gas - 1)
  }

  /** Node 99
    * Segment Id for this node is: 222
    * Starting at 0xecf
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s99(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xecf as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 18

    requires s0.stack[2] == 0xad1

    requires s0.stack[7] == 0xa6e

    requires s0.stack[11] == 0x830

    requires s0.stack[13] == 0x780

    requires s0.stack[16] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0xad1;
      assert s1.Peek(7) == 0xa6e;
      assert s1.Peek(11) == 0x830;
      assert s1.Peek(13) == 0x780;
      assert s1.Peek(16) == 0x175;
      var s2 := Dup1(s1);
      var s3 := Dup3(s2);
      var s4 := Add(s3);
      var s5 := Dup1(s4);
      var s6 := Dup3(s5);
      var s7 := Gt(s6);
      var s8 := IsZero(s7);
      var s9 := Push2(s8, 0x0321);
      var s10 := JumpI(s9);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s9.stack[1] > 0 then
        ExecuteFromCFGNode_s102(s10, gas - 1)
      else
        ExecuteFromCFGNode_s100(s10, gas - 1)
  }

  /** Node 100
    * Segment Id for this node is: 223
    * Starting at 0xedb
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s100(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xedb as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 19

    requires s0.stack[3] == 0xad1

    requires s0.stack[8] == 0xa6e

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x780

    requires s0.stack[17] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0321);
      assert s1.Peek(0) == 0x321;
      assert s1.Peek(4) == 0xad1;
      assert s1.Peek(9) == 0xa6e;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x780;
      assert s1.Peek(18) == 0x175;
      var s2 := Push2(s1, 0x0d85);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s101(s3, gas - 1)
  }

  /** Node 101
    * Segment Id for this node is: 202
    * Starting at 0xd85
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s101(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xd85 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 20

    requires s0.stack[0] == 0x321

    requires s0.stack[4] == 0xad1

    requires s0.stack[9] == 0xa6e

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x780

    requires s0.stack[18] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0x321;
      assert s1.Peek(4) == 0xad1;
      assert s1.Peek(9) == 0xa6e;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x780;
      assert s1.Peek(18) == 0x175;
      var s2 := Push4(s1, 0x4e487b71);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x11);
      var s8 := Push1(s7, 0x04);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x24);
      var s11 := Push1(s10, 0x00);
      assert s11.Peek(2) == 0x321;
      assert s11.Peek(6) == 0xad1;
      assert s11.Peek(11) == 0xa6e;
      assert s11.Peek(15) == 0x830;
      assert s11.Peek(17) == 0x780;
      assert s11.Peek(20) == 0x175;
      var s12 := Revert(s11);
      // Segment is terminal (Revert, Stop or Return)
      s12
  }

  /** Node 102
    * Segment Id for this node is: 79
    * Starting at 0x321
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 4
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -3
    * Net Capacity Effect: +3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s102(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x321 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 19

    requires s0.stack[3] == 0xad1

    requires s0.stack[8] == 0xa6e

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x780

    requires s0.stack[17] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0xad1;
      assert s1.Peek(8) == 0xa6e;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x780;
      assert s1.Peek(17) == 0x175;
      var s2 := Swap3(s1);
      var s3 := Swap2(s2);
      var s4 := Pop(s3);
      var s5 := Pop(s4);
      var s6 := Jump(s5);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s103(s6, gas - 1)
  }

  /** Node 103
    * Segment Id for this node is: 152
    * Starting at 0xad1
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s103(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xad1 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 16

    requires s0.stack[5] == 0xa6e

    requires s0.stack[9] == 0x830

    requires s0.stack[11] == 0x780

    requires s0.stack[14] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(5) == 0xa6e;
      assert s1.Peek(9) == 0x830;
      assert s1.Peek(11) == 0x780;
      assert s1.Peek(14) == 0x175;
      var s2 := Push8(s1, 0xffffffffffffffff);
      var s3 := Dup2(s2);
      var s4 := Gt(s3);
      var s5 := IsZero(s4);
      var s6 := Push2(s5, 0x0ae9);
      var s7 := JumpI(s6);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s6.stack[1] > 0 then
        ExecuteFromCFGNode_s106(s7, gas - 1)
      else
        ExecuteFromCFGNode_s104(s7, gas - 1)
  }

  /** Node 104
    * Segment Id for this node is: 153
    * Starting at 0xae2
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s104(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xae2 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 16

    requires s0.stack[5] == 0xa6e

    requires s0.stack[9] == 0x830

    requires s0.stack[11] == 0x780

    requires s0.stack[14] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0ae9);
      assert s1.Peek(0) == 0xae9;
      assert s1.Peek(6) == 0xa6e;
      assert s1.Peek(10) == 0x830;
      assert s1.Peek(12) == 0x780;
      assert s1.Peek(15) == 0x175;
      var s2 := Push2(s1, 0x0ee2);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s105(s3, gas - 1)
  }

  /** Node 105
    * Segment Id for this node is: 224
    * Starting at 0xee2
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s105(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xee2 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 17

    requires s0.stack[0] == 0xae9

    requires s0.stack[6] == 0xa6e

    requires s0.stack[10] == 0x830

    requires s0.stack[12] == 0x780

    requires s0.stack[15] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0xae9;
      assert s1.Peek(6) == 0xa6e;
      assert s1.Peek(10) == 0x830;
      assert s1.Peek(12) == 0x780;
      assert s1.Peek(15) == 0x175;
      var s2 := Push4(s1, 0x4e487b71);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x41);
      var s8 := Push1(s7, 0x04);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x24);
      var s11 := Push1(s10, 0x00);
      assert s11.Peek(2) == 0xae9;
      assert s11.Peek(8) == 0xa6e;
      assert s11.Peek(12) == 0x830;
      assert s11.Peek(14) == 0x780;
      assert s11.Peek(17) == 0x175;
      var s12 := Revert(s11);
      // Segment is terminal (Revert, Stop or Return)
      s12
  }

  /** Node 106
    * Segment Id for this node is: 154
    * Starting at 0xae9
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s106(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xae9 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 16

    requires s0.stack[5] == 0xa6e

    requires s0.stack[9] == 0x830

    requires s0.stack[11] == 0x780

    requires s0.stack[14] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(5) == 0xa6e;
      assert s1.Peek(9) == 0x830;
      assert s1.Peek(11) == 0x780;
      assert s1.Peek(14) == 0x175;
      var s2 := Push1(s1, 0x40);
      var s3 := MLoad(s2);
      var s4 := Swap1(s3);
      var s5 := Dup1(s4);
      var s6 := Dup3(s5);
      var s7 := MStore(s6);
      var s8 := Dup1(s7);
      var s9 := Push1(s8, 0x1f);
      var s10 := Add(s9);
      var s11 := Push1(s10, 0x1f);
      assert s11.Peek(8) == 0xa6e;
      assert s11.Peek(12) == 0x830;
      assert s11.Peek(14) == 0x780;
      assert s11.Peek(17) == 0x175;
      var s12 := Not(s11);
      var s13 := And(s12);
      var s14 := Push1(s13, 0x20);
      var s15 := Add(s14);
      var s16 := Dup3(s15);
      var s17 := Add(s16);
      var s18 := Push1(s17, 0x40);
      var s19 := MStore(s18);
      var s20 := Dup1(s19);
      var s21 := IsZero(s20);
      assert s21.Peek(7) == 0xa6e;
      assert s21.Peek(11) == 0x830;
      assert s21.Peek(13) == 0x780;
      assert s21.Peek(16) == 0x175;
      var s22 := Push2(s21, 0x0b13);
      var s23 := JumpI(s22);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s22.stack[1] > 0 then
        ExecuteFromCFGNode_s108(s23, gas - 1)
      else
        ExecuteFromCFGNode_s107(s23, gas - 1)
  }

  /** Node 107
    * Segment Id for this node is: 155
    * Starting at 0xb07
    * Segment type is: CONT Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 5
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s107(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xb07 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 17

    requires s0.stack[6] == 0xa6e

    requires s0.stack[10] == 0x830

    requires s0.stack[12] == 0x780

    requires s0.stack[15] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push1(s0, 0x20);
      assert s1.Peek(7) == 0xa6e;
      assert s1.Peek(11) == 0x830;
      assert s1.Peek(13) == 0x780;
      assert s1.Peek(16) == 0x175;
      var s2 := Dup3(s1);
      var s3 := Add(s2);
      var s4 := Dup2(s3);
      var s5 := Dup1(s4);
      var s6 := CallDataSize(s5);
      var s7 := Dup4(s6);
      var s8 := CallDataCopy(s7);
      var s9 := Add(s8);
      var s10 := Swap1(s9);
      var s11 := Pop(s10);
      //  Go to the next instruction at pc + 1
      ExecuteFromCFGNode_s108(s11, gas - 1)
  }

  /** Node 108
    * Segment Id for this node is: 156
    * Starting at 0xb13
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 3
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s108(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xb13 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 17

    requires s0.stack[6] == 0xa6e

    requires s0.stack[10] == 0x830

    requires s0.stack[12] == 0x780

    requires s0.stack[15] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(6) == 0xa6e;
      assert s1.Peek(10) == 0x830;
      assert s1.Peek(12) == 0x780;
      assert s1.Peek(15) == 0x175;
      var s2 := Pop(s1);
      var s3 := Swap1(s2);
      var s4 := Pop(s3);
      var s5 := Push1(s4, 0x03);
      var s6 := Push1(s5, 0xfc);
      var s7 := Shl(s6);
      var s8 := Dup2(s7);
      var s9 := Push1(s8, 0x00);
      var s10 := Dup2(s9);
      var s11 := MLoad(s10);
      assert s11.Peek(8) == 0xa6e;
      assert s11.Peek(12) == 0x830;
      assert s11.Peek(14) == 0x780;
      assert s11.Peek(17) == 0x175;
      var s12 := Dup2(s11);
      var s13 := Lt(s12);
      var s14 := Push2(s13, 0x0b2e);
      var s15 := JumpI(s14);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s14.stack[1] > 0 then
        ExecuteFromCFGNode_s111(s15, gas - 1)
      else
        ExecuteFromCFGNode_s109(s15, gas - 1)
  }

  /** Node 109
    * Segment Id for this node is: 157
    * Starting at 0xb27
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s109(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xb27 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 18

    requires s0.stack[7] == 0xa6e

    requires s0.stack[11] == 0x830

    requires s0.stack[13] == 0x780

    requires s0.stack[16] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0b2e);
      assert s1.Peek(0) == 0xb2e;
      assert s1.Peek(8) == 0xa6e;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x780;
      assert s1.Peek(17) == 0x175;
      var s2 := Push2(s1, 0x0ef8);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s110(s3, gas - 1)
  }

  /** Node 110
    * Segment Id for this node is: 225
    * Starting at 0xef8
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s110(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xef8 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 19

    requires s0.stack[0] == 0xb2e

    requires s0.stack[8] == 0xa6e

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x780

    requires s0.stack[17] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0xb2e;
      assert s1.Peek(8) == 0xa6e;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x780;
      assert s1.Peek(17) == 0x175;
      var s2 := Push4(s1, 0x4e487b71);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x32);
      var s8 := Push1(s7, 0x04);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x24);
      var s11 := Push1(s10, 0x00);
      assert s11.Peek(2) == 0xb2e;
      assert s11.Peek(10) == 0xa6e;
      assert s11.Peek(14) == 0x830;
      assert s11.Peek(16) == 0x780;
      assert s11.Peek(19) == 0x175;
      var s12 := Revert(s11);
      // Segment is terminal (Revert, Stop or Return)
      s12
  }

  /** Node 111
    * Segment Id for this node is: 158
    * Starting at 0xb2e
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 4
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s111(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xb2e as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 18

    requires s0.stack[7] == 0xa6e

    requires s0.stack[11] == 0x830

    requires s0.stack[13] == 0x780

    requires s0.stack[16] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(7) == 0xa6e;
      assert s1.Peek(11) == 0x830;
      assert s1.Peek(13) == 0x780;
      assert s1.Peek(16) == 0x175;
      var s2 := Push1(s1, 0x20);
      var s3 := Add(s2);
      var s4 := Add(s3);
      var s5 := Swap1(s4);
      var s6 := Push1(s5, 0x01);
      var s7 := Push1(s6, 0x01);
      var s8 := Push1(s7, 0xf8);
      var s9 := Shl(s8);
      var s10 := Sub(s9);
      var s11 := Not(s10);
      assert s11.Peek(7) == 0xa6e;
      assert s11.Peek(11) == 0x830;
      assert s11.Peek(13) == 0x780;
      assert s11.Peek(16) == 0x175;
      var s12 := And(s11);
      var s13 := Swap1(s12);
      var s14 := Dup2(s13);
      var s15 := Push1(s14, 0x00);
      var s16 := Byte(s15);
      var s17 := Swap1(s16);
      var s18 := MStore8(s17);
      var s19 := Pop(s18);
      var s20 := Push1(s19, 0x0f);
      var s21 := Push1(s20, 0xfb);
      assert s21.Peek(6) == 0xa6e;
      assert s21.Peek(10) == 0x830;
      assert s21.Peek(12) == 0x780;
      assert s21.Peek(15) == 0x175;
      var s22 := Shl(s21);
      var s23 := Dup2(s22);
      var s24 := Push1(s23, 0x01);
      var s25 := Dup2(s24);
      var s26 := MLoad(s25);
      var s27 := Dup2(s26);
      var s28 := Lt(s27);
      var s29 := Push2(s28, 0x0b5d);
      var s30 := JumpI(s29);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s29.stack[1] > 0 then
        ExecuteFromCFGNode_s114(s30, gas - 1)
      else
        ExecuteFromCFGNode_s112(s30, gas - 1)
  }

  /** Node 112
    * Segment Id for this node is: 159
    * Starting at 0xb56
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s112(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xb56 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 18

    requires s0.stack[7] == 0xa6e

    requires s0.stack[11] == 0x830

    requires s0.stack[13] == 0x780

    requires s0.stack[16] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0b5d);
      assert s1.Peek(0) == 0xb5d;
      assert s1.Peek(8) == 0xa6e;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x780;
      assert s1.Peek(17) == 0x175;
      var s2 := Push2(s1, 0x0ef8);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s113(s3, gas - 1)
  }

  /** Node 113
    * Segment Id for this node is: 225
    * Starting at 0xef8
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s113(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xef8 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 19

    requires s0.stack[0] == 0xb5d

    requires s0.stack[8] == 0xa6e

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x780

    requires s0.stack[17] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0xb5d;
      assert s1.Peek(8) == 0xa6e;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x780;
      assert s1.Peek(17) == 0x175;
      var s2 := Push4(s1, 0x4e487b71);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x32);
      var s8 := Push1(s7, 0x04);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x24);
      var s11 := Push1(s10, 0x00);
      assert s11.Peek(2) == 0xb5d;
      assert s11.Peek(10) == 0xa6e;
      assert s11.Peek(14) == 0x830;
      assert s11.Peek(16) == 0x780;
      assert s11.Peek(19) == 0x175;
      var s12 := Revert(s11);
      // Segment is terminal (Revert, Stop or Return)
      s12
  }

  /** Node 114
    * Segment Id for this node is: 160
    * Starting at 0xb5d
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 6
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s114(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xb5d as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 18

    requires s0.stack[7] == 0xa6e

    requires s0.stack[11] == 0x830

    requires s0.stack[13] == 0x780

    requires s0.stack[16] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(7) == 0xa6e;
      assert s1.Peek(11) == 0x830;
      assert s1.Peek(13) == 0x780;
      assert s1.Peek(16) == 0x175;
      var s2 := Push1(s1, 0x20);
      var s3 := Add(s2);
      var s4 := Add(s3);
      var s5 := Swap1(s4);
      var s6 := Push1(s5, 0x01);
      var s7 := Push1(s6, 0x01);
      var s8 := Push1(s7, 0xf8);
      var s9 := Shl(s8);
      var s10 := Sub(s9);
      var s11 := Not(s10);
      assert s11.Peek(7) == 0xa6e;
      assert s11.Peek(11) == 0x830;
      assert s11.Peek(13) == 0x780;
      assert s11.Peek(16) == 0x175;
      var s12 := And(s11);
      var s13 := Swap1(s12);
      var s14 := Dup2(s13);
      var s15 := Push1(s14, 0x00);
      var s16 := Byte(s15);
      var s17 := Swap1(s16);
      var s18 := MStore8(s17);
      var s19 := Pop(s18);
      var s20 := Push1(s19, 0x00);
      var s21 := Push2(s20, 0x0b81);
      assert s21.Peek(0) == 0xb81;
      assert s21.Peek(6) == 0xa6e;
      assert s21.Peek(10) == 0x830;
      assert s21.Peek(12) == 0x780;
      assert s21.Peek(15) == 0x175;
      var s22 := Dup5(s21);
      var s23 := Push1(s22, 0x02);
      var s24 := Push2(s23, 0x0eb8);
      var s25 := Jump(s24);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s115(s25, gas - 1)
  }

  /** Node 115
    * Segment Id for this node is: 220
    * Starting at 0xeb8
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s115(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xeb8 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 19

    requires s0.stack[2] == 0xb81

    requires s0.stack[8] == 0xa6e

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x780

    requires s0.stack[17] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0xb81;
      assert s1.Peek(8) == 0xa6e;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x780;
      assert s1.Peek(17) == 0x175;
      var s2 := Dup1(s1);
      var s3 := Dup3(s2);
      var s4 := Mul(s3);
      var s5 := Dup2(s4);
      var s6 := IsZero(s5);
      var s7 := Dup3(s6);
      var s8 := Dup3(s7);
      var s9 := Div(s8);
      var s10 := Dup5(s9);
      var s11 := Eq(s10);
      assert s11.Peek(5) == 0xb81;
      assert s11.Peek(11) == 0xa6e;
      assert s11.Peek(15) == 0x830;
      assert s11.Peek(17) == 0x780;
      assert s11.Peek(20) == 0x175;
      var s12 := Or(s11);
      var s13 := Push2(s12, 0x0321);
      var s14 := JumpI(s13);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s13.stack[1] > 0 then
        ExecuteFromCFGNode_s118(s14, gas - 1)
      else
        ExecuteFromCFGNode_s116(s14, gas - 1)
  }

  /** Node 116
    * Segment Id for this node is: 221
    * Starting at 0xec8
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s116(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xec8 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 20

    requires s0.stack[3] == 0xb81

    requires s0.stack[9] == 0xa6e

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x780

    requires s0.stack[18] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0321);
      assert s1.Peek(0) == 0x321;
      assert s1.Peek(4) == 0xb81;
      assert s1.Peek(10) == 0xa6e;
      assert s1.Peek(14) == 0x830;
      assert s1.Peek(16) == 0x780;
      assert s1.Peek(19) == 0x175;
      var s2 := Push2(s1, 0x0d85);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s117(s3, gas - 1)
  }

  /** Node 117
    * Segment Id for this node is: 202
    * Starting at 0xd85
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s117(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xd85 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 21

    requires s0.stack[0] == 0x321

    requires s0.stack[4] == 0xb81

    requires s0.stack[10] == 0xa6e

    requires s0.stack[14] == 0x830

    requires s0.stack[16] == 0x780

    requires s0.stack[19] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0x321;
      assert s1.Peek(4) == 0xb81;
      assert s1.Peek(10) == 0xa6e;
      assert s1.Peek(14) == 0x830;
      assert s1.Peek(16) == 0x780;
      assert s1.Peek(19) == 0x175;
      var s2 := Push4(s1, 0x4e487b71);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x11);
      var s8 := Push1(s7, 0x04);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x24);
      var s11 := Push1(s10, 0x00);
      assert s11.Peek(2) == 0x321;
      assert s11.Peek(6) == 0xb81;
      assert s11.Peek(12) == 0xa6e;
      assert s11.Peek(16) == 0x830;
      assert s11.Peek(18) == 0x780;
      assert s11.Peek(21) == 0x175;
      var s12 := Revert(s11);
      // Segment is terminal (Revert, Stop or Return)
      s12
  }

  /** Node 118
    * Segment Id for this node is: 79
    * Starting at 0x321
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 4
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -3
    * Net Capacity Effect: +3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s118(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x321 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 20

    requires s0.stack[3] == 0xb81

    requires s0.stack[9] == 0xa6e

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x780

    requires s0.stack[18] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0xb81;
      assert s1.Peek(9) == 0xa6e;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x780;
      assert s1.Peek(18) == 0x175;
      var s2 := Swap3(s1);
      var s3 := Swap2(s2);
      var s4 := Pop(s3);
      var s5 := Pop(s4);
      var s6 := Jump(s5);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s119(s6, gas - 1)
  }

  /** Node 119
    * Segment Id for this node is: 161
    * Starting at 0xb81
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +2
    * Net Capacity Effect: -2
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s119(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xb81 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 17

    requires s0.stack[6] == 0xa6e

    requires s0.stack[10] == 0x830

    requires s0.stack[12] == 0x780

    requires s0.stack[15] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(6) == 0xa6e;
      assert s1.Peek(10) == 0x830;
      assert s1.Peek(12) == 0x780;
      assert s1.Peek(15) == 0x175;
      var s2 := Push2(s1, 0x0b8c);
      var s3 := Swap1(s2);
      var s4 := Push1(s3, 0x01);
      var s5 := Push2(s4, 0x0ecf);
      var s6 := Jump(s5);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s120(s6, gas - 1)
  }

  /** Node 120
    * Segment Id for this node is: 222
    * Starting at 0xecf
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s120(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xecf as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 19

    requires s0.stack[2] == 0xb8c

    requires s0.stack[8] == 0xa6e

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x780

    requires s0.stack[17] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0xb8c;
      assert s1.Peek(8) == 0xa6e;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x780;
      assert s1.Peek(17) == 0x175;
      var s2 := Dup1(s1);
      var s3 := Dup3(s2);
      var s4 := Add(s3);
      var s5 := Dup1(s4);
      var s6 := Dup3(s5);
      var s7 := Gt(s6);
      var s8 := IsZero(s7);
      var s9 := Push2(s8, 0x0321);
      var s10 := JumpI(s9);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s9.stack[1] > 0 then
        ExecuteFromCFGNode_s123(s10, gas - 1)
      else
        ExecuteFromCFGNode_s121(s10, gas - 1)
  }

  /** Node 121
    * Segment Id for this node is: 223
    * Starting at 0xedb
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s121(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xedb as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 20

    requires s0.stack[3] == 0xb8c

    requires s0.stack[9] == 0xa6e

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x780

    requires s0.stack[18] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0321);
      assert s1.Peek(0) == 0x321;
      assert s1.Peek(4) == 0xb8c;
      assert s1.Peek(10) == 0xa6e;
      assert s1.Peek(14) == 0x830;
      assert s1.Peek(16) == 0x780;
      assert s1.Peek(19) == 0x175;
      var s2 := Push2(s1, 0x0d85);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s122(s3, gas - 1)
  }

  /** Node 122
    * Segment Id for this node is: 202
    * Starting at 0xd85
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s122(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xd85 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 21

    requires s0.stack[0] == 0x321

    requires s0.stack[4] == 0xb8c

    requires s0.stack[10] == 0xa6e

    requires s0.stack[14] == 0x830

    requires s0.stack[16] == 0x780

    requires s0.stack[19] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0x321;
      assert s1.Peek(4) == 0xb8c;
      assert s1.Peek(10) == 0xa6e;
      assert s1.Peek(14) == 0x830;
      assert s1.Peek(16) == 0x780;
      assert s1.Peek(19) == 0x175;
      var s2 := Push4(s1, 0x4e487b71);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x11);
      var s8 := Push1(s7, 0x04);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x24);
      var s11 := Push1(s10, 0x00);
      assert s11.Peek(2) == 0x321;
      assert s11.Peek(6) == 0xb8c;
      assert s11.Peek(12) == 0xa6e;
      assert s11.Peek(16) == 0x830;
      assert s11.Peek(18) == 0x780;
      assert s11.Peek(21) == 0x175;
      var s12 := Revert(s11);
      // Segment is terminal (Revert, Stop or Return)
      s12
  }

  /** Node 123
    * Segment Id for this node is: 79
    * Starting at 0x321
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 4
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -3
    * Net Capacity Effect: +3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s123(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x321 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 20

    requires s0.stack[3] == 0xb8c

    requires s0.stack[9] == 0xa6e

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x780

    requires s0.stack[18] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0xb8c;
      assert s1.Peek(9) == 0xa6e;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x780;
      assert s1.Peek(18) == 0x175;
      var s2 := Swap3(s1);
      var s3 := Swap2(s2);
      var s4 := Pop(s3);
      var s5 := Pop(s4);
      var s6 := Jump(s5);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s124(s6, gas - 1)
  }

  /** Node 124
    * Segment Id for this node is: 162
    * Starting at 0xb8c
    * Segment type is: CONT Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -1
    * Net Capacity Effect: +1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s124(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xb8c as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 17

    requires s0.stack[6] == 0xa6e

    requires s0.stack[10] == 0x830

    requires s0.stack[12] == 0x780

    requires s0.stack[15] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(6) == 0xa6e;
      assert s1.Peek(10) == 0x830;
      assert s1.Peek(12) == 0x780;
      assert s1.Peek(15) == 0x175;
      var s2 := Swap1(s1);
      var s3 := Pop(s2);
      //  Go to the next instruction at pc + 1
      ExecuteFromCFGNode_s125(s3, gas - 1)
  }

  /** Node 125
    * Segment Id for this node is: 163
    * Starting at 0xb8f
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s125(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xb8f as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 16

    requires s0.stack[5] == 0xa6e

    requires s0.stack[9] == 0x830

    requires s0.stack[11] == 0x780

    requires s0.stack[14] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(5) == 0xa6e;
      assert s1.Peek(9) == 0x830;
      assert s1.Peek(11) == 0x780;
      assert s1.Peek(14) == 0x175;
      var s2 := Push1(s1, 0x01);
      var s3 := Dup2(s2);
      var s4 := Gt(s3);
      var s5 := IsZero(s4);
      var s6 := Push2(s5, 0x0c04);
      var s7 := JumpI(s6);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s6.stack[1] > 0 then
        ExecuteFromCFGNode_s138(s7, gas - 1)
      else
        ExecuteFromCFGNode_s126(s7, gas - 1)
  }

  /** Node 126
    * Segment Id for this node is: 164
    * Starting at 0xb99
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 5
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +2
    * Net Capacity Effect: -2
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s126(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xb99 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 16

    requires s0.stack[5] == 0xa6e

    requires s0.stack[9] == 0x830

    requires s0.stack[11] == 0x780

    requires s0.stack[14] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := PushN(s0, 16, 0x181899199a1a9b1b9c1cb0b131b232b3);
      assert s1.Peek(6) == 0xa6e;
      assert s1.Peek(10) == 0x830;
      assert s1.Peek(12) == 0x780;
      assert s1.Peek(15) == 0x175;
      var s2 := Push1(s1, 0x81);
      var s3 := Shl(s2);
      var s4 := Dup6(s3);
      var s5 := Push1(s4, 0x0f);
      var s6 := And(s5);
      var s7 := Push1(s6, 0x10);
      var s8 := Dup2(s7);
      var s9 := Lt(s8);
      var s10 := Push2(s9, 0x0bc0);
      var s11 := JumpI(s10);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s10.stack[1] > 0 then
        ExecuteFromCFGNode_s129(s11, gas - 1)
      else
        ExecuteFromCFGNode_s127(s11, gas - 1)
  }

  /** Node 127
    * Segment Id for this node is: 165
    * Starting at 0xbb9
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s127(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xbb9 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 18

    requires s0.stack[7] == 0xa6e

    requires s0.stack[11] == 0x830

    requires s0.stack[13] == 0x780

    requires s0.stack[16] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0bc0);
      assert s1.Peek(0) == 0xbc0;
      assert s1.Peek(8) == 0xa6e;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x780;
      assert s1.Peek(17) == 0x175;
      var s2 := Push2(s1, 0x0ef8);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s128(s3, gas - 1)
  }

  /** Node 128
    * Segment Id for this node is: 225
    * Starting at 0xef8
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s128(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xef8 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 19

    requires s0.stack[0] == 0xbc0

    requires s0.stack[8] == 0xa6e

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x780

    requires s0.stack[17] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0xbc0;
      assert s1.Peek(8) == 0xa6e;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x780;
      assert s1.Peek(17) == 0x175;
      var s2 := Push4(s1, 0x4e487b71);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x32);
      var s8 := Push1(s7, 0x04);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x24);
      var s11 := Push1(s10, 0x00);
      assert s11.Peek(2) == 0xbc0;
      assert s11.Peek(10) == 0xa6e;
      assert s11.Peek(14) == 0x830;
      assert s11.Peek(16) == 0x780;
      assert s11.Peek(19) == 0x175;
      var s12 := Revert(s11);
      // Segment is terminal (Revert, Stop or Return)
      s12
  }

  /** Node 129
    * Segment Id for this node is: 166
    * Starting at 0xbc0
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 4
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s129(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xbc0 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 18

    requires s0.stack[7] == 0xa6e

    requires s0.stack[11] == 0x830

    requires s0.stack[13] == 0x780

    requires s0.stack[16] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(7) == 0xa6e;
      assert s1.Peek(11) == 0x830;
      assert s1.Peek(13) == 0x780;
      assert s1.Peek(16) == 0x175;
      var s2 := Byte(s1);
      var s3 := Push1(s2, 0xf8);
      var s4 := Shl(s3);
      var s5 := Dup3(s4);
      var s6 := Dup3(s5);
      var s7 := Dup2(s6);
      var s8 := MLoad(s7);
      var s9 := Dup2(s8);
      var s10 := Lt(s9);
      var s11 := Push2(s10, 0x0bd6);
      assert s11.Peek(0) == 0xbd6;
      assert s11.Peek(10) == 0xa6e;
      assert s11.Peek(14) == 0x830;
      assert s11.Peek(16) == 0x780;
      assert s11.Peek(19) == 0x175;
      var s12 := JumpI(s11);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s11.stack[1] > 0 then
        ExecuteFromCFGNode_s132(s12, gas - 1)
      else
        ExecuteFromCFGNode_s130(s12, gas - 1)
  }

  /** Node 130
    * Segment Id for this node is: 167
    * Starting at 0xbcf
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s130(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xbcf as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 19

    requires s0.stack[8] == 0xa6e

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x780

    requires s0.stack[17] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0bd6);
      assert s1.Peek(0) == 0xbd6;
      assert s1.Peek(9) == 0xa6e;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x780;
      assert s1.Peek(18) == 0x175;
      var s2 := Push2(s1, 0x0ef8);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s131(s3, gas - 1)
  }

  /** Node 131
    * Segment Id for this node is: 225
    * Starting at 0xef8
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s131(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xef8 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 20

    requires s0.stack[0] == 0xbd6

    requires s0.stack[9] == 0xa6e

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x780

    requires s0.stack[18] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0xbd6;
      assert s1.Peek(9) == 0xa6e;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x780;
      assert s1.Peek(18) == 0x175;
      var s2 := Push4(s1, 0x4e487b71);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x32);
      var s8 := Push1(s7, 0x04);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x24);
      var s11 := Push1(s10, 0x00);
      assert s11.Peek(2) == 0xbd6;
      assert s11.Peek(11) == 0xa6e;
      assert s11.Peek(15) == 0x830;
      assert s11.Peek(17) == 0x780;
      assert s11.Peek(20) == 0x175;
      var s12 := Revert(s11);
      // Segment is terminal (Revert, Stop or Return)
      s12
  }

  /** Node 132
    * Segment Id for this node is: 168
    * Starting at 0xbd6
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 8
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: -1
    * Net Capacity Effect: +1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s132(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xbd6 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 19

    requires s0.stack[8] == 0xa6e

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x780

    requires s0.stack[17] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(8) == 0xa6e;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x780;
      assert s1.Peek(17) == 0x175;
      var s2 := Push1(s1, 0x20);
      var s3 := Add(s2);
      var s4 := Add(s3);
      var s5 := Swap1(s4);
      var s6 := Push1(s5, 0x01);
      var s7 := Push1(s6, 0x01);
      var s8 := Push1(s7, 0xf8);
      var s9 := Shl(s8);
      var s10 := Sub(s9);
      var s11 := Not(s10);
      assert s11.Peek(8) == 0xa6e;
      assert s11.Peek(12) == 0x830;
      assert s11.Peek(14) == 0x780;
      assert s11.Peek(17) == 0x175;
      var s12 := And(s11);
      var s13 := Swap1(s12);
      var s14 := Dup2(s13);
      var s15 := Push1(s14, 0x00);
      var s16 := Byte(s15);
      var s17 := Swap1(s16);
      var s18 := MStore8(s17);
      var s19 := Pop(s18);
      var s20 := Push1(s19, 0x04);
      var s21 := Swap5(s20);
      assert s21.Peek(6) == 0xa6e;
      assert s21.Peek(10) == 0x830;
      assert s21.Peek(12) == 0x780;
      assert s21.Peek(15) == 0x175;
      var s22 := Swap1(s21);
      var s23 := Swap5(s22);
      var s24 := Shr(s23);
      var s25 := Swap4(s24);
      var s26 := Push2(s25, 0x0bfd);
      var s27 := Dup2(s26);
      var s28 := Push2(s27, 0x0f0e);
      var s29 := Jump(s28);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s133(s29, gas - 1)
  }

  /** Node 133
    * Segment Id for this node is: 226
    * Starting at 0xf0e
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s133(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xf0e as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 18

    requires s0.stack[1] == 0xbfd

    requires s0.stack[7] == 0xa6e

    requires s0.stack[11] == 0x830

    requires s0.stack[13] == 0x780

    requires s0.stack[16] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(1) == 0xbfd;
      assert s1.Peek(7) == 0xa6e;
      assert s1.Peek(11) == 0x830;
      assert s1.Peek(13) == 0x780;
      assert s1.Peek(16) == 0x175;
      var s2 := Push1(s1, 0x00);
      var s3 := Dup2(s2);
      var s4 := Push2(s3, 0x0f1d);
      var s5 := JumpI(s4);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s4.stack[1] > 0 then
        ExecuteFromCFGNode_s136(s5, gas - 1)
      else
        ExecuteFromCFGNode_s134(s5, gas - 1)
  }

  /** Node 134
    * Segment Id for this node is: 227
    * Starting at 0xf16
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s134(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xf16 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 19

    requires s0.stack[2] == 0xbfd

    requires s0.stack[8] == 0xa6e

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x780

    requires s0.stack[17] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0f1d);
      assert s1.Peek(0) == 0xf1d;
      assert s1.Peek(3) == 0xbfd;
      assert s1.Peek(9) == 0xa6e;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x780;
      assert s1.Peek(18) == 0x175;
      var s2 := Push2(s1, 0x0d85);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s135(s3, gas - 1)
  }

  /** Node 135
    * Segment Id for this node is: 202
    * Starting at 0xd85
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s135(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xd85 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 20

    requires s0.stack[0] == 0xf1d

    requires s0.stack[3] == 0xbfd

    requires s0.stack[9] == 0xa6e

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x780

    requires s0.stack[18] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0xf1d;
      assert s1.Peek(3) == 0xbfd;
      assert s1.Peek(9) == 0xa6e;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x780;
      assert s1.Peek(18) == 0x175;
      var s2 := Push4(s1, 0x4e487b71);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x11);
      var s8 := Push1(s7, 0x04);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x24);
      var s11 := Push1(s10, 0x00);
      assert s11.Peek(2) == 0xf1d;
      assert s11.Peek(5) == 0xbfd;
      assert s11.Peek(11) == 0xa6e;
      assert s11.Peek(15) == 0x830;
      assert s11.Peek(17) == 0x780;
      assert s11.Peek(20) == 0x175;
      var s12 := Revert(s11);
      // Segment is terminal (Revert, Stop or Return)
      s12
  }

  /** Node 136
    * Segment Id for this node is: 228
    * Starting at 0xf1d
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 3
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -2
    * Net Capacity Effect: +2
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s136(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xf1d as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 19

    requires s0.stack[2] == 0xbfd

    requires s0.stack[8] == 0xa6e

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x780

    requires s0.stack[17] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0xbfd;
      assert s1.Peek(8) == 0xa6e;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x780;
      assert s1.Peek(17) == 0x175;
      var s2 := Pop(s1);
      var s3 := Push1(s2, 0x00);
      var s4 := Not(s3);
      var s5 := Add(s4);
      var s6 := Swap1(s5);
      var s7 := Jump(s6);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s137(s7, gas - 1)
  }

  /** Node 137
    * Segment Id for this node is: 169
    * Starting at 0xbfd
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -1
    * Net Capacity Effect: +1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s137(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xbfd as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 17

    requires s0.stack[6] == 0xa6e

    requires s0.stack[10] == 0x830

    requires s0.stack[12] == 0x780

    requires s0.stack[15] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(6) == 0xa6e;
      assert s1.Peek(10) == 0x830;
      assert s1.Peek(12) == 0x780;
      assert s1.Peek(15) == 0x175;
      var s2 := Swap1(s1);
      var s3 := Pop(s2);
      var s4 := Push2(s3, 0x0b8f);
      var s5 := Jump(s4);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s125(s5, gas - 1)
  }

  /** Node 138
    * Segment Id for this node is: 170
    * Starting at 0xc04
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 5
    * Minimum capacity for this segment to prevent stack overflow: 1
    * Net Stack Effect: -1
    * Net Capacity Effect: +1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s138(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xc04 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 16

    requires s0.stack[5] == 0xa6e

    requires s0.stack[9] == 0x830

    requires s0.stack[11] == 0x780

    requires s0.stack[14] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(5) == 0xa6e;
      assert s1.Peek(9) == 0x830;
      assert s1.Peek(11) == 0x780;
      assert s1.Peek(14) == 0x175;
      var s2 := Pop(s1);
      var s3 := Dup4(s2);
      var s4 := IsZero(s3);
      var s5 := Push2(s4, 0x0c53);
      var s6 := JumpI(s5);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s5.stack[1] > 0 then
        ExecuteFromCFGNode_s141(s6, gas - 1)
      else
        ExecuteFromCFGNode_s139(s6, gas - 1)
  }

  /** Node 139
    * Segment Id for this node is: 171
    * Starting at 0xc0c
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s139(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xc0c as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 15

    requires s0.stack[4] == 0xa6e

    requires s0.stack[8] == 0x830

    requires s0.stack[10] == 0x780

    requires s0.stack[13] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push1(s0, 0x40);
      assert s1.Peek(5) == 0xa6e;
      assert s1.Peek(9) == 0x830;
      assert s1.Peek(11) == 0x780;
      assert s1.Peek(14) == 0x175;
      var s2 := MLoad(s1);
      var s3 := Push3(s2, 0x461bcd);
      var s4 := Push1(s3, 0xe5);
      var s5 := Shl(s4);
      var s6 := Dup2(s5);
      var s7 := MStore(s6);
      var s8 := Push1(s7, 0x20);
      var s9 := Push1(s8, 0x04);
      var s10 := Dup3(s9);
      var s11 := Add(s10);
      assert s11.Peek(7) == 0xa6e;
      assert s11.Peek(11) == 0x830;
      assert s11.Peek(13) == 0x780;
      assert s11.Peek(16) == 0x175;
      var s12 := Dup2(s11);
      var s13 := Swap1(s12);
      var s14 := MStore(s13);
      var s15 := Push1(s14, 0x24);
      var s16 := Dup3(s15);
      var s17 := Add(s16);
      var s18 := MStore(s17);
      var s19 := Push32(s18, 0x537472696e67733a20686578206c656e67746820696e73756666696369656e74);
      var s20 := Push1(s19, 0x44);
      var s21 := Dup3(s20);
      assert s21.Peek(8) == 0xa6e;
      assert s21.Peek(12) == 0x830;
      assert s21.Peek(14) == 0x780;
      assert s21.Peek(17) == 0x175;
      var s22 := Add(s21);
      var s23 := MStore(s22);
      var s24 := Push1(s23, 0x64);
      var s25 := Add(s24);
      var s26 := Push2(s25, 0x0391);
      var s27 := Jump(s26);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s140(s27, gas - 1)
  }

  /** Node 140
    * Segment Id for this node is: 85
    * Starting at 0x391
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: -1
    * Net Capacity Effect: +1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s140(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x391 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 16

    requires s0.stack[5] == 0xa6e

    requires s0.stack[9] == 0x830

    requires s0.stack[11] == 0x780

    requires s0.stack[14] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(5) == 0xa6e;
      assert s1.Peek(9) == 0x830;
      assert s1.Peek(11) == 0x780;
      assert s1.Peek(14) == 0x175;
      var s2 := Push1(s1, 0x40);
      var s3 := MLoad(s2);
      var s4 := Dup1(s3);
      var s5 := Swap2(s4);
      var s6 := Sub(s5);
      var s7 := Swap1(s6);
      var s8 := Revert(s7);
      // Segment is terminal (Revert, Stop or Return)
      s8
  }

  /** Node 141
    * Segment Id for this node is: 172
    * Starting at 0xc53
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 5
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -4
    * Net Capacity Effect: +4
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s141(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xc53 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 15

    requires s0.stack[4] == 0xa6e

    requires s0.stack[8] == 0x830

    requires s0.stack[10] == 0x780

    requires s0.stack[13] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(4) == 0xa6e;
      assert s1.Peek(8) == 0x830;
      assert s1.Peek(10) == 0x780;
      assert s1.Peek(13) == 0x175;
      var s2 := Swap4(s1);
      var s3 := Swap3(s2);
      var s4 := Pop(s3);
      var s5 := Pop(s4);
      var s6 := Pop(s5);
      var s7 := Jump(s6);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s142(s7, gas - 1)
  }

  /** Node 142
    * Segment Id for this node is: 147
    * Starting at 0xa6e
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +2
    * Net Capacity Effect: -2
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s142(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xa6e as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 11

    requires s0.stack[4] == 0x830

    requires s0.stack[6] == 0x780

    requires s0.stack[9] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(4) == 0x830;
      assert s1.Peek(6) == 0x780;
      assert s1.Peek(9) == 0x175;
      var s2 := Push1(s1, 0x40);
      var s3 := MLoad(s2);
      var s4 := Push1(s3, 0x20);
      var s5 := Add(s4);
      var s6 := Push2(s5, 0x0a7f);
      var s7 := Swap3(s6);
      var s8 := Swap2(s7);
      var s9 := Swap1(s8);
      var s10 := Push2(s9, 0x0e10);
      var s11 := Jump(s10);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s143(s11, gas - 1)
  }

  /** Node 143
    * Segment Id for this node is: 215
    * Starting at 0xe10
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 3
    * Minimum capacity for this segment to prevent stack overflow: 7
    * Net Stack Effect: +6
    * Net Capacity Effect: -6
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s143(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xe10 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 13

    requires s0.stack[3] == 0xa7f

    requires s0.stack[6] == 0x830

    requires s0.stack[8] == 0x780

    requires s0.stack[11] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0xa7f;
      assert s1.Peek(6) == 0x830;
      assert s1.Peek(8) == 0x780;
      assert s1.Peek(11) == 0x175;
      var s2 := Push32(s1, 0x416363657373436f6e74726f6c3a206163636f756e7420000000000000000000);
      var s3 := Dup2(s2);
      var s4 := MStore(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := Dup4(s5);
      var s7 := MLoad(s6);
      var s8 := Push2(s7, 0x0e48);
      var s9 := Dup2(s8);
      var s10 := Push1(s9, 0x17);
      var s11 := Dup6(s10);
      assert s11.Peek(3) == 0xe48;
      assert s11.Peek(9) == 0xa7f;
      assert s11.Peek(12) == 0x830;
      assert s11.Peek(14) == 0x780;
      assert s11.Peek(17) == 0x175;
      var s12 := Add(s11);
      var s13 := Push1(s12, 0x20);
      var s14 := Dup9(s13);
      var s15 := Add(s14);
      var s16 := Push2(s15, 0x0dae);
      var s17 := Jump(s16);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s144(s17, gas - 1)
  }

  /** Node 144
    * Segment Id for this node is: 205
    * Starting at 0xdae
    * Segment type is: CONT Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 1
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s144(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xdae as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 19

    requires s0.stack[3] == 0xe48

    requires s0.stack[9] == 0xa7f

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x780

    requires s0.stack[17] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0xe48;
      assert s1.Peek(9) == 0xa7f;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x780;
      assert s1.Peek(17) == 0x175;
      var s2 := Push1(s1, 0x00);
      //  Go to the next instruction at pc + 1
      ExecuteFromCFGNode_s145(s2, gas - 1)
  }

  /** Node 145
    * Segment Id for this node is: 206
    * Starting at 0xdb1
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 4
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s145(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xdb1 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 20

    requires s0.stack[4] == 0xe48

    requires s0.stack[10] == 0xa7f

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x780

    requires s0.stack[18] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(4) == 0xe48;
      assert s1.Peek(10) == 0xa7f;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x780;
      assert s1.Peek(18) == 0x175;
      var s2 := Dup4(s1);
      var s3 := Dup2(s2);
      var s4 := Lt(s3);
      var s5 := IsZero(s4);
      var s6 := Push2(s5, 0x0dc9);
      var s7 := JumpI(s6);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s6.stack[1] > 0 then
        ExecuteFromCFGNode_s147(s7, gas - 1)
      else
        ExecuteFromCFGNode_s146(s7, gas - 1)
  }

  /** Node 146
    * Segment Id for this node is: 207
    * Starting at 0xdba
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 3
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s146(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xdba as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 20

    requires s0.stack[4] == 0xe48

    requires s0.stack[10] == 0xa7f

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x780

    requires s0.stack[18] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Dup2(s0);
      assert s1.Peek(5) == 0xe48;
      assert s1.Peek(11) == 0xa7f;
      assert s1.Peek(14) == 0x830;
      assert s1.Peek(16) == 0x780;
      assert s1.Peek(19) == 0x175;
      var s2 := Dup2(s1);
      var s3 := Add(s2);
      var s4 := MLoad(s3);
      var s5 := Dup4(s4);
      var s6 := Dup3(s5);
      var s7 := Add(s6);
      var s8 := MStore(s7);
      var s9 := Push1(s8, 0x20);
      var s10 := Add(s9);
      var s11 := Push2(s10, 0x0db1);
      assert s11.Peek(0) == 0xdb1;
      assert s11.Peek(5) == 0xe48;
      assert s11.Peek(11) == 0xa7f;
      assert s11.Peek(14) == 0x830;
      assert s11.Peek(16) == 0x780;
      assert s11.Peek(19) == 0x175;
      var s12 := Jump(s11);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s145(s12, gas - 1)
  }

  /** Node 147
    * Segment Id for this node is: 208
    * Starting at 0xdc9
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 5
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -5
    * Net Capacity Effect: +5
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s147(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xdc9 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 20

    requires s0.stack[4] == 0xe48

    requires s0.stack[10] == 0xa7f

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x780

    requires s0.stack[18] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(4) == 0xe48;
      assert s1.Peek(10) == 0xa7f;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x780;
      assert s1.Peek(18) == 0x175;
      var s2 := Pop(s1);
      var s3 := Pop(s2);
      var s4 := Push1(s3, 0x00);
      var s5 := Swap2(s4);
      var s6 := Add(s5);
      var s7 := MStore(s6);
      var s8 := Jump(s7);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s148(s8, gas - 1)
  }

  /** Node 148
    * Segment Id for this node is: 216
    * Starting at 0xe48
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 4
    * Minimum capacity for this segment to prevent stack overflow: 6
    * Net Stack Effect: +5
    * Net Capacity Effect: -5
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s148(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xe48 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 15

    requires s0.stack[5] == 0xa7f

    requires s0.stack[8] == 0x830

    requires s0.stack[10] == 0x780

    requires s0.stack[13] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(5) == 0xa7f;
      assert s1.Peek(8) == 0x830;
      assert s1.Peek(10) == 0x780;
      assert s1.Peek(13) == 0x175;
      var s2 := PushN(s1, 17, 0x01034b99036b4b9b9b4b733903937b6329);
      var s3 := Push1(s2, 0x7d);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x17);
      var s6 := Swap2(s5);
      var s7 := Dup5(s6);
      var s8 := Add(s7);
      var s9 := Swap2(s8);
      var s10 := Dup3(s9);
      var s11 := Add(s10);
      assert s11.Peek(7) == 0xa7f;
      assert s11.Peek(10) == 0x830;
      assert s11.Peek(12) == 0x780;
      assert s11.Peek(15) == 0x175;
      var s12 := MStore(s11);
      var s13 := Dup4(s12);
      var s14 := MLoad(s13);
      var s15 := Push2(s14, 0x0e79);
      var s16 := Dup2(s15);
      var s17 := Push1(s16, 0x28);
      var s18 := Dup5(s17);
      var s19 := Add(s18);
      var s20 := Push1(s19, 0x20);
      var s21 := Dup9(s20);
      assert s21.Peek(4) == 0xe79;
      assert s21.Peek(11) == 0xa7f;
      assert s21.Peek(14) == 0x830;
      assert s21.Peek(16) == 0x780;
      assert s21.Peek(19) == 0x175;
      var s22 := Add(s21);
      var s23 := Push2(s22, 0x0dae);
      var s24 := Jump(s23);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s149(s24, gas - 1)
  }

  /** Node 149
    * Segment Id for this node is: 205
    * Starting at 0xdae
    * Segment type is: CONT Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 1
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s149(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xdae as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 20

    requires s0.stack[3] == 0xe79

    requires s0.stack[10] == 0xa7f

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x780

    requires s0.stack[18] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0xe79;
      assert s1.Peek(10) == 0xa7f;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x780;
      assert s1.Peek(18) == 0x175;
      var s2 := Push1(s1, 0x00);
      //  Go to the next instruction at pc + 1
      ExecuteFromCFGNode_s150(s2, gas - 1)
  }

  /** Node 150
    * Segment Id for this node is: 206
    * Starting at 0xdb1
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 4
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s150(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xdb1 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 21

    requires s0.stack[4] == 0xe79

    requires s0.stack[11] == 0xa7f

    requires s0.stack[14] == 0x830

    requires s0.stack[16] == 0x780

    requires s0.stack[19] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(4) == 0xe79;
      assert s1.Peek(11) == 0xa7f;
      assert s1.Peek(14) == 0x830;
      assert s1.Peek(16) == 0x780;
      assert s1.Peek(19) == 0x175;
      var s2 := Dup4(s1);
      var s3 := Dup2(s2);
      var s4 := Lt(s3);
      var s5 := IsZero(s4);
      var s6 := Push2(s5, 0x0dc9);
      var s7 := JumpI(s6);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s6.stack[1] > 0 then
        ExecuteFromCFGNode_s152(s7, gas - 1)
      else
        ExecuteFromCFGNode_s151(s7, gas - 1)
  }

  /** Node 151
    * Segment Id for this node is: 207
    * Starting at 0xdba
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 3
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s151(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xdba as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 21

    requires s0.stack[4] == 0xe79

    requires s0.stack[11] == 0xa7f

    requires s0.stack[14] == 0x830

    requires s0.stack[16] == 0x780

    requires s0.stack[19] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Dup2(s0);
      assert s1.Peek(5) == 0xe79;
      assert s1.Peek(12) == 0xa7f;
      assert s1.Peek(15) == 0x830;
      assert s1.Peek(17) == 0x780;
      assert s1.Peek(20) == 0x175;
      var s2 := Dup2(s1);
      var s3 := Add(s2);
      var s4 := MLoad(s3);
      var s5 := Dup4(s4);
      var s6 := Dup3(s5);
      var s7 := Add(s6);
      var s8 := MStore(s7);
      var s9 := Push1(s8, 0x20);
      var s10 := Add(s9);
      var s11 := Push2(s10, 0x0db1);
      assert s11.Peek(0) == 0xdb1;
      assert s11.Peek(5) == 0xe79;
      assert s11.Peek(12) == 0xa7f;
      assert s11.Peek(15) == 0x830;
      assert s11.Peek(17) == 0x780;
      assert s11.Peek(20) == 0x175;
      var s12 := Jump(s11);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s150(s12, gas - 1)
  }

  /** Node 152
    * Segment Id for this node is: 208
    * Starting at 0xdc9
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 5
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -5
    * Net Capacity Effect: +5
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s152(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xdc9 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 21

    requires s0.stack[4] == 0xe79

    requires s0.stack[11] == 0xa7f

    requires s0.stack[14] == 0x830

    requires s0.stack[16] == 0x780

    requires s0.stack[19] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(4) == 0xe79;
      assert s1.Peek(11) == 0xa7f;
      assert s1.Peek(14) == 0x830;
      assert s1.Peek(16) == 0x780;
      assert s1.Peek(19) == 0x175;
      var s2 := Pop(s1);
      var s3 := Pop(s2);
      var s4 := Push1(s3, 0x00);
      var s5 := Swap2(s4);
      var s6 := Add(s5);
      var s7 := MStore(s6);
      var s8 := Jump(s7);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s153(s8, gas - 1)
  }

  /** Node 153
    * Segment Id for this node is: 217
    * Starting at 0xe79
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 7
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -6
    * Net Capacity Effect: +6
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s153(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xe79 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 16

    requires s0.stack[6] == 0xa7f

    requires s0.stack[9] == 0x830

    requires s0.stack[11] == 0x780

    requires s0.stack[14] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(6) == 0xa7f;
      assert s1.Peek(9) == 0x830;
      assert s1.Peek(11) == 0x780;
      assert s1.Peek(14) == 0x175;
      var s2 := Add(s1);
      var s3 := Push1(s2, 0x28);
      var s4 := Add(s3);
      var s5 := Swap5(s4);
      var s6 := Swap4(s5);
      var s7 := Pop(s6);
      var s8 := Pop(s7);
      var s9 := Pop(s8);
      var s10 := Pop(s9);
      var s11 := Jump(s10);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s154(s11, gas - 1)
  }

  /** Node 154
    * Segment Id for this node is: 148
    * Starting at 0xa7f
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 5
    * Net Stack Effect: +2
    * Net Capacity Effect: -2
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s154(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xa7f as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 10

    requires s0.stack[3] == 0x830

    requires s0.stack[5] == 0x780

    requires s0.stack[8] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0x830;
      assert s1.Peek(5) == 0x780;
      assert s1.Peek(8) == 0x175;
      var s2 := Push1(s1, 0x40);
      var s3 := Dup1(s2);
      var s4 := MLoad(s3);
      var s5 := Push1(s4, 0x1f);
      var s6 := Not(s5);
      var s7 := Dup2(s6);
      var s8 := Dup5(s7);
      var s9 := Sub(s8);
      var s10 := Add(s9);
      var s11 := Dup2(s10);
      assert s11.Peek(7) == 0x830;
      assert s11.Peek(9) == 0x780;
      assert s11.Peek(12) == 0x175;
      var s12 := MStore(s11);
      var s13 := Swap1(s12);
      var s14 := Dup3(s13);
      var s15 := Swap1(s14);
      var s16 := MStore(s15);
      var s17 := Push3(s16, 0x461bcd);
      var s18 := Push1(s17, 0xe5);
      var s19 := Shl(s18);
      var s20 := Dup3(s19);
      var s21 := MStore(s20);
      assert s21.Peek(4) == 0x830;
      assert s21.Peek(6) == 0x780;
      assert s21.Peek(9) == 0x175;
      var s22 := Push2(s21, 0x0391);
      var s23 := Swap2(s22);
      var s24 := Push1(s23, 0x04);
      var s25 := Add(s24);
      var s26 := Push2(s25, 0x0e85);
      var s27 := Jump(s26);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s155(s27, gas - 1)
  }

  /** Node 155
    * Segment Id for this node is: 218
    * Starting at 0xe85
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 7
    * Net Stack Effect: +6
    * Net Capacity Effect: -6
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s155(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xe85 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 12

    requires s0.stack[2] == 0x391

    requires s0.stack[5] == 0x830

    requires s0.stack[7] == 0x780

    requires s0.stack[10] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0x391;
      assert s1.Peek(5) == 0x830;
      assert s1.Peek(7) == 0x780;
      assert s1.Peek(10) == 0x175;
      var s2 := Push1(s1, 0x20);
      var s3 := Dup2(s2);
      var s4 := MStore(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := Dup3(s5);
      var s7 := MLoad(s6);
      var s8 := Dup1(s7);
      var s9 := Push1(s8, 0x20);
      var s10 := Dup5(s9);
      var s11 := Add(s10);
      assert s11.Peek(6) == 0x391;
      assert s11.Peek(9) == 0x830;
      assert s11.Peek(11) == 0x780;
      assert s11.Peek(14) == 0x175;
      var s12 := MStore(s11);
      var s13 := Push2(s12, 0x0ea4);
      var s14 := Dup2(s13);
      var s15 := Push1(s14, 0x40);
      var s16 := Dup6(s15);
      var s17 := Add(s16);
      var s18 := Push1(s17, 0x20);
      var s19 := Dup8(s18);
      var s20 := Add(s19);
      var s21 := Push2(s20, 0x0dae);
      assert s21.Peek(0) == 0xdae;
      assert s21.Peek(4) == 0xea4;
      assert s21.Peek(9) == 0x391;
      assert s21.Peek(12) == 0x830;
      assert s21.Peek(14) == 0x780;
      assert s21.Peek(17) == 0x175;
      var s22 := Jump(s21);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s156(s22, gas - 1)
  }

  /** Node 156
    * Segment Id for this node is: 205
    * Starting at 0xdae
    * Segment type is: CONT Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 1
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s156(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xdae as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 18

    requires s0.stack[3] == 0xea4

    requires s0.stack[8] == 0x391

    requires s0.stack[11] == 0x830

    requires s0.stack[13] == 0x780

    requires s0.stack[16] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0xea4;
      assert s1.Peek(8) == 0x391;
      assert s1.Peek(11) == 0x830;
      assert s1.Peek(13) == 0x780;
      assert s1.Peek(16) == 0x175;
      var s2 := Push1(s1, 0x00);
      //  Go to the next instruction at pc + 1
      ExecuteFromCFGNode_s157(s2, gas - 1)
  }

  /** Node 157
    * Segment Id for this node is: 206
    * Starting at 0xdb1
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 4
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s157(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xdb1 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 19

    requires s0.stack[4] == 0xea4

    requires s0.stack[9] == 0x391

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x780

    requires s0.stack[17] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(4) == 0xea4;
      assert s1.Peek(9) == 0x391;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x780;
      assert s1.Peek(17) == 0x175;
      var s2 := Dup4(s1);
      var s3 := Dup2(s2);
      var s4 := Lt(s3);
      var s5 := IsZero(s4);
      var s6 := Push2(s5, 0x0dc9);
      var s7 := JumpI(s6);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s6.stack[1] > 0 then
        ExecuteFromCFGNode_s159(s7, gas - 1)
      else
        ExecuteFromCFGNode_s158(s7, gas - 1)
  }

  /** Node 158
    * Segment Id for this node is: 207
    * Starting at 0xdba
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 3
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s158(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xdba as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 19

    requires s0.stack[4] == 0xea4

    requires s0.stack[9] == 0x391

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x780

    requires s0.stack[17] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Dup2(s0);
      assert s1.Peek(5) == 0xea4;
      assert s1.Peek(10) == 0x391;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x780;
      assert s1.Peek(18) == 0x175;
      var s2 := Dup2(s1);
      var s3 := Add(s2);
      var s4 := MLoad(s3);
      var s5 := Dup4(s4);
      var s6 := Dup3(s5);
      var s7 := Add(s6);
      var s8 := MStore(s7);
      var s9 := Push1(s8, 0x20);
      var s10 := Add(s9);
      var s11 := Push2(s10, 0x0db1);
      assert s11.Peek(0) == 0xdb1;
      assert s11.Peek(5) == 0xea4;
      assert s11.Peek(10) == 0x391;
      assert s11.Peek(13) == 0x830;
      assert s11.Peek(15) == 0x780;
      assert s11.Peek(18) == 0x175;
      var s12 := Jump(s11);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s157(s12, gas - 1)
  }

  /** Node 159
    * Segment Id for this node is: 208
    * Starting at 0xdc9
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 5
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -5
    * Net Capacity Effect: +5
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s159(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xdc9 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 19

    requires s0.stack[4] == 0xea4

    requires s0.stack[9] == 0x391

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x780

    requires s0.stack[17] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(4) == 0xea4;
      assert s1.Peek(9) == 0x391;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x780;
      assert s1.Peek(17) == 0x175;
      var s2 := Pop(s1);
      var s3 := Pop(s2);
      var s4 := Push1(s3, 0x00);
      var s5 := Swap2(s4);
      var s6 := Add(s5);
      var s7 := MStore(s6);
      var s8 := Jump(s7);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s160(s8, gas - 1)
  }

  /** Node 160
    * Segment Id for this node is: 219
    * Starting at 0xea4
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 5
    * Minimum capacity for this segment to prevent stack overflow: 1
    * Net Stack Effect: -4
    * Net Capacity Effect: +4
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s160(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xea4 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 14

    requires s0.stack[4] == 0x391

    requires s0.stack[7] == 0x830

    requires s0.stack[9] == 0x780

    requires s0.stack[12] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(4) == 0x391;
      assert s1.Peek(7) == 0x830;
      assert s1.Peek(9) == 0x780;
      assert s1.Peek(12) == 0x175;
      var s2 := Push1(s1, 0x1f);
      var s3 := Add(s2);
      var s4 := Push1(s3, 0x1f);
      var s5 := Not(s4);
      var s6 := And(s5);
      var s7 := Swap2(s6);
      var s8 := Swap1(s7);
      var s9 := Swap2(s8);
      var s10 := Add(s9);
      var s11 := Push1(s10, 0x40);
      assert s11.Peek(4) == 0x391;
      assert s11.Peek(7) == 0x830;
      assert s11.Peek(9) == 0x780;
      assert s11.Peek(12) == 0x175;
      var s12 := Add(s11);
      var s13 := Swap3(s12);
      var s14 := Swap2(s13);
      var s15 := Pop(s14);
      var s16 := Pop(s15);
      var s17 := Jump(s16);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s161(s17, gas - 1)
  }

  /** Node 161
    * Segment Id for this node is: 85
    * Starting at 0x391
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: -1
    * Net Capacity Effect: +1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s161(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x391 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 10

    requires s0.stack[3] == 0x830

    requires s0.stack[5] == 0x780

    requires s0.stack[8] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0x830;
      assert s1.Peek(5) == 0x780;
      assert s1.Peek(8) == 0x175;
      var s2 := Push1(s1, 0x40);
      var s3 := MLoad(s2);
      var s4 := Dup1(s3);
      var s5 := Swap2(s4);
      var s6 := Sub(s5);
      var s7 := Swap1(s6);
      var s8 := Revert(s7);
      // Segment is terminal (Revert, Stop or Return)
      s8
  }

  /** Node 162
    * Segment Id for this node is: 103
    * Starting at 0x5af
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 3
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -3
    * Net Capacity Effect: +3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s162(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x5af as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 9

    requires s0.stack[2] == 0x830

    requires s0.stack[4] == 0x780

    requires s0.stack[7] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0x830;
      assert s1.Peek(4) == 0x780;
      assert s1.Peek(7) == 0x175;
      var s2 := Pop(s1);
      var s3 := Pop(s2);
      var s4 := Jump(s3);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s163(s4, gas - 1)
  }

  /** Node 163
    * Segment Id for this node is: 123
    * Starting at 0x830
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -2
    * Net Capacity Effect: +2
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s163(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x830 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 6

    requires s0.stack[1] == 0x780

    requires s0.stack[4] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(1) == 0x780;
      assert s1.Peek(4) == 0x175;
      var s2 := Pop(s1);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s164(s3, gas - 1)
  }

  /** Node 164
    * Segment Id for this node is: 118
    * Starting at 0x780
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 3
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: -3
    * Net Capacity Effect: +3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s164(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x780 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 4

    requires s0.stack[2] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0x175;
      var s2 := Pop(s1);
      var s3 := Push1(s2, 0x01);
      var s4 := Dup1(s3);
      var s5 := SLoad(s4);
      var s6 := Push1(s5, 0x01);
      var s7 := Push1(s6, 0x01);
      var s8 := Push1(s7, 0xa0);
      var s9 := Shl(s8);
      var s10 := Sub(s9);
      var s11 := Not(s10);
      assert s11.Peek(4) == 0x175;
      var s12 := And(s11);
      var s13 := Push1(s12, 0x01);
      var s14 := Push1(s13, 0x01);
      var s15 := Push1(s14, 0xa0);
      var s16 := Shl(s15);
      var s17 := Sub(s16);
      var s18 := Swap3(s17);
      var s19 := Swap1(s18);
      var s20 := Swap3(s19);
      var s21 := And(s20);
      assert s21.Peek(3) == 0x175;
      var s22 := Swap2(s21);
      var s23 := Swap1(s22);
      var s24 := Swap2(s23);
      var s25 := Or(s24);
      var s26 := Swap1(s25);
      var s27 := SStore(s26);
      var s28 := Jump(s27);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s18(s28, gas - 1)
  }

  /** Node 165
    * Segment Id for this node is: 8
    * Starting at 0x59
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s165(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x59 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 1

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      var s2 := Dup1(s1);
      var s3 := Push4(s2, 0xa217fddf);
      var s4 := Eq(s3);
      var s5 := Push2(s4, 0x01f7);
      var s6 := JumpI(s5);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s5.stack[1] > 0 then
        ExecuteFromCFGNode_s326(s6, gas - 1)
      else
        ExecuteFromCFGNode_s166(s6, gas - 1)
  }

  /** Node 166
    * Segment Id for this node is: 9
    * Starting at 0x65
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s166(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x65 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 1

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Dup1(s0);
      var s2 := Push4(s1, 0xd547741f);
      var s3 := Eq(s2);
      var s4 := Push2(s3, 0x020c);
      var s5 := JumpI(s4);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s4.stack[1] > 0 then
        ExecuteFromCFGNode_s178(s5, gas - 1)
      else
        ExecuteFromCFGNode_s167(s5, gas - 1)
  }

  /** Node 167
    * Segment Id for this node is: 10
    * Starting at 0x70
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s167(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x70 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 1

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Dup1(s0);
      var s2 := Push4(s1, 0xda4ea2ca);
      var s3 := Eq(s2);
      var s4 := Push2(s3, 0x022c);
      var s5 := JumpI(s4);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s4.stack[1] > 0 then
        ExecuteFromCFGNode_s169(s5, gas - 1)
      else
        ExecuteFromCFGNode_s168(s5, gas - 1)
  }

  /** Node 168
    * Segment Id for this node is: 11
    * Starting at 0x7b
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s168(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x7b as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 1

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push1(s0, 0x00);
      var s2 := Dup1(s1);
      var s3 := Revert(s2);
      // Segment is terminal (Revert, Stop or Return)
      s3
  }

  /** Node 169
    * Segment Id for this node is: 61
    * Starting at 0x22c
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s169(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x22c as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 1

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      var s2 := CallValue(s1);
      var s3 := Dup1(s2);
      var s4 := IsZero(s3);
      var s5 := Push2(s4, 0x0238);
      var s6 := JumpI(s5);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s5.stack[1] > 0 then
        ExecuteFromCFGNode_s171(s6, gas - 1)
      else
        ExecuteFromCFGNode_s170(s6, gas - 1)
  }

  /** Node 170
    * Segment Id for this node is: 62
    * Starting at 0x234
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s170(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x234 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 2

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push1(s0, 0x00);
      var s2 := Dup1(s1);
      var s3 := Revert(s2);
      // Segment is terminal (Revert, Stop or Return)
      s3
  }

  /** Node 171
    * Segment Id for this node is: 63
    * Starting at 0x238
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +3
    * Net Capacity Effect: -3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s171(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x238 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 2

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      var s2 := Pop(s1);
      var s3 := Push2(s2, 0x0102);
      var s4 := Push2(s3, 0x0247);
      var s5 := CallDataSize(s4);
      var s6 := Push1(s5, 0x04);
      var s7 := Push2(s6, 0x0c84);
      var s8 := Jump(s7);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s172(s8, gas - 1)
  }

  /** Node 172
    * Segment Id for this node is: 177
    * Starting at 0xc84
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s172(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xc84 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 5

    requires s0.stack[2] == 0x247

    requires s0.stack[3] == 0x102

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0x247;
      assert s1.Peek(3) == 0x102;
      var s2 := Push1(s1, 0x00);
      var s3 := Push1(s2, 0x20);
      var s4 := Dup3(s3);
      var s5 := Dup5(s4);
      var s6 := Sub(s5);
      var s7 := SLt(s6);
      var s8 := IsZero(s7);
      var s9 := Push2(s8, 0x0c96);
      var s10 := JumpI(s9);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s9.stack[1] > 0 then
        ExecuteFromCFGNode_s174(s10, gas - 1)
      else
        ExecuteFromCFGNode_s173(s10, gas - 1)
  }

  /** Node 173
    * Segment Id for this node is: 178
    * Starting at 0xc92
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s173(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xc92 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 6

    requires s0.stack[3] == 0x247

    requires s0.stack[4] == 0x102

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push1(s0, 0x00);
      assert s1.Peek(4) == 0x247;
      assert s1.Peek(5) == 0x102;
      var s2 := Dup1(s1);
      var s3 := Revert(s2);
      // Segment is terminal (Revert, Stop or Return)
      s3
  }

  /** Node 174
    * Segment Id for this node is: 179
    * Starting at 0xc96
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 4
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -3
    * Net Capacity Effect: +3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s174(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xc96 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 6

    requires s0.stack[3] == 0x247

    requires s0.stack[4] == 0x102

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0x247;
      assert s1.Peek(4) == 0x102;
      var s2 := Pop(s1);
      var s3 := CallDataLoad(s2);
      var s4 := Swap2(s3);
      var s5 := Swap1(s4);
      var s6 := Pop(s5);
      var s7 := Jump(s6);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s175(s7, gas - 1)
  }

  /** Node 175
    * Segment Id for this node is: 64
    * Starting at 0x247
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s175(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x247 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 3

    requires s0.stack[1] == 0x102

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(1) == 0x102;
      var s2 := Push1(s1, 0x02);
      var s3 := Push1(s2, 0x20);
      var s4 := MStore(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := Swap1(s5);
      var s7 := Dup2(s6);
      var s8 := MStore(s7);
      var s9 := Push1(s8, 0x40);
      var s10 := Swap1(s9);
      var s11 := Keccak256(s10);
      assert s11.Peek(1) == 0x102;
      var s12 := SLoad(s11);
      var s13 := Push1(s12, 0xff);
      var s14 := And(s13);
      var s15 := Dup2(s14);
      var s16 := Jump(s15);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s176(s16, gas - 1)
  }

  /** Node 176
    * Segment Id for this node is: 26
    * Starting at 0x102
    * Segment type is: CONT Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s176(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x102 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 3

    requires s0.stack[1] == 0x102

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(1) == 0x102;
      var s2 := Push1(s1, 0x40);
      var s3 := MLoad(s2);
      var s4 := Swap1(s3);
      var s5 := IsZero(s4);
      var s6 := IsZero(s5);
      var s7 := Dup2(s6);
      var s8 := MStore(s7);
      var s9 := Push1(s8, 0x20);
      var s10 := Add(s9);
      //  Go to the next instruction at pc + 1
      ExecuteFromCFGNode_s177(s10, gas - 1)
  }

  /** Node 177
    * Segment Id for this node is: 27
    * Starting at 0x10e
    * Segment type is: RETURN Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: -1
    * Net Capacity Effect: +1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s177(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x10e as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 3

    requires s0.stack[1] == 0x102

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(1) == 0x102;
      var s2 := Push1(s1, 0x40);
      var s3 := MLoad(s2);
      var s4 := Dup1(s3);
      var s5 := Swap2(s4);
      var s6 := Sub(s5);
      var s7 := Swap1(s6);
      var s8 := Return(s7);
      // Segment is terminal (Revert, Stop or Return)
      s8
  }

  /** Node 178
    * Segment Id for this node is: 57
    * Starting at 0x20c
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s178(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x20c as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 1

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      var s2 := CallValue(s1);
      var s3 := Dup1(s2);
      var s4 := IsZero(s3);
      var s5 := Push2(s4, 0x0218);
      var s6 := JumpI(s5);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s5.stack[1] > 0 then
        ExecuteFromCFGNode_s180(s6, gas - 1)
      else
        ExecuteFromCFGNode_s179(s6, gas - 1)
  }

  /** Node 179
    * Segment Id for this node is: 58
    * Starting at 0x214
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s179(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x214 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 2

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push1(s0, 0x00);
      var s2 := Dup1(s1);
      var s3 := Revert(s2);
      // Segment is terminal (Revert, Stop or Return)
      s3
  }

  /** Node 180
    * Segment Id for this node is: 59
    * Starting at 0x218
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +3
    * Net Capacity Effect: -3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s180(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x218 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 2

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      var s2 := Pop(s1);
      var s3 := Push2(s2, 0x0175);
      var s4 := Push2(s3, 0x0227);
      var s5 := CallDataSize(s4);
      var s6 := Push1(s5, 0x04);
      var s7 := Push2(s6, 0x0cb9);
      var s8 := Jump(s7);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s181(s8, gas - 1)
  }

  /** Node 181
    * Segment Id for this node is: 183
    * Starting at 0xcb9
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 5
    * Net Stack Effect: +2
    * Net Capacity Effect: -2
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s181(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xcb9 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 5

    requires s0.stack[2] == 0x227

    requires s0.stack[3] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0x227;
      assert s1.Peek(3) == 0x175;
      var s2 := Push1(s1, 0x00);
      var s3 := Dup1(s2);
      var s4 := Push1(s3, 0x40);
      var s5 := Dup4(s4);
      var s6 := Dup6(s5);
      var s7 := Sub(s6);
      var s8 := SLt(s7);
      var s9 := IsZero(s8);
      var s10 := Push2(s9, 0x0ccc);
      var s11 := JumpI(s10);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s10.stack[1] > 0 then
        ExecuteFromCFGNode_s183(s11, gas - 1)
      else
        ExecuteFromCFGNode_s182(s11, gas - 1)
  }

  /** Node 182
    * Segment Id for this node is: 184
    * Starting at 0xcc8
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s182(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xcc8 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 7

    requires s0.stack[4] == 0x227

    requires s0.stack[5] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push1(s0, 0x00);
      assert s1.Peek(5) == 0x227;
      assert s1.Peek(6) == 0x175;
      var s2 := Dup1(s1);
      var s3 := Revert(s2);
      // Segment is terminal (Revert, Stop or Return)
      s3
  }

  /** Node 183
    * Segment Id for this node is: 185
    * Starting at 0xccc
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 3
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +2
    * Net Capacity Effect: -2
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s183(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xccc as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 7

    requires s0.stack[4] == 0x227

    requires s0.stack[5] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(4) == 0x227;
      assert s1.Peek(5) == 0x175;
      var s2 := Dup3(s1);
      var s3 := CallDataLoad(s2);
      var s4 := Swap2(s3);
      var s5 := Pop(s4);
      var s6 := Push2(s5, 0x0cdc);
      var s7 := Push1(s6, 0x20);
      var s8 := Dup5(s7);
      var s9 := Add(s8);
      var s10 := Push2(s9, 0x0c9d);
      var s11 := Jump(s10);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s184(s11, gas - 1)
  }

  /** Node 184
    * Segment Id for this node is: 180
    * Starting at 0xc9d
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s184(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xc9d as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 9

    requires s0.stack[1] == 0xcdc

    requires s0.stack[6] == 0x227

    requires s0.stack[7] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(1) == 0xcdc;
      assert s1.Peek(6) == 0x227;
      assert s1.Peek(7) == 0x175;
      var s2 := Dup1(s1);
      var s3 := CallDataLoad(s2);
      var s4 := Push1(s3, 0x01);
      var s5 := Push1(s4, 0x01);
      var s6 := Push1(s5, 0xa0);
      var s7 := Shl(s6);
      var s8 := Sub(s7);
      var s9 := Dup2(s8);
      var s10 := And(s9);
      var s11 := Dup2(s10);
      assert s11.Peek(4) == 0xcdc;
      assert s11.Peek(9) == 0x227;
      assert s11.Peek(10) == 0x175;
      var s12 := Eq(s11);
      var s13 := Push2(s12, 0x0cb4);
      var s14 := JumpI(s13);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s13.stack[1] > 0 then
        ExecuteFromCFGNode_s186(s14, gas - 1)
      else
        ExecuteFromCFGNode_s185(s14, gas - 1)
  }

  /** Node 185
    * Segment Id for this node is: 181
    * Starting at 0xcb0
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s185(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xcb0 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 10

    requires s0.stack[2] == 0xcdc

    requires s0.stack[7] == 0x227

    requires s0.stack[8] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push1(s0, 0x00);
      assert s1.Peek(3) == 0xcdc;
      assert s1.Peek(8) == 0x227;
      assert s1.Peek(9) == 0x175;
      var s2 := Dup1(s1);
      var s3 := Revert(s2);
      // Segment is terminal (Revert, Stop or Return)
      s3
  }

  /** Node 186
    * Segment Id for this node is: 182
    * Starting at 0xcb4
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 3
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -2
    * Net Capacity Effect: +2
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s186(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xcb4 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 10

    requires s0.stack[2] == 0xcdc

    requires s0.stack[7] == 0x227

    requires s0.stack[8] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0xcdc;
      assert s1.Peek(7) == 0x227;
      assert s1.Peek(8) == 0x175;
      var s2 := Swap2(s1);
      var s3 := Swap1(s2);
      var s4 := Pop(s3);
      var s5 := Jump(s4);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s187(s5, gas - 1)
  }

  /** Node 187
    * Segment Id for this node is: 186
    * Starting at 0xcdc
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 6
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -4
    * Net Capacity Effect: +4
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s187(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xcdc as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 8

    requires s0.stack[5] == 0x227

    requires s0.stack[6] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(5) == 0x227;
      assert s1.Peek(6) == 0x175;
      var s2 := Swap1(s1);
      var s3 := Pop(s2);
      var s4 := Swap3(s3);
      var s5 := Pop(s4);
      var s6 := Swap3(s5);
      var s7 := Swap1(s6);
      var s8 := Pop(s7);
      var s9 := Jump(s8);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s188(s9, gas - 1)
  }

  /** Node 188
    * Segment Id for this node is: 60
    * Starting at 0x227
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 1
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s188(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x227 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 4

    requires s0.stack[2] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0x175;
      var s2 := Push2(s1, 0x0731);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s189(s3, gas - 1)
  }

  /** Node 189
    * Segment Id for this node is: 115
    * Starting at 0x731
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +3
    * Net Capacity Effect: -3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s189(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x731 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 4

    requires s0.stack[2] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0x175;
      var s2 := Push1(s1, 0x00);
      var s3 := Dup3(s2);
      var s4 := Dup2(s3);
      var s5 := MStore(s4);
      var s6 := Push1(s5, 0x20);
      var s7 := Dup2(s6);
      var s8 := Swap1(s7);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x40);
      var s11 := Swap1(s10);
      assert s11.Peek(4) == 0x175;
      var s12 := Keccak256(s11);
      var s13 := Push1(s12, 0x01);
      var s14 := Add(s13);
      var s15 := SLoad(s14);
      var s16 := Push2(s15, 0x074c);
      var s17 := Dup2(s16);
      var s18 := Push2(s17, 0x0826);
      var s19 := Jump(s18);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s190(s19, gas - 1)
  }

  /** Node 190
    * Segment Id for this node is: 122
    * Starting at 0x826
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +3
    * Net Capacity Effect: -3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s190(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x826 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 7

    requires s0.stack[1] == 0x74c

    requires s0.stack[5] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(1) == 0x74c;
      assert s1.Peek(5) == 0x175;
      var s2 := Push2(s1, 0x0830);
      var s3 := Dup2(s2);
      var s4 := Caller(s3);
      var s5 := Push2(s4, 0x0a4c);
      var s6 := Jump(s5);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s191(s6, gas - 1)
  }

  /** Node 191
    * Segment Id for this node is: 143
    * Starting at 0xa4c
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +3
    * Net Capacity Effect: -3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s191(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xa4c as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 10

    requires s0.stack[2] == 0x830

    requires s0.stack[4] == 0x74c

    requires s0.stack[8] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0x830;
      assert s1.Peek(4) == 0x74c;
      assert s1.Peek(8) == 0x175;
      var s2 := Push2(s1, 0x0a56);
      var s3 := Dup3(s2);
      var s4 := Dup3(s3);
      var s5 := Push2(s4, 0x0708);
      var s6 := Jump(s5);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s192(s6, gas - 1)
  }

  /** Node 192
    * Segment Id for this node is: 114
    * Starting at 0x708
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 3
    * Minimum capacity for this segment to prevent stack overflow: 6
    * Net Stack Effect: -2
    * Net Capacity Effect: +2
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s192(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x708 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 13

    requires s0.stack[2] == 0xa56

    requires s0.stack[5] == 0x830

    requires s0.stack[7] == 0x74c

    requires s0.stack[11] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0xa56;
      assert s1.Peek(5) == 0x830;
      assert s1.Peek(7) == 0x74c;
      assert s1.Peek(11) == 0x175;
      var s2 := Push1(s1, 0x00);
      var s3 := Swap2(s2);
      var s4 := Dup3(s3);
      var s5 := MStore(s4);
      var s6 := Push1(s5, 0x20);
      var s7 := Dup3(s6);
      var s8 := Dup2(s7);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x40);
      var s11 := Dup1(s10);
      assert s11.Peek(5) == 0xa56;
      assert s11.Peek(8) == 0x830;
      assert s11.Peek(10) == 0x74c;
      assert s11.Peek(14) == 0x175;
      var s12 := Dup5(s11);
      var s13 := Keccak256(s12);
      var s14 := Push1(s13, 0x01);
      var s15 := Push1(s14, 0x01);
      var s16 := Push1(s15, 0xa0);
      var s17 := Shl(s16);
      var s18 := Sub(s17);
      var s19 := Swap4(s18);
      var s20 := Swap1(s19);
      var s21 := Swap4(s20);
      assert s21.Peek(6) == 0xa56;
      assert s21.Peek(9) == 0x830;
      assert s21.Peek(11) == 0x74c;
      assert s21.Peek(15) == 0x175;
      var s22 := And(s21);
      var s23 := Dup5(s22);
      var s24 := MStore(s23);
      var s25 := Swap2(s24);
      var s26 := Swap1(s25);
      var s27 := MStore(s26);
      var s28 := Swap1(s27);
      var s29 := Keccak256(s28);
      var s30 := SLoad(s29);
      var s31 := Push1(s30, 0xff);
      assert s31.Peek(2) == 0xa56;
      assert s31.Peek(5) == 0x830;
      assert s31.Peek(7) == 0x74c;
      assert s31.Peek(11) == 0x175;
      var s32 := And(s31);
      var s33 := Swap1(s32);
      var s34 := Jump(s33);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s193(s34, gas - 1)
  }

  /** Node 193
    * Segment Id for this node is: 144
    * Starting at 0xa56
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 1
    * Net Stack Effect: -1
    * Net Capacity Effect: +1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s193(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xa56 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 11

    requires s0.stack[3] == 0x830

    requires s0.stack[5] == 0x74c

    requires s0.stack[9] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0x830;
      assert s1.Peek(5) == 0x74c;
      assert s1.Peek(9) == 0x175;
      var s2 := Push2(s1, 0x05af);
      var s3 := JumpI(s2);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s2.stack[1] > 0 then
        ExecuteFromCFGNode_s316(s3, gas - 1)
      else
        ExecuteFromCFGNode_s194(s3, gas - 1)
  }

  /** Node 194
    * Segment Id for this node is: 145
    * Starting at 0xa5b
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +2
    * Net Capacity Effect: -2
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s194(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xa5b as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 10

    requires s0.stack[2] == 0x830

    requires s0.stack[4] == 0x74c

    requires s0.stack[8] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0a63);
      assert s1.Peek(0) == 0xa63;
      assert s1.Peek(3) == 0x830;
      assert s1.Peek(5) == 0x74c;
      assert s1.Peek(9) == 0x175;
      var s2 := Dup2(s1);
      var s3 := Push2(s2, 0x0aa5);
      var s4 := Jump(s3);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s195(s4, gas - 1)
  }

  /** Node 195
    * Segment Id for this node is: 149
    * Starting at 0xaa5
    * Segment type is: CONT Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 5
    * Net Stack Effect: +4
    * Net Capacity Effect: -4
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s195(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xaa5 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 12

    requires s0.stack[1] == 0xa63

    requires s0.stack[4] == 0x830

    requires s0.stack[6] == 0x74c

    requires s0.stack[10] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(1) == 0xa63;
      assert s1.Peek(4) == 0x830;
      assert s1.Peek(6) == 0x74c;
      assert s1.Peek(10) == 0x175;
      var s2 := Push1(s1, 0x60);
      var s3 := Push2(s2, 0x0321);
      var s4 := Push1(s3, 0x01);
      var s5 := Push1(s4, 0x01);
      var s6 := Push1(s5, 0xa0);
      var s7 := Shl(s6);
      var s8 := Sub(s7);
      var s9 := Dup4(s8);
      var s10 := And(s9);
      var s11 := Push1(s10, 0x14);
      //  Go to the next instruction at pc + 1
      ExecuteFromCFGNode_s196(s11, gas - 1)
  }

  /** Node 196
    * Segment Id for this node is: 150
    * Starting at 0xab7
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 6
    * Net Stack Effect: +5
    * Net Capacity Effect: -5
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s196(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xab7 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 16

    requires s0.stack[2] == 0x321

    requires s0.stack[5] == 0xa63

    requires s0.stack[8] == 0x830

    requires s0.stack[10] == 0x74c

    requires s0.stack[14] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0x321;
      assert s1.Peek(5) == 0xa63;
      assert s1.Peek(8) == 0x830;
      assert s1.Peek(10) == 0x74c;
      assert s1.Peek(14) == 0x175;
      var s2 := Push1(s1, 0x60);
      var s3 := Push1(s2, 0x00);
      var s4 := Push2(s3, 0x0ac6);
      var s5 := Dup4(s4);
      var s6 := Push1(s5, 0x02);
      var s7 := Push2(s6, 0x0eb8);
      var s8 := Jump(s7);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s197(s8, gas - 1)
  }

  /** Node 197
    * Segment Id for this node is: 220
    * Starting at 0xeb8
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s197(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xeb8 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 21

    requires s0.stack[2] == 0xac6

    requires s0.stack[7] == 0x321

    requires s0.stack[10] == 0xa63

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x74c

    requires s0.stack[19] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0xac6;
      assert s1.Peek(7) == 0x321;
      assert s1.Peek(10) == 0xa63;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x74c;
      assert s1.Peek(19) == 0x175;
      var s2 := Dup1(s1);
      var s3 := Dup3(s2);
      var s4 := Mul(s3);
      var s5 := Dup2(s4);
      var s6 := IsZero(s5);
      var s7 := Dup3(s6);
      var s8 := Dup3(s7);
      var s9 := Div(s8);
      var s10 := Dup5(s9);
      var s11 := Eq(s10);
      assert s11.Peek(5) == 0xac6;
      assert s11.Peek(10) == 0x321;
      assert s11.Peek(13) == 0xa63;
      assert s11.Peek(16) == 0x830;
      assert s11.Peek(18) == 0x74c;
      assert s11.Peek(22) == 0x175;
      var s12 := Or(s11);
      var s13 := Push2(s12, 0x0321);
      var s14 := JumpI(s13);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s13.stack[1] > 0 then
        ExecuteFromCFGNode_s200(s14, gas - 1)
      else
        ExecuteFromCFGNode_s198(s14, gas - 1)
  }

  /** Node 198
    * Segment Id for this node is: 221
    * Starting at 0xec8
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s198(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xec8 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 22

    requires s0.stack[3] == 0xac6

    requires s0.stack[8] == 0x321

    requires s0.stack[11] == 0xa63

    requires s0.stack[14] == 0x830

    requires s0.stack[16] == 0x74c

    requires s0.stack[20] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0321);
      assert s1.Peek(0) == 0x321;
      assert s1.Peek(4) == 0xac6;
      assert s1.Peek(9) == 0x321;
      assert s1.Peek(12) == 0xa63;
      assert s1.Peek(15) == 0x830;
      assert s1.Peek(17) == 0x74c;
      assert s1.Peek(21) == 0x175;
      var s2 := Push2(s1, 0x0d85);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s199(s3, gas - 1)
  }

  /** Node 199
    * Segment Id for this node is: 202
    * Starting at 0xd85
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s199(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xd85 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 23

    requires s0.stack[0] == 0x321

    requires s0.stack[4] == 0xac6

    requires s0.stack[9] == 0x321

    requires s0.stack[12] == 0xa63

    requires s0.stack[15] == 0x830

    requires s0.stack[17] == 0x74c

    requires s0.stack[21] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0x321;
      assert s1.Peek(4) == 0xac6;
      assert s1.Peek(9) == 0x321;
      assert s1.Peek(12) == 0xa63;
      assert s1.Peek(15) == 0x830;
      assert s1.Peek(17) == 0x74c;
      assert s1.Peek(21) == 0x175;
      var s2 := Push4(s1, 0x4e487b71);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x11);
      var s8 := Push1(s7, 0x04);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x24);
      var s11 := Push1(s10, 0x00);
      assert s11.Peek(2) == 0x321;
      assert s11.Peek(6) == 0xac6;
      assert s11.Peek(11) == 0x321;
      assert s11.Peek(14) == 0xa63;
      assert s11.Peek(17) == 0x830;
      assert s11.Peek(19) == 0x74c;
      assert s11.Peek(23) == 0x175;
      var s12 := Revert(s11);
      // Segment is terminal (Revert, Stop or Return)
      s12
  }

  /** Node 200
    * Segment Id for this node is: 79
    * Starting at 0x321
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 4
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -3
    * Net Capacity Effect: +3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s200(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x321 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 22

    requires s0.stack[3] == 0xac6

    requires s0.stack[8] == 0x321

    requires s0.stack[11] == 0xa63

    requires s0.stack[14] == 0x830

    requires s0.stack[16] == 0x74c

    requires s0.stack[20] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0xac6;
      assert s1.Peek(8) == 0x321;
      assert s1.Peek(11) == 0xa63;
      assert s1.Peek(14) == 0x830;
      assert s1.Peek(16) == 0x74c;
      assert s1.Peek(20) == 0x175;
      var s2 := Swap3(s1);
      var s3 := Swap2(s2);
      var s4 := Pop(s3);
      var s5 := Pop(s4);
      var s6 := Jump(s5);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s201(s6, gas - 1)
  }

  /** Node 201
    * Segment Id for this node is: 151
    * Starting at 0xac6
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +2
    * Net Capacity Effect: -2
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s201(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xac6 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 19

    requires s0.stack[5] == 0x321

    requires s0.stack[8] == 0xa63

    requires s0.stack[11] == 0x830

    requires s0.stack[13] == 0x74c

    requires s0.stack[17] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(5) == 0x321;
      assert s1.Peek(8) == 0xa63;
      assert s1.Peek(11) == 0x830;
      assert s1.Peek(13) == 0x74c;
      assert s1.Peek(17) == 0x175;
      var s2 := Push2(s1, 0x0ad1);
      var s3 := Swap1(s2);
      var s4 := Push1(s3, 0x02);
      var s5 := Push2(s4, 0x0ecf);
      var s6 := Jump(s5);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s202(s6, gas - 1)
  }

  /** Node 202
    * Segment Id for this node is: 222
    * Starting at 0xecf
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s202(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xecf as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 21

    requires s0.stack[2] == 0xad1

    requires s0.stack[7] == 0x321

    requires s0.stack[10] == 0xa63

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x74c

    requires s0.stack[19] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0xad1;
      assert s1.Peek(7) == 0x321;
      assert s1.Peek(10) == 0xa63;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x74c;
      assert s1.Peek(19) == 0x175;
      var s2 := Dup1(s1);
      var s3 := Dup3(s2);
      var s4 := Add(s3);
      var s5 := Dup1(s4);
      var s6 := Dup3(s5);
      var s7 := Gt(s6);
      var s8 := IsZero(s7);
      var s9 := Push2(s8, 0x0321);
      var s10 := JumpI(s9);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s9.stack[1] > 0 then
        ExecuteFromCFGNode_s205(s10, gas - 1)
      else
        ExecuteFromCFGNode_s203(s10, gas - 1)
  }

  /** Node 203
    * Segment Id for this node is: 223
    * Starting at 0xedb
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s203(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xedb as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 22

    requires s0.stack[3] == 0xad1

    requires s0.stack[8] == 0x321

    requires s0.stack[11] == 0xa63

    requires s0.stack[14] == 0x830

    requires s0.stack[16] == 0x74c

    requires s0.stack[20] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0321);
      assert s1.Peek(0) == 0x321;
      assert s1.Peek(4) == 0xad1;
      assert s1.Peek(9) == 0x321;
      assert s1.Peek(12) == 0xa63;
      assert s1.Peek(15) == 0x830;
      assert s1.Peek(17) == 0x74c;
      assert s1.Peek(21) == 0x175;
      var s2 := Push2(s1, 0x0d85);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s204(s3, gas - 1)
  }

  /** Node 204
    * Segment Id for this node is: 202
    * Starting at 0xd85
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s204(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xd85 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 23

    requires s0.stack[0] == 0x321

    requires s0.stack[4] == 0xad1

    requires s0.stack[9] == 0x321

    requires s0.stack[12] == 0xa63

    requires s0.stack[15] == 0x830

    requires s0.stack[17] == 0x74c

    requires s0.stack[21] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0x321;
      assert s1.Peek(4) == 0xad1;
      assert s1.Peek(9) == 0x321;
      assert s1.Peek(12) == 0xa63;
      assert s1.Peek(15) == 0x830;
      assert s1.Peek(17) == 0x74c;
      assert s1.Peek(21) == 0x175;
      var s2 := Push4(s1, 0x4e487b71);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x11);
      var s8 := Push1(s7, 0x04);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x24);
      var s11 := Push1(s10, 0x00);
      assert s11.Peek(2) == 0x321;
      assert s11.Peek(6) == 0xad1;
      assert s11.Peek(11) == 0x321;
      assert s11.Peek(14) == 0xa63;
      assert s11.Peek(17) == 0x830;
      assert s11.Peek(19) == 0x74c;
      assert s11.Peek(23) == 0x175;
      var s12 := Revert(s11);
      // Segment is terminal (Revert, Stop or Return)
      s12
  }

  /** Node 205
    * Segment Id for this node is: 79
    * Starting at 0x321
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 4
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -3
    * Net Capacity Effect: +3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s205(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x321 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 22

    requires s0.stack[3] == 0xad1

    requires s0.stack[8] == 0x321

    requires s0.stack[11] == 0xa63

    requires s0.stack[14] == 0x830

    requires s0.stack[16] == 0x74c

    requires s0.stack[20] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0xad1;
      assert s1.Peek(8) == 0x321;
      assert s1.Peek(11) == 0xa63;
      assert s1.Peek(14) == 0x830;
      assert s1.Peek(16) == 0x74c;
      assert s1.Peek(20) == 0x175;
      var s2 := Swap3(s1);
      var s3 := Swap2(s2);
      var s4 := Pop(s3);
      var s5 := Pop(s4);
      var s6 := Jump(s5);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s206(s6, gas - 1)
  }

  /** Node 206
    * Segment Id for this node is: 152
    * Starting at 0xad1
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s206(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xad1 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 19

    requires s0.stack[5] == 0x321

    requires s0.stack[8] == 0xa63

    requires s0.stack[11] == 0x830

    requires s0.stack[13] == 0x74c

    requires s0.stack[17] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(5) == 0x321;
      assert s1.Peek(8) == 0xa63;
      assert s1.Peek(11) == 0x830;
      assert s1.Peek(13) == 0x74c;
      assert s1.Peek(17) == 0x175;
      var s2 := Push8(s1, 0xffffffffffffffff);
      var s3 := Dup2(s2);
      var s4 := Gt(s3);
      var s5 := IsZero(s4);
      var s6 := Push2(s5, 0x0ae9);
      var s7 := JumpI(s6);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s6.stack[1] > 0 then
        ExecuteFromCFGNode_s209(s7, gas - 1)
      else
        ExecuteFromCFGNode_s207(s7, gas - 1)
  }

  /** Node 207
    * Segment Id for this node is: 153
    * Starting at 0xae2
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s207(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xae2 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 19

    requires s0.stack[5] == 0x321

    requires s0.stack[8] == 0xa63

    requires s0.stack[11] == 0x830

    requires s0.stack[13] == 0x74c

    requires s0.stack[17] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0ae9);
      assert s1.Peek(0) == 0xae9;
      assert s1.Peek(6) == 0x321;
      assert s1.Peek(9) == 0xa63;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x74c;
      assert s1.Peek(18) == 0x175;
      var s2 := Push2(s1, 0x0ee2);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s208(s3, gas - 1)
  }

  /** Node 208
    * Segment Id for this node is: 224
    * Starting at 0xee2
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s208(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xee2 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 20

    requires s0.stack[0] == 0xae9

    requires s0.stack[6] == 0x321

    requires s0.stack[9] == 0xa63

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x74c

    requires s0.stack[18] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0xae9;
      assert s1.Peek(6) == 0x321;
      assert s1.Peek(9) == 0xa63;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x74c;
      assert s1.Peek(18) == 0x175;
      var s2 := Push4(s1, 0x4e487b71);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x41);
      var s8 := Push1(s7, 0x04);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x24);
      var s11 := Push1(s10, 0x00);
      assert s11.Peek(2) == 0xae9;
      assert s11.Peek(8) == 0x321;
      assert s11.Peek(11) == 0xa63;
      assert s11.Peek(14) == 0x830;
      assert s11.Peek(16) == 0x74c;
      assert s11.Peek(20) == 0x175;
      var s12 := Revert(s11);
      // Segment is terminal (Revert, Stop or Return)
      s12
  }

  /** Node 209
    * Segment Id for this node is: 154
    * Starting at 0xae9
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s209(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xae9 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 19

    requires s0.stack[5] == 0x321

    requires s0.stack[8] == 0xa63

    requires s0.stack[11] == 0x830

    requires s0.stack[13] == 0x74c

    requires s0.stack[17] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(5) == 0x321;
      assert s1.Peek(8) == 0xa63;
      assert s1.Peek(11) == 0x830;
      assert s1.Peek(13) == 0x74c;
      assert s1.Peek(17) == 0x175;
      var s2 := Push1(s1, 0x40);
      var s3 := MLoad(s2);
      var s4 := Swap1(s3);
      var s5 := Dup1(s4);
      var s6 := Dup3(s5);
      var s7 := MStore(s6);
      var s8 := Dup1(s7);
      var s9 := Push1(s8, 0x1f);
      var s10 := Add(s9);
      var s11 := Push1(s10, 0x1f);
      assert s11.Peek(8) == 0x321;
      assert s11.Peek(11) == 0xa63;
      assert s11.Peek(14) == 0x830;
      assert s11.Peek(16) == 0x74c;
      assert s11.Peek(20) == 0x175;
      var s12 := Not(s11);
      var s13 := And(s12);
      var s14 := Push1(s13, 0x20);
      var s15 := Add(s14);
      var s16 := Dup3(s15);
      var s17 := Add(s16);
      var s18 := Push1(s17, 0x40);
      var s19 := MStore(s18);
      var s20 := Dup1(s19);
      var s21 := IsZero(s20);
      assert s21.Peek(7) == 0x321;
      assert s21.Peek(10) == 0xa63;
      assert s21.Peek(13) == 0x830;
      assert s21.Peek(15) == 0x74c;
      assert s21.Peek(19) == 0x175;
      var s22 := Push2(s21, 0x0b13);
      var s23 := JumpI(s22);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s22.stack[1] > 0 then
        ExecuteFromCFGNode_s211(s23, gas - 1)
      else
        ExecuteFromCFGNode_s210(s23, gas - 1)
  }

  /** Node 210
    * Segment Id for this node is: 155
    * Starting at 0xb07
    * Segment type is: CONT Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 5
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s210(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xb07 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 20

    requires s0.stack[6] == 0x321

    requires s0.stack[9] == 0xa63

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x74c

    requires s0.stack[18] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push1(s0, 0x20);
      assert s1.Peek(7) == 0x321;
      assert s1.Peek(10) == 0xa63;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x74c;
      assert s1.Peek(19) == 0x175;
      var s2 := Dup3(s1);
      var s3 := Add(s2);
      var s4 := Dup2(s3);
      var s5 := Dup1(s4);
      var s6 := CallDataSize(s5);
      var s7 := Dup4(s6);
      var s8 := CallDataCopy(s7);
      var s9 := Add(s8);
      var s10 := Swap1(s9);
      var s11 := Pop(s10);
      //  Go to the next instruction at pc + 1
      ExecuteFromCFGNode_s211(s11, gas - 1)
  }

  /** Node 211
    * Segment Id for this node is: 156
    * Starting at 0xb13
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 3
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s211(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xb13 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 20

    requires s0.stack[6] == 0x321

    requires s0.stack[9] == 0xa63

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x74c

    requires s0.stack[18] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(6) == 0x321;
      assert s1.Peek(9) == 0xa63;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x74c;
      assert s1.Peek(18) == 0x175;
      var s2 := Pop(s1);
      var s3 := Swap1(s2);
      var s4 := Pop(s3);
      var s5 := Push1(s4, 0x03);
      var s6 := Push1(s5, 0xfc);
      var s7 := Shl(s6);
      var s8 := Dup2(s7);
      var s9 := Push1(s8, 0x00);
      var s10 := Dup2(s9);
      var s11 := MLoad(s10);
      assert s11.Peek(8) == 0x321;
      assert s11.Peek(11) == 0xa63;
      assert s11.Peek(14) == 0x830;
      assert s11.Peek(16) == 0x74c;
      assert s11.Peek(20) == 0x175;
      var s12 := Dup2(s11);
      var s13 := Lt(s12);
      var s14 := Push2(s13, 0x0b2e);
      var s15 := JumpI(s14);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s14.stack[1] > 0 then
        ExecuteFromCFGNode_s214(s15, gas - 1)
      else
        ExecuteFromCFGNode_s212(s15, gas - 1)
  }

  /** Node 212
    * Segment Id for this node is: 157
    * Starting at 0xb27
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s212(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xb27 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 21

    requires s0.stack[7] == 0x321

    requires s0.stack[10] == 0xa63

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x74c

    requires s0.stack[19] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0b2e);
      assert s1.Peek(0) == 0xb2e;
      assert s1.Peek(8) == 0x321;
      assert s1.Peek(11) == 0xa63;
      assert s1.Peek(14) == 0x830;
      assert s1.Peek(16) == 0x74c;
      assert s1.Peek(20) == 0x175;
      var s2 := Push2(s1, 0x0ef8);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s213(s3, gas - 1)
  }

  /** Node 213
    * Segment Id for this node is: 225
    * Starting at 0xef8
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s213(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xef8 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 22

    requires s0.stack[0] == 0xb2e

    requires s0.stack[8] == 0x321

    requires s0.stack[11] == 0xa63

    requires s0.stack[14] == 0x830

    requires s0.stack[16] == 0x74c

    requires s0.stack[20] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0xb2e;
      assert s1.Peek(8) == 0x321;
      assert s1.Peek(11) == 0xa63;
      assert s1.Peek(14) == 0x830;
      assert s1.Peek(16) == 0x74c;
      assert s1.Peek(20) == 0x175;
      var s2 := Push4(s1, 0x4e487b71);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x32);
      var s8 := Push1(s7, 0x04);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x24);
      var s11 := Push1(s10, 0x00);
      assert s11.Peek(2) == 0xb2e;
      assert s11.Peek(10) == 0x321;
      assert s11.Peek(13) == 0xa63;
      assert s11.Peek(16) == 0x830;
      assert s11.Peek(18) == 0x74c;
      assert s11.Peek(22) == 0x175;
      var s12 := Revert(s11);
      // Segment is terminal (Revert, Stop or Return)
      s12
  }

  /** Node 214
    * Segment Id for this node is: 158
    * Starting at 0xb2e
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 4
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s214(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xb2e as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 21

    requires s0.stack[7] == 0x321

    requires s0.stack[10] == 0xa63

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x74c

    requires s0.stack[19] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(7) == 0x321;
      assert s1.Peek(10) == 0xa63;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x74c;
      assert s1.Peek(19) == 0x175;
      var s2 := Push1(s1, 0x20);
      var s3 := Add(s2);
      var s4 := Add(s3);
      var s5 := Swap1(s4);
      var s6 := Push1(s5, 0x01);
      var s7 := Push1(s6, 0x01);
      var s8 := Push1(s7, 0xf8);
      var s9 := Shl(s8);
      var s10 := Sub(s9);
      var s11 := Not(s10);
      assert s11.Peek(7) == 0x321;
      assert s11.Peek(10) == 0xa63;
      assert s11.Peek(13) == 0x830;
      assert s11.Peek(15) == 0x74c;
      assert s11.Peek(19) == 0x175;
      var s12 := And(s11);
      var s13 := Swap1(s12);
      var s14 := Dup2(s13);
      var s15 := Push1(s14, 0x00);
      var s16 := Byte(s15);
      var s17 := Swap1(s16);
      var s18 := MStore8(s17);
      var s19 := Pop(s18);
      var s20 := Push1(s19, 0x0f);
      var s21 := Push1(s20, 0xfb);
      assert s21.Peek(6) == 0x321;
      assert s21.Peek(9) == 0xa63;
      assert s21.Peek(12) == 0x830;
      assert s21.Peek(14) == 0x74c;
      assert s21.Peek(18) == 0x175;
      var s22 := Shl(s21);
      var s23 := Dup2(s22);
      var s24 := Push1(s23, 0x01);
      var s25 := Dup2(s24);
      var s26 := MLoad(s25);
      var s27 := Dup2(s26);
      var s28 := Lt(s27);
      var s29 := Push2(s28, 0x0b5d);
      var s30 := JumpI(s29);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s29.stack[1] > 0 then
        ExecuteFromCFGNode_s217(s30, gas - 1)
      else
        ExecuteFromCFGNode_s215(s30, gas - 1)
  }

  /** Node 215
    * Segment Id for this node is: 159
    * Starting at 0xb56
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s215(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xb56 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 21

    requires s0.stack[7] == 0x321

    requires s0.stack[10] == 0xa63

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x74c

    requires s0.stack[19] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0b5d);
      assert s1.Peek(0) == 0xb5d;
      assert s1.Peek(8) == 0x321;
      assert s1.Peek(11) == 0xa63;
      assert s1.Peek(14) == 0x830;
      assert s1.Peek(16) == 0x74c;
      assert s1.Peek(20) == 0x175;
      var s2 := Push2(s1, 0x0ef8);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s216(s3, gas - 1)
  }

  /** Node 216
    * Segment Id for this node is: 225
    * Starting at 0xef8
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s216(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xef8 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 22

    requires s0.stack[0] == 0xb5d

    requires s0.stack[8] == 0x321

    requires s0.stack[11] == 0xa63

    requires s0.stack[14] == 0x830

    requires s0.stack[16] == 0x74c

    requires s0.stack[20] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0xb5d;
      assert s1.Peek(8) == 0x321;
      assert s1.Peek(11) == 0xa63;
      assert s1.Peek(14) == 0x830;
      assert s1.Peek(16) == 0x74c;
      assert s1.Peek(20) == 0x175;
      var s2 := Push4(s1, 0x4e487b71);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x32);
      var s8 := Push1(s7, 0x04);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x24);
      var s11 := Push1(s10, 0x00);
      assert s11.Peek(2) == 0xb5d;
      assert s11.Peek(10) == 0x321;
      assert s11.Peek(13) == 0xa63;
      assert s11.Peek(16) == 0x830;
      assert s11.Peek(18) == 0x74c;
      assert s11.Peek(22) == 0x175;
      var s12 := Revert(s11);
      // Segment is terminal (Revert, Stop or Return)
      s12
  }

  /** Node 217
    * Segment Id for this node is: 160
    * Starting at 0xb5d
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 6
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s217(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xb5d as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 21

    requires s0.stack[7] == 0x321

    requires s0.stack[10] == 0xa63

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x74c

    requires s0.stack[19] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(7) == 0x321;
      assert s1.Peek(10) == 0xa63;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x74c;
      assert s1.Peek(19) == 0x175;
      var s2 := Push1(s1, 0x20);
      var s3 := Add(s2);
      var s4 := Add(s3);
      var s5 := Swap1(s4);
      var s6 := Push1(s5, 0x01);
      var s7 := Push1(s6, 0x01);
      var s8 := Push1(s7, 0xf8);
      var s9 := Shl(s8);
      var s10 := Sub(s9);
      var s11 := Not(s10);
      assert s11.Peek(7) == 0x321;
      assert s11.Peek(10) == 0xa63;
      assert s11.Peek(13) == 0x830;
      assert s11.Peek(15) == 0x74c;
      assert s11.Peek(19) == 0x175;
      var s12 := And(s11);
      var s13 := Swap1(s12);
      var s14 := Dup2(s13);
      var s15 := Push1(s14, 0x00);
      var s16 := Byte(s15);
      var s17 := Swap1(s16);
      var s18 := MStore8(s17);
      var s19 := Pop(s18);
      var s20 := Push1(s19, 0x00);
      var s21 := Push2(s20, 0x0b81);
      assert s21.Peek(0) == 0xb81;
      assert s21.Peek(6) == 0x321;
      assert s21.Peek(9) == 0xa63;
      assert s21.Peek(12) == 0x830;
      assert s21.Peek(14) == 0x74c;
      assert s21.Peek(18) == 0x175;
      var s22 := Dup5(s21);
      var s23 := Push1(s22, 0x02);
      var s24 := Push2(s23, 0x0eb8);
      var s25 := Jump(s24);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s218(s25, gas - 1)
  }

  /** Node 218
    * Segment Id for this node is: 220
    * Starting at 0xeb8
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s218(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xeb8 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 22

    requires s0.stack[2] == 0xb81

    requires s0.stack[8] == 0x321

    requires s0.stack[11] == 0xa63

    requires s0.stack[14] == 0x830

    requires s0.stack[16] == 0x74c

    requires s0.stack[20] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0xb81;
      assert s1.Peek(8) == 0x321;
      assert s1.Peek(11) == 0xa63;
      assert s1.Peek(14) == 0x830;
      assert s1.Peek(16) == 0x74c;
      assert s1.Peek(20) == 0x175;
      var s2 := Dup1(s1);
      var s3 := Dup3(s2);
      var s4 := Mul(s3);
      var s5 := Dup2(s4);
      var s6 := IsZero(s5);
      var s7 := Dup3(s6);
      var s8 := Dup3(s7);
      var s9 := Div(s8);
      var s10 := Dup5(s9);
      var s11 := Eq(s10);
      assert s11.Peek(5) == 0xb81;
      assert s11.Peek(11) == 0x321;
      assert s11.Peek(14) == 0xa63;
      assert s11.Peek(17) == 0x830;
      assert s11.Peek(19) == 0x74c;
      assert s11.Peek(23) == 0x175;
      var s12 := Or(s11);
      var s13 := Push2(s12, 0x0321);
      var s14 := JumpI(s13);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s13.stack[1] > 0 then
        ExecuteFromCFGNode_s221(s14, gas - 1)
      else
        ExecuteFromCFGNode_s219(s14, gas - 1)
  }

  /** Node 219
    * Segment Id for this node is: 221
    * Starting at 0xec8
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s219(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xec8 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 23

    requires s0.stack[3] == 0xb81

    requires s0.stack[9] == 0x321

    requires s0.stack[12] == 0xa63

    requires s0.stack[15] == 0x830

    requires s0.stack[17] == 0x74c

    requires s0.stack[21] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0321);
      assert s1.Peek(0) == 0x321;
      assert s1.Peek(4) == 0xb81;
      assert s1.Peek(10) == 0x321;
      assert s1.Peek(13) == 0xa63;
      assert s1.Peek(16) == 0x830;
      assert s1.Peek(18) == 0x74c;
      assert s1.Peek(22) == 0x175;
      var s2 := Push2(s1, 0x0d85);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s220(s3, gas - 1)
  }

  /** Node 220
    * Segment Id for this node is: 202
    * Starting at 0xd85
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s220(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xd85 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 24

    requires s0.stack[0] == 0x321

    requires s0.stack[4] == 0xb81

    requires s0.stack[10] == 0x321

    requires s0.stack[13] == 0xa63

    requires s0.stack[16] == 0x830

    requires s0.stack[18] == 0x74c

    requires s0.stack[22] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0x321;
      assert s1.Peek(4) == 0xb81;
      assert s1.Peek(10) == 0x321;
      assert s1.Peek(13) == 0xa63;
      assert s1.Peek(16) == 0x830;
      assert s1.Peek(18) == 0x74c;
      assert s1.Peek(22) == 0x175;
      var s2 := Push4(s1, 0x4e487b71);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x11);
      var s8 := Push1(s7, 0x04);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x24);
      var s11 := Push1(s10, 0x00);
      assert s11.Peek(2) == 0x321;
      assert s11.Peek(6) == 0xb81;
      assert s11.Peek(12) == 0x321;
      assert s11.Peek(15) == 0xa63;
      assert s11.Peek(18) == 0x830;
      assert s11.Peek(20) == 0x74c;
      assert s11.Peek(24) == 0x175;
      var s12 := Revert(s11);
      // Segment is terminal (Revert, Stop or Return)
      s12
  }

  /** Node 221
    * Segment Id for this node is: 79
    * Starting at 0x321
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 4
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -3
    * Net Capacity Effect: +3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s221(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x321 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 23

    requires s0.stack[3] == 0xb81

    requires s0.stack[9] == 0x321

    requires s0.stack[12] == 0xa63

    requires s0.stack[15] == 0x830

    requires s0.stack[17] == 0x74c

    requires s0.stack[21] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0xb81;
      assert s1.Peek(9) == 0x321;
      assert s1.Peek(12) == 0xa63;
      assert s1.Peek(15) == 0x830;
      assert s1.Peek(17) == 0x74c;
      assert s1.Peek(21) == 0x175;
      var s2 := Swap3(s1);
      var s3 := Swap2(s2);
      var s4 := Pop(s3);
      var s5 := Pop(s4);
      var s6 := Jump(s5);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s222(s6, gas - 1)
  }

  /** Node 222
    * Segment Id for this node is: 161
    * Starting at 0xb81
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +2
    * Net Capacity Effect: -2
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s222(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xb81 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 20

    requires s0.stack[6] == 0x321

    requires s0.stack[9] == 0xa63

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x74c

    requires s0.stack[18] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(6) == 0x321;
      assert s1.Peek(9) == 0xa63;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x74c;
      assert s1.Peek(18) == 0x175;
      var s2 := Push2(s1, 0x0b8c);
      var s3 := Swap1(s2);
      var s4 := Push1(s3, 0x01);
      var s5 := Push2(s4, 0x0ecf);
      var s6 := Jump(s5);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s223(s6, gas - 1)
  }

  /** Node 223
    * Segment Id for this node is: 222
    * Starting at 0xecf
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s223(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xecf as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 22

    requires s0.stack[2] == 0xb8c

    requires s0.stack[8] == 0x321

    requires s0.stack[11] == 0xa63

    requires s0.stack[14] == 0x830

    requires s0.stack[16] == 0x74c

    requires s0.stack[20] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0xb8c;
      assert s1.Peek(8) == 0x321;
      assert s1.Peek(11) == 0xa63;
      assert s1.Peek(14) == 0x830;
      assert s1.Peek(16) == 0x74c;
      assert s1.Peek(20) == 0x175;
      var s2 := Dup1(s1);
      var s3 := Dup3(s2);
      var s4 := Add(s3);
      var s5 := Dup1(s4);
      var s6 := Dup3(s5);
      var s7 := Gt(s6);
      var s8 := IsZero(s7);
      var s9 := Push2(s8, 0x0321);
      var s10 := JumpI(s9);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s9.stack[1] > 0 then
        ExecuteFromCFGNode_s226(s10, gas - 1)
      else
        ExecuteFromCFGNode_s224(s10, gas - 1)
  }

  /** Node 224
    * Segment Id for this node is: 223
    * Starting at 0xedb
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s224(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xedb as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 23

    requires s0.stack[3] == 0xb8c

    requires s0.stack[9] == 0x321

    requires s0.stack[12] == 0xa63

    requires s0.stack[15] == 0x830

    requires s0.stack[17] == 0x74c

    requires s0.stack[21] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0321);
      assert s1.Peek(0) == 0x321;
      assert s1.Peek(4) == 0xb8c;
      assert s1.Peek(10) == 0x321;
      assert s1.Peek(13) == 0xa63;
      assert s1.Peek(16) == 0x830;
      assert s1.Peek(18) == 0x74c;
      assert s1.Peek(22) == 0x175;
      var s2 := Push2(s1, 0x0d85);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s225(s3, gas - 1)
  }

  /** Node 225
    * Segment Id for this node is: 202
    * Starting at 0xd85
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s225(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xd85 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 24

    requires s0.stack[0] == 0x321

    requires s0.stack[4] == 0xb8c

    requires s0.stack[10] == 0x321

    requires s0.stack[13] == 0xa63

    requires s0.stack[16] == 0x830

    requires s0.stack[18] == 0x74c

    requires s0.stack[22] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0x321;
      assert s1.Peek(4) == 0xb8c;
      assert s1.Peek(10) == 0x321;
      assert s1.Peek(13) == 0xa63;
      assert s1.Peek(16) == 0x830;
      assert s1.Peek(18) == 0x74c;
      assert s1.Peek(22) == 0x175;
      var s2 := Push4(s1, 0x4e487b71);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x11);
      var s8 := Push1(s7, 0x04);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x24);
      var s11 := Push1(s10, 0x00);
      assert s11.Peek(2) == 0x321;
      assert s11.Peek(6) == 0xb8c;
      assert s11.Peek(12) == 0x321;
      assert s11.Peek(15) == 0xa63;
      assert s11.Peek(18) == 0x830;
      assert s11.Peek(20) == 0x74c;
      assert s11.Peek(24) == 0x175;
      var s12 := Revert(s11);
      // Segment is terminal (Revert, Stop or Return)
      s12
  }

  /** Node 226
    * Segment Id for this node is: 79
    * Starting at 0x321
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 4
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -3
    * Net Capacity Effect: +3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s226(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x321 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 23

    requires s0.stack[3] == 0xb8c

    requires s0.stack[9] == 0x321

    requires s0.stack[12] == 0xa63

    requires s0.stack[15] == 0x830

    requires s0.stack[17] == 0x74c

    requires s0.stack[21] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0xb8c;
      assert s1.Peek(9) == 0x321;
      assert s1.Peek(12) == 0xa63;
      assert s1.Peek(15) == 0x830;
      assert s1.Peek(17) == 0x74c;
      assert s1.Peek(21) == 0x175;
      var s2 := Swap3(s1);
      var s3 := Swap2(s2);
      var s4 := Pop(s3);
      var s5 := Pop(s4);
      var s6 := Jump(s5);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s227(s6, gas - 1)
  }

  /** Node 227
    * Segment Id for this node is: 162
    * Starting at 0xb8c
    * Segment type is: CONT Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -1
    * Net Capacity Effect: +1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s227(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xb8c as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 20

    requires s0.stack[6] == 0x321

    requires s0.stack[9] == 0xa63

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x74c

    requires s0.stack[18] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(6) == 0x321;
      assert s1.Peek(9) == 0xa63;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x74c;
      assert s1.Peek(18) == 0x175;
      var s2 := Swap1(s1);
      var s3 := Pop(s2);
      //  Go to the next instruction at pc + 1
      ExecuteFromCFGNode_s228(s3, gas - 1)
  }

  /** Node 228
    * Segment Id for this node is: 163
    * Starting at 0xb8f
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s228(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xb8f as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 19

    requires s0.stack[5] == 0x321

    requires s0.stack[8] == 0xa63

    requires s0.stack[11] == 0x830

    requires s0.stack[13] == 0x74c

    requires s0.stack[17] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(5) == 0x321;
      assert s1.Peek(8) == 0xa63;
      assert s1.Peek(11) == 0x830;
      assert s1.Peek(13) == 0x74c;
      assert s1.Peek(17) == 0x175;
      var s2 := Push1(s1, 0x01);
      var s3 := Dup2(s2);
      var s4 := Gt(s3);
      var s5 := IsZero(s4);
      var s6 := Push2(s5, 0x0c04);
      var s7 := JumpI(s6);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s6.stack[1] > 0 then
        ExecuteFromCFGNode_s241(s7, gas - 1)
      else
        ExecuteFromCFGNode_s229(s7, gas - 1)
  }

  /** Node 229
    * Segment Id for this node is: 164
    * Starting at 0xb99
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 5
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +2
    * Net Capacity Effect: -2
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s229(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xb99 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 19

    requires s0.stack[5] == 0x321

    requires s0.stack[8] == 0xa63

    requires s0.stack[11] == 0x830

    requires s0.stack[13] == 0x74c

    requires s0.stack[17] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := PushN(s0, 16, 0x181899199a1a9b1b9c1cb0b131b232b3);
      assert s1.Peek(6) == 0x321;
      assert s1.Peek(9) == 0xa63;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x74c;
      assert s1.Peek(18) == 0x175;
      var s2 := Push1(s1, 0x81);
      var s3 := Shl(s2);
      var s4 := Dup6(s3);
      var s5 := Push1(s4, 0x0f);
      var s6 := And(s5);
      var s7 := Push1(s6, 0x10);
      var s8 := Dup2(s7);
      var s9 := Lt(s8);
      var s10 := Push2(s9, 0x0bc0);
      var s11 := JumpI(s10);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s10.stack[1] > 0 then
        ExecuteFromCFGNode_s232(s11, gas - 1)
      else
        ExecuteFromCFGNode_s230(s11, gas - 1)
  }

  /** Node 230
    * Segment Id for this node is: 165
    * Starting at 0xbb9
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s230(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xbb9 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 21

    requires s0.stack[7] == 0x321

    requires s0.stack[10] == 0xa63

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x74c

    requires s0.stack[19] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0bc0);
      assert s1.Peek(0) == 0xbc0;
      assert s1.Peek(8) == 0x321;
      assert s1.Peek(11) == 0xa63;
      assert s1.Peek(14) == 0x830;
      assert s1.Peek(16) == 0x74c;
      assert s1.Peek(20) == 0x175;
      var s2 := Push2(s1, 0x0ef8);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s231(s3, gas - 1)
  }

  /** Node 231
    * Segment Id for this node is: 225
    * Starting at 0xef8
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s231(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xef8 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 22

    requires s0.stack[0] == 0xbc0

    requires s0.stack[8] == 0x321

    requires s0.stack[11] == 0xa63

    requires s0.stack[14] == 0x830

    requires s0.stack[16] == 0x74c

    requires s0.stack[20] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0xbc0;
      assert s1.Peek(8) == 0x321;
      assert s1.Peek(11) == 0xa63;
      assert s1.Peek(14) == 0x830;
      assert s1.Peek(16) == 0x74c;
      assert s1.Peek(20) == 0x175;
      var s2 := Push4(s1, 0x4e487b71);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x32);
      var s8 := Push1(s7, 0x04);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x24);
      var s11 := Push1(s10, 0x00);
      assert s11.Peek(2) == 0xbc0;
      assert s11.Peek(10) == 0x321;
      assert s11.Peek(13) == 0xa63;
      assert s11.Peek(16) == 0x830;
      assert s11.Peek(18) == 0x74c;
      assert s11.Peek(22) == 0x175;
      var s12 := Revert(s11);
      // Segment is terminal (Revert, Stop or Return)
      s12
  }

  /** Node 232
    * Segment Id for this node is: 166
    * Starting at 0xbc0
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 4
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s232(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xbc0 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 21

    requires s0.stack[7] == 0x321

    requires s0.stack[10] == 0xa63

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x74c

    requires s0.stack[19] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(7) == 0x321;
      assert s1.Peek(10) == 0xa63;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x74c;
      assert s1.Peek(19) == 0x175;
      var s2 := Byte(s1);
      var s3 := Push1(s2, 0xf8);
      var s4 := Shl(s3);
      var s5 := Dup3(s4);
      var s6 := Dup3(s5);
      var s7 := Dup2(s6);
      var s8 := MLoad(s7);
      var s9 := Dup2(s8);
      var s10 := Lt(s9);
      var s11 := Push2(s10, 0x0bd6);
      assert s11.Peek(0) == 0xbd6;
      assert s11.Peek(10) == 0x321;
      assert s11.Peek(13) == 0xa63;
      assert s11.Peek(16) == 0x830;
      assert s11.Peek(18) == 0x74c;
      assert s11.Peek(22) == 0x175;
      var s12 := JumpI(s11);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s11.stack[1] > 0 then
        ExecuteFromCFGNode_s235(s12, gas - 1)
      else
        ExecuteFromCFGNode_s233(s12, gas - 1)
  }

  /** Node 233
    * Segment Id for this node is: 167
    * Starting at 0xbcf
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s233(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xbcf as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 22

    requires s0.stack[8] == 0x321

    requires s0.stack[11] == 0xa63

    requires s0.stack[14] == 0x830

    requires s0.stack[16] == 0x74c

    requires s0.stack[20] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0bd6);
      assert s1.Peek(0) == 0xbd6;
      assert s1.Peek(9) == 0x321;
      assert s1.Peek(12) == 0xa63;
      assert s1.Peek(15) == 0x830;
      assert s1.Peek(17) == 0x74c;
      assert s1.Peek(21) == 0x175;
      var s2 := Push2(s1, 0x0ef8);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s234(s3, gas - 1)
  }

  /** Node 234
    * Segment Id for this node is: 225
    * Starting at 0xef8
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s234(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xef8 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 23

    requires s0.stack[0] == 0xbd6

    requires s0.stack[9] == 0x321

    requires s0.stack[12] == 0xa63

    requires s0.stack[15] == 0x830

    requires s0.stack[17] == 0x74c

    requires s0.stack[21] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0xbd6;
      assert s1.Peek(9) == 0x321;
      assert s1.Peek(12) == 0xa63;
      assert s1.Peek(15) == 0x830;
      assert s1.Peek(17) == 0x74c;
      assert s1.Peek(21) == 0x175;
      var s2 := Push4(s1, 0x4e487b71);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x32);
      var s8 := Push1(s7, 0x04);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x24);
      var s11 := Push1(s10, 0x00);
      assert s11.Peek(2) == 0xbd6;
      assert s11.Peek(11) == 0x321;
      assert s11.Peek(14) == 0xa63;
      assert s11.Peek(17) == 0x830;
      assert s11.Peek(19) == 0x74c;
      assert s11.Peek(23) == 0x175;
      var s12 := Revert(s11);
      // Segment is terminal (Revert, Stop or Return)
      s12
  }

  /** Node 235
    * Segment Id for this node is: 168
    * Starting at 0xbd6
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 8
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: -1
    * Net Capacity Effect: +1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s235(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xbd6 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 22

    requires s0.stack[8] == 0x321

    requires s0.stack[11] == 0xa63

    requires s0.stack[14] == 0x830

    requires s0.stack[16] == 0x74c

    requires s0.stack[20] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(8) == 0x321;
      assert s1.Peek(11) == 0xa63;
      assert s1.Peek(14) == 0x830;
      assert s1.Peek(16) == 0x74c;
      assert s1.Peek(20) == 0x175;
      var s2 := Push1(s1, 0x20);
      var s3 := Add(s2);
      var s4 := Add(s3);
      var s5 := Swap1(s4);
      var s6 := Push1(s5, 0x01);
      var s7 := Push1(s6, 0x01);
      var s8 := Push1(s7, 0xf8);
      var s9 := Shl(s8);
      var s10 := Sub(s9);
      var s11 := Not(s10);
      assert s11.Peek(8) == 0x321;
      assert s11.Peek(11) == 0xa63;
      assert s11.Peek(14) == 0x830;
      assert s11.Peek(16) == 0x74c;
      assert s11.Peek(20) == 0x175;
      var s12 := And(s11);
      var s13 := Swap1(s12);
      var s14 := Dup2(s13);
      var s15 := Push1(s14, 0x00);
      var s16 := Byte(s15);
      var s17 := Swap1(s16);
      var s18 := MStore8(s17);
      var s19 := Pop(s18);
      var s20 := Push1(s19, 0x04);
      var s21 := Swap5(s20);
      assert s21.Peek(6) == 0x321;
      assert s21.Peek(9) == 0xa63;
      assert s21.Peek(12) == 0x830;
      assert s21.Peek(14) == 0x74c;
      assert s21.Peek(18) == 0x175;
      var s22 := Swap1(s21);
      var s23 := Swap5(s22);
      var s24 := Shr(s23);
      var s25 := Swap4(s24);
      var s26 := Push2(s25, 0x0bfd);
      var s27 := Dup2(s26);
      var s28 := Push2(s27, 0x0f0e);
      var s29 := Jump(s28);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s236(s29, gas - 1)
  }

  /** Node 236
    * Segment Id for this node is: 226
    * Starting at 0xf0e
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s236(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xf0e as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 21

    requires s0.stack[1] == 0xbfd

    requires s0.stack[7] == 0x321

    requires s0.stack[10] == 0xa63

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x74c

    requires s0.stack[19] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(1) == 0xbfd;
      assert s1.Peek(7) == 0x321;
      assert s1.Peek(10) == 0xa63;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x74c;
      assert s1.Peek(19) == 0x175;
      var s2 := Push1(s1, 0x00);
      var s3 := Dup2(s2);
      var s4 := Push2(s3, 0x0f1d);
      var s5 := JumpI(s4);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s4.stack[1] > 0 then
        ExecuteFromCFGNode_s239(s5, gas - 1)
      else
        ExecuteFromCFGNode_s237(s5, gas - 1)
  }

  /** Node 237
    * Segment Id for this node is: 227
    * Starting at 0xf16
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s237(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xf16 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 22

    requires s0.stack[2] == 0xbfd

    requires s0.stack[8] == 0x321

    requires s0.stack[11] == 0xa63

    requires s0.stack[14] == 0x830

    requires s0.stack[16] == 0x74c

    requires s0.stack[20] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0f1d);
      assert s1.Peek(0) == 0xf1d;
      assert s1.Peek(3) == 0xbfd;
      assert s1.Peek(9) == 0x321;
      assert s1.Peek(12) == 0xa63;
      assert s1.Peek(15) == 0x830;
      assert s1.Peek(17) == 0x74c;
      assert s1.Peek(21) == 0x175;
      var s2 := Push2(s1, 0x0d85);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s238(s3, gas - 1)
  }

  /** Node 238
    * Segment Id for this node is: 202
    * Starting at 0xd85
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s238(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xd85 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 23

    requires s0.stack[0] == 0xf1d

    requires s0.stack[3] == 0xbfd

    requires s0.stack[9] == 0x321

    requires s0.stack[12] == 0xa63

    requires s0.stack[15] == 0x830

    requires s0.stack[17] == 0x74c

    requires s0.stack[21] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0xf1d;
      assert s1.Peek(3) == 0xbfd;
      assert s1.Peek(9) == 0x321;
      assert s1.Peek(12) == 0xa63;
      assert s1.Peek(15) == 0x830;
      assert s1.Peek(17) == 0x74c;
      assert s1.Peek(21) == 0x175;
      var s2 := Push4(s1, 0x4e487b71);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x11);
      var s8 := Push1(s7, 0x04);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x24);
      var s11 := Push1(s10, 0x00);
      assert s11.Peek(2) == 0xf1d;
      assert s11.Peek(5) == 0xbfd;
      assert s11.Peek(11) == 0x321;
      assert s11.Peek(14) == 0xa63;
      assert s11.Peek(17) == 0x830;
      assert s11.Peek(19) == 0x74c;
      assert s11.Peek(23) == 0x175;
      var s12 := Revert(s11);
      // Segment is terminal (Revert, Stop or Return)
      s12
  }

  /** Node 239
    * Segment Id for this node is: 228
    * Starting at 0xf1d
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 3
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -2
    * Net Capacity Effect: +2
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s239(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xf1d as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 22

    requires s0.stack[2] == 0xbfd

    requires s0.stack[8] == 0x321

    requires s0.stack[11] == 0xa63

    requires s0.stack[14] == 0x830

    requires s0.stack[16] == 0x74c

    requires s0.stack[20] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0xbfd;
      assert s1.Peek(8) == 0x321;
      assert s1.Peek(11) == 0xa63;
      assert s1.Peek(14) == 0x830;
      assert s1.Peek(16) == 0x74c;
      assert s1.Peek(20) == 0x175;
      var s2 := Pop(s1);
      var s3 := Push1(s2, 0x00);
      var s4 := Not(s3);
      var s5 := Add(s4);
      var s6 := Swap1(s5);
      var s7 := Jump(s6);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s240(s7, gas - 1)
  }

  /** Node 240
    * Segment Id for this node is: 169
    * Starting at 0xbfd
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -1
    * Net Capacity Effect: +1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s240(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xbfd as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 20

    requires s0.stack[6] == 0x321

    requires s0.stack[9] == 0xa63

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x74c

    requires s0.stack[18] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(6) == 0x321;
      assert s1.Peek(9) == 0xa63;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x74c;
      assert s1.Peek(18) == 0x175;
      var s2 := Swap1(s1);
      var s3 := Pop(s2);
      var s4 := Push2(s3, 0x0b8f);
      var s5 := Jump(s4);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s228(s5, gas - 1)
  }

  /** Node 241
    * Segment Id for this node is: 170
    * Starting at 0xc04
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 5
    * Minimum capacity for this segment to prevent stack overflow: 1
    * Net Stack Effect: -1
    * Net Capacity Effect: +1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s241(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xc04 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 19

    requires s0.stack[5] == 0x321

    requires s0.stack[8] == 0xa63

    requires s0.stack[11] == 0x830

    requires s0.stack[13] == 0x74c

    requires s0.stack[17] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(5) == 0x321;
      assert s1.Peek(8) == 0xa63;
      assert s1.Peek(11) == 0x830;
      assert s1.Peek(13) == 0x74c;
      assert s1.Peek(17) == 0x175;
      var s2 := Pop(s1);
      var s3 := Dup4(s2);
      var s4 := IsZero(s3);
      var s5 := Push2(s4, 0x0c53);
      var s6 := JumpI(s5);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s5.stack[1] > 0 then
        ExecuteFromCFGNode_s244(s6, gas - 1)
      else
        ExecuteFromCFGNode_s242(s6, gas - 1)
  }

  /** Node 242
    * Segment Id for this node is: 171
    * Starting at 0xc0c
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s242(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xc0c as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 18

    requires s0.stack[4] == 0x321

    requires s0.stack[7] == 0xa63

    requires s0.stack[10] == 0x830

    requires s0.stack[12] == 0x74c

    requires s0.stack[16] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push1(s0, 0x40);
      assert s1.Peek(5) == 0x321;
      assert s1.Peek(8) == 0xa63;
      assert s1.Peek(11) == 0x830;
      assert s1.Peek(13) == 0x74c;
      assert s1.Peek(17) == 0x175;
      var s2 := MLoad(s1);
      var s3 := Push3(s2, 0x461bcd);
      var s4 := Push1(s3, 0xe5);
      var s5 := Shl(s4);
      var s6 := Dup2(s5);
      var s7 := MStore(s6);
      var s8 := Push1(s7, 0x20);
      var s9 := Push1(s8, 0x04);
      var s10 := Dup3(s9);
      var s11 := Add(s10);
      assert s11.Peek(7) == 0x321;
      assert s11.Peek(10) == 0xa63;
      assert s11.Peek(13) == 0x830;
      assert s11.Peek(15) == 0x74c;
      assert s11.Peek(19) == 0x175;
      var s12 := Dup2(s11);
      var s13 := Swap1(s12);
      var s14 := MStore(s13);
      var s15 := Push1(s14, 0x24);
      var s16 := Dup3(s15);
      var s17 := Add(s16);
      var s18 := MStore(s17);
      var s19 := Push32(s18, 0x537472696e67733a20686578206c656e67746820696e73756666696369656e74);
      var s20 := Push1(s19, 0x44);
      var s21 := Dup3(s20);
      assert s21.Peek(8) == 0x321;
      assert s21.Peek(11) == 0xa63;
      assert s21.Peek(14) == 0x830;
      assert s21.Peek(16) == 0x74c;
      assert s21.Peek(20) == 0x175;
      var s22 := Add(s21);
      var s23 := MStore(s22);
      var s24 := Push1(s23, 0x64);
      var s25 := Add(s24);
      var s26 := Push2(s25, 0x0391);
      var s27 := Jump(s26);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s243(s27, gas - 1)
  }

  /** Node 243
    * Segment Id for this node is: 85
    * Starting at 0x391
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: -1
    * Net Capacity Effect: +1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s243(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x391 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 19

    requires s0.stack[5] == 0x321

    requires s0.stack[8] == 0xa63

    requires s0.stack[11] == 0x830

    requires s0.stack[13] == 0x74c

    requires s0.stack[17] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(5) == 0x321;
      assert s1.Peek(8) == 0xa63;
      assert s1.Peek(11) == 0x830;
      assert s1.Peek(13) == 0x74c;
      assert s1.Peek(17) == 0x175;
      var s2 := Push1(s1, 0x40);
      var s3 := MLoad(s2);
      var s4 := Dup1(s3);
      var s5 := Swap2(s4);
      var s6 := Sub(s5);
      var s7 := Swap1(s6);
      var s8 := Revert(s7);
      // Segment is terminal (Revert, Stop or Return)
      s8
  }

  /** Node 244
    * Segment Id for this node is: 172
    * Starting at 0xc53
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 5
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -4
    * Net Capacity Effect: +4
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s244(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xc53 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 18

    requires s0.stack[4] == 0x321

    requires s0.stack[7] == 0xa63

    requires s0.stack[10] == 0x830

    requires s0.stack[12] == 0x74c

    requires s0.stack[16] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(4) == 0x321;
      assert s1.Peek(7) == 0xa63;
      assert s1.Peek(10) == 0x830;
      assert s1.Peek(12) == 0x74c;
      assert s1.Peek(16) == 0x175;
      var s2 := Swap4(s1);
      var s3 := Swap3(s2);
      var s4 := Pop(s3);
      var s5 := Pop(s4);
      var s6 := Pop(s5);
      var s7 := Jump(s6);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s245(s7, gas - 1)
  }

  /** Node 245
    * Segment Id for this node is: 79
    * Starting at 0x321
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 4
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -3
    * Net Capacity Effect: +3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s245(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x321 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 14

    requires s0.stack[3] == 0xa63

    requires s0.stack[6] == 0x830

    requires s0.stack[8] == 0x74c

    requires s0.stack[12] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0xa63;
      assert s1.Peek(6) == 0x830;
      assert s1.Peek(8) == 0x74c;
      assert s1.Peek(12) == 0x175;
      var s2 := Swap3(s1);
      var s3 := Swap2(s2);
      var s4 := Pop(s3);
      var s5 := Pop(s4);
      var s6 := Jump(s5);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s246(s6, gas - 1)
  }

  /** Node 246
    * Segment Id for this node is: 146
    * Starting at 0xa63
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 3
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +3
    * Net Capacity Effect: -3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s246(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xa63 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 11

    requires s0.stack[3] == 0x830

    requires s0.stack[5] == 0x74c

    requires s0.stack[9] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0x830;
      assert s1.Peek(5) == 0x74c;
      assert s1.Peek(9) == 0x175;
      var s2 := Push2(s1, 0x0a6e);
      var s3 := Dup4(s2);
      var s4 := Push1(s3, 0x20);
      var s5 := Push2(s4, 0x0ab7);
      var s6 := Jump(s5);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s247(s6, gas - 1)
  }

  /** Node 247
    * Segment Id for this node is: 150
    * Starting at 0xab7
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 6
    * Net Stack Effect: +5
    * Net Capacity Effect: -5
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s247(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xab7 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 14

    requires s0.stack[2] == 0xa6e

    requires s0.stack[6] == 0x830

    requires s0.stack[8] == 0x74c

    requires s0.stack[12] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0xa6e;
      assert s1.Peek(6) == 0x830;
      assert s1.Peek(8) == 0x74c;
      assert s1.Peek(12) == 0x175;
      var s2 := Push1(s1, 0x60);
      var s3 := Push1(s2, 0x00);
      var s4 := Push2(s3, 0x0ac6);
      var s5 := Dup4(s4);
      var s6 := Push1(s5, 0x02);
      var s7 := Push2(s6, 0x0eb8);
      var s8 := Jump(s7);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s248(s8, gas - 1)
  }

  /** Node 248
    * Segment Id for this node is: 220
    * Starting at 0xeb8
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s248(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xeb8 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 19

    requires s0.stack[2] == 0xac6

    requires s0.stack[7] == 0xa6e

    requires s0.stack[11] == 0x830

    requires s0.stack[13] == 0x74c

    requires s0.stack[17] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0xac6;
      assert s1.Peek(7) == 0xa6e;
      assert s1.Peek(11) == 0x830;
      assert s1.Peek(13) == 0x74c;
      assert s1.Peek(17) == 0x175;
      var s2 := Dup1(s1);
      var s3 := Dup3(s2);
      var s4 := Mul(s3);
      var s5 := Dup2(s4);
      var s6 := IsZero(s5);
      var s7 := Dup3(s6);
      var s8 := Dup3(s7);
      var s9 := Div(s8);
      var s10 := Dup5(s9);
      var s11 := Eq(s10);
      assert s11.Peek(5) == 0xac6;
      assert s11.Peek(10) == 0xa6e;
      assert s11.Peek(14) == 0x830;
      assert s11.Peek(16) == 0x74c;
      assert s11.Peek(20) == 0x175;
      var s12 := Or(s11);
      var s13 := Push2(s12, 0x0321);
      var s14 := JumpI(s13);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s13.stack[1] > 0 then
        ExecuteFromCFGNode_s251(s14, gas - 1)
      else
        ExecuteFromCFGNode_s249(s14, gas - 1)
  }

  /** Node 249
    * Segment Id for this node is: 221
    * Starting at 0xec8
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s249(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xec8 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 20

    requires s0.stack[3] == 0xac6

    requires s0.stack[8] == 0xa6e

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x74c

    requires s0.stack[18] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0321);
      assert s1.Peek(0) == 0x321;
      assert s1.Peek(4) == 0xac6;
      assert s1.Peek(9) == 0xa6e;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x74c;
      assert s1.Peek(19) == 0x175;
      var s2 := Push2(s1, 0x0d85);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s250(s3, gas - 1)
  }

  /** Node 250
    * Segment Id for this node is: 202
    * Starting at 0xd85
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s250(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xd85 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 21

    requires s0.stack[0] == 0x321

    requires s0.stack[4] == 0xac6

    requires s0.stack[9] == 0xa6e

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x74c

    requires s0.stack[19] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0x321;
      assert s1.Peek(4) == 0xac6;
      assert s1.Peek(9) == 0xa6e;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x74c;
      assert s1.Peek(19) == 0x175;
      var s2 := Push4(s1, 0x4e487b71);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x11);
      var s8 := Push1(s7, 0x04);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x24);
      var s11 := Push1(s10, 0x00);
      assert s11.Peek(2) == 0x321;
      assert s11.Peek(6) == 0xac6;
      assert s11.Peek(11) == 0xa6e;
      assert s11.Peek(15) == 0x830;
      assert s11.Peek(17) == 0x74c;
      assert s11.Peek(21) == 0x175;
      var s12 := Revert(s11);
      // Segment is terminal (Revert, Stop or Return)
      s12
  }

  /** Node 251
    * Segment Id for this node is: 79
    * Starting at 0x321
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 4
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -3
    * Net Capacity Effect: +3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s251(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x321 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 20

    requires s0.stack[3] == 0xac6

    requires s0.stack[8] == 0xa6e

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x74c

    requires s0.stack[18] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0xac6;
      assert s1.Peek(8) == 0xa6e;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x74c;
      assert s1.Peek(18) == 0x175;
      var s2 := Swap3(s1);
      var s3 := Swap2(s2);
      var s4 := Pop(s3);
      var s5 := Pop(s4);
      var s6 := Jump(s5);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s252(s6, gas - 1)
  }

  /** Node 252
    * Segment Id for this node is: 151
    * Starting at 0xac6
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +2
    * Net Capacity Effect: -2
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s252(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xac6 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 17

    requires s0.stack[5] == 0xa6e

    requires s0.stack[9] == 0x830

    requires s0.stack[11] == 0x74c

    requires s0.stack[15] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(5) == 0xa6e;
      assert s1.Peek(9) == 0x830;
      assert s1.Peek(11) == 0x74c;
      assert s1.Peek(15) == 0x175;
      var s2 := Push2(s1, 0x0ad1);
      var s3 := Swap1(s2);
      var s4 := Push1(s3, 0x02);
      var s5 := Push2(s4, 0x0ecf);
      var s6 := Jump(s5);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s253(s6, gas - 1)
  }

  /** Node 253
    * Segment Id for this node is: 222
    * Starting at 0xecf
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s253(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xecf as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 19

    requires s0.stack[2] == 0xad1

    requires s0.stack[7] == 0xa6e

    requires s0.stack[11] == 0x830

    requires s0.stack[13] == 0x74c

    requires s0.stack[17] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0xad1;
      assert s1.Peek(7) == 0xa6e;
      assert s1.Peek(11) == 0x830;
      assert s1.Peek(13) == 0x74c;
      assert s1.Peek(17) == 0x175;
      var s2 := Dup1(s1);
      var s3 := Dup3(s2);
      var s4 := Add(s3);
      var s5 := Dup1(s4);
      var s6 := Dup3(s5);
      var s7 := Gt(s6);
      var s8 := IsZero(s7);
      var s9 := Push2(s8, 0x0321);
      var s10 := JumpI(s9);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s9.stack[1] > 0 then
        ExecuteFromCFGNode_s256(s10, gas - 1)
      else
        ExecuteFromCFGNode_s254(s10, gas - 1)
  }

  /** Node 254
    * Segment Id for this node is: 223
    * Starting at 0xedb
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s254(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xedb as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 20

    requires s0.stack[3] == 0xad1

    requires s0.stack[8] == 0xa6e

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x74c

    requires s0.stack[18] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0321);
      assert s1.Peek(0) == 0x321;
      assert s1.Peek(4) == 0xad1;
      assert s1.Peek(9) == 0xa6e;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x74c;
      assert s1.Peek(19) == 0x175;
      var s2 := Push2(s1, 0x0d85);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s255(s3, gas - 1)
  }

  /** Node 255
    * Segment Id for this node is: 202
    * Starting at 0xd85
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s255(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xd85 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 21

    requires s0.stack[0] == 0x321

    requires s0.stack[4] == 0xad1

    requires s0.stack[9] == 0xa6e

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x74c

    requires s0.stack[19] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0x321;
      assert s1.Peek(4) == 0xad1;
      assert s1.Peek(9) == 0xa6e;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x74c;
      assert s1.Peek(19) == 0x175;
      var s2 := Push4(s1, 0x4e487b71);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x11);
      var s8 := Push1(s7, 0x04);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x24);
      var s11 := Push1(s10, 0x00);
      assert s11.Peek(2) == 0x321;
      assert s11.Peek(6) == 0xad1;
      assert s11.Peek(11) == 0xa6e;
      assert s11.Peek(15) == 0x830;
      assert s11.Peek(17) == 0x74c;
      assert s11.Peek(21) == 0x175;
      var s12 := Revert(s11);
      // Segment is terminal (Revert, Stop or Return)
      s12
  }

  /** Node 256
    * Segment Id for this node is: 79
    * Starting at 0x321
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 4
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -3
    * Net Capacity Effect: +3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s256(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x321 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 20

    requires s0.stack[3] == 0xad1

    requires s0.stack[8] == 0xa6e

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x74c

    requires s0.stack[18] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0xad1;
      assert s1.Peek(8) == 0xa6e;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x74c;
      assert s1.Peek(18) == 0x175;
      var s2 := Swap3(s1);
      var s3 := Swap2(s2);
      var s4 := Pop(s3);
      var s5 := Pop(s4);
      var s6 := Jump(s5);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s257(s6, gas - 1)
  }

  /** Node 257
    * Segment Id for this node is: 152
    * Starting at 0xad1
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s257(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xad1 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 17

    requires s0.stack[5] == 0xa6e

    requires s0.stack[9] == 0x830

    requires s0.stack[11] == 0x74c

    requires s0.stack[15] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(5) == 0xa6e;
      assert s1.Peek(9) == 0x830;
      assert s1.Peek(11) == 0x74c;
      assert s1.Peek(15) == 0x175;
      var s2 := Push8(s1, 0xffffffffffffffff);
      var s3 := Dup2(s2);
      var s4 := Gt(s3);
      var s5 := IsZero(s4);
      var s6 := Push2(s5, 0x0ae9);
      var s7 := JumpI(s6);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s6.stack[1] > 0 then
        ExecuteFromCFGNode_s260(s7, gas - 1)
      else
        ExecuteFromCFGNode_s258(s7, gas - 1)
  }

  /** Node 258
    * Segment Id for this node is: 153
    * Starting at 0xae2
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s258(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xae2 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 17

    requires s0.stack[5] == 0xa6e

    requires s0.stack[9] == 0x830

    requires s0.stack[11] == 0x74c

    requires s0.stack[15] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0ae9);
      assert s1.Peek(0) == 0xae9;
      assert s1.Peek(6) == 0xa6e;
      assert s1.Peek(10) == 0x830;
      assert s1.Peek(12) == 0x74c;
      assert s1.Peek(16) == 0x175;
      var s2 := Push2(s1, 0x0ee2);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s259(s3, gas - 1)
  }

  /** Node 259
    * Segment Id for this node is: 224
    * Starting at 0xee2
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s259(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xee2 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 18

    requires s0.stack[0] == 0xae9

    requires s0.stack[6] == 0xa6e

    requires s0.stack[10] == 0x830

    requires s0.stack[12] == 0x74c

    requires s0.stack[16] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0xae9;
      assert s1.Peek(6) == 0xa6e;
      assert s1.Peek(10) == 0x830;
      assert s1.Peek(12) == 0x74c;
      assert s1.Peek(16) == 0x175;
      var s2 := Push4(s1, 0x4e487b71);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x41);
      var s8 := Push1(s7, 0x04);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x24);
      var s11 := Push1(s10, 0x00);
      assert s11.Peek(2) == 0xae9;
      assert s11.Peek(8) == 0xa6e;
      assert s11.Peek(12) == 0x830;
      assert s11.Peek(14) == 0x74c;
      assert s11.Peek(18) == 0x175;
      var s12 := Revert(s11);
      // Segment is terminal (Revert, Stop or Return)
      s12
  }

  /** Node 260
    * Segment Id for this node is: 154
    * Starting at 0xae9
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s260(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xae9 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 17

    requires s0.stack[5] == 0xa6e

    requires s0.stack[9] == 0x830

    requires s0.stack[11] == 0x74c

    requires s0.stack[15] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(5) == 0xa6e;
      assert s1.Peek(9) == 0x830;
      assert s1.Peek(11) == 0x74c;
      assert s1.Peek(15) == 0x175;
      var s2 := Push1(s1, 0x40);
      var s3 := MLoad(s2);
      var s4 := Swap1(s3);
      var s5 := Dup1(s4);
      var s6 := Dup3(s5);
      var s7 := MStore(s6);
      var s8 := Dup1(s7);
      var s9 := Push1(s8, 0x1f);
      var s10 := Add(s9);
      var s11 := Push1(s10, 0x1f);
      assert s11.Peek(8) == 0xa6e;
      assert s11.Peek(12) == 0x830;
      assert s11.Peek(14) == 0x74c;
      assert s11.Peek(18) == 0x175;
      var s12 := Not(s11);
      var s13 := And(s12);
      var s14 := Push1(s13, 0x20);
      var s15 := Add(s14);
      var s16 := Dup3(s15);
      var s17 := Add(s16);
      var s18 := Push1(s17, 0x40);
      var s19 := MStore(s18);
      var s20 := Dup1(s19);
      var s21 := IsZero(s20);
      assert s21.Peek(7) == 0xa6e;
      assert s21.Peek(11) == 0x830;
      assert s21.Peek(13) == 0x74c;
      assert s21.Peek(17) == 0x175;
      var s22 := Push2(s21, 0x0b13);
      var s23 := JumpI(s22);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s22.stack[1] > 0 then
        ExecuteFromCFGNode_s262(s23, gas - 1)
      else
        ExecuteFromCFGNode_s261(s23, gas - 1)
  }

  /** Node 261
    * Segment Id for this node is: 155
    * Starting at 0xb07
    * Segment type is: CONT Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 5
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s261(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xb07 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 18

    requires s0.stack[6] == 0xa6e

    requires s0.stack[10] == 0x830

    requires s0.stack[12] == 0x74c

    requires s0.stack[16] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push1(s0, 0x20);
      assert s1.Peek(7) == 0xa6e;
      assert s1.Peek(11) == 0x830;
      assert s1.Peek(13) == 0x74c;
      assert s1.Peek(17) == 0x175;
      var s2 := Dup3(s1);
      var s3 := Add(s2);
      var s4 := Dup2(s3);
      var s5 := Dup1(s4);
      var s6 := CallDataSize(s5);
      var s7 := Dup4(s6);
      var s8 := CallDataCopy(s7);
      var s9 := Add(s8);
      var s10 := Swap1(s9);
      var s11 := Pop(s10);
      //  Go to the next instruction at pc + 1
      ExecuteFromCFGNode_s262(s11, gas - 1)
  }

  /** Node 262
    * Segment Id for this node is: 156
    * Starting at 0xb13
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 3
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s262(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xb13 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 18

    requires s0.stack[6] == 0xa6e

    requires s0.stack[10] == 0x830

    requires s0.stack[12] == 0x74c

    requires s0.stack[16] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(6) == 0xa6e;
      assert s1.Peek(10) == 0x830;
      assert s1.Peek(12) == 0x74c;
      assert s1.Peek(16) == 0x175;
      var s2 := Pop(s1);
      var s3 := Swap1(s2);
      var s4 := Pop(s3);
      var s5 := Push1(s4, 0x03);
      var s6 := Push1(s5, 0xfc);
      var s7 := Shl(s6);
      var s8 := Dup2(s7);
      var s9 := Push1(s8, 0x00);
      var s10 := Dup2(s9);
      var s11 := MLoad(s10);
      assert s11.Peek(8) == 0xa6e;
      assert s11.Peek(12) == 0x830;
      assert s11.Peek(14) == 0x74c;
      assert s11.Peek(18) == 0x175;
      var s12 := Dup2(s11);
      var s13 := Lt(s12);
      var s14 := Push2(s13, 0x0b2e);
      var s15 := JumpI(s14);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s14.stack[1] > 0 then
        ExecuteFromCFGNode_s265(s15, gas - 1)
      else
        ExecuteFromCFGNode_s263(s15, gas - 1)
  }

  /** Node 263
    * Segment Id for this node is: 157
    * Starting at 0xb27
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s263(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xb27 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 19

    requires s0.stack[7] == 0xa6e

    requires s0.stack[11] == 0x830

    requires s0.stack[13] == 0x74c

    requires s0.stack[17] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0b2e);
      assert s1.Peek(0) == 0xb2e;
      assert s1.Peek(8) == 0xa6e;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x74c;
      assert s1.Peek(18) == 0x175;
      var s2 := Push2(s1, 0x0ef8);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s264(s3, gas - 1)
  }

  /** Node 264
    * Segment Id for this node is: 225
    * Starting at 0xef8
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s264(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xef8 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 20

    requires s0.stack[0] == 0xb2e

    requires s0.stack[8] == 0xa6e

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x74c

    requires s0.stack[18] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0xb2e;
      assert s1.Peek(8) == 0xa6e;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x74c;
      assert s1.Peek(18) == 0x175;
      var s2 := Push4(s1, 0x4e487b71);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x32);
      var s8 := Push1(s7, 0x04);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x24);
      var s11 := Push1(s10, 0x00);
      assert s11.Peek(2) == 0xb2e;
      assert s11.Peek(10) == 0xa6e;
      assert s11.Peek(14) == 0x830;
      assert s11.Peek(16) == 0x74c;
      assert s11.Peek(20) == 0x175;
      var s12 := Revert(s11);
      // Segment is terminal (Revert, Stop or Return)
      s12
  }

  /** Node 265
    * Segment Id for this node is: 158
    * Starting at 0xb2e
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 4
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s265(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xb2e as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 19

    requires s0.stack[7] == 0xa6e

    requires s0.stack[11] == 0x830

    requires s0.stack[13] == 0x74c

    requires s0.stack[17] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(7) == 0xa6e;
      assert s1.Peek(11) == 0x830;
      assert s1.Peek(13) == 0x74c;
      assert s1.Peek(17) == 0x175;
      var s2 := Push1(s1, 0x20);
      var s3 := Add(s2);
      var s4 := Add(s3);
      var s5 := Swap1(s4);
      var s6 := Push1(s5, 0x01);
      var s7 := Push1(s6, 0x01);
      var s8 := Push1(s7, 0xf8);
      var s9 := Shl(s8);
      var s10 := Sub(s9);
      var s11 := Not(s10);
      assert s11.Peek(7) == 0xa6e;
      assert s11.Peek(11) == 0x830;
      assert s11.Peek(13) == 0x74c;
      assert s11.Peek(17) == 0x175;
      var s12 := And(s11);
      var s13 := Swap1(s12);
      var s14 := Dup2(s13);
      var s15 := Push1(s14, 0x00);
      var s16 := Byte(s15);
      var s17 := Swap1(s16);
      var s18 := MStore8(s17);
      var s19 := Pop(s18);
      var s20 := Push1(s19, 0x0f);
      var s21 := Push1(s20, 0xfb);
      assert s21.Peek(6) == 0xa6e;
      assert s21.Peek(10) == 0x830;
      assert s21.Peek(12) == 0x74c;
      assert s21.Peek(16) == 0x175;
      var s22 := Shl(s21);
      var s23 := Dup2(s22);
      var s24 := Push1(s23, 0x01);
      var s25 := Dup2(s24);
      var s26 := MLoad(s25);
      var s27 := Dup2(s26);
      var s28 := Lt(s27);
      var s29 := Push2(s28, 0x0b5d);
      var s30 := JumpI(s29);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s29.stack[1] > 0 then
        ExecuteFromCFGNode_s268(s30, gas - 1)
      else
        ExecuteFromCFGNode_s266(s30, gas - 1)
  }

  /** Node 266
    * Segment Id for this node is: 159
    * Starting at 0xb56
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s266(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xb56 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 19

    requires s0.stack[7] == 0xa6e

    requires s0.stack[11] == 0x830

    requires s0.stack[13] == 0x74c

    requires s0.stack[17] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0b5d);
      assert s1.Peek(0) == 0xb5d;
      assert s1.Peek(8) == 0xa6e;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x74c;
      assert s1.Peek(18) == 0x175;
      var s2 := Push2(s1, 0x0ef8);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s267(s3, gas - 1)
  }

  /** Node 267
    * Segment Id for this node is: 225
    * Starting at 0xef8
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s267(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xef8 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 20

    requires s0.stack[0] == 0xb5d

    requires s0.stack[8] == 0xa6e

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x74c

    requires s0.stack[18] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0xb5d;
      assert s1.Peek(8) == 0xa6e;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x74c;
      assert s1.Peek(18) == 0x175;
      var s2 := Push4(s1, 0x4e487b71);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x32);
      var s8 := Push1(s7, 0x04);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x24);
      var s11 := Push1(s10, 0x00);
      assert s11.Peek(2) == 0xb5d;
      assert s11.Peek(10) == 0xa6e;
      assert s11.Peek(14) == 0x830;
      assert s11.Peek(16) == 0x74c;
      assert s11.Peek(20) == 0x175;
      var s12 := Revert(s11);
      // Segment is terminal (Revert, Stop or Return)
      s12
  }

  /** Node 268
    * Segment Id for this node is: 160
    * Starting at 0xb5d
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 6
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s268(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xb5d as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 19

    requires s0.stack[7] == 0xa6e

    requires s0.stack[11] == 0x830

    requires s0.stack[13] == 0x74c

    requires s0.stack[17] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(7) == 0xa6e;
      assert s1.Peek(11) == 0x830;
      assert s1.Peek(13) == 0x74c;
      assert s1.Peek(17) == 0x175;
      var s2 := Push1(s1, 0x20);
      var s3 := Add(s2);
      var s4 := Add(s3);
      var s5 := Swap1(s4);
      var s6 := Push1(s5, 0x01);
      var s7 := Push1(s6, 0x01);
      var s8 := Push1(s7, 0xf8);
      var s9 := Shl(s8);
      var s10 := Sub(s9);
      var s11 := Not(s10);
      assert s11.Peek(7) == 0xa6e;
      assert s11.Peek(11) == 0x830;
      assert s11.Peek(13) == 0x74c;
      assert s11.Peek(17) == 0x175;
      var s12 := And(s11);
      var s13 := Swap1(s12);
      var s14 := Dup2(s13);
      var s15 := Push1(s14, 0x00);
      var s16 := Byte(s15);
      var s17 := Swap1(s16);
      var s18 := MStore8(s17);
      var s19 := Pop(s18);
      var s20 := Push1(s19, 0x00);
      var s21 := Push2(s20, 0x0b81);
      assert s21.Peek(0) == 0xb81;
      assert s21.Peek(6) == 0xa6e;
      assert s21.Peek(10) == 0x830;
      assert s21.Peek(12) == 0x74c;
      assert s21.Peek(16) == 0x175;
      var s22 := Dup5(s21);
      var s23 := Push1(s22, 0x02);
      var s24 := Push2(s23, 0x0eb8);
      var s25 := Jump(s24);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s269(s25, gas - 1)
  }

  /** Node 269
    * Segment Id for this node is: 220
    * Starting at 0xeb8
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s269(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xeb8 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 20

    requires s0.stack[2] == 0xb81

    requires s0.stack[8] == 0xa6e

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x74c

    requires s0.stack[18] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0xb81;
      assert s1.Peek(8) == 0xa6e;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x74c;
      assert s1.Peek(18) == 0x175;
      var s2 := Dup1(s1);
      var s3 := Dup3(s2);
      var s4 := Mul(s3);
      var s5 := Dup2(s4);
      var s6 := IsZero(s5);
      var s7 := Dup3(s6);
      var s8 := Dup3(s7);
      var s9 := Div(s8);
      var s10 := Dup5(s9);
      var s11 := Eq(s10);
      assert s11.Peek(5) == 0xb81;
      assert s11.Peek(11) == 0xa6e;
      assert s11.Peek(15) == 0x830;
      assert s11.Peek(17) == 0x74c;
      assert s11.Peek(21) == 0x175;
      var s12 := Or(s11);
      var s13 := Push2(s12, 0x0321);
      var s14 := JumpI(s13);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s13.stack[1] > 0 then
        ExecuteFromCFGNode_s272(s14, gas - 1)
      else
        ExecuteFromCFGNode_s270(s14, gas - 1)
  }

  /** Node 270
    * Segment Id for this node is: 221
    * Starting at 0xec8
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s270(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xec8 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 21

    requires s0.stack[3] == 0xb81

    requires s0.stack[9] == 0xa6e

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x74c

    requires s0.stack[19] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0321);
      assert s1.Peek(0) == 0x321;
      assert s1.Peek(4) == 0xb81;
      assert s1.Peek(10) == 0xa6e;
      assert s1.Peek(14) == 0x830;
      assert s1.Peek(16) == 0x74c;
      assert s1.Peek(20) == 0x175;
      var s2 := Push2(s1, 0x0d85);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s271(s3, gas - 1)
  }

  /** Node 271
    * Segment Id for this node is: 202
    * Starting at 0xd85
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s271(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xd85 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 22

    requires s0.stack[0] == 0x321

    requires s0.stack[4] == 0xb81

    requires s0.stack[10] == 0xa6e

    requires s0.stack[14] == 0x830

    requires s0.stack[16] == 0x74c

    requires s0.stack[20] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0x321;
      assert s1.Peek(4) == 0xb81;
      assert s1.Peek(10) == 0xa6e;
      assert s1.Peek(14) == 0x830;
      assert s1.Peek(16) == 0x74c;
      assert s1.Peek(20) == 0x175;
      var s2 := Push4(s1, 0x4e487b71);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x11);
      var s8 := Push1(s7, 0x04);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x24);
      var s11 := Push1(s10, 0x00);
      assert s11.Peek(2) == 0x321;
      assert s11.Peek(6) == 0xb81;
      assert s11.Peek(12) == 0xa6e;
      assert s11.Peek(16) == 0x830;
      assert s11.Peek(18) == 0x74c;
      assert s11.Peek(22) == 0x175;
      var s12 := Revert(s11);
      // Segment is terminal (Revert, Stop or Return)
      s12
  }

  /** Node 272
    * Segment Id for this node is: 79
    * Starting at 0x321
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 4
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -3
    * Net Capacity Effect: +3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s272(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x321 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 21

    requires s0.stack[3] == 0xb81

    requires s0.stack[9] == 0xa6e

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x74c

    requires s0.stack[19] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0xb81;
      assert s1.Peek(9) == 0xa6e;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x74c;
      assert s1.Peek(19) == 0x175;
      var s2 := Swap3(s1);
      var s3 := Swap2(s2);
      var s4 := Pop(s3);
      var s5 := Pop(s4);
      var s6 := Jump(s5);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s273(s6, gas - 1)
  }

  /** Node 273
    * Segment Id for this node is: 161
    * Starting at 0xb81
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +2
    * Net Capacity Effect: -2
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s273(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xb81 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 18

    requires s0.stack[6] == 0xa6e

    requires s0.stack[10] == 0x830

    requires s0.stack[12] == 0x74c

    requires s0.stack[16] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(6) == 0xa6e;
      assert s1.Peek(10) == 0x830;
      assert s1.Peek(12) == 0x74c;
      assert s1.Peek(16) == 0x175;
      var s2 := Push2(s1, 0x0b8c);
      var s3 := Swap1(s2);
      var s4 := Push1(s3, 0x01);
      var s5 := Push2(s4, 0x0ecf);
      var s6 := Jump(s5);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s274(s6, gas - 1)
  }

  /** Node 274
    * Segment Id for this node is: 222
    * Starting at 0xecf
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s274(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xecf as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 20

    requires s0.stack[2] == 0xb8c

    requires s0.stack[8] == 0xa6e

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x74c

    requires s0.stack[18] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0xb8c;
      assert s1.Peek(8) == 0xa6e;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x74c;
      assert s1.Peek(18) == 0x175;
      var s2 := Dup1(s1);
      var s3 := Dup3(s2);
      var s4 := Add(s3);
      var s5 := Dup1(s4);
      var s6 := Dup3(s5);
      var s7 := Gt(s6);
      var s8 := IsZero(s7);
      var s9 := Push2(s8, 0x0321);
      var s10 := JumpI(s9);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s9.stack[1] > 0 then
        ExecuteFromCFGNode_s277(s10, gas - 1)
      else
        ExecuteFromCFGNode_s275(s10, gas - 1)
  }

  /** Node 275
    * Segment Id for this node is: 223
    * Starting at 0xedb
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s275(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xedb as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 21

    requires s0.stack[3] == 0xb8c

    requires s0.stack[9] == 0xa6e

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x74c

    requires s0.stack[19] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0321);
      assert s1.Peek(0) == 0x321;
      assert s1.Peek(4) == 0xb8c;
      assert s1.Peek(10) == 0xa6e;
      assert s1.Peek(14) == 0x830;
      assert s1.Peek(16) == 0x74c;
      assert s1.Peek(20) == 0x175;
      var s2 := Push2(s1, 0x0d85);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s276(s3, gas - 1)
  }

  /** Node 276
    * Segment Id for this node is: 202
    * Starting at 0xd85
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s276(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xd85 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 22

    requires s0.stack[0] == 0x321

    requires s0.stack[4] == 0xb8c

    requires s0.stack[10] == 0xa6e

    requires s0.stack[14] == 0x830

    requires s0.stack[16] == 0x74c

    requires s0.stack[20] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0x321;
      assert s1.Peek(4) == 0xb8c;
      assert s1.Peek(10) == 0xa6e;
      assert s1.Peek(14) == 0x830;
      assert s1.Peek(16) == 0x74c;
      assert s1.Peek(20) == 0x175;
      var s2 := Push4(s1, 0x4e487b71);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x11);
      var s8 := Push1(s7, 0x04);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x24);
      var s11 := Push1(s10, 0x00);
      assert s11.Peek(2) == 0x321;
      assert s11.Peek(6) == 0xb8c;
      assert s11.Peek(12) == 0xa6e;
      assert s11.Peek(16) == 0x830;
      assert s11.Peek(18) == 0x74c;
      assert s11.Peek(22) == 0x175;
      var s12 := Revert(s11);
      // Segment is terminal (Revert, Stop or Return)
      s12
  }

  /** Node 277
    * Segment Id for this node is: 79
    * Starting at 0x321
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 4
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -3
    * Net Capacity Effect: +3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s277(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x321 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 21

    requires s0.stack[3] == 0xb8c

    requires s0.stack[9] == 0xa6e

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x74c

    requires s0.stack[19] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0xb8c;
      assert s1.Peek(9) == 0xa6e;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x74c;
      assert s1.Peek(19) == 0x175;
      var s2 := Swap3(s1);
      var s3 := Swap2(s2);
      var s4 := Pop(s3);
      var s5 := Pop(s4);
      var s6 := Jump(s5);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s278(s6, gas - 1)
  }

  /** Node 278
    * Segment Id for this node is: 162
    * Starting at 0xb8c
    * Segment type is: CONT Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -1
    * Net Capacity Effect: +1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s278(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xb8c as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 18

    requires s0.stack[6] == 0xa6e

    requires s0.stack[10] == 0x830

    requires s0.stack[12] == 0x74c

    requires s0.stack[16] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(6) == 0xa6e;
      assert s1.Peek(10) == 0x830;
      assert s1.Peek(12) == 0x74c;
      assert s1.Peek(16) == 0x175;
      var s2 := Swap1(s1);
      var s3 := Pop(s2);
      //  Go to the next instruction at pc + 1
      ExecuteFromCFGNode_s279(s3, gas - 1)
  }

  /** Node 279
    * Segment Id for this node is: 163
    * Starting at 0xb8f
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s279(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xb8f as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 17

    requires s0.stack[5] == 0xa6e

    requires s0.stack[9] == 0x830

    requires s0.stack[11] == 0x74c

    requires s0.stack[15] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(5) == 0xa6e;
      assert s1.Peek(9) == 0x830;
      assert s1.Peek(11) == 0x74c;
      assert s1.Peek(15) == 0x175;
      var s2 := Push1(s1, 0x01);
      var s3 := Dup2(s2);
      var s4 := Gt(s3);
      var s5 := IsZero(s4);
      var s6 := Push2(s5, 0x0c04);
      var s7 := JumpI(s6);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s6.stack[1] > 0 then
        ExecuteFromCFGNode_s292(s7, gas - 1)
      else
        ExecuteFromCFGNode_s280(s7, gas - 1)
  }

  /** Node 280
    * Segment Id for this node is: 164
    * Starting at 0xb99
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 5
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +2
    * Net Capacity Effect: -2
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s280(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xb99 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 17

    requires s0.stack[5] == 0xa6e

    requires s0.stack[9] == 0x830

    requires s0.stack[11] == 0x74c

    requires s0.stack[15] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := PushN(s0, 16, 0x181899199a1a9b1b9c1cb0b131b232b3);
      assert s1.Peek(6) == 0xa6e;
      assert s1.Peek(10) == 0x830;
      assert s1.Peek(12) == 0x74c;
      assert s1.Peek(16) == 0x175;
      var s2 := Push1(s1, 0x81);
      var s3 := Shl(s2);
      var s4 := Dup6(s3);
      var s5 := Push1(s4, 0x0f);
      var s6 := And(s5);
      var s7 := Push1(s6, 0x10);
      var s8 := Dup2(s7);
      var s9 := Lt(s8);
      var s10 := Push2(s9, 0x0bc0);
      var s11 := JumpI(s10);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s10.stack[1] > 0 then
        ExecuteFromCFGNode_s283(s11, gas - 1)
      else
        ExecuteFromCFGNode_s281(s11, gas - 1)
  }

  /** Node 281
    * Segment Id for this node is: 165
    * Starting at 0xbb9
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s281(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xbb9 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 19

    requires s0.stack[7] == 0xa6e

    requires s0.stack[11] == 0x830

    requires s0.stack[13] == 0x74c

    requires s0.stack[17] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0bc0);
      assert s1.Peek(0) == 0xbc0;
      assert s1.Peek(8) == 0xa6e;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x74c;
      assert s1.Peek(18) == 0x175;
      var s2 := Push2(s1, 0x0ef8);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s282(s3, gas - 1)
  }

  /** Node 282
    * Segment Id for this node is: 225
    * Starting at 0xef8
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s282(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xef8 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 20

    requires s0.stack[0] == 0xbc0

    requires s0.stack[8] == 0xa6e

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x74c

    requires s0.stack[18] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0xbc0;
      assert s1.Peek(8) == 0xa6e;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x74c;
      assert s1.Peek(18) == 0x175;
      var s2 := Push4(s1, 0x4e487b71);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x32);
      var s8 := Push1(s7, 0x04);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x24);
      var s11 := Push1(s10, 0x00);
      assert s11.Peek(2) == 0xbc0;
      assert s11.Peek(10) == 0xa6e;
      assert s11.Peek(14) == 0x830;
      assert s11.Peek(16) == 0x74c;
      assert s11.Peek(20) == 0x175;
      var s12 := Revert(s11);
      // Segment is terminal (Revert, Stop or Return)
      s12
  }

  /** Node 283
    * Segment Id for this node is: 166
    * Starting at 0xbc0
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 4
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s283(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xbc0 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 19

    requires s0.stack[7] == 0xa6e

    requires s0.stack[11] == 0x830

    requires s0.stack[13] == 0x74c

    requires s0.stack[17] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(7) == 0xa6e;
      assert s1.Peek(11) == 0x830;
      assert s1.Peek(13) == 0x74c;
      assert s1.Peek(17) == 0x175;
      var s2 := Byte(s1);
      var s3 := Push1(s2, 0xf8);
      var s4 := Shl(s3);
      var s5 := Dup3(s4);
      var s6 := Dup3(s5);
      var s7 := Dup2(s6);
      var s8 := MLoad(s7);
      var s9 := Dup2(s8);
      var s10 := Lt(s9);
      var s11 := Push2(s10, 0x0bd6);
      assert s11.Peek(0) == 0xbd6;
      assert s11.Peek(10) == 0xa6e;
      assert s11.Peek(14) == 0x830;
      assert s11.Peek(16) == 0x74c;
      assert s11.Peek(20) == 0x175;
      var s12 := JumpI(s11);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s11.stack[1] > 0 then
        ExecuteFromCFGNode_s286(s12, gas - 1)
      else
        ExecuteFromCFGNode_s284(s12, gas - 1)
  }

  /** Node 284
    * Segment Id for this node is: 167
    * Starting at 0xbcf
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s284(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xbcf as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 20

    requires s0.stack[8] == 0xa6e

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x74c

    requires s0.stack[18] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0bd6);
      assert s1.Peek(0) == 0xbd6;
      assert s1.Peek(9) == 0xa6e;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x74c;
      assert s1.Peek(19) == 0x175;
      var s2 := Push2(s1, 0x0ef8);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s285(s3, gas - 1)
  }

  /** Node 285
    * Segment Id for this node is: 225
    * Starting at 0xef8
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s285(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xef8 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 21

    requires s0.stack[0] == 0xbd6

    requires s0.stack[9] == 0xa6e

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x74c

    requires s0.stack[19] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0xbd6;
      assert s1.Peek(9) == 0xa6e;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x74c;
      assert s1.Peek(19) == 0x175;
      var s2 := Push4(s1, 0x4e487b71);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x32);
      var s8 := Push1(s7, 0x04);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x24);
      var s11 := Push1(s10, 0x00);
      assert s11.Peek(2) == 0xbd6;
      assert s11.Peek(11) == 0xa6e;
      assert s11.Peek(15) == 0x830;
      assert s11.Peek(17) == 0x74c;
      assert s11.Peek(21) == 0x175;
      var s12 := Revert(s11);
      // Segment is terminal (Revert, Stop or Return)
      s12
  }

  /** Node 286
    * Segment Id for this node is: 168
    * Starting at 0xbd6
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 8
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: -1
    * Net Capacity Effect: +1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s286(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xbd6 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 20

    requires s0.stack[8] == 0xa6e

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x74c

    requires s0.stack[18] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(8) == 0xa6e;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x74c;
      assert s1.Peek(18) == 0x175;
      var s2 := Push1(s1, 0x20);
      var s3 := Add(s2);
      var s4 := Add(s3);
      var s5 := Swap1(s4);
      var s6 := Push1(s5, 0x01);
      var s7 := Push1(s6, 0x01);
      var s8 := Push1(s7, 0xf8);
      var s9 := Shl(s8);
      var s10 := Sub(s9);
      var s11 := Not(s10);
      assert s11.Peek(8) == 0xa6e;
      assert s11.Peek(12) == 0x830;
      assert s11.Peek(14) == 0x74c;
      assert s11.Peek(18) == 0x175;
      var s12 := And(s11);
      var s13 := Swap1(s12);
      var s14 := Dup2(s13);
      var s15 := Push1(s14, 0x00);
      var s16 := Byte(s15);
      var s17 := Swap1(s16);
      var s18 := MStore8(s17);
      var s19 := Pop(s18);
      var s20 := Push1(s19, 0x04);
      var s21 := Swap5(s20);
      assert s21.Peek(6) == 0xa6e;
      assert s21.Peek(10) == 0x830;
      assert s21.Peek(12) == 0x74c;
      assert s21.Peek(16) == 0x175;
      var s22 := Swap1(s21);
      var s23 := Swap5(s22);
      var s24 := Shr(s23);
      var s25 := Swap4(s24);
      var s26 := Push2(s25, 0x0bfd);
      var s27 := Dup2(s26);
      var s28 := Push2(s27, 0x0f0e);
      var s29 := Jump(s28);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s287(s29, gas - 1)
  }

  /** Node 287
    * Segment Id for this node is: 226
    * Starting at 0xf0e
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s287(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xf0e as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 19

    requires s0.stack[1] == 0xbfd

    requires s0.stack[7] == 0xa6e

    requires s0.stack[11] == 0x830

    requires s0.stack[13] == 0x74c

    requires s0.stack[17] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(1) == 0xbfd;
      assert s1.Peek(7) == 0xa6e;
      assert s1.Peek(11) == 0x830;
      assert s1.Peek(13) == 0x74c;
      assert s1.Peek(17) == 0x175;
      var s2 := Push1(s1, 0x00);
      var s3 := Dup2(s2);
      var s4 := Push2(s3, 0x0f1d);
      var s5 := JumpI(s4);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s4.stack[1] > 0 then
        ExecuteFromCFGNode_s290(s5, gas - 1)
      else
        ExecuteFromCFGNode_s288(s5, gas - 1)
  }

  /** Node 288
    * Segment Id for this node is: 227
    * Starting at 0xf16
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s288(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xf16 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 20

    requires s0.stack[2] == 0xbfd

    requires s0.stack[8] == 0xa6e

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x74c

    requires s0.stack[18] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0f1d);
      assert s1.Peek(0) == 0xf1d;
      assert s1.Peek(3) == 0xbfd;
      assert s1.Peek(9) == 0xa6e;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x74c;
      assert s1.Peek(19) == 0x175;
      var s2 := Push2(s1, 0x0d85);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s289(s3, gas - 1)
  }

  /** Node 289
    * Segment Id for this node is: 202
    * Starting at 0xd85
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s289(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xd85 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 21

    requires s0.stack[0] == 0xf1d

    requires s0.stack[3] == 0xbfd

    requires s0.stack[9] == 0xa6e

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x74c

    requires s0.stack[19] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0xf1d;
      assert s1.Peek(3) == 0xbfd;
      assert s1.Peek(9) == 0xa6e;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x74c;
      assert s1.Peek(19) == 0x175;
      var s2 := Push4(s1, 0x4e487b71);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x11);
      var s8 := Push1(s7, 0x04);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x24);
      var s11 := Push1(s10, 0x00);
      assert s11.Peek(2) == 0xf1d;
      assert s11.Peek(5) == 0xbfd;
      assert s11.Peek(11) == 0xa6e;
      assert s11.Peek(15) == 0x830;
      assert s11.Peek(17) == 0x74c;
      assert s11.Peek(21) == 0x175;
      var s12 := Revert(s11);
      // Segment is terminal (Revert, Stop or Return)
      s12
  }

  /** Node 290
    * Segment Id for this node is: 228
    * Starting at 0xf1d
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 3
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -2
    * Net Capacity Effect: +2
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s290(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xf1d as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 20

    requires s0.stack[2] == 0xbfd

    requires s0.stack[8] == 0xa6e

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x74c

    requires s0.stack[18] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0xbfd;
      assert s1.Peek(8) == 0xa6e;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x74c;
      assert s1.Peek(18) == 0x175;
      var s2 := Pop(s1);
      var s3 := Push1(s2, 0x00);
      var s4 := Not(s3);
      var s5 := Add(s4);
      var s6 := Swap1(s5);
      var s7 := Jump(s6);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s291(s7, gas - 1)
  }

  /** Node 291
    * Segment Id for this node is: 169
    * Starting at 0xbfd
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -1
    * Net Capacity Effect: +1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s291(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xbfd as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 18

    requires s0.stack[6] == 0xa6e

    requires s0.stack[10] == 0x830

    requires s0.stack[12] == 0x74c

    requires s0.stack[16] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(6) == 0xa6e;
      assert s1.Peek(10) == 0x830;
      assert s1.Peek(12) == 0x74c;
      assert s1.Peek(16) == 0x175;
      var s2 := Swap1(s1);
      var s3 := Pop(s2);
      var s4 := Push2(s3, 0x0b8f);
      var s5 := Jump(s4);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s279(s5, gas - 1)
  }

  /** Node 292
    * Segment Id for this node is: 170
    * Starting at 0xc04
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 5
    * Minimum capacity for this segment to prevent stack overflow: 1
    * Net Stack Effect: -1
    * Net Capacity Effect: +1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s292(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xc04 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 17

    requires s0.stack[5] == 0xa6e

    requires s0.stack[9] == 0x830

    requires s0.stack[11] == 0x74c

    requires s0.stack[15] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(5) == 0xa6e;
      assert s1.Peek(9) == 0x830;
      assert s1.Peek(11) == 0x74c;
      assert s1.Peek(15) == 0x175;
      var s2 := Pop(s1);
      var s3 := Dup4(s2);
      var s4 := IsZero(s3);
      var s5 := Push2(s4, 0x0c53);
      var s6 := JumpI(s5);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s5.stack[1] > 0 then
        ExecuteFromCFGNode_s295(s6, gas - 1)
      else
        ExecuteFromCFGNode_s293(s6, gas - 1)
  }

  /** Node 293
    * Segment Id for this node is: 171
    * Starting at 0xc0c
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s293(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xc0c as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 16

    requires s0.stack[4] == 0xa6e

    requires s0.stack[8] == 0x830

    requires s0.stack[10] == 0x74c

    requires s0.stack[14] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push1(s0, 0x40);
      assert s1.Peek(5) == 0xa6e;
      assert s1.Peek(9) == 0x830;
      assert s1.Peek(11) == 0x74c;
      assert s1.Peek(15) == 0x175;
      var s2 := MLoad(s1);
      var s3 := Push3(s2, 0x461bcd);
      var s4 := Push1(s3, 0xe5);
      var s5 := Shl(s4);
      var s6 := Dup2(s5);
      var s7 := MStore(s6);
      var s8 := Push1(s7, 0x20);
      var s9 := Push1(s8, 0x04);
      var s10 := Dup3(s9);
      var s11 := Add(s10);
      assert s11.Peek(7) == 0xa6e;
      assert s11.Peek(11) == 0x830;
      assert s11.Peek(13) == 0x74c;
      assert s11.Peek(17) == 0x175;
      var s12 := Dup2(s11);
      var s13 := Swap1(s12);
      var s14 := MStore(s13);
      var s15 := Push1(s14, 0x24);
      var s16 := Dup3(s15);
      var s17 := Add(s16);
      var s18 := MStore(s17);
      var s19 := Push32(s18, 0x537472696e67733a20686578206c656e67746820696e73756666696369656e74);
      var s20 := Push1(s19, 0x44);
      var s21 := Dup3(s20);
      assert s21.Peek(8) == 0xa6e;
      assert s21.Peek(12) == 0x830;
      assert s21.Peek(14) == 0x74c;
      assert s21.Peek(18) == 0x175;
      var s22 := Add(s21);
      var s23 := MStore(s22);
      var s24 := Push1(s23, 0x64);
      var s25 := Add(s24);
      var s26 := Push2(s25, 0x0391);
      var s27 := Jump(s26);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s294(s27, gas - 1)
  }

  /** Node 294
    * Segment Id for this node is: 85
    * Starting at 0x391
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: -1
    * Net Capacity Effect: +1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s294(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x391 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 17

    requires s0.stack[5] == 0xa6e

    requires s0.stack[9] == 0x830

    requires s0.stack[11] == 0x74c

    requires s0.stack[15] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(5) == 0xa6e;
      assert s1.Peek(9) == 0x830;
      assert s1.Peek(11) == 0x74c;
      assert s1.Peek(15) == 0x175;
      var s2 := Push1(s1, 0x40);
      var s3 := MLoad(s2);
      var s4 := Dup1(s3);
      var s5 := Swap2(s4);
      var s6 := Sub(s5);
      var s7 := Swap1(s6);
      var s8 := Revert(s7);
      // Segment is terminal (Revert, Stop or Return)
      s8
  }

  /** Node 295
    * Segment Id for this node is: 172
    * Starting at 0xc53
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 5
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -4
    * Net Capacity Effect: +4
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s295(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xc53 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 16

    requires s0.stack[4] == 0xa6e

    requires s0.stack[8] == 0x830

    requires s0.stack[10] == 0x74c

    requires s0.stack[14] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(4) == 0xa6e;
      assert s1.Peek(8) == 0x830;
      assert s1.Peek(10) == 0x74c;
      assert s1.Peek(14) == 0x175;
      var s2 := Swap4(s1);
      var s3 := Swap3(s2);
      var s4 := Pop(s3);
      var s5 := Pop(s4);
      var s6 := Pop(s5);
      var s7 := Jump(s6);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s296(s7, gas - 1)
  }

  /** Node 296
    * Segment Id for this node is: 147
    * Starting at 0xa6e
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +2
    * Net Capacity Effect: -2
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s296(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xa6e as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 12

    requires s0.stack[4] == 0x830

    requires s0.stack[6] == 0x74c

    requires s0.stack[10] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(4) == 0x830;
      assert s1.Peek(6) == 0x74c;
      assert s1.Peek(10) == 0x175;
      var s2 := Push1(s1, 0x40);
      var s3 := MLoad(s2);
      var s4 := Push1(s3, 0x20);
      var s5 := Add(s4);
      var s6 := Push2(s5, 0x0a7f);
      var s7 := Swap3(s6);
      var s8 := Swap2(s7);
      var s9 := Swap1(s8);
      var s10 := Push2(s9, 0x0e10);
      var s11 := Jump(s10);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s297(s11, gas - 1)
  }

  /** Node 297
    * Segment Id for this node is: 215
    * Starting at 0xe10
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 3
    * Minimum capacity for this segment to prevent stack overflow: 7
    * Net Stack Effect: +6
    * Net Capacity Effect: -6
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s297(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xe10 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 14

    requires s0.stack[3] == 0xa7f

    requires s0.stack[6] == 0x830

    requires s0.stack[8] == 0x74c

    requires s0.stack[12] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0xa7f;
      assert s1.Peek(6) == 0x830;
      assert s1.Peek(8) == 0x74c;
      assert s1.Peek(12) == 0x175;
      var s2 := Push32(s1, 0x416363657373436f6e74726f6c3a206163636f756e7420000000000000000000);
      var s3 := Dup2(s2);
      var s4 := MStore(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := Dup4(s5);
      var s7 := MLoad(s6);
      var s8 := Push2(s7, 0x0e48);
      var s9 := Dup2(s8);
      var s10 := Push1(s9, 0x17);
      var s11 := Dup6(s10);
      assert s11.Peek(3) == 0xe48;
      assert s11.Peek(9) == 0xa7f;
      assert s11.Peek(12) == 0x830;
      assert s11.Peek(14) == 0x74c;
      assert s11.Peek(18) == 0x175;
      var s12 := Add(s11);
      var s13 := Push1(s12, 0x20);
      var s14 := Dup9(s13);
      var s15 := Add(s14);
      var s16 := Push2(s15, 0x0dae);
      var s17 := Jump(s16);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s298(s17, gas - 1)
  }

  /** Node 298
    * Segment Id for this node is: 205
    * Starting at 0xdae
    * Segment type is: CONT Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 1
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s298(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xdae as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 20

    requires s0.stack[3] == 0xe48

    requires s0.stack[9] == 0xa7f

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x74c

    requires s0.stack[18] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0xe48;
      assert s1.Peek(9) == 0xa7f;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x74c;
      assert s1.Peek(18) == 0x175;
      var s2 := Push1(s1, 0x00);
      //  Go to the next instruction at pc + 1
      ExecuteFromCFGNode_s299(s2, gas - 1)
  }

  /** Node 299
    * Segment Id for this node is: 206
    * Starting at 0xdb1
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 4
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s299(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xdb1 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 21

    requires s0.stack[4] == 0xe48

    requires s0.stack[10] == 0xa7f

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x74c

    requires s0.stack[19] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(4) == 0xe48;
      assert s1.Peek(10) == 0xa7f;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x74c;
      assert s1.Peek(19) == 0x175;
      var s2 := Dup4(s1);
      var s3 := Dup2(s2);
      var s4 := Lt(s3);
      var s5 := IsZero(s4);
      var s6 := Push2(s5, 0x0dc9);
      var s7 := JumpI(s6);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s6.stack[1] > 0 then
        ExecuteFromCFGNode_s301(s7, gas - 1)
      else
        ExecuteFromCFGNode_s300(s7, gas - 1)
  }

  /** Node 300
    * Segment Id for this node is: 207
    * Starting at 0xdba
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 3
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s300(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xdba as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 21

    requires s0.stack[4] == 0xe48

    requires s0.stack[10] == 0xa7f

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x74c

    requires s0.stack[19] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Dup2(s0);
      assert s1.Peek(5) == 0xe48;
      assert s1.Peek(11) == 0xa7f;
      assert s1.Peek(14) == 0x830;
      assert s1.Peek(16) == 0x74c;
      assert s1.Peek(20) == 0x175;
      var s2 := Dup2(s1);
      var s3 := Add(s2);
      var s4 := MLoad(s3);
      var s5 := Dup4(s4);
      var s6 := Dup3(s5);
      var s7 := Add(s6);
      var s8 := MStore(s7);
      var s9 := Push1(s8, 0x20);
      var s10 := Add(s9);
      var s11 := Push2(s10, 0x0db1);
      assert s11.Peek(0) == 0xdb1;
      assert s11.Peek(5) == 0xe48;
      assert s11.Peek(11) == 0xa7f;
      assert s11.Peek(14) == 0x830;
      assert s11.Peek(16) == 0x74c;
      assert s11.Peek(20) == 0x175;
      var s12 := Jump(s11);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s299(s12, gas - 1)
  }

  /** Node 301
    * Segment Id for this node is: 208
    * Starting at 0xdc9
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 5
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -5
    * Net Capacity Effect: +5
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s301(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xdc9 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 21

    requires s0.stack[4] == 0xe48

    requires s0.stack[10] == 0xa7f

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x74c

    requires s0.stack[19] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(4) == 0xe48;
      assert s1.Peek(10) == 0xa7f;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x74c;
      assert s1.Peek(19) == 0x175;
      var s2 := Pop(s1);
      var s3 := Pop(s2);
      var s4 := Push1(s3, 0x00);
      var s5 := Swap2(s4);
      var s6 := Add(s5);
      var s7 := MStore(s6);
      var s8 := Jump(s7);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s302(s8, gas - 1)
  }

  /** Node 302
    * Segment Id for this node is: 216
    * Starting at 0xe48
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 4
    * Minimum capacity for this segment to prevent stack overflow: 6
    * Net Stack Effect: +5
    * Net Capacity Effect: -5
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s302(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xe48 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 16

    requires s0.stack[5] == 0xa7f

    requires s0.stack[8] == 0x830

    requires s0.stack[10] == 0x74c

    requires s0.stack[14] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(5) == 0xa7f;
      assert s1.Peek(8) == 0x830;
      assert s1.Peek(10) == 0x74c;
      assert s1.Peek(14) == 0x175;
      var s2 := PushN(s1, 17, 0x01034b99036b4b9b9b4b733903937b6329);
      var s3 := Push1(s2, 0x7d);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x17);
      var s6 := Swap2(s5);
      var s7 := Dup5(s6);
      var s8 := Add(s7);
      var s9 := Swap2(s8);
      var s10 := Dup3(s9);
      var s11 := Add(s10);
      assert s11.Peek(7) == 0xa7f;
      assert s11.Peek(10) == 0x830;
      assert s11.Peek(12) == 0x74c;
      assert s11.Peek(16) == 0x175;
      var s12 := MStore(s11);
      var s13 := Dup4(s12);
      var s14 := MLoad(s13);
      var s15 := Push2(s14, 0x0e79);
      var s16 := Dup2(s15);
      var s17 := Push1(s16, 0x28);
      var s18 := Dup5(s17);
      var s19 := Add(s18);
      var s20 := Push1(s19, 0x20);
      var s21 := Dup9(s20);
      assert s21.Peek(4) == 0xe79;
      assert s21.Peek(11) == 0xa7f;
      assert s21.Peek(14) == 0x830;
      assert s21.Peek(16) == 0x74c;
      assert s21.Peek(20) == 0x175;
      var s22 := Add(s21);
      var s23 := Push2(s22, 0x0dae);
      var s24 := Jump(s23);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s303(s24, gas - 1)
  }

  /** Node 303
    * Segment Id for this node is: 205
    * Starting at 0xdae
    * Segment type is: CONT Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 1
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s303(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xdae as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 21

    requires s0.stack[3] == 0xe79

    requires s0.stack[10] == 0xa7f

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x74c

    requires s0.stack[19] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0xe79;
      assert s1.Peek(10) == 0xa7f;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x74c;
      assert s1.Peek(19) == 0x175;
      var s2 := Push1(s1, 0x00);
      //  Go to the next instruction at pc + 1
      ExecuteFromCFGNode_s304(s2, gas - 1)
  }

  /** Node 304
    * Segment Id for this node is: 206
    * Starting at 0xdb1
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 4
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s304(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xdb1 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 22

    requires s0.stack[4] == 0xe79

    requires s0.stack[11] == 0xa7f

    requires s0.stack[14] == 0x830

    requires s0.stack[16] == 0x74c

    requires s0.stack[20] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(4) == 0xe79;
      assert s1.Peek(11) == 0xa7f;
      assert s1.Peek(14) == 0x830;
      assert s1.Peek(16) == 0x74c;
      assert s1.Peek(20) == 0x175;
      var s2 := Dup4(s1);
      var s3 := Dup2(s2);
      var s4 := Lt(s3);
      var s5 := IsZero(s4);
      var s6 := Push2(s5, 0x0dc9);
      var s7 := JumpI(s6);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s6.stack[1] > 0 then
        ExecuteFromCFGNode_s306(s7, gas - 1)
      else
        ExecuteFromCFGNode_s305(s7, gas - 1)
  }

  /** Node 305
    * Segment Id for this node is: 207
    * Starting at 0xdba
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 3
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s305(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xdba as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 22

    requires s0.stack[4] == 0xe79

    requires s0.stack[11] == 0xa7f

    requires s0.stack[14] == 0x830

    requires s0.stack[16] == 0x74c

    requires s0.stack[20] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Dup2(s0);
      assert s1.Peek(5) == 0xe79;
      assert s1.Peek(12) == 0xa7f;
      assert s1.Peek(15) == 0x830;
      assert s1.Peek(17) == 0x74c;
      assert s1.Peek(21) == 0x175;
      var s2 := Dup2(s1);
      var s3 := Add(s2);
      var s4 := MLoad(s3);
      var s5 := Dup4(s4);
      var s6 := Dup3(s5);
      var s7 := Add(s6);
      var s8 := MStore(s7);
      var s9 := Push1(s8, 0x20);
      var s10 := Add(s9);
      var s11 := Push2(s10, 0x0db1);
      assert s11.Peek(0) == 0xdb1;
      assert s11.Peek(5) == 0xe79;
      assert s11.Peek(12) == 0xa7f;
      assert s11.Peek(15) == 0x830;
      assert s11.Peek(17) == 0x74c;
      assert s11.Peek(21) == 0x175;
      var s12 := Jump(s11);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s304(s12, gas - 1)
  }

  /** Node 306
    * Segment Id for this node is: 208
    * Starting at 0xdc9
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 5
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -5
    * Net Capacity Effect: +5
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s306(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xdc9 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 22

    requires s0.stack[4] == 0xe79

    requires s0.stack[11] == 0xa7f

    requires s0.stack[14] == 0x830

    requires s0.stack[16] == 0x74c

    requires s0.stack[20] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(4) == 0xe79;
      assert s1.Peek(11) == 0xa7f;
      assert s1.Peek(14) == 0x830;
      assert s1.Peek(16) == 0x74c;
      assert s1.Peek(20) == 0x175;
      var s2 := Pop(s1);
      var s3 := Pop(s2);
      var s4 := Push1(s3, 0x00);
      var s5 := Swap2(s4);
      var s6 := Add(s5);
      var s7 := MStore(s6);
      var s8 := Jump(s7);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s307(s8, gas - 1)
  }

  /** Node 307
    * Segment Id for this node is: 217
    * Starting at 0xe79
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 7
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -6
    * Net Capacity Effect: +6
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s307(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xe79 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 17

    requires s0.stack[6] == 0xa7f

    requires s0.stack[9] == 0x830

    requires s0.stack[11] == 0x74c

    requires s0.stack[15] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(6) == 0xa7f;
      assert s1.Peek(9) == 0x830;
      assert s1.Peek(11) == 0x74c;
      assert s1.Peek(15) == 0x175;
      var s2 := Add(s1);
      var s3 := Push1(s2, 0x28);
      var s4 := Add(s3);
      var s5 := Swap5(s4);
      var s6 := Swap4(s5);
      var s7 := Pop(s6);
      var s8 := Pop(s7);
      var s9 := Pop(s8);
      var s10 := Pop(s9);
      var s11 := Jump(s10);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s308(s11, gas - 1)
  }

  /** Node 308
    * Segment Id for this node is: 148
    * Starting at 0xa7f
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 5
    * Net Stack Effect: +2
    * Net Capacity Effect: -2
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s308(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xa7f as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 11

    requires s0.stack[3] == 0x830

    requires s0.stack[5] == 0x74c

    requires s0.stack[9] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0x830;
      assert s1.Peek(5) == 0x74c;
      assert s1.Peek(9) == 0x175;
      var s2 := Push1(s1, 0x40);
      var s3 := Dup1(s2);
      var s4 := MLoad(s3);
      var s5 := Push1(s4, 0x1f);
      var s6 := Not(s5);
      var s7 := Dup2(s6);
      var s8 := Dup5(s7);
      var s9 := Sub(s8);
      var s10 := Add(s9);
      var s11 := Dup2(s10);
      assert s11.Peek(7) == 0x830;
      assert s11.Peek(9) == 0x74c;
      assert s11.Peek(13) == 0x175;
      var s12 := MStore(s11);
      var s13 := Swap1(s12);
      var s14 := Dup3(s13);
      var s15 := Swap1(s14);
      var s16 := MStore(s15);
      var s17 := Push3(s16, 0x461bcd);
      var s18 := Push1(s17, 0xe5);
      var s19 := Shl(s18);
      var s20 := Dup3(s19);
      var s21 := MStore(s20);
      assert s21.Peek(4) == 0x830;
      assert s21.Peek(6) == 0x74c;
      assert s21.Peek(10) == 0x175;
      var s22 := Push2(s21, 0x0391);
      var s23 := Swap2(s22);
      var s24 := Push1(s23, 0x04);
      var s25 := Add(s24);
      var s26 := Push2(s25, 0x0e85);
      var s27 := Jump(s26);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s309(s27, gas - 1)
  }

  /** Node 309
    * Segment Id for this node is: 218
    * Starting at 0xe85
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 7
    * Net Stack Effect: +6
    * Net Capacity Effect: -6
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s309(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xe85 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 13

    requires s0.stack[2] == 0x391

    requires s0.stack[5] == 0x830

    requires s0.stack[7] == 0x74c

    requires s0.stack[11] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0x391;
      assert s1.Peek(5) == 0x830;
      assert s1.Peek(7) == 0x74c;
      assert s1.Peek(11) == 0x175;
      var s2 := Push1(s1, 0x20);
      var s3 := Dup2(s2);
      var s4 := MStore(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := Dup3(s5);
      var s7 := MLoad(s6);
      var s8 := Dup1(s7);
      var s9 := Push1(s8, 0x20);
      var s10 := Dup5(s9);
      var s11 := Add(s10);
      assert s11.Peek(6) == 0x391;
      assert s11.Peek(9) == 0x830;
      assert s11.Peek(11) == 0x74c;
      assert s11.Peek(15) == 0x175;
      var s12 := MStore(s11);
      var s13 := Push2(s12, 0x0ea4);
      var s14 := Dup2(s13);
      var s15 := Push1(s14, 0x40);
      var s16 := Dup6(s15);
      var s17 := Add(s16);
      var s18 := Push1(s17, 0x20);
      var s19 := Dup8(s18);
      var s20 := Add(s19);
      var s21 := Push2(s20, 0x0dae);
      assert s21.Peek(0) == 0xdae;
      assert s21.Peek(4) == 0xea4;
      assert s21.Peek(9) == 0x391;
      assert s21.Peek(12) == 0x830;
      assert s21.Peek(14) == 0x74c;
      assert s21.Peek(18) == 0x175;
      var s22 := Jump(s21);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s310(s22, gas - 1)
  }

  /** Node 310
    * Segment Id for this node is: 205
    * Starting at 0xdae
    * Segment type is: CONT Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 1
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s310(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xdae as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 19

    requires s0.stack[3] == 0xea4

    requires s0.stack[8] == 0x391

    requires s0.stack[11] == 0x830

    requires s0.stack[13] == 0x74c

    requires s0.stack[17] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0xea4;
      assert s1.Peek(8) == 0x391;
      assert s1.Peek(11) == 0x830;
      assert s1.Peek(13) == 0x74c;
      assert s1.Peek(17) == 0x175;
      var s2 := Push1(s1, 0x00);
      //  Go to the next instruction at pc + 1
      ExecuteFromCFGNode_s311(s2, gas - 1)
  }

  /** Node 311
    * Segment Id for this node is: 206
    * Starting at 0xdb1
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 4
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s311(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xdb1 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 20

    requires s0.stack[4] == 0xea4

    requires s0.stack[9] == 0x391

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x74c

    requires s0.stack[18] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(4) == 0xea4;
      assert s1.Peek(9) == 0x391;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x74c;
      assert s1.Peek(18) == 0x175;
      var s2 := Dup4(s1);
      var s3 := Dup2(s2);
      var s4 := Lt(s3);
      var s5 := IsZero(s4);
      var s6 := Push2(s5, 0x0dc9);
      var s7 := JumpI(s6);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s6.stack[1] > 0 then
        ExecuteFromCFGNode_s313(s7, gas - 1)
      else
        ExecuteFromCFGNode_s312(s7, gas - 1)
  }

  /** Node 312
    * Segment Id for this node is: 207
    * Starting at 0xdba
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 3
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s312(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xdba as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 20

    requires s0.stack[4] == 0xea4

    requires s0.stack[9] == 0x391

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x74c

    requires s0.stack[18] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Dup2(s0);
      assert s1.Peek(5) == 0xea4;
      assert s1.Peek(10) == 0x391;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x74c;
      assert s1.Peek(19) == 0x175;
      var s2 := Dup2(s1);
      var s3 := Add(s2);
      var s4 := MLoad(s3);
      var s5 := Dup4(s4);
      var s6 := Dup3(s5);
      var s7 := Add(s6);
      var s8 := MStore(s7);
      var s9 := Push1(s8, 0x20);
      var s10 := Add(s9);
      var s11 := Push2(s10, 0x0db1);
      assert s11.Peek(0) == 0xdb1;
      assert s11.Peek(5) == 0xea4;
      assert s11.Peek(10) == 0x391;
      assert s11.Peek(13) == 0x830;
      assert s11.Peek(15) == 0x74c;
      assert s11.Peek(19) == 0x175;
      var s12 := Jump(s11);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s311(s12, gas - 1)
  }

  /** Node 313
    * Segment Id for this node is: 208
    * Starting at 0xdc9
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 5
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -5
    * Net Capacity Effect: +5
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s313(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xdc9 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 20

    requires s0.stack[4] == 0xea4

    requires s0.stack[9] == 0x391

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x74c

    requires s0.stack[18] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(4) == 0xea4;
      assert s1.Peek(9) == 0x391;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x74c;
      assert s1.Peek(18) == 0x175;
      var s2 := Pop(s1);
      var s3 := Pop(s2);
      var s4 := Push1(s3, 0x00);
      var s5 := Swap2(s4);
      var s6 := Add(s5);
      var s7 := MStore(s6);
      var s8 := Jump(s7);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s314(s8, gas - 1)
  }

  /** Node 314
    * Segment Id for this node is: 219
    * Starting at 0xea4
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 5
    * Minimum capacity for this segment to prevent stack overflow: 1
    * Net Stack Effect: -4
    * Net Capacity Effect: +4
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s314(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xea4 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 15

    requires s0.stack[4] == 0x391

    requires s0.stack[7] == 0x830

    requires s0.stack[9] == 0x74c

    requires s0.stack[13] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(4) == 0x391;
      assert s1.Peek(7) == 0x830;
      assert s1.Peek(9) == 0x74c;
      assert s1.Peek(13) == 0x175;
      var s2 := Push1(s1, 0x1f);
      var s3 := Add(s2);
      var s4 := Push1(s3, 0x1f);
      var s5 := Not(s4);
      var s6 := And(s5);
      var s7 := Swap2(s6);
      var s8 := Swap1(s7);
      var s9 := Swap2(s8);
      var s10 := Add(s9);
      var s11 := Push1(s10, 0x40);
      assert s11.Peek(4) == 0x391;
      assert s11.Peek(7) == 0x830;
      assert s11.Peek(9) == 0x74c;
      assert s11.Peek(13) == 0x175;
      var s12 := Add(s11);
      var s13 := Swap3(s12);
      var s14 := Swap2(s13);
      var s15 := Pop(s14);
      var s16 := Pop(s15);
      var s17 := Jump(s16);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s315(s17, gas - 1)
  }

  /** Node 315
    * Segment Id for this node is: 85
    * Starting at 0x391
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: -1
    * Net Capacity Effect: +1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s315(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x391 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 11

    requires s0.stack[3] == 0x830

    requires s0.stack[5] == 0x74c

    requires s0.stack[9] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0x830;
      assert s1.Peek(5) == 0x74c;
      assert s1.Peek(9) == 0x175;
      var s2 := Push1(s1, 0x40);
      var s3 := MLoad(s2);
      var s4 := Dup1(s3);
      var s5 := Swap2(s4);
      var s6 := Sub(s5);
      var s7 := Swap1(s6);
      var s8 := Revert(s7);
      // Segment is terminal (Revert, Stop or Return)
      s8
  }

  /** Node 316
    * Segment Id for this node is: 103
    * Starting at 0x5af
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 3
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -3
    * Net Capacity Effect: +3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s316(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x5af as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 10

    requires s0.stack[2] == 0x830

    requires s0.stack[4] == 0x74c

    requires s0.stack[8] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0x830;
      assert s1.Peek(4) == 0x74c;
      assert s1.Peek(8) == 0x175;
      var s2 := Pop(s1);
      var s3 := Pop(s2);
      var s4 := Jump(s3);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s317(s4, gas - 1)
  }

  /** Node 317
    * Segment Id for this node is: 123
    * Starting at 0x830
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -2
    * Net Capacity Effect: +2
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s317(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x830 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 7

    requires s0.stack[1] == 0x74c

    requires s0.stack[5] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(1) == 0x74c;
      assert s1.Peek(5) == 0x175;
      var s2 := Pop(s1);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s318(s3, gas - 1)
  }

  /** Node 318
    * Segment Id for this node is: 116
    * Starting at 0x74c
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 3
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +3
    * Net Capacity Effect: -3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s318(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x74c as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 5

    requires s0.stack[3] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0x175;
      var s2 := Push2(s1, 0x034c);
      var s3 := Dup4(s2);
      var s4 := Dup4(s3);
      var s5 := Push2(s4, 0x09e7);
      var s6 := Jump(s5);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s319(s6, gas - 1)
  }

  /** Node 319
    * Segment Id for this node is: 139
    * Starting at 0x9e7
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +3
    * Net Capacity Effect: -3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s319(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x9e7 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 8

    requires s0.stack[2] == 0x34c

    requires s0.stack[6] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0x34c;
      assert s1.Peek(6) == 0x175;
      var s2 := Push2(s1, 0x09f1);
      var s3 := Dup3(s2);
      var s4 := Dup3(s3);
      var s5 := Push2(s4, 0x0708);
      var s6 := Jump(s5);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s320(s6, gas - 1)
  }

  /** Node 320
    * Segment Id for this node is: 114
    * Starting at 0x708
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 3
    * Minimum capacity for this segment to prevent stack overflow: 6
    * Net Stack Effect: -2
    * Net Capacity Effect: +2
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s320(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x708 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 11

    requires s0.stack[2] == 0x9f1

    requires s0.stack[5] == 0x34c

    requires s0.stack[9] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0x9f1;
      assert s1.Peek(5) == 0x34c;
      assert s1.Peek(9) == 0x175;
      var s2 := Push1(s1, 0x00);
      var s3 := Swap2(s2);
      var s4 := Dup3(s3);
      var s5 := MStore(s4);
      var s6 := Push1(s5, 0x20);
      var s7 := Dup3(s6);
      var s8 := Dup2(s7);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x40);
      var s11 := Dup1(s10);
      assert s11.Peek(5) == 0x9f1;
      assert s11.Peek(8) == 0x34c;
      assert s11.Peek(12) == 0x175;
      var s12 := Dup5(s11);
      var s13 := Keccak256(s12);
      var s14 := Push1(s13, 0x01);
      var s15 := Push1(s14, 0x01);
      var s16 := Push1(s15, 0xa0);
      var s17 := Shl(s16);
      var s18 := Sub(s17);
      var s19 := Swap4(s18);
      var s20 := Swap1(s19);
      var s21 := Swap4(s20);
      assert s21.Peek(6) == 0x9f1;
      assert s21.Peek(9) == 0x34c;
      assert s21.Peek(13) == 0x175;
      var s22 := And(s21);
      var s23 := Dup5(s22);
      var s24 := MStore(s23);
      var s25 := Swap2(s24);
      var s26 := Swap1(s25);
      var s27 := MStore(s26);
      var s28 := Swap1(s27);
      var s29 := Keccak256(s28);
      var s30 := SLoad(s29);
      var s31 := Push1(s30, 0xff);
      assert s31.Peek(2) == 0x9f1;
      assert s31.Peek(5) == 0x34c;
      assert s31.Peek(9) == 0x175;
      var s32 := And(s31);
      var s33 := Swap1(s32);
      var s34 := Jump(s33);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s321(s34, gas - 1)
  }

  /** Node 321
    * Segment Id for this node is: 140
    * Starting at 0x9f1
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 1
    * Net Stack Effect: -1
    * Net Capacity Effect: +1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s321(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x9f1 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 9

    requires s0.stack[3] == 0x34c

    requires s0.stack[7] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0x34c;
      assert s1.Peek(7) == 0x175;
      var s2 := IsZero(s1);
      var s3 := Push2(s2, 0x05af);
      var s4 := JumpI(s3);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s3.stack[1] > 0 then
        ExecuteFromCFGNode_s325(s4, gas - 1)
      else
        ExecuteFromCFGNode_s322(s4, gas - 1)
  }

  /** Node 322
    * Segment Id for this node is: 141
    * Starting at 0x9f7
    * Segment type is: CONT Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 7
    * Net Stack Effect: +6
    * Net Capacity Effect: -6
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s322(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x9f7 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 8

    requires s0.stack[2] == 0x34c

    requires s0.stack[6] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push1(s0, 0x00);
      assert s1.Peek(3) == 0x34c;
      assert s1.Peek(7) == 0x175;
      var s2 := Dup3(s1);
      var s3 := Dup2(s2);
      var s4 := MStore(s3);
      var s5 := Push1(s4, 0x20);
      var s6 := Dup2(s5);
      var s7 := Dup2(s6);
      var s8 := MStore(s7);
      var s9 := Push1(s8, 0x40);
      var s10 := Dup1(s9);
      var s11 := Dup4(s10);
      assert s11.Peek(7) == 0x34c;
      assert s11.Peek(11) == 0x175;
      var s12 := Keccak256(s11);
      var s13 := Push1(s12, 0x01);
      var s14 := Push1(s13, 0x01);
      var s15 := Push1(s14, 0xa0);
      var s16 := Shl(s15);
      var s17 := Sub(s16);
      var s18 := Dup6(s17);
      var s19 := And(s18);
      var s20 := Dup1(s19);
      var s21 := Dup6(s20);
      assert s21.Peek(9) == 0x34c;
      assert s21.Peek(13) == 0x175;
      var s22 := MStore(s21);
      var s23 := Swap3(s22);
      var s24 := MStore(s23);
      var s25 := Dup1(s24);
      var s26 := Dup4(s25);
      var s27 := Keccak256(s26);
      var s28 := Dup1(s27);
      var s29 := SLoad(s28);
      var s30 := Push1(s29, 0xff);
      var s31 := Not(s30);
      assert s31.Peek(8) == 0x34c;
      assert s31.Peek(12) == 0x175;
      var s32 := And(s31);
      var s33 := Swap1(s32);
      var s34 := SStore(s33);
      var s35 := MLoad(s34);
      var s36 := Caller(s35);
      var s37 := Swap3(s36);
      var s38 := Dup6(s37);
      var s39 := Swap2(s38);
      var s40 := Push32(s39, 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b);
      var s41 := Swap2(s40);
      //  Go to the next instruction at pc + 1
      ExecuteFromCFGNode_s323(s41, gas - 1)
  }

  /** Node 323
    * Segment Id for this node is: 142
    * Starting at 0xa47
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 9
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -9
    * Net Capacity Effect: +9
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s323(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xa47 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 14

    requires s0.stack[8] == 0x34c

    requires s0.stack[12] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Swap1(s0);
      assert s1.Peek(8) == 0x34c;
      assert s1.Peek(12) == 0x175;
      var s2 := Log4(s1);
      var s3 := Pop(s2);
      var s4 := Pop(s3);
      var s5 := Jump(s4);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s324(s5, gas - 1)
  }

  /** Node 324
    * Segment Id for this node is: 82
    * Starting at 0x34c
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 4
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -4
    * Net Capacity Effect: +4
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s324(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x34c as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 5

    requires s0.stack[3] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0x175;
      var s2 := Pop(s1);
      var s3 := Pop(s2);
      var s4 := Pop(s3);
      var s5 := Jump(s4);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s18(s5, gas - 1)
  }

  /** Node 325
    * Segment Id for this node is: 103
    * Starting at 0x5af
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 3
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -3
    * Net Capacity Effect: +3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s325(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x5af as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 8

    requires s0.stack[2] == 0x34c

    requires s0.stack[6] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0x34c;
      assert s1.Peek(6) == 0x175;
      var s2 := Pop(s1);
      var s3 := Pop(s2);
      var s4 := Jump(s3);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s324(s4, gas - 1)
  }

  /** Node 326
    * Segment Id for this node is: 54
    * Starting at 0x1f7
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s326(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x1f7 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 1

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      var s2 := CallValue(s1);
      var s3 := Dup1(s2);
      var s4 := IsZero(s3);
      var s5 := Push2(s4, 0x0203);
      var s6 := JumpI(s5);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s5.stack[1] > 0 then
        ExecuteFromCFGNode_s328(s6, gas - 1)
      else
        ExecuteFromCFGNode_s327(s6, gas - 1)
  }

  /** Node 327
    * Segment Id for this node is: 55
    * Starting at 0x1ff
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s327(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x1ff as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 2

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push1(s0, 0x00);
      var s2 := Dup1(s1);
      var s3 := Revert(s2);
      // Segment is terminal (Revert, Stop or Return)
      s3
  }

  /** Node 328
    * Segment Id for this node is: 56
    * Starting at 0x203
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s328(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x203 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 2

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      var s2 := Pop(s1);
      var s3 := Push2(s2, 0x0147);
      var s4 := Push1(s3, 0x00);
      var s5 := Dup2(s4);
      var s6 := Jump(s5);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s22(s6, gas - 1)
  }

  /** Node 329
    * Segment Id for this node is: 12
    * Starting at 0x7f
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s329(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x7f as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 1

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      var s2 := Dup1(s1);
      var s3 := Push4(s2, 0x338b5dea);
      var s4 := Gt(s3);
      var s5 := Push2(s4, 0x00bb);
      var s6 := JumpI(s5);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s5.stack[1] > 0 then
        ExecuteFromCFGNode_s608(s6, gas - 1)
      else
        ExecuteFromCFGNode_s330(s6, gas - 1)
  }

  /** Node 330
    * Segment Id for this node is: 13
    * Starting at 0x8b
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s330(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x8b as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 1

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Dup1(s0);
      var s2 := Push4(s1, 0x338b5dea);
      var s3 := Eq(s2);
      var s4 := Push2(s3, 0x0177);
      var s5 := JumpI(s4);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s4.stack[1] > 0 then
        ExecuteFromCFGNode_s548(s5, gas - 1)
      else
        ExecuteFromCFGNode_s331(s5, gas - 1)
  }

  /** Node 331
    * Segment Id for this node is: 14
    * Starting at 0x96
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s331(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x96 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 1

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Dup1(s0);
      var s2 := Push4(s1, 0x36568abe);
      var s3 := Eq(s2);
      var s4 := Push2(s3, 0x0197);
      var s5 := JumpI(s4);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s4.stack[1] > 0 then
        ExecuteFromCFGNode_s526(s5, gas - 1)
      else
        ExecuteFromCFGNode_s332(s5, gas - 1)
  }

  /** Node 332
    * Segment Id for this node is: 15
    * Starting at 0xa1
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s332(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xa1 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 1

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Dup1(s0);
      var s2 := Push4(s1, 0x55eb2e96);
      var s3 := Eq(s2);
      var s4 := Push2(s3, 0x01b7);
      var s5 := JumpI(s4);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s4.stack[1] > 0 then
        ExecuteFromCFGNode_s349(s5, gas - 1)
      else
        ExecuteFromCFGNode_s333(s5, gas - 1)
  }

  /** Node 333
    * Segment Id for this node is: 16
    * Starting at 0xac
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s333(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xac as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 1

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Dup1(s0);
      var s2 := Push4(s1, 0x91d14854);
      var s3 := Eq(s2);
      var s4 := Push2(s3, 0x01d7);
      var s5 := JumpI(s4);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s4.stack[1] > 0 then
        ExecuteFromCFGNode_s335(s5, gas - 1)
      else
        ExecuteFromCFGNode_s334(s5, gas - 1)
  }

  /** Node 334
    * Segment Id for this node is: 17
    * Starting at 0xb7
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s334(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xb7 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 1

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push1(s0, 0x00);
      var s2 := Dup1(s1);
      var s3 := Revert(s2);
      // Segment is terminal (Revert, Stop or Return)
      s3
  }

  /** Node 335
    * Segment Id for this node is: 50
    * Starting at 0x1d7
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s335(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x1d7 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 1

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      var s2 := CallValue(s1);
      var s3 := Dup1(s2);
      var s4 := IsZero(s3);
      var s5 := Push2(s4, 0x01e3);
      var s6 := JumpI(s5);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s5.stack[1] > 0 then
        ExecuteFromCFGNode_s337(s6, gas - 1)
      else
        ExecuteFromCFGNode_s336(s6, gas - 1)
  }

  /** Node 336
    * Segment Id for this node is: 51
    * Starting at 0x1df
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s336(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x1df as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 2

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push1(s0, 0x00);
      var s2 := Dup1(s1);
      var s3 := Revert(s2);
      // Segment is terminal (Revert, Stop or Return)
      s3
  }

  /** Node 337
    * Segment Id for this node is: 52
    * Starting at 0x1e3
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +3
    * Net Capacity Effect: -3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s337(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x1e3 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 2

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      var s2 := Pop(s1);
      var s3 := Push2(s2, 0x0102);
      var s4 := Push2(s3, 0x01f2);
      var s5 := CallDataSize(s4);
      var s6 := Push1(s5, 0x04);
      var s7 := Push2(s6, 0x0cb9);
      var s8 := Jump(s7);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s338(s8, gas - 1)
  }

  /** Node 338
    * Segment Id for this node is: 183
    * Starting at 0xcb9
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 5
    * Net Stack Effect: +2
    * Net Capacity Effect: -2
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s338(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xcb9 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 5

    requires s0.stack[2] == 0x1f2

    requires s0.stack[3] == 0x102

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0x1f2;
      assert s1.Peek(3) == 0x102;
      var s2 := Push1(s1, 0x00);
      var s3 := Dup1(s2);
      var s4 := Push1(s3, 0x40);
      var s5 := Dup4(s4);
      var s6 := Dup6(s5);
      var s7 := Sub(s6);
      var s8 := SLt(s7);
      var s9 := IsZero(s8);
      var s10 := Push2(s9, 0x0ccc);
      var s11 := JumpI(s10);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s10.stack[1] > 0 then
        ExecuteFromCFGNode_s340(s11, gas - 1)
      else
        ExecuteFromCFGNode_s339(s11, gas - 1)
  }

  /** Node 339
    * Segment Id for this node is: 184
    * Starting at 0xcc8
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s339(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xcc8 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 7

    requires s0.stack[4] == 0x1f2

    requires s0.stack[5] == 0x102

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push1(s0, 0x00);
      assert s1.Peek(5) == 0x1f2;
      assert s1.Peek(6) == 0x102;
      var s2 := Dup1(s1);
      var s3 := Revert(s2);
      // Segment is terminal (Revert, Stop or Return)
      s3
  }

  /** Node 340
    * Segment Id for this node is: 185
    * Starting at 0xccc
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 3
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +2
    * Net Capacity Effect: -2
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s340(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xccc as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 7

    requires s0.stack[4] == 0x1f2

    requires s0.stack[5] == 0x102

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(4) == 0x1f2;
      assert s1.Peek(5) == 0x102;
      var s2 := Dup3(s1);
      var s3 := CallDataLoad(s2);
      var s4 := Swap2(s3);
      var s5 := Pop(s4);
      var s6 := Push2(s5, 0x0cdc);
      var s7 := Push1(s6, 0x20);
      var s8 := Dup5(s7);
      var s9 := Add(s8);
      var s10 := Push2(s9, 0x0c9d);
      var s11 := Jump(s10);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s341(s11, gas - 1)
  }

  /** Node 341
    * Segment Id for this node is: 180
    * Starting at 0xc9d
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s341(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xc9d as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 9

    requires s0.stack[1] == 0xcdc

    requires s0.stack[6] == 0x1f2

    requires s0.stack[7] == 0x102

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(1) == 0xcdc;
      assert s1.Peek(6) == 0x1f2;
      assert s1.Peek(7) == 0x102;
      var s2 := Dup1(s1);
      var s3 := CallDataLoad(s2);
      var s4 := Push1(s3, 0x01);
      var s5 := Push1(s4, 0x01);
      var s6 := Push1(s5, 0xa0);
      var s7 := Shl(s6);
      var s8 := Sub(s7);
      var s9 := Dup2(s8);
      var s10 := And(s9);
      var s11 := Dup2(s10);
      assert s11.Peek(4) == 0xcdc;
      assert s11.Peek(9) == 0x1f2;
      assert s11.Peek(10) == 0x102;
      var s12 := Eq(s11);
      var s13 := Push2(s12, 0x0cb4);
      var s14 := JumpI(s13);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s13.stack[1] > 0 then
        ExecuteFromCFGNode_s343(s14, gas - 1)
      else
        ExecuteFromCFGNode_s342(s14, gas - 1)
  }

  /** Node 342
    * Segment Id for this node is: 181
    * Starting at 0xcb0
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s342(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xcb0 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 10

    requires s0.stack[2] == 0xcdc

    requires s0.stack[7] == 0x1f2

    requires s0.stack[8] == 0x102

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push1(s0, 0x00);
      assert s1.Peek(3) == 0xcdc;
      assert s1.Peek(8) == 0x1f2;
      assert s1.Peek(9) == 0x102;
      var s2 := Dup1(s1);
      var s3 := Revert(s2);
      // Segment is terminal (Revert, Stop or Return)
      s3
  }

  /** Node 343
    * Segment Id for this node is: 182
    * Starting at 0xcb4
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 3
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -2
    * Net Capacity Effect: +2
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s343(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xcb4 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 10

    requires s0.stack[2] == 0xcdc

    requires s0.stack[7] == 0x1f2

    requires s0.stack[8] == 0x102

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0xcdc;
      assert s1.Peek(7) == 0x1f2;
      assert s1.Peek(8) == 0x102;
      var s2 := Swap2(s1);
      var s3 := Swap1(s2);
      var s4 := Pop(s3);
      var s5 := Jump(s4);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s344(s5, gas - 1)
  }

  /** Node 344
    * Segment Id for this node is: 186
    * Starting at 0xcdc
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 6
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -4
    * Net Capacity Effect: +4
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s344(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xcdc as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 8

    requires s0.stack[5] == 0x1f2

    requires s0.stack[6] == 0x102

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(5) == 0x1f2;
      assert s1.Peek(6) == 0x102;
      var s2 := Swap1(s1);
      var s3 := Pop(s2);
      var s4 := Swap3(s3);
      var s5 := Pop(s4);
      var s6 := Swap3(s5);
      var s7 := Swap1(s6);
      var s8 := Pop(s7);
      var s9 := Jump(s8);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s345(s9, gas - 1)
  }

  /** Node 345
    * Segment Id for this node is: 53
    * Starting at 0x1f2
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 1
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s345(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x1f2 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 4

    requires s0.stack[2] == 0x102

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0x102;
      var s2 := Push2(s1, 0x0708);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s346(s3, gas - 1)
  }

  /** Node 346
    * Segment Id for this node is: 114
    * Starting at 0x708
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 3
    * Minimum capacity for this segment to prevent stack overflow: 6
    * Net Stack Effect: -2
    * Net Capacity Effect: +2
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s346(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x708 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 4

    requires s0.stack[2] == 0x102

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0x102;
      var s2 := Push1(s1, 0x00);
      var s3 := Swap2(s2);
      var s4 := Dup3(s3);
      var s5 := MStore(s4);
      var s6 := Push1(s5, 0x20);
      var s7 := Dup3(s6);
      var s8 := Dup2(s7);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x40);
      var s11 := Dup1(s10);
      assert s11.Peek(5) == 0x102;
      var s12 := Dup5(s11);
      var s13 := Keccak256(s12);
      var s14 := Push1(s13, 0x01);
      var s15 := Push1(s14, 0x01);
      var s16 := Push1(s15, 0xa0);
      var s17 := Shl(s16);
      var s18 := Sub(s17);
      var s19 := Swap4(s18);
      var s20 := Swap1(s19);
      var s21 := Swap4(s20);
      assert s21.Peek(6) == 0x102;
      var s22 := And(s21);
      var s23 := Dup5(s22);
      var s24 := MStore(s23);
      var s25 := Swap2(s24);
      var s26 := Swap1(s25);
      var s27 := MStore(s26);
      var s28 := Swap1(s27);
      var s29 := Keccak256(s28);
      var s30 := SLoad(s29);
      var s31 := Push1(s30, 0xff);
      assert s31.Peek(2) == 0x102;
      var s32 := And(s31);
      var s33 := Swap1(s32);
      var s34 := Jump(s33);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s347(s34, gas - 1)
  }

  /** Node 347
    * Segment Id for this node is: 26
    * Starting at 0x102
    * Segment type is: CONT Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s347(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x102 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 2

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      var s2 := Push1(s1, 0x40);
      var s3 := MLoad(s2);
      var s4 := Swap1(s3);
      var s5 := IsZero(s4);
      var s6 := IsZero(s5);
      var s7 := Dup2(s6);
      var s8 := MStore(s7);
      var s9 := Push1(s8, 0x20);
      var s10 := Add(s9);
      //  Go to the next instruction at pc + 1
      ExecuteFromCFGNode_s348(s10, gas - 1)
  }

  /** Node 348
    * Segment Id for this node is: 27
    * Starting at 0x10e
    * Segment type is: RETURN Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: -1
    * Net Capacity Effect: +1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s348(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x10e as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 2

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      var s2 := Push1(s1, 0x40);
      var s3 := MLoad(s2);
      var s4 := Dup1(s3);
      var s5 := Swap2(s4);
      var s6 := Sub(s5);
      var s7 := Swap1(s6);
      var s8 := Return(s7);
      // Segment is terminal (Revert, Stop or Return)
      s8
  }

  /** Node 349
    * Segment Id for this node is: 46
    * Starting at 0x1b7
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s349(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x1b7 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 1

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      var s2 := CallValue(s1);
      var s3 := Dup1(s2);
      var s4 := IsZero(s3);
      var s5 := Push2(s4, 0x01c3);
      var s6 := JumpI(s5);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s5.stack[1] > 0 then
        ExecuteFromCFGNode_s351(s6, gas - 1)
      else
        ExecuteFromCFGNode_s350(s6, gas - 1)
  }

  /** Node 350
    * Segment Id for this node is: 47
    * Starting at 0x1bf
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s350(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x1bf as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 2

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push1(s0, 0x00);
      var s2 := Dup1(s1);
      var s3 := Revert(s2);
      // Segment is terminal (Revert, Stop or Return)
      s3
  }

  /** Node 351
    * Segment Id for this node is: 48
    * Starting at 0x1c3
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +3
    * Net Capacity Effect: -3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s351(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x1c3 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 2

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      var s2 := Pop(s1);
      var s3 := Push2(s2, 0x0175);
      var s4 := Push2(s3, 0x01d2);
      var s5 := CallDataSize(s4);
      var s6 := Push1(s5, 0x04);
      var s7 := Push2(s6, 0x0d0f);
      var s8 := Jump(s7);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s352(s8, gas - 1)
  }

  /** Node 352
    * Segment Id for this node is: 191
    * Starting at 0xd0f
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 7
    * Net Stack Effect: +4
    * Net Capacity Effect: -4
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s352(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xd0f as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 5

    requires s0.stack[2] == 0x1d2

    requires s0.stack[3] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0x1d2;
      assert s1.Peek(3) == 0x175;
      var s2 := Push1(s1, 0x00);
      var s3 := Dup1(s2);
      var s4 := Push1(s3, 0x00);
      var s5 := Dup1(s4);
      var s6 := Push1(s5, 0x80);
      var s7 := Dup6(s6);
      var s8 := Dup8(s7);
      var s9 := Sub(s8);
      var s10 := SLt(s9);
      var s11 := IsZero(s10);
      assert s11.Peek(7) == 0x1d2;
      assert s11.Peek(8) == 0x175;
      var s12 := Push2(s11, 0x0d25);
      var s13 := JumpI(s12);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s12.stack[1] > 0 then
        ExecuteFromCFGNode_s354(s13, gas - 1)
      else
        ExecuteFromCFGNode_s353(s13, gas - 1)
  }

  /** Node 353
    * Segment Id for this node is: 192
    * Starting at 0xd21
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s353(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xd21 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 9

    requires s0.stack[6] == 0x1d2

    requires s0.stack[7] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push1(s0, 0x00);
      assert s1.Peek(7) == 0x1d2;
      assert s1.Peek(8) == 0x175;
      var s2 := Dup1(s1);
      var s3 := Revert(s2);
      // Segment is terminal (Revert, Stop or Return)
      s3
  }

  /** Node 354
    * Segment Id for this node is: 193
    * Starting at 0xd25
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 5
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +2
    * Net Capacity Effect: -2
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s354(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xd25 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 9

    requires s0.stack[6] == 0x1d2

    requires s0.stack[7] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(6) == 0x1d2;
      assert s1.Peek(7) == 0x175;
      var s2 := Push2(s1, 0x0d2e);
      var s3 := Dup6(s2);
      var s4 := Push2(s3, 0x0c9d);
      var s5 := Jump(s4);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s355(s5, gas - 1)
  }

  /** Node 355
    * Segment Id for this node is: 180
    * Starting at 0xc9d
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s355(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xc9d as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 11

    requires s0.stack[1] == 0xd2e

    requires s0.stack[8] == 0x1d2

    requires s0.stack[9] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(1) == 0xd2e;
      assert s1.Peek(8) == 0x1d2;
      assert s1.Peek(9) == 0x175;
      var s2 := Dup1(s1);
      var s3 := CallDataLoad(s2);
      var s4 := Push1(s3, 0x01);
      var s5 := Push1(s4, 0x01);
      var s6 := Push1(s5, 0xa0);
      var s7 := Shl(s6);
      var s8 := Sub(s7);
      var s9 := Dup2(s8);
      var s10 := And(s9);
      var s11 := Dup2(s10);
      assert s11.Peek(4) == 0xd2e;
      assert s11.Peek(11) == 0x1d2;
      assert s11.Peek(12) == 0x175;
      var s12 := Eq(s11);
      var s13 := Push2(s12, 0x0cb4);
      var s14 := JumpI(s13);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s13.stack[1] > 0 then
        ExecuteFromCFGNode_s357(s14, gas - 1)
      else
        ExecuteFromCFGNode_s356(s14, gas - 1)
  }

  /** Node 356
    * Segment Id for this node is: 181
    * Starting at 0xcb0
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s356(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xcb0 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 12

    requires s0.stack[2] == 0xd2e

    requires s0.stack[9] == 0x1d2

    requires s0.stack[10] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push1(s0, 0x00);
      assert s1.Peek(3) == 0xd2e;
      assert s1.Peek(10) == 0x1d2;
      assert s1.Peek(11) == 0x175;
      var s2 := Dup1(s1);
      var s3 := Revert(s2);
      // Segment is terminal (Revert, Stop or Return)
      s3
  }

  /** Node 357
    * Segment Id for this node is: 182
    * Starting at 0xcb4
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 3
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -2
    * Net Capacity Effect: +2
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s357(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xcb4 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 12

    requires s0.stack[2] == 0xd2e

    requires s0.stack[9] == 0x1d2

    requires s0.stack[10] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0xd2e;
      assert s1.Peek(9) == 0x1d2;
      assert s1.Peek(10) == 0x175;
      var s2 := Swap2(s1);
      var s3 := Swap1(s2);
      var s4 := Pop(s3);
      var s5 := Jump(s4);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s358(s5, gas - 1)
  }

  /** Node 358
    * Segment Id for this node is: 194
    * Starting at 0xd2e
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 6
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s358(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xd2e as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 10

    requires s0.stack[7] == 0x1d2

    requires s0.stack[8] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(7) == 0x1d2;
      assert s1.Peek(8) == 0x175;
      var s2 := Swap4(s1);
      var s3 := Pop(s2);
      var s4 := Push2(s3, 0x0d3c);
      var s5 := Push1(s4, 0x20);
      var s6 := Dup7(s5);
      var s7 := Add(s6);
      var s8 := Push2(s7, 0x0c9d);
      var s9 := Jump(s8);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s359(s9, gas - 1)
  }

  /** Node 359
    * Segment Id for this node is: 180
    * Starting at 0xc9d
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s359(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xc9d as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 11

    requires s0.stack[1] == 0xd3c

    requires s0.stack[8] == 0x1d2

    requires s0.stack[9] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(1) == 0xd3c;
      assert s1.Peek(8) == 0x1d2;
      assert s1.Peek(9) == 0x175;
      var s2 := Dup1(s1);
      var s3 := CallDataLoad(s2);
      var s4 := Push1(s3, 0x01);
      var s5 := Push1(s4, 0x01);
      var s6 := Push1(s5, 0xa0);
      var s7 := Shl(s6);
      var s8 := Sub(s7);
      var s9 := Dup2(s8);
      var s10 := And(s9);
      var s11 := Dup2(s10);
      assert s11.Peek(4) == 0xd3c;
      assert s11.Peek(11) == 0x1d2;
      assert s11.Peek(12) == 0x175;
      var s12 := Eq(s11);
      var s13 := Push2(s12, 0x0cb4);
      var s14 := JumpI(s13);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s13.stack[1] > 0 then
        ExecuteFromCFGNode_s361(s14, gas - 1)
      else
        ExecuteFromCFGNode_s360(s14, gas - 1)
  }

  /** Node 360
    * Segment Id for this node is: 181
    * Starting at 0xcb0
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s360(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xcb0 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 12

    requires s0.stack[2] == 0xd3c

    requires s0.stack[9] == 0x1d2

    requires s0.stack[10] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push1(s0, 0x00);
      assert s1.Peek(3) == 0xd3c;
      assert s1.Peek(10) == 0x1d2;
      assert s1.Peek(11) == 0x175;
      var s2 := Dup1(s1);
      var s3 := Revert(s2);
      // Segment is terminal (Revert, Stop or Return)
      s3
  }

  /** Node 361
    * Segment Id for this node is: 182
    * Starting at 0xcb4
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 3
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -2
    * Net Capacity Effect: +2
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s361(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xcb4 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 12

    requires s0.stack[2] == 0xd3c

    requires s0.stack[9] == 0x1d2

    requires s0.stack[10] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0xd3c;
      assert s1.Peek(9) == 0x1d2;
      assert s1.Peek(10) == 0x175;
      var s2 := Swap2(s1);
      var s3 := Swap1(s2);
      var s4 := Pop(s3);
      var s5 := Jump(s4);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s362(s5, gas - 1)
  }

  /** Node 362
    * Segment Id for this node is: 195
    * Starting at 0xd3c
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 8
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -4
    * Net Capacity Effect: +4
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s362(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xd3c as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 10

    requires s0.stack[7] == 0x1d2

    requires s0.stack[8] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(7) == 0x1d2;
      assert s1.Peek(8) == 0x175;
      var s2 := Swap4(s1);
      var s3 := Swap7(s2);
      var s4 := Swap4(s3);
      var s5 := Swap6(s4);
      var s6 := Pop(s5);
      var s7 := Pop(s6);
      var s8 := Pop(s7);
      var s9 := Pop(s8);
      var s10 := Push1(s9, 0x40);
      var s11 := Dup3(s10);
      assert s11.Peek(2) == 0x1d2;
      assert s11.Peek(6) == 0x175;
      var s12 := Add(s11);
      var s13 := CallDataLoad(s12);
      var s14 := Swap2(s13);
      var s15 := Push1(s14, 0x60);
      var s16 := Add(s15);
      var s17 := CallDataLoad(s16);
      var s18 := Swap1(s17);
      var s19 := Jump(s18);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s363(s19, gas - 1)
  }

  /** Node 363
    * Segment Id for this node is: 49
    * Starting at 0x1d2
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 1
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s363(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x1d2 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 6

    requires s0.stack[4] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(4) == 0x175;
      var s2 := Push2(s1, 0x05b3);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s364(s3, gas - 1)
  }

  /** Node 364
    * Segment Id for this node is: 104
    * Starting at 0x5b3
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +3
    * Net Capacity Effect: -3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s364(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x5b3 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 6

    requires s0.stack[4] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(4) == 0x175;
      var s2 := Push32(s1, 0x241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b08);
      var s3 := Push2(s2, 0x05dd);
      var s4 := Dup2(s3);
      var s5 := Push2(s4, 0x0826);
      var s6 := Jump(s5);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s365(s6, gas - 1)
  }

  /** Node 365
    * Segment Id for this node is: 122
    * Starting at 0x826
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +3
    * Net Capacity Effect: -3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s365(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x826 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 9

    requires s0.stack[1] == 0x5dd

    requires s0.stack[7] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(1) == 0x5dd;
      assert s1.Peek(7) == 0x175;
      var s2 := Push2(s1, 0x0830);
      var s3 := Dup2(s2);
      var s4 := Caller(s3);
      var s5 := Push2(s4, 0x0a4c);
      var s6 := Jump(s5);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s366(s6, gas - 1)
  }

  /** Node 366
    * Segment Id for this node is: 143
    * Starting at 0xa4c
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +3
    * Net Capacity Effect: -3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s366(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xa4c as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 12

    requires s0.stack[2] == 0x830

    requires s0.stack[4] == 0x5dd

    requires s0.stack[10] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0x830;
      assert s1.Peek(4) == 0x5dd;
      assert s1.Peek(10) == 0x175;
      var s2 := Push2(s1, 0x0a56);
      var s3 := Dup3(s2);
      var s4 := Dup3(s3);
      var s5 := Push2(s4, 0x0708);
      var s6 := Jump(s5);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s367(s6, gas - 1)
  }

  /** Node 367
    * Segment Id for this node is: 114
    * Starting at 0x708
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 3
    * Minimum capacity for this segment to prevent stack overflow: 6
    * Net Stack Effect: -2
    * Net Capacity Effect: +2
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s367(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x708 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 15

    requires s0.stack[2] == 0xa56

    requires s0.stack[5] == 0x830

    requires s0.stack[7] == 0x5dd

    requires s0.stack[13] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0xa56;
      assert s1.Peek(5) == 0x830;
      assert s1.Peek(7) == 0x5dd;
      assert s1.Peek(13) == 0x175;
      var s2 := Push1(s1, 0x00);
      var s3 := Swap2(s2);
      var s4 := Dup3(s3);
      var s5 := MStore(s4);
      var s6 := Push1(s5, 0x20);
      var s7 := Dup3(s6);
      var s8 := Dup2(s7);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x40);
      var s11 := Dup1(s10);
      assert s11.Peek(5) == 0xa56;
      assert s11.Peek(8) == 0x830;
      assert s11.Peek(10) == 0x5dd;
      assert s11.Peek(16) == 0x175;
      var s12 := Dup5(s11);
      var s13 := Keccak256(s12);
      var s14 := Push1(s13, 0x01);
      var s15 := Push1(s14, 0x01);
      var s16 := Push1(s15, 0xa0);
      var s17 := Shl(s16);
      var s18 := Sub(s17);
      var s19 := Swap4(s18);
      var s20 := Swap1(s19);
      var s21 := Swap4(s20);
      assert s21.Peek(6) == 0xa56;
      assert s21.Peek(9) == 0x830;
      assert s21.Peek(11) == 0x5dd;
      assert s21.Peek(17) == 0x175;
      var s22 := And(s21);
      var s23 := Dup5(s22);
      var s24 := MStore(s23);
      var s25 := Swap2(s24);
      var s26 := Swap1(s25);
      var s27 := MStore(s26);
      var s28 := Swap1(s27);
      var s29 := Keccak256(s28);
      var s30 := SLoad(s29);
      var s31 := Push1(s30, 0xff);
      assert s31.Peek(2) == 0xa56;
      assert s31.Peek(5) == 0x830;
      assert s31.Peek(7) == 0x5dd;
      assert s31.Peek(13) == 0x175;
      var s32 := And(s31);
      var s33 := Swap1(s32);
      var s34 := Jump(s33);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s368(s34, gas - 1)
  }

  /** Node 368
    * Segment Id for this node is: 144
    * Starting at 0xa56
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 1
    * Net Stack Effect: -1
    * Net Capacity Effect: +1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s368(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xa56 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 13

    requires s0.stack[3] == 0x830

    requires s0.stack[5] == 0x5dd

    requires s0.stack[11] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0x830;
      assert s1.Peek(5) == 0x5dd;
      assert s1.Peek(11) == 0x175;
      var s2 := Push2(s1, 0x05af);
      var s3 := JumpI(s2);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s2.stack[1] > 0 then
        ExecuteFromCFGNode_s491(s3, gas - 1)
      else
        ExecuteFromCFGNode_s369(s3, gas - 1)
  }

  /** Node 369
    * Segment Id for this node is: 145
    * Starting at 0xa5b
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +2
    * Net Capacity Effect: -2
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s369(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xa5b as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 12

    requires s0.stack[2] == 0x830

    requires s0.stack[4] == 0x5dd

    requires s0.stack[10] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0a63);
      assert s1.Peek(0) == 0xa63;
      assert s1.Peek(3) == 0x830;
      assert s1.Peek(5) == 0x5dd;
      assert s1.Peek(11) == 0x175;
      var s2 := Dup2(s1);
      var s3 := Push2(s2, 0x0aa5);
      var s4 := Jump(s3);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s370(s4, gas - 1)
  }

  /** Node 370
    * Segment Id for this node is: 149
    * Starting at 0xaa5
    * Segment type is: CONT Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 5
    * Net Stack Effect: +4
    * Net Capacity Effect: -4
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s370(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xaa5 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 14

    requires s0.stack[1] == 0xa63

    requires s0.stack[4] == 0x830

    requires s0.stack[6] == 0x5dd

    requires s0.stack[12] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(1) == 0xa63;
      assert s1.Peek(4) == 0x830;
      assert s1.Peek(6) == 0x5dd;
      assert s1.Peek(12) == 0x175;
      var s2 := Push1(s1, 0x60);
      var s3 := Push2(s2, 0x0321);
      var s4 := Push1(s3, 0x01);
      var s5 := Push1(s4, 0x01);
      var s6 := Push1(s5, 0xa0);
      var s7 := Shl(s6);
      var s8 := Sub(s7);
      var s9 := Dup4(s8);
      var s10 := And(s9);
      var s11 := Push1(s10, 0x14);
      //  Go to the next instruction at pc + 1
      ExecuteFromCFGNode_s371(s11, gas - 1)
  }

  /** Node 371
    * Segment Id for this node is: 150
    * Starting at 0xab7
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 6
    * Net Stack Effect: +5
    * Net Capacity Effect: -5
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s371(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xab7 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 18

    requires s0.stack[2] == 0x321

    requires s0.stack[5] == 0xa63

    requires s0.stack[8] == 0x830

    requires s0.stack[10] == 0x5dd

    requires s0.stack[16] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0x321;
      assert s1.Peek(5) == 0xa63;
      assert s1.Peek(8) == 0x830;
      assert s1.Peek(10) == 0x5dd;
      assert s1.Peek(16) == 0x175;
      var s2 := Push1(s1, 0x60);
      var s3 := Push1(s2, 0x00);
      var s4 := Push2(s3, 0x0ac6);
      var s5 := Dup4(s4);
      var s6 := Push1(s5, 0x02);
      var s7 := Push2(s6, 0x0eb8);
      var s8 := Jump(s7);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s372(s8, gas - 1)
  }

  /** Node 372
    * Segment Id for this node is: 220
    * Starting at 0xeb8
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s372(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xeb8 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 23

    requires s0.stack[2] == 0xac6

    requires s0.stack[7] == 0x321

    requires s0.stack[10] == 0xa63

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x5dd

    requires s0.stack[21] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0xac6;
      assert s1.Peek(7) == 0x321;
      assert s1.Peek(10) == 0xa63;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x5dd;
      assert s1.Peek(21) == 0x175;
      var s2 := Dup1(s1);
      var s3 := Dup3(s2);
      var s4 := Mul(s3);
      var s5 := Dup2(s4);
      var s6 := IsZero(s5);
      var s7 := Dup3(s6);
      var s8 := Dup3(s7);
      var s9 := Div(s8);
      var s10 := Dup5(s9);
      var s11 := Eq(s10);
      assert s11.Peek(5) == 0xac6;
      assert s11.Peek(10) == 0x321;
      assert s11.Peek(13) == 0xa63;
      assert s11.Peek(16) == 0x830;
      assert s11.Peek(18) == 0x5dd;
      assert s11.Peek(24) == 0x175;
      var s12 := Or(s11);
      var s13 := Push2(s12, 0x0321);
      var s14 := JumpI(s13);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s13.stack[1] > 0 then
        ExecuteFromCFGNode_s375(s14, gas - 1)
      else
        ExecuteFromCFGNode_s373(s14, gas - 1)
  }

  /** Node 373
    * Segment Id for this node is: 221
    * Starting at 0xec8
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s373(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xec8 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 24

    requires s0.stack[3] == 0xac6

    requires s0.stack[8] == 0x321

    requires s0.stack[11] == 0xa63

    requires s0.stack[14] == 0x830

    requires s0.stack[16] == 0x5dd

    requires s0.stack[22] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0321);
      assert s1.Peek(0) == 0x321;
      assert s1.Peek(4) == 0xac6;
      assert s1.Peek(9) == 0x321;
      assert s1.Peek(12) == 0xa63;
      assert s1.Peek(15) == 0x830;
      assert s1.Peek(17) == 0x5dd;
      assert s1.Peek(23) == 0x175;
      var s2 := Push2(s1, 0x0d85);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s374(s3, gas - 1)
  }

  /** Node 374
    * Segment Id for this node is: 202
    * Starting at 0xd85
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s374(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xd85 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 25

    requires s0.stack[0] == 0x321

    requires s0.stack[4] == 0xac6

    requires s0.stack[9] == 0x321

    requires s0.stack[12] == 0xa63

    requires s0.stack[15] == 0x830

    requires s0.stack[17] == 0x5dd

    requires s0.stack[23] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0x321;
      assert s1.Peek(4) == 0xac6;
      assert s1.Peek(9) == 0x321;
      assert s1.Peek(12) == 0xa63;
      assert s1.Peek(15) == 0x830;
      assert s1.Peek(17) == 0x5dd;
      assert s1.Peek(23) == 0x175;
      var s2 := Push4(s1, 0x4e487b71);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x11);
      var s8 := Push1(s7, 0x04);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x24);
      var s11 := Push1(s10, 0x00);
      assert s11.Peek(2) == 0x321;
      assert s11.Peek(6) == 0xac6;
      assert s11.Peek(11) == 0x321;
      assert s11.Peek(14) == 0xa63;
      assert s11.Peek(17) == 0x830;
      assert s11.Peek(19) == 0x5dd;
      assert s11.Peek(25) == 0x175;
      var s12 := Revert(s11);
      // Segment is terminal (Revert, Stop or Return)
      s12
  }

  /** Node 375
    * Segment Id for this node is: 79
    * Starting at 0x321
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 4
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -3
    * Net Capacity Effect: +3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s375(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x321 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 24

    requires s0.stack[3] == 0xac6

    requires s0.stack[8] == 0x321

    requires s0.stack[11] == 0xa63

    requires s0.stack[14] == 0x830

    requires s0.stack[16] == 0x5dd

    requires s0.stack[22] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0xac6;
      assert s1.Peek(8) == 0x321;
      assert s1.Peek(11) == 0xa63;
      assert s1.Peek(14) == 0x830;
      assert s1.Peek(16) == 0x5dd;
      assert s1.Peek(22) == 0x175;
      var s2 := Swap3(s1);
      var s3 := Swap2(s2);
      var s4 := Pop(s3);
      var s5 := Pop(s4);
      var s6 := Jump(s5);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s376(s6, gas - 1)
  }

  /** Node 376
    * Segment Id for this node is: 151
    * Starting at 0xac6
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +2
    * Net Capacity Effect: -2
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s376(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xac6 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 21

    requires s0.stack[5] == 0x321

    requires s0.stack[8] == 0xa63

    requires s0.stack[11] == 0x830

    requires s0.stack[13] == 0x5dd

    requires s0.stack[19] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(5) == 0x321;
      assert s1.Peek(8) == 0xa63;
      assert s1.Peek(11) == 0x830;
      assert s1.Peek(13) == 0x5dd;
      assert s1.Peek(19) == 0x175;
      var s2 := Push2(s1, 0x0ad1);
      var s3 := Swap1(s2);
      var s4 := Push1(s3, 0x02);
      var s5 := Push2(s4, 0x0ecf);
      var s6 := Jump(s5);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s377(s6, gas - 1)
  }

  /** Node 377
    * Segment Id for this node is: 222
    * Starting at 0xecf
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s377(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xecf as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 23

    requires s0.stack[2] == 0xad1

    requires s0.stack[7] == 0x321

    requires s0.stack[10] == 0xa63

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x5dd

    requires s0.stack[21] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0xad1;
      assert s1.Peek(7) == 0x321;
      assert s1.Peek(10) == 0xa63;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x5dd;
      assert s1.Peek(21) == 0x175;
      var s2 := Dup1(s1);
      var s3 := Dup3(s2);
      var s4 := Add(s3);
      var s5 := Dup1(s4);
      var s6 := Dup3(s5);
      var s7 := Gt(s6);
      var s8 := IsZero(s7);
      var s9 := Push2(s8, 0x0321);
      var s10 := JumpI(s9);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s9.stack[1] > 0 then
        ExecuteFromCFGNode_s380(s10, gas - 1)
      else
        ExecuteFromCFGNode_s378(s10, gas - 1)
  }

  /** Node 378
    * Segment Id for this node is: 223
    * Starting at 0xedb
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s378(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xedb as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 24

    requires s0.stack[3] == 0xad1

    requires s0.stack[8] == 0x321

    requires s0.stack[11] == 0xa63

    requires s0.stack[14] == 0x830

    requires s0.stack[16] == 0x5dd

    requires s0.stack[22] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0321);
      assert s1.Peek(0) == 0x321;
      assert s1.Peek(4) == 0xad1;
      assert s1.Peek(9) == 0x321;
      assert s1.Peek(12) == 0xa63;
      assert s1.Peek(15) == 0x830;
      assert s1.Peek(17) == 0x5dd;
      assert s1.Peek(23) == 0x175;
      var s2 := Push2(s1, 0x0d85);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s379(s3, gas - 1)
  }

  /** Node 379
    * Segment Id for this node is: 202
    * Starting at 0xd85
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s379(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xd85 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 25

    requires s0.stack[0] == 0x321

    requires s0.stack[4] == 0xad1

    requires s0.stack[9] == 0x321

    requires s0.stack[12] == 0xa63

    requires s0.stack[15] == 0x830

    requires s0.stack[17] == 0x5dd

    requires s0.stack[23] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0x321;
      assert s1.Peek(4) == 0xad1;
      assert s1.Peek(9) == 0x321;
      assert s1.Peek(12) == 0xa63;
      assert s1.Peek(15) == 0x830;
      assert s1.Peek(17) == 0x5dd;
      assert s1.Peek(23) == 0x175;
      var s2 := Push4(s1, 0x4e487b71);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x11);
      var s8 := Push1(s7, 0x04);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x24);
      var s11 := Push1(s10, 0x00);
      assert s11.Peek(2) == 0x321;
      assert s11.Peek(6) == 0xad1;
      assert s11.Peek(11) == 0x321;
      assert s11.Peek(14) == 0xa63;
      assert s11.Peek(17) == 0x830;
      assert s11.Peek(19) == 0x5dd;
      assert s11.Peek(25) == 0x175;
      var s12 := Revert(s11);
      // Segment is terminal (Revert, Stop or Return)
      s12
  }

  /** Node 380
    * Segment Id for this node is: 79
    * Starting at 0x321
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 4
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -3
    * Net Capacity Effect: +3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s380(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x321 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 24

    requires s0.stack[3] == 0xad1

    requires s0.stack[8] == 0x321

    requires s0.stack[11] == 0xa63

    requires s0.stack[14] == 0x830

    requires s0.stack[16] == 0x5dd

    requires s0.stack[22] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0xad1;
      assert s1.Peek(8) == 0x321;
      assert s1.Peek(11) == 0xa63;
      assert s1.Peek(14) == 0x830;
      assert s1.Peek(16) == 0x5dd;
      assert s1.Peek(22) == 0x175;
      var s2 := Swap3(s1);
      var s3 := Swap2(s2);
      var s4 := Pop(s3);
      var s5 := Pop(s4);
      var s6 := Jump(s5);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s381(s6, gas - 1)
  }

  /** Node 381
    * Segment Id for this node is: 152
    * Starting at 0xad1
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s381(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xad1 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 21

    requires s0.stack[5] == 0x321

    requires s0.stack[8] == 0xa63

    requires s0.stack[11] == 0x830

    requires s0.stack[13] == 0x5dd

    requires s0.stack[19] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(5) == 0x321;
      assert s1.Peek(8) == 0xa63;
      assert s1.Peek(11) == 0x830;
      assert s1.Peek(13) == 0x5dd;
      assert s1.Peek(19) == 0x175;
      var s2 := Push8(s1, 0xffffffffffffffff);
      var s3 := Dup2(s2);
      var s4 := Gt(s3);
      var s5 := IsZero(s4);
      var s6 := Push2(s5, 0x0ae9);
      var s7 := JumpI(s6);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s6.stack[1] > 0 then
        ExecuteFromCFGNode_s384(s7, gas - 1)
      else
        ExecuteFromCFGNode_s382(s7, gas - 1)
  }

  /** Node 382
    * Segment Id for this node is: 153
    * Starting at 0xae2
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s382(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xae2 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 21

    requires s0.stack[5] == 0x321

    requires s0.stack[8] == 0xa63

    requires s0.stack[11] == 0x830

    requires s0.stack[13] == 0x5dd

    requires s0.stack[19] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0ae9);
      assert s1.Peek(0) == 0xae9;
      assert s1.Peek(6) == 0x321;
      assert s1.Peek(9) == 0xa63;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x5dd;
      assert s1.Peek(20) == 0x175;
      var s2 := Push2(s1, 0x0ee2);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s383(s3, gas - 1)
  }

  /** Node 383
    * Segment Id for this node is: 224
    * Starting at 0xee2
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s383(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xee2 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 22

    requires s0.stack[0] == 0xae9

    requires s0.stack[6] == 0x321

    requires s0.stack[9] == 0xa63

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x5dd

    requires s0.stack[20] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0xae9;
      assert s1.Peek(6) == 0x321;
      assert s1.Peek(9) == 0xa63;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x5dd;
      assert s1.Peek(20) == 0x175;
      var s2 := Push4(s1, 0x4e487b71);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x41);
      var s8 := Push1(s7, 0x04);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x24);
      var s11 := Push1(s10, 0x00);
      assert s11.Peek(2) == 0xae9;
      assert s11.Peek(8) == 0x321;
      assert s11.Peek(11) == 0xa63;
      assert s11.Peek(14) == 0x830;
      assert s11.Peek(16) == 0x5dd;
      assert s11.Peek(22) == 0x175;
      var s12 := Revert(s11);
      // Segment is terminal (Revert, Stop or Return)
      s12
  }

  /** Node 384
    * Segment Id for this node is: 154
    * Starting at 0xae9
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s384(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xae9 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 21

    requires s0.stack[5] == 0x321

    requires s0.stack[8] == 0xa63

    requires s0.stack[11] == 0x830

    requires s0.stack[13] == 0x5dd

    requires s0.stack[19] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(5) == 0x321;
      assert s1.Peek(8) == 0xa63;
      assert s1.Peek(11) == 0x830;
      assert s1.Peek(13) == 0x5dd;
      assert s1.Peek(19) == 0x175;
      var s2 := Push1(s1, 0x40);
      var s3 := MLoad(s2);
      var s4 := Swap1(s3);
      var s5 := Dup1(s4);
      var s6 := Dup3(s5);
      var s7 := MStore(s6);
      var s8 := Dup1(s7);
      var s9 := Push1(s8, 0x1f);
      var s10 := Add(s9);
      var s11 := Push1(s10, 0x1f);
      assert s11.Peek(8) == 0x321;
      assert s11.Peek(11) == 0xa63;
      assert s11.Peek(14) == 0x830;
      assert s11.Peek(16) == 0x5dd;
      assert s11.Peek(22) == 0x175;
      var s12 := Not(s11);
      var s13 := And(s12);
      var s14 := Push1(s13, 0x20);
      var s15 := Add(s14);
      var s16 := Dup3(s15);
      var s17 := Add(s16);
      var s18 := Push1(s17, 0x40);
      var s19 := MStore(s18);
      var s20 := Dup1(s19);
      var s21 := IsZero(s20);
      assert s21.Peek(7) == 0x321;
      assert s21.Peek(10) == 0xa63;
      assert s21.Peek(13) == 0x830;
      assert s21.Peek(15) == 0x5dd;
      assert s21.Peek(21) == 0x175;
      var s22 := Push2(s21, 0x0b13);
      var s23 := JumpI(s22);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s22.stack[1] > 0 then
        ExecuteFromCFGNode_s386(s23, gas - 1)
      else
        ExecuteFromCFGNode_s385(s23, gas - 1)
  }

  /** Node 385
    * Segment Id for this node is: 155
    * Starting at 0xb07
    * Segment type is: CONT Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 5
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s385(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xb07 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 22

    requires s0.stack[6] == 0x321

    requires s0.stack[9] == 0xa63

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x5dd

    requires s0.stack[20] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push1(s0, 0x20);
      assert s1.Peek(7) == 0x321;
      assert s1.Peek(10) == 0xa63;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x5dd;
      assert s1.Peek(21) == 0x175;
      var s2 := Dup3(s1);
      var s3 := Add(s2);
      var s4 := Dup2(s3);
      var s5 := Dup1(s4);
      var s6 := CallDataSize(s5);
      var s7 := Dup4(s6);
      var s8 := CallDataCopy(s7);
      var s9 := Add(s8);
      var s10 := Swap1(s9);
      var s11 := Pop(s10);
      //  Go to the next instruction at pc + 1
      ExecuteFromCFGNode_s386(s11, gas - 1)
  }

  /** Node 386
    * Segment Id for this node is: 156
    * Starting at 0xb13
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 3
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s386(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xb13 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 22

    requires s0.stack[6] == 0x321

    requires s0.stack[9] == 0xa63

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x5dd

    requires s0.stack[20] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(6) == 0x321;
      assert s1.Peek(9) == 0xa63;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x5dd;
      assert s1.Peek(20) == 0x175;
      var s2 := Pop(s1);
      var s3 := Swap1(s2);
      var s4 := Pop(s3);
      var s5 := Push1(s4, 0x03);
      var s6 := Push1(s5, 0xfc);
      var s7 := Shl(s6);
      var s8 := Dup2(s7);
      var s9 := Push1(s8, 0x00);
      var s10 := Dup2(s9);
      var s11 := MLoad(s10);
      assert s11.Peek(8) == 0x321;
      assert s11.Peek(11) == 0xa63;
      assert s11.Peek(14) == 0x830;
      assert s11.Peek(16) == 0x5dd;
      assert s11.Peek(22) == 0x175;
      var s12 := Dup2(s11);
      var s13 := Lt(s12);
      var s14 := Push2(s13, 0x0b2e);
      var s15 := JumpI(s14);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s14.stack[1] > 0 then
        ExecuteFromCFGNode_s389(s15, gas - 1)
      else
        ExecuteFromCFGNode_s387(s15, gas - 1)
  }

  /** Node 387
    * Segment Id for this node is: 157
    * Starting at 0xb27
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s387(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xb27 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 23

    requires s0.stack[7] == 0x321

    requires s0.stack[10] == 0xa63

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x5dd

    requires s0.stack[21] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0b2e);
      assert s1.Peek(0) == 0xb2e;
      assert s1.Peek(8) == 0x321;
      assert s1.Peek(11) == 0xa63;
      assert s1.Peek(14) == 0x830;
      assert s1.Peek(16) == 0x5dd;
      assert s1.Peek(22) == 0x175;
      var s2 := Push2(s1, 0x0ef8);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s388(s3, gas - 1)
  }

  /** Node 388
    * Segment Id for this node is: 225
    * Starting at 0xef8
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s388(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xef8 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 24

    requires s0.stack[0] == 0xb2e

    requires s0.stack[8] == 0x321

    requires s0.stack[11] == 0xa63

    requires s0.stack[14] == 0x830

    requires s0.stack[16] == 0x5dd

    requires s0.stack[22] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0xb2e;
      assert s1.Peek(8) == 0x321;
      assert s1.Peek(11) == 0xa63;
      assert s1.Peek(14) == 0x830;
      assert s1.Peek(16) == 0x5dd;
      assert s1.Peek(22) == 0x175;
      var s2 := Push4(s1, 0x4e487b71);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x32);
      var s8 := Push1(s7, 0x04);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x24);
      var s11 := Push1(s10, 0x00);
      assert s11.Peek(2) == 0xb2e;
      assert s11.Peek(10) == 0x321;
      assert s11.Peek(13) == 0xa63;
      assert s11.Peek(16) == 0x830;
      assert s11.Peek(18) == 0x5dd;
      assert s11.Peek(24) == 0x175;
      var s12 := Revert(s11);
      // Segment is terminal (Revert, Stop or Return)
      s12
  }

  /** Node 389
    * Segment Id for this node is: 158
    * Starting at 0xb2e
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 4
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s389(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xb2e as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 23

    requires s0.stack[7] == 0x321

    requires s0.stack[10] == 0xa63

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x5dd

    requires s0.stack[21] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(7) == 0x321;
      assert s1.Peek(10) == 0xa63;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x5dd;
      assert s1.Peek(21) == 0x175;
      var s2 := Push1(s1, 0x20);
      var s3 := Add(s2);
      var s4 := Add(s3);
      var s5 := Swap1(s4);
      var s6 := Push1(s5, 0x01);
      var s7 := Push1(s6, 0x01);
      var s8 := Push1(s7, 0xf8);
      var s9 := Shl(s8);
      var s10 := Sub(s9);
      var s11 := Not(s10);
      assert s11.Peek(7) == 0x321;
      assert s11.Peek(10) == 0xa63;
      assert s11.Peek(13) == 0x830;
      assert s11.Peek(15) == 0x5dd;
      assert s11.Peek(21) == 0x175;
      var s12 := And(s11);
      var s13 := Swap1(s12);
      var s14 := Dup2(s13);
      var s15 := Push1(s14, 0x00);
      var s16 := Byte(s15);
      var s17 := Swap1(s16);
      var s18 := MStore8(s17);
      var s19 := Pop(s18);
      var s20 := Push1(s19, 0x0f);
      var s21 := Push1(s20, 0xfb);
      assert s21.Peek(6) == 0x321;
      assert s21.Peek(9) == 0xa63;
      assert s21.Peek(12) == 0x830;
      assert s21.Peek(14) == 0x5dd;
      assert s21.Peek(20) == 0x175;
      var s22 := Shl(s21);
      var s23 := Dup2(s22);
      var s24 := Push1(s23, 0x01);
      var s25 := Dup2(s24);
      var s26 := MLoad(s25);
      var s27 := Dup2(s26);
      var s28 := Lt(s27);
      var s29 := Push2(s28, 0x0b5d);
      var s30 := JumpI(s29);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s29.stack[1] > 0 then
        ExecuteFromCFGNode_s392(s30, gas - 1)
      else
        ExecuteFromCFGNode_s390(s30, gas - 1)
  }

  /** Node 390
    * Segment Id for this node is: 159
    * Starting at 0xb56
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s390(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xb56 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 23

    requires s0.stack[7] == 0x321

    requires s0.stack[10] == 0xa63

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x5dd

    requires s0.stack[21] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0b5d);
      assert s1.Peek(0) == 0xb5d;
      assert s1.Peek(8) == 0x321;
      assert s1.Peek(11) == 0xa63;
      assert s1.Peek(14) == 0x830;
      assert s1.Peek(16) == 0x5dd;
      assert s1.Peek(22) == 0x175;
      var s2 := Push2(s1, 0x0ef8);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s391(s3, gas - 1)
  }

  /** Node 391
    * Segment Id for this node is: 225
    * Starting at 0xef8
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s391(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xef8 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 24

    requires s0.stack[0] == 0xb5d

    requires s0.stack[8] == 0x321

    requires s0.stack[11] == 0xa63

    requires s0.stack[14] == 0x830

    requires s0.stack[16] == 0x5dd

    requires s0.stack[22] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0xb5d;
      assert s1.Peek(8) == 0x321;
      assert s1.Peek(11) == 0xa63;
      assert s1.Peek(14) == 0x830;
      assert s1.Peek(16) == 0x5dd;
      assert s1.Peek(22) == 0x175;
      var s2 := Push4(s1, 0x4e487b71);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x32);
      var s8 := Push1(s7, 0x04);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x24);
      var s11 := Push1(s10, 0x00);
      assert s11.Peek(2) == 0xb5d;
      assert s11.Peek(10) == 0x321;
      assert s11.Peek(13) == 0xa63;
      assert s11.Peek(16) == 0x830;
      assert s11.Peek(18) == 0x5dd;
      assert s11.Peek(24) == 0x175;
      var s12 := Revert(s11);
      // Segment is terminal (Revert, Stop or Return)
      s12
  }

  /** Node 392
    * Segment Id for this node is: 160
    * Starting at 0xb5d
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 6
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s392(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xb5d as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 23

    requires s0.stack[7] == 0x321

    requires s0.stack[10] == 0xa63

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x5dd

    requires s0.stack[21] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(7) == 0x321;
      assert s1.Peek(10) == 0xa63;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x5dd;
      assert s1.Peek(21) == 0x175;
      var s2 := Push1(s1, 0x20);
      var s3 := Add(s2);
      var s4 := Add(s3);
      var s5 := Swap1(s4);
      var s6 := Push1(s5, 0x01);
      var s7 := Push1(s6, 0x01);
      var s8 := Push1(s7, 0xf8);
      var s9 := Shl(s8);
      var s10 := Sub(s9);
      var s11 := Not(s10);
      assert s11.Peek(7) == 0x321;
      assert s11.Peek(10) == 0xa63;
      assert s11.Peek(13) == 0x830;
      assert s11.Peek(15) == 0x5dd;
      assert s11.Peek(21) == 0x175;
      var s12 := And(s11);
      var s13 := Swap1(s12);
      var s14 := Dup2(s13);
      var s15 := Push1(s14, 0x00);
      var s16 := Byte(s15);
      var s17 := Swap1(s16);
      var s18 := MStore8(s17);
      var s19 := Pop(s18);
      var s20 := Push1(s19, 0x00);
      var s21 := Push2(s20, 0x0b81);
      assert s21.Peek(0) == 0xb81;
      assert s21.Peek(6) == 0x321;
      assert s21.Peek(9) == 0xa63;
      assert s21.Peek(12) == 0x830;
      assert s21.Peek(14) == 0x5dd;
      assert s21.Peek(20) == 0x175;
      var s22 := Dup5(s21);
      var s23 := Push1(s22, 0x02);
      var s24 := Push2(s23, 0x0eb8);
      var s25 := Jump(s24);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s393(s25, gas - 1)
  }

  /** Node 393
    * Segment Id for this node is: 220
    * Starting at 0xeb8
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s393(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xeb8 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 24

    requires s0.stack[2] == 0xb81

    requires s0.stack[8] == 0x321

    requires s0.stack[11] == 0xa63

    requires s0.stack[14] == 0x830

    requires s0.stack[16] == 0x5dd

    requires s0.stack[22] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0xb81;
      assert s1.Peek(8) == 0x321;
      assert s1.Peek(11) == 0xa63;
      assert s1.Peek(14) == 0x830;
      assert s1.Peek(16) == 0x5dd;
      assert s1.Peek(22) == 0x175;
      var s2 := Dup1(s1);
      var s3 := Dup3(s2);
      var s4 := Mul(s3);
      var s5 := Dup2(s4);
      var s6 := IsZero(s5);
      var s7 := Dup3(s6);
      var s8 := Dup3(s7);
      var s9 := Div(s8);
      var s10 := Dup5(s9);
      var s11 := Eq(s10);
      assert s11.Peek(5) == 0xb81;
      assert s11.Peek(11) == 0x321;
      assert s11.Peek(14) == 0xa63;
      assert s11.Peek(17) == 0x830;
      assert s11.Peek(19) == 0x5dd;
      assert s11.Peek(25) == 0x175;
      var s12 := Or(s11);
      var s13 := Push2(s12, 0x0321);
      var s14 := JumpI(s13);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s13.stack[1] > 0 then
        ExecuteFromCFGNode_s396(s14, gas - 1)
      else
        ExecuteFromCFGNode_s394(s14, gas - 1)
  }

  /** Node 394
    * Segment Id for this node is: 221
    * Starting at 0xec8
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s394(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xec8 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 25

    requires s0.stack[3] == 0xb81

    requires s0.stack[9] == 0x321

    requires s0.stack[12] == 0xa63

    requires s0.stack[15] == 0x830

    requires s0.stack[17] == 0x5dd

    requires s0.stack[23] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0321);
      assert s1.Peek(0) == 0x321;
      assert s1.Peek(4) == 0xb81;
      assert s1.Peek(10) == 0x321;
      assert s1.Peek(13) == 0xa63;
      assert s1.Peek(16) == 0x830;
      assert s1.Peek(18) == 0x5dd;
      assert s1.Peek(24) == 0x175;
      var s2 := Push2(s1, 0x0d85);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s395(s3, gas - 1)
  }

  /** Node 395
    * Segment Id for this node is: 202
    * Starting at 0xd85
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s395(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xd85 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 26

    requires s0.stack[0] == 0x321

    requires s0.stack[4] == 0xb81

    requires s0.stack[10] == 0x321

    requires s0.stack[13] == 0xa63

    requires s0.stack[16] == 0x830

    requires s0.stack[18] == 0x5dd

    requires s0.stack[24] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0x321;
      assert s1.Peek(4) == 0xb81;
      assert s1.Peek(10) == 0x321;
      assert s1.Peek(13) == 0xa63;
      assert s1.Peek(16) == 0x830;
      assert s1.Peek(18) == 0x5dd;
      assert s1.Peek(24) == 0x175;
      var s2 := Push4(s1, 0x4e487b71);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x11);
      var s8 := Push1(s7, 0x04);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x24);
      var s11 := Push1(s10, 0x00);
      assert s11.Peek(2) == 0x321;
      assert s11.Peek(6) == 0xb81;
      assert s11.Peek(12) == 0x321;
      assert s11.Peek(15) == 0xa63;
      assert s11.Peek(18) == 0x830;
      assert s11.Peek(20) == 0x5dd;
      assert s11.Peek(26) == 0x175;
      var s12 := Revert(s11);
      // Segment is terminal (Revert, Stop or Return)
      s12
  }

  /** Node 396
    * Segment Id for this node is: 79
    * Starting at 0x321
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 4
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -3
    * Net Capacity Effect: +3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s396(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x321 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 25

    requires s0.stack[3] == 0xb81

    requires s0.stack[9] == 0x321

    requires s0.stack[12] == 0xa63

    requires s0.stack[15] == 0x830

    requires s0.stack[17] == 0x5dd

    requires s0.stack[23] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0xb81;
      assert s1.Peek(9) == 0x321;
      assert s1.Peek(12) == 0xa63;
      assert s1.Peek(15) == 0x830;
      assert s1.Peek(17) == 0x5dd;
      assert s1.Peek(23) == 0x175;
      var s2 := Swap3(s1);
      var s3 := Swap2(s2);
      var s4 := Pop(s3);
      var s5 := Pop(s4);
      var s6 := Jump(s5);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s397(s6, gas - 1)
  }

  /** Node 397
    * Segment Id for this node is: 161
    * Starting at 0xb81
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +2
    * Net Capacity Effect: -2
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s397(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xb81 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 22

    requires s0.stack[6] == 0x321

    requires s0.stack[9] == 0xa63

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x5dd

    requires s0.stack[20] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(6) == 0x321;
      assert s1.Peek(9) == 0xa63;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x5dd;
      assert s1.Peek(20) == 0x175;
      var s2 := Push2(s1, 0x0b8c);
      var s3 := Swap1(s2);
      var s4 := Push1(s3, 0x01);
      var s5 := Push2(s4, 0x0ecf);
      var s6 := Jump(s5);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s398(s6, gas - 1)
  }

  /** Node 398
    * Segment Id for this node is: 222
    * Starting at 0xecf
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s398(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xecf as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 24

    requires s0.stack[2] == 0xb8c

    requires s0.stack[8] == 0x321

    requires s0.stack[11] == 0xa63

    requires s0.stack[14] == 0x830

    requires s0.stack[16] == 0x5dd

    requires s0.stack[22] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0xb8c;
      assert s1.Peek(8) == 0x321;
      assert s1.Peek(11) == 0xa63;
      assert s1.Peek(14) == 0x830;
      assert s1.Peek(16) == 0x5dd;
      assert s1.Peek(22) == 0x175;
      var s2 := Dup1(s1);
      var s3 := Dup3(s2);
      var s4 := Add(s3);
      var s5 := Dup1(s4);
      var s6 := Dup3(s5);
      var s7 := Gt(s6);
      var s8 := IsZero(s7);
      var s9 := Push2(s8, 0x0321);
      var s10 := JumpI(s9);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s9.stack[1] > 0 then
        ExecuteFromCFGNode_s401(s10, gas - 1)
      else
        ExecuteFromCFGNode_s399(s10, gas - 1)
  }

  /** Node 399
    * Segment Id for this node is: 223
    * Starting at 0xedb
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s399(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xedb as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 25

    requires s0.stack[3] == 0xb8c

    requires s0.stack[9] == 0x321

    requires s0.stack[12] == 0xa63

    requires s0.stack[15] == 0x830

    requires s0.stack[17] == 0x5dd

    requires s0.stack[23] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0321);
      assert s1.Peek(0) == 0x321;
      assert s1.Peek(4) == 0xb8c;
      assert s1.Peek(10) == 0x321;
      assert s1.Peek(13) == 0xa63;
      assert s1.Peek(16) == 0x830;
      assert s1.Peek(18) == 0x5dd;
      assert s1.Peek(24) == 0x175;
      var s2 := Push2(s1, 0x0d85);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s400(s3, gas - 1)
  }

  /** Node 400
    * Segment Id for this node is: 202
    * Starting at 0xd85
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s400(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xd85 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 26

    requires s0.stack[0] == 0x321

    requires s0.stack[4] == 0xb8c

    requires s0.stack[10] == 0x321

    requires s0.stack[13] == 0xa63

    requires s0.stack[16] == 0x830

    requires s0.stack[18] == 0x5dd

    requires s0.stack[24] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0x321;
      assert s1.Peek(4) == 0xb8c;
      assert s1.Peek(10) == 0x321;
      assert s1.Peek(13) == 0xa63;
      assert s1.Peek(16) == 0x830;
      assert s1.Peek(18) == 0x5dd;
      assert s1.Peek(24) == 0x175;
      var s2 := Push4(s1, 0x4e487b71);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x11);
      var s8 := Push1(s7, 0x04);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x24);
      var s11 := Push1(s10, 0x00);
      assert s11.Peek(2) == 0x321;
      assert s11.Peek(6) == 0xb8c;
      assert s11.Peek(12) == 0x321;
      assert s11.Peek(15) == 0xa63;
      assert s11.Peek(18) == 0x830;
      assert s11.Peek(20) == 0x5dd;
      assert s11.Peek(26) == 0x175;
      var s12 := Revert(s11);
      // Segment is terminal (Revert, Stop or Return)
      s12
  }

  /** Node 401
    * Segment Id for this node is: 79
    * Starting at 0x321
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 4
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -3
    * Net Capacity Effect: +3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s401(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x321 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 25

    requires s0.stack[3] == 0xb8c

    requires s0.stack[9] == 0x321

    requires s0.stack[12] == 0xa63

    requires s0.stack[15] == 0x830

    requires s0.stack[17] == 0x5dd

    requires s0.stack[23] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0xb8c;
      assert s1.Peek(9) == 0x321;
      assert s1.Peek(12) == 0xa63;
      assert s1.Peek(15) == 0x830;
      assert s1.Peek(17) == 0x5dd;
      assert s1.Peek(23) == 0x175;
      var s2 := Swap3(s1);
      var s3 := Swap2(s2);
      var s4 := Pop(s3);
      var s5 := Pop(s4);
      var s6 := Jump(s5);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s402(s6, gas - 1)
  }

  /** Node 402
    * Segment Id for this node is: 162
    * Starting at 0xb8c
    * Segment type is: CONT Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -1
    * Net Capacity Effect: +1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s402(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xb8c as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 22

    requires s0.stack[6] == 0x321

    requires s0.stack[9] == 0xa63

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x5dd

    requires s0.stack[20] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(6) == 0x321;
      assert s1.Peek(9) == 0xa63;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x5dd;
      assert s1.Peek(20) == 0x175;
      var s2 := Swap1(s1);
      var s3 := Pop(s2);
      //  Go to the next instruction at pc + 1
      ExecuteFromCFGNode_s403(s3, gas - 1)
  }

  /** Node 403
    * Segment Id for this node is: 163
    * Starting at 0xb8f
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s403(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xb8f as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 21

    requires s0.stack[5] == 0x321

    requires s0.stack[8] == 0xa63

    requires s0.stack[11] == 0x830

    requires s0.stack[13] == 0x5dd

    requires s0.stack[19] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(5) == 0x321;
      assert s1.Peek(8) == 0xa63;
      assert s1.Peek(11) == 0x830;
      assert s1.Peek(13) == 0x5dd;
      assert s1.Peek(19) == 0x175;
      var s2 := Push1(s1, 0x01);
      var s3 := Dup2(s2);
      var s4 := Gt(s3);
      var s5 := IsZero(s4);
      var s6 := Push2(s5, 0x0c04);
      var s7 := JumpI(s6);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s6.stack[1] > 0 then
        ExecuteFromCFGNode_s416(s7, gas - 1)
      else
        ExecuteFromCFGNode_s404(s7, gas - 1)
  }

  /** Node 404
    * Segment Id for this node is: 164
    * Starting at 0xb99
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 5
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +2
    * Net Capacity Effect: -2
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s404(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xb99 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 21

    requires s0.stack[5] == 0x321

    requires s0.stack[8] == 0xa63

    requires s0.stack[11] == 0x830

    requires s0.stack[13] == 0x5dd

    requires s0.stack[19] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := PushN(s0, 16, 0x181899199a1a9b1b9c1cb0b131b232b3);
      assert s1.Peek(6) == 0x321;
      assert s1.Peek(9) == 0xa63;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x5dd;
      assert s1.Peek(20) == 0x175;
      var s2 := Push1(s1, 0x81);
      var s3 := Shl(s2);
      var s4 := Dup6(s3);
      var s5 := Push1(s4, 0x0f);
      var s6 := And(s5);
      var s7 := Push1(s6, 0x10);
      var s8 := Dup2(s7);
      var s9 := Lt(s8);
      var s10 := Push2(s9, 0x0bc0);
      var s11 := JumpI(s10);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s10.stack[1] > 0 then
        ExecuteFromCFGNode_s407(s11, gas - 1)
      else
        ExecuteFromCFGNode_s405(s11, gas - 1)
  }

  /** Node 405
    * Segment Id for this node is: 165
    * Starting at 0xbb9
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s405(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xbb9 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 23

    requires s0.stack[7] == 0x321

    requires s0.stack[10] == 0xa63

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x5dd

    requires s0.stack[21] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0bc0);
      assert s1.Peek(0) == 0xbc0;
      assert s1.Peek(8) == 0x321;
      assert s1.Peek(11) == 0xa63;
      assert s1.Peek(14) == 0x830;
      assert s1.Peek(16) == 0x5dd;
      assert s1.Peek(22) == 0x175;
      var s2 := Push2(s1, 0x0ef8);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s406(s3, gas - 1)
  }

  /** Node 406
    * Segment Id for this node is: 225
    * Starting at 0xef8
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s406(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xef8 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 24

    requires s0.stack[0] == 0xbc0

    requires s0.stack[8] == 0x321

    requires s0.stack[11] == 0xa63

    requires s0.stack[14] == 0x830

    requires s0.stack[16] == 0x5dd

    requires s0.stack[22] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0xbc0;
      assert s1.Peek(8) == 0x321;
      assert s1.Peek(11) == 0xa63;
      assert s1.Peek(14) == 0x830;
      assert s1.Peek(16) == 0x5dd;
      assert s1.Peek(22) == 0x175;
      var s2 := Push4(s1, 0x4e487b71);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x32);
      var s8 := Push1(s7, 0x04);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x24);
      var s11 := Push1(s10, 0x00);
      assert s11.Peek(2) == 0xbc0;
      assert s11.Peek(10) == 0x321;
      assert s11.Peek(13) == 0xa63;
      assert s11.Peek(16) == 0x830;
      assert s11.Peek(18) == 0x5dd;
      assert s11.Peek(24) == 0x175;
      var s12 := Revert(s11);
      // Segment is terminal (Revert, Stop or Return)
      s12
  }

  /** Node 407
    * Segment Id for this node is: 166
    * Starting at 0xbc0
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 4
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s407(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xbc0 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 23

    requires s0.stack[7] == 0x321

    requires s0.stack[10] == 0xa63

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x5dd

    requires s0.stack[21] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(7) == 0x321;
      assert s1.Peek(10) == 0xa63;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x5dd;
      assert s1.Peek(21) == 0x175;
      var s2 := Byte(s1);
      var s3 := Push1(s2, 0xf8);
      var s4 := Shl(s3);
      var s5 := Dup3(s4);
      var s6 := Dup3(s5);
      var s7 := Dup2(s6);
      var s8 := MLoad(s7);
      var s9 := Dup2(s8);
      var s10 := Lt(s9);
      var s11 := Push2(s10, 0x0bd6);
      assert s11.Peek(0) == 0xbd6;
      assert s11.Peek(10) == 0x321;
      assert s11.Peek(13) == 0xa63;
      assert s11.Peek(16) == 0x830;
      assert s11.Peek(18) == 0x5dd;
      assert s11.Peek(24) == 0x175;
      var s12 := JumpI(s11);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s11.stack[1] > 0 then
        ExecuteFromCFGNode_s410(s12, gas - 1)
      else
        ExecuteFromCFGNode_s408(s12, gas - 1)
  }

  /** Node 408
    * Segment Id for this node is: 167
    * Starting at 0xbcf
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s408(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xbcf as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 24

    requires s0.stack[8] == 0x321

    requires s0.stack[11] == 0xa63

    requires s0.stack[14] == 0x830

    requires s0.stack[16] == 0x5dd

    requires s0.stack[22] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0bd6);
      assert s1.Peek(0) == 0xbd6;
      assert s1.Peek(9) == 0x321;
      assert s1.Peek(12) == 0xa63;
      assert s1.Peek(15) == 0x830;
      assert s1.Peek(17) == 0x5dd;
      assert s1.Peek(23) == 0x175;
      var s2 := Push2(s1, 0x0ef8);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s409(s3, gas - 1)
  }

  /** Node 409
    * Segment Id for this node is: 225
    * Starting at 0xef8
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s409(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xef8 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 25

    requires s0.stack[0] == 0xbd6

    requires s0.stack[9] == 0x321

    requires s0.stack[12] == 0xa63

    requires s0.stack[15] == 0x830

    requires s0.stack[17] == 0x5dd

    requires s0.stack[23] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0xbd6;
      assert s1.Peek(9) == 0x321;
      assert s1.Peek(12) == 0xa63;
      assert s1.Peek(15) == 0x830;
      assert s1.Peek(17) == 0x5dd;
      assert s1.Peek(23) == 0x175;
      var s2 := Push4(s1, 0x4e487b71);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x32);
      var s8 := Push1(s7, 0x04);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x24);
      var s11 := Push1(s10, 0x00);
      assert s11.Peek(2) == 0xbd6;
      assert s11.Peek(11) == 0x321;
      assert s11.Peek(14) == 0xa63;
      assert s11.Peek(17) == 0x830;
      assert s11.Peek(19) == 0x5dd;
      assert s11.Peek(25) == 0x175;
      var s12 := Revert(s11);
      // Segment is terminal (Revert, Stop or Return)
      s12
  }

  /** Node 410
    * Segment Id for this node is: 168
    * Starting at 0xbd6
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 8
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: -1
    * Net Capacity Effect: +1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s410(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xbd6 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 24

    requires s0.stack[8] == 0x321

    requires s0.stack[11] == 0xa63

    requires s0.stack[14] == 0x830

    requires s0.stack[16] == 0x5dd

    requires s0.stack[22] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(8) == 0x321;
      assert s1.Peek(11) == 0xa63;
      assert s1.Peek(14) == 0x830;
      assert s1.Peek(16) == 0x5dd;
      assert s1.Peek(22) == 0x175;
      var s2 := Push1(s1, 0x20);
      var s3 := Add(s2);
      var s4 := Add(s3);
      var s5 := Swap1(s4);
      var s6 := Push1(s5, 0x01);
      var s7 := Push1(s6, 0x01);
      var s8 := Push1(s7, 0xf8);
      var s9 := Shl(s8);
      var s10 := Sub(s9);
      var s11 := Not(s10);
      assert s11.Peek(8) == 0x321;
      assert s11.Peek(11) == 0xa63;
      assert s11.Peek(14) == 0x830;
      assert s11.Peek(16) == 0x5dd;
      assert s11.Peek(22) == 0x175;
      var s12 := And(s11);
      var s13 := Swap1(s12);
      var s14 := Dup2(s13);
      var s15 := Push1(s14, 0x00);
      var s16 := Byte(s15);
      var s17 := Swap1(s16);
      var s18 := MStore8(s17);
      var s19 := Pop(s18);
      var s20 := Push1(s19, 0x04);
      var s21 := Swap5(s20);
      assert s21.Peek(6) == 0x321;
      assert s21.Peek(9) == 0xa63;
      assert s21.Peek(12) == 0x830;
      assert s21.Peek(14) == 0x5dd;
      assert s21.Peek(20) == 0x175;
      var s22 := Swap1(s21);
      var s23 := Swap5(s22);
      var s24 := Shr(s23);
      var s25 := Swap4(s24);
      var s26 := Push2(s25, 0x0bfd);
      var s27 := Dup2(s26);
      var s28 := Push2(s27, 0x0f0e);
      var s29 := Jump(s28);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s411(s29, gas - 1)
  }

  /** Node 411
    * Segment Id for this node is: 226
    * Starting at 0xf0e
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s411(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xf0e as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 23

    requires s0.stack[1] == 0xbfd

    requires s0.stack[7] == 0x321

    requires s0.stack[10] == 0xa63

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x5dd

    requires s0.stack[21] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(1) == 0xbfd;
      assert s1.Peek(7) == 0x321;
      assert s1.Peek(10) == 0xa63;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x5dd;
      assert s1.Peek(21) == 0x175;
      var s2 := Push1(s1, 0x00);
      var s3 := Dup2(s2);
      var s4 := Push2(s3, 0x0f1d);
      var s5 := JumpI(s4);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s4.stack[1] > 0 then
        ExecuteFromCFGNode_s414(s5, gas - 1)
      else
        ExecuteFromCFGNode_s412(s5, gas - 1)
  }

  /** Node 412
    * Segment Id for this node is: 227
    * Starting at 0xf16
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s412(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xf16 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 24

    requires s0.stack[2] == 0xbfd

    requires s0.stack[8] == 0x321

    requires s0.stack[11] == 0xa63

    requires s0.stack[14] == 0x830

    requires s0.stack[16] == 0x5dd

    requires s0.stack[22] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0f1d);
      assert s1.Peek(0) == 0xf1d;
      assert s1.Peek(3) == 0xbfd;
      assert s1.Peek(9) == 0x321;
      assert s1.Peek(12) == 0xa63;
      assert s1.Peek(15) == 0x830;
      assert s1.Peek(17) == 0x5dd;
      assert s1.Peek(23) == 0x175;
      var s2 := Push2(s1, 0x0d85);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s413(s3, gas - 1)
  }

  /** Node 413
    * Segment Id for this node is: 202
    * Starting at 0xd85
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s413(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xd85 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 25

    requires s0.stack[0] == 0xf1d

    requires s0.stack[3] == 0xbfd

    requires s0.stack[9] == 0x321

    requires s0.stack[12] == 0xa63

    requires s0.stack[15] == 0x830

    requires s0.stack[17] == 0x5dd

    requires s0.stack[23] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0xf1d;
      assert s1.Peek(3) == 0xbfd;
      assert s1.Peek(9) == 0x321;
      assert s1.Peek(12) == 0xa63;
      assert s1.Peek(15) == 0x830;
      assert s1.Peek(17) == 0x5dd;
      assert s1.Peek(23) == 0x175;
      var s2 := Push4(s1, 0x4e487b71);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x11);
      var s8 := Push1(s7, 0x04);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x24);
      var s11 := Push1(s10, 0x00);
      assert s11.Peek(2) == 0xf1d;
      assert s11.Peek(5) == 0xbfd;
      assert s11.Peek(11) == 0x321;
      assert s11.Peek(14) == 0xa63;
      assert s11.Peek(17) == 0x830;
      assert s11.Peek(19) == 0x5dd;
      assert s11.Peek(25) == 0x175;
      var s12 := Revert(s11);
      // Segment is terminal (Revert, Stop or Return)
      s12
  }

  /** Node 414
    * Segment Id for this node is: 228
    * Starting at 0xf1d
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 3
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -2
    * Net Capacity Effect: +2
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s414(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xf1d as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 24

    requires s0.stack[2] == 0xbfd

    requires s0.stack[8] == 0x321

    requires s0.stack[11] == 0xa63

    requires s0.stack[14] == 0x830

    requires s0.stack[16] == 0x5dd

    requires s0.stack[22] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0xbfd;
      assert s1.Peek(8) == 0x321;
      assert s1.Peek(11) == 0xa63;
      assert s1.Peek(14) == 0x830;
      assert s1.Peek(16) == 0x5dd;
      assert s1.Peek(22) == 0x175;
      var s2 := Pop(s1);
      var s3 := Push1(s2, 0x00);
      var s4 := Not(s3);
      var s5 := Add(s4);
      var s6 := Swap1(s5);
      var s7 := Jump(s6);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s415(s7, gas - 1)
  }

  /** Node 415
    * Segment Id for this node is: 169
    * Starting at 0xbfd
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -1
    * Net Capacity Effect: +1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s415(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xbfd as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 22

    requires s0.stack[6] == 0x321

    requires s0.stack[9] == 0xa63

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x5dd

    requires s0.stack[20] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(6) == 0x321;
      assert s1.Peek(9) == 0xa63;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x5dd;
      assert s1.Peek(20) == 0x175;
      var s2 := Swap1(s1);
      var s3 := Pop(s2);
      var s4 := Push2(s3, 0x0b8f);
      var s5 := Jump(s4);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s403(s5, gas - 1)
  }

  /** Node 416
    * Segment Id for this node is: 170
    * Starting at 0xc04
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 5
    * Minimum capacity for this segment to prevent stack overflow: 1
    * Net Stack Effect: -1
    * Net Capacity Effect: +1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s416(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xc04 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 21

    requires s0.stack[5] == 0x321

    requires s0.stack[8] == 0xa63

    requires s0.stack[11] == 0x830

    requires s0.stack[13] == 0x5dd

    requires s0.stack[19] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(5) == 0x321;
      assert s1.Peek(8) == 0xa63;
      assert s1.Peek(11) == 0x830;
      assert s1.Peek(13) == 0x5dd;
      assert s1.Peek(19) == 0x175;
      var s2 := Pop(s1);
      var s3 := Dup4(s2);
      var s4 := IsZero(s3);
      var s5 := Push2(s4, 0x0c53);
      var s6 := JumpI(s5);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s5.stack[1] > 0 then
        ExecuteFromCFGNode_s419(s6, gas - 1)
      else
        ExecuteFromCFGNode_s417(s6, gas - 1)
  }

  /** Node 417
    * Segment Id for this node is: 171
    * Starting at 0xc0c
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s417(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xc0c as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 20

    requires s0.stack[4] == 0x321

    requires s0.stack[7] == 0xa63

    requires s0.stack[10] == 0x830

    requires s0.stack[12] == 0x5dd

    requires s0.stack[18] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push1(s0, 0x40);
      assert s1.Peek(5) == 0x321;
      assert s1.Peek(8) == 0xa63;
      assert s1.Peek(11) == 0x830;
      assert s1.Peek(13) == 0x5dd;
      assert s1.Peek(19) == 0x175;
      var s2 := MLoad(s1);
      var s3 := Push3(s2, 0x461bcd);
      var s4 := Push1(s3, 0xe5);
      var s5 := Shl(s4);
      var s6 := Dup2(s5);
      var s7 := MStore(s6);
      var s8 := Push1(s7, 0x20);
      var s9 := Push1(s8, 0x04);
      var s10 := Dup3(s9);
      var s11 := Add(s10);
      assert s11.Peek(7) == 0x321;
      assert s11.Peek(10) == 0xa63;
      assert s11.Peek(13) == 0x830;
      assert s11.Peek(15) == 0x5dd;
      assert s11.Peek(21) == 0x175;
      var s12 := Dup2(s11);
      var s13 := Swap1(s12);
      var s14 := MStore(s13);
      var s15 := Push1(s14, 0x24);
      var s16 := Dup3(s15);
      var s17 := Add(s16);
      var s18 := MStore(s17);
      var s19 := Push32(s18, 0x537472696e67733a20686578206c656e67746820696e73756666696369656e74);
      var s20 := Push1(s19, 0x44);
      var s21 := Dup3(s20);
      assert s21.Peek(8) == 0x321;
      assert s21.Peek(11) == 0xa63;
      assert s21.Peek(14) == 0x830;
      assert s21.Peek(16) == 0x5dd;
      assert s21.Peek(22) == 0x175;
      var s22 := Add(s21);
      var s23 := MStore(s22);
      var s24 := Push1(s23, 0x64);
      var s25 := Add(s24);
      var s26 := Push2(s25, 0x0391);
      var s27 := Jump(s26);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s418(s27, gas - 1)
  }

  /** Node 418
    * Segment Id for this node is: 85
    * Starting at 0x391
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: -1
    * Net Capacity Effect: +1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s418(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x391 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 21

    requires s0.stack[5] == 0x321

    requires s0.stack[8] == 0xa63

    requires s0.stack[11] == 0x830

    requires s0.stack[13] == 0x5dd

    requires s0.stack[19] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(5) == 0x321;
      assert s1.Peek(8) == 0xa63;
      assert s1.Peek(11) == 0x830;
      assert s1.Peek(13) == 0x5dd;
      assert s1.Peek(19) == 0x175;
      var s2 := Push1(s1, 0x40);
      var s3 := MLoad(s2);
      var s4 := Dup1(s3);
      var s5 := Swap2(s4);
      var s6 := Sub(s5);
      var s7 := Swap1(s6);
      var s8 := Revert(s7);
      // Segment is terminal (Revert, Stop or Return)
      s8
  }

  /** Node 419
    * Segment Id for this node is: 172
    * Starting at 0xc53
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 5
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -4
    * Net Capacity Effect: +4
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s419(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xc53 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 20

    requires s0.stack[4] == 0x321

    requires s0.stack[7] == 0xa63

    requires s0.stack[10] == 0x830

    requires s0.stack[12] == 0x5dd

    requires s0.stack[18] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(4) == 0x321;
      assert s1.Peek(7) == 0xa63;
      assert s1.Peek(10) == 0x830;
      assert s1.Peek(12) == 0x5dd;
      assert s1.Peek(18) == 0x175;
      var s2 := Swap4(s1);
      var s3 := Swap3(s2);
      var s4 := Pop(s3);
      var s5 := Pop(s4);
      var s6 := Pop(s5);
      var s7 := Jump(s6);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s420(s7, gas - 1)
  }

  /** Node 420
    * Segment Id for this node is: 79
    * Starting at 0x321
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 4
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -3
    * Net Capacity Effect: +3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s420(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x321 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 16

    requires s0.stack[3] == 0xa63

    requires s0.stack[6] == 0x830

    requires s0.stack[8] == 0x5dd

    requires s0.stack[14] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0xa63;
      assert s1.Peek(6) == 0x830;
      assert s1.Peek(8) == 0x5dd;
      assert s1.Peek(14) == 0x175;
      var s2 := Swap3(s1);
      var s3 := Swap2(s2);
      var s4 := Pop(s3);
      var s5 := Pop(s4);
      var s6 := Jump(s5);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s421(s6, gas - 1)
  }

  /** Node 421
    * Segment Id for this node is: 146
    * Starting at 0xa63
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 3
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +3
    * Net Capacity Effect: -3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s421(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xa63 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 13

    requires s0.stack[3] == 0x830

    requires s0.stack[5] == 0x5dd

    requires s0.stack[11] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0x830;
      assert s1.Peek(5) == 0x5dd;
      assert s1.Peek(11) == 0x175;
      var s2 := Push2(s1, 0x0a6e);
      var s3 := Dup4(s2);
      var s4 := Push1(s3, 0x20);
      var s5 := Push2(s4, 0x0ab7);
      var s6 := Jump(s5);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s422(s6, gas - 1)
  }

  /** Node 422
    * Segment Id for this node is: 150
    * Starting at 0xab7
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 6
    * Net Stack Effect: +5
    * Net Capacity Effect: -5
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s422(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xab7 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 16

    requires s0.stack[2] == 0xa6e

    requires s0.stack[6] == 0x830

    requires s0.stack[8] == 0x5dd

    requires s0.stack[14] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0xa6e;
      assert s1.Peek(6) == 0x830;
      assert s1.Peek(8) == 0x5dd;
      assert s1.Peek(14) == 0x175;
      var s2 := Push1(s1, 0x60);
      var s3 := Push1(s2, 0x00);
      var s4 := Push2(s3, 0x0ac6);
      var s5 := Dup4(s4);
      var s6 := Push1(s5, 0x02);
      var s7 := Push2(s6, 0x0eb8);
      var s8 := Jump(s7);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s423(s8, gas - 1)
  }

  /** Node 423
    * Segment Id for this node is: 220
    * Starting at 0xeb8
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s423(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xeb8 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 21

    requires s0.stack[2] == 0xac6

    requires s0.stack[7] == 0xa6e

    requires s0.stack[11] == 0x830

    requires s0.stack[13] == 0x5dd

    requires s0.stack[19] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0xac6;
      assert s1.Peek(7) == 0xa6e;
      assert s1.Peek(11) == 0x830;
      assert s1.Peek(13) == 0x5dd;
      assert s1.Peek(19) == 0x175;
      var s2 := Dup1(s1);
      var s3 := Dup3(s2);
      var s4 := Mul(s3);
      var s5 := Dup2(s4);
      var s6 := IsZero(s5);
      var s7 := Dup3(s6);
      var s8 := Dup3(s7);
      var s9 := Div(s8);
      var s10 := Dup5(s9);
      var s11 := Eq(s10);
      assert s11.Peek(5) == 0xac6;
      assert s11.Peek(10) == 0xa6e;
      assert s11.Peek(14) == 0x830;
      assert s11.Peek(16) == 0x5dd;
      assert s11.Peek(22) == 0x175;
      var s12 := Or(s11);
      var s13 := Push2(s12, 0x0321);
      var s14 := JumpI(s13);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s13.stack[1] > 0 then
        ExecuteFromCFGNode_s426(s14, gas - 1)
      else
        ExecuteFromCFGNode_s424(s14, gas - 1)
  }

  /** Node 424
    * Segment Id for this node is: 221
    * Starting at 0xec8
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s424(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xec8 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 22

    requires s0.stack[3] == 0xac6

    requires s0.stack[8] == 0xa6e

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x5dd

    requires s0.stack[20] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0321);
      assert s1.Peek(0) == 0x321;
      assert s1.Peek(4) == 0xac6;
      assert s1.Peek(9) == 0xa6e;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x5dd;
      assert s1.Peek(21) == 0x175;
      var s2 := Push2(s1, 0x0d85);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s425(s3, gas - 1)
  }

  /** Node 425
    * Segment Id for this node is: 202
    * Starting at 0xd85
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s425(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xd85 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 23

    requires s0.stack[0] == 0x321

    requires s0.stack[4] == 0xac6

    requires s0.stack[9] == 0xa6e

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x5dd

    requires s0.stack[21] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0x321;
      assert s1.Peek(4) == 0xac6;
      assert s1.Peek(9) == 0xa6e;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x5dd;
      assert s1.Peek(21) == 0x175;
      var s2 := Push4(s1, 0x4e487b71);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x11);
      var s8 := Push1(s7, 0x04);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x24);
      var s11 := Push1(s10, 0x00);
      assert s11.Peek(2) == 0x321;
      assert s11.Peek(6) == 0xac6;
      assert s11.Peek(11) == 0xa6e;
      assert s11.Peek(15) == 0x830;
      assert s11.Peek(17) == 0x5dd;
      assert s11.Peek(23) == 0x175;
      var s12 := Revert(s11);
      // Segment is terminal (Revert, Stop or Return)
      s12
  }

  /** Node 426
    * Segment Id for this node is: 79
    * Starting at 0x321
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 4
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -3
    * Net Capacity Effect: +3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s426(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x321 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 22

    requires s0.stack[3] == 0xac6

    requires s0.stack[8] == 0xa6e

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x5dd

    requires s0.stack[20] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0xac6;
      assert s1.Peek(8) == 0xa6e;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x5dd;
      assert s1.Peek(20) == 0x175;
      var s2 := Swap3(s1);
      var s3 := Swap2(s2);
      var s4 := Pop(s3);
      var s5 := Pop(s4);
      var s6 := Jump(s5);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s427(s6, gas - 1)
  }

  /** Node 427
    * Segment Id for this node is: 151
    * Starting at 0xac6
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +2
    * Net Capacity Effect: -2
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s427(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xac6 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 19

    requires s0.stack[5] == 0xa6e

    requires s0.stack[9] == 0x830

    requires s0.stack[11] == 0x5dd

    requires s0.stack[17] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(5) == 0xa6e;
      assert s1.Peek(9) == 0x830;
      assert s1.Peek(11) == 0x5dd;
      assert s1.Peek(17) == 0x175;
      var s2 := Push2(s1, 0x0ad1);
      var s3 := Swap1(s2);
      var s4 := Push1(s3, 0x02);
      var s5 := Push2(s4, 0x0ecf);
      var s6 := Jump(s5);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s428(s6, gas - 1)
  }

  /** Node 428
    * Segment Id for this node is: 222
    * Starting at 0xecf
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s428(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xecf as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 21

    requires s0.stack[2] == 0xad1

    requires s0.stack[7] == 0xa6e

    requires s0.stack[11] == 0x830

    requires s0.stack[13] == 0x5dd

    requires s0.stack[19] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0xad1;
      assert s1.Peek(7) == 0xa6e;
      assert s1.Peek(11) == 0x830;
      assert s1.Peek(13) == 0x5dd;
      assert s1.Peek(19) == 0x175;
      var s2 := Dup1(s1);
      var s3 := Dup3(s2);
      var s4 := Add(s3);
      var s5 := Dup1(s4);
      var s6 := Dup3(s5);
      var s7 := Gt(s6);
      var s8 := IsZero(s7);
      var s9 := Push2(s8, 0x0321);
      var s10 := JumpI(s9);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s9.stack[1] > 0 then
        ExecuteFromCFGNode_s431(s10, gas - 1)
      else
        ExecuteFromCFGNode_s429(s10, gas - 1)
  }

  /** Node 429
    * Segment Id for this node is: 223
    * Starting at 0xedb
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s429(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xedb as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 22

    requires s0.stack[3] == 0xad1

    requires s0.stack[8] == 0xa6e

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x5dd

    requires s0.stack[20] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0321);
      assert s1.Peek(0) == 0x321;
      assert s1.Peek(4) == 0xad1;
      assert s1.Peek(9) == 0xa6e;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x5dd;
      assert s1.Peek(21) == 0x175;
      var s2 := Push2(s1, 0x0d85);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s430(s3, gas - 1)
  }

  /** Node 430
    * Segment Id for this node is: 202
    * Starting at 0xd85
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s430(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xd85 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 23

    requires s0.stack[0] == 0x321

    requires s0.stack[4] == 0xad1

    requires s0.stack[9] == 0xa6e

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x5dd

    requires s0.stack[21] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0x321;
      assert s1.Peek(4) == 0xad1;
      assert s1.Peek(9) == 0xa6e;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x5dd;
      assert s1.Peek(21) == 0x175;
      var s2 := Push4(s1, 0x4e487b71);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x11);
      var s8 := Push1(s7, 0x04);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x24);
      var s11 := Push1(s10, 0x00);
      assert s11.Peek(2) == 0x321;
      assert s11.Peek(6) == 0xad1;
      assert s11.Peek(11) == 0xa6e;
      assert s11.Peek(15) == 0x830;
      assert s11.Peek(17) == 0x5dd;
      assert s11.Peek(23) == 0x175;
      var s12 := Revert(s11);
      // Segment is terminal (Revert, Stop or Return)
      s12
  }

  /** Node 431
    * Segment Id for this node is: 79
    * Starting at 0x321
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 4
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -3
    * Net Capacity Effect: +3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s431(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x321 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 22

    requires s0.stack[3] == 0xad1

    requires s0.stack[8] == 0xa6e

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x5dd

    requires s0.stack[20] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0xad1;
      assert s1.Peek(8) == 0xa6e;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x5dd;
      assert s1.Peek(20) == 0x175;
      var s2 := Swap3(s1);
      var s3 := Swap2(s2);
      var s4 := Pop(s3);
      var s5 := Pop(s4);
      var s6 := Jump(s5);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s432(s6, gas - 1)
  }

  /** Node 432
    * Segment Id for this node is: 152
    * Starting at 0xad1
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s432(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xad1 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 19

    requires s0.stack[5] == 0xa6e

    requires s0.stack[9] == 0x830

    requires s0.stack[11] == 0x5dd

    requires s0.stack[17] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(5) == 0xa6e;
      assert s1.Peek(9) == 0x830;
      assert s1.Peek(11) == 0x5dd;
      assert s1.Peek(17) == 0x175;
      var s2 := Push8(s1, 0xffffffffffffffff);
      var s3 := Dup2(s2);
      var s4 := Gt(s3);
      var s5 := IsZero(s4);
      var s6 := Push2(s5, 0x0ae9);
      var s7 := JumpI(s6);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s6.stack[1] > 0 then
        ExecuteFromCFGNode_s435(s7, gas - 1)
      else
        ExecuteFromCFGNode_s433(s7, gas - 1)
  }

  /** Node 433
    * Segment Id for this node is: 153
    * Starting at 0xae2
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s433(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xae2 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 19

    requires s0.stack[5] == 0xa6e

    requires s0.stack[9] == 0x830

    requires s0.stack[11] == 0x5dd

    requires s0.stack[17] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0ae9);
      assert s1.Peek(0) == 0xae9;
      assert s1.Peek(6) == 0xa6e;
      assert s1.Peek(10) == 0x830;
      assert s1.Peek(12) == 0x5dd;
      assert s1.Peek(18) == 0x175;
      var s2 := Push2(s1, 0x0ee2);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s434(s3, gas - 1)
  }

  /** Node 434
    * Segment Id for this node is: 224
    * Starting at 0xee2
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s434(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xee2 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 20

    requires s0.stack[0] == 0xae9

    requires s0.stack[6] == 0xa6e

    requires s0.stack[10] == 0x830

    requires s0.stack[12] == 0x5dd

    requires s0.stack[18] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0xae9;
      assert s1.Peek(6) == 0xa6e;
      assert s1.Peek(10) == 0x830;
      assert s1.Peek(12) == 0x5dd;
      assert s1.Peek(18) == 0x175;
      var s2 := Push4(s1, 0x4e487b71);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x41);
      var s8 := Push1(s7, 0x04);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x24);
      var s11 := Push1(s10, 0x00);
      assert s11.Peek(2) == 0xae9;
      assert s11.Peek(8) == 0xa6e;
      assert s11.Peek(12) == 0x830;
      assert s11.Peek(14) == 0x5dd;
      assert s11.Peek(20) == 0x175;
      var s12 := Revert(s11);
      // Segment is terminal (Revert, Stop or Return)
      s12
  }

  /** Node 435
    * Segment Id for this node is: 154
    * Starting at 0xae9
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s435(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xae9 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 19

    requires s0.stack[5] == 0xa6e

    requires s0.stack[9] == 0x830

    requires s0.stack[11] == 0x5dd

    requires s0.stack[17] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(5) == 0xa6e;
      assert s1.Peek(9) == 0x830;
      assert s1.Peek(11) == 0x5dd;
      assert s1.Peek(17) == 0x175;
      var s2 := Push1(s1, 0x40);
      var s3 := MLoad(s2);
      var s4 := Swap1(s3);
      var s5 := Dup1(s4);
      var s6 := Dup3(s5);
      var s7 := MStore(s6);
      var s8 := Dup1(s7);
      var s9 := Push1(s8, 0x1f);
      var s10 := Add(s9);
      var s11 := Push1(s10, 0x1f);
      assert s11.Peek(8) == 0xa6e;
      assert s11.Peek(12) == 0x830;
      assert s11.Peek(14) == 0x5dd;
      assert s11.Peek(20) == 0x175;
      var s12 := Not(s11);
      var s13 := And(s12);
      var s14 := Push1(s13, 0x20);
      var s15 := Add(s14);
      var s16 := Dup3(s15);
      var s17 := Add(s16);
      var s18 := Push1(s17, 0x40);
      var s19 := MStore(s18);
      var s20 := Dup1(s19);
      var s21 := IsZero(s20);
      assert s21.Peek(7) == 0xa6e;
      assert s21.Peek(11) == 0x830;
      assert s21.Peek(13) == 0x5dd;
      assert s21.Peek(19) == 0x175;
      var s22 := Push2(s21, 0x0b13);
      var s23 := JumpI(s22);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s22.stack[1] > 0 then
        ExecuteFromCFGNode_s437(s23, gas - 1)
      else
        ExecuteFromCFGNode_s436(s23, gas - 1)
  }

  /** Node 436
    * Segment Id for this node is: 155
    * Starting at 0xb07
    * Segment type is: CONT Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 5
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s436(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xb07 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 20

    requires s0.stack[6] == 0xa6e

    requires s0.stack[10] == 0x830

    requires s0.stack[12] == 0x5dd

    requires s0.stack[18] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push1(s0, 0x20);
      assert s1.Peek(7) == 0xa6e;
      assert s1.Peek(11) == 0x830;
      assert s1.Peek(13) == 0x5dd;
      assert s1.Peek(19) == 0x175;
      var s2 := Dup3(s1);
      var s3 := Add(s2);
      var s4 := Dup2(s3);
      var s5 := Dup1(s4);
      var s6 := CallDataSize(s5);
      var s7 := Dup4(s6);
      var s8 := CallDataCopy(s7);
      var s9 := Add(s8);
      var s10 := Swap1(s9);
      var s11 := Pop(s10);
      //  Go to the next instruction at pc + 1
      ExecuteFromCFGNode_s437(s11, gas - 1)
  }

  /** Node 437
    * Segment Id for this node is: 156
    * Starting at 0xb13
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 3
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s437(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xb13 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 20

    requires s0.stack[6] == 0xa6e

    requires s0.stack[10] == 0x830

    requires s0.stack[12] == 0x5dd

    requires s0.stack[18] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(6) == 0xa6e;
      assert s1.Peek(10) == 0x830;
      assert s1.Peek(12) == 0x5dd;
      assert s1.Peek(18) == 0x175;
      var s2 := Pop(s1);
      var s3 := Swap1(s2);
      var s4 := Pop(s3);
      var s5 := Push1(s4, 0x03);
      var s6 := Push1(s5, 0xfc);
      var s7 := Shl(s6);
      var s8 := Dup2(s7);
      var s9 := Push1(s8, 0x00);
      var s10 := Dup2(s9);
      var s11 := MLoad(s10);
      assert s11.Peek(8) == 0xa6e;
      assert s11.Peek(12) == 0x830;
      assert s11.Peek(14) == 0x5dd;
      assert s11.Peek(20) == 0x175;
      var s12 := Dup2(s11);
      var s13 := Lt(s12);
      var s14 := Push2(s13, 0x0b2e);
      var s15 := JumpI(s14);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s14.stack[1] > 0 then
        ExecuteFromCFGNode_s440(s15, gas - 1)
      else
        ExecuteFromCFGNode_s438(s15, gas - 1)
  }

  /** Node 438
    * Segment Id for this node is: 157
    * Starting at 0xb27
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s438(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xb27 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 21

    requires s0.stack[7] == 0xa6e

    requires s0.stack[11] == 0x830

    requires s0.stack[13] == 0x5dd

    requires s0.stack[19] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0b2e);
      assert s1.Peek(0) == 0xb2e;
      assert s1.Peek(8) == 0xa6e;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x5dd;
      assert s1.Peek(20) == 0x175;
      var s2 := Push2(s1, 0x0ef8);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s439(s3, gas - 1)
  }

  /** Node 439
    * Segment Id for this node is: 225
    * Starting at 0xef8
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s439(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xef8 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 22

    requires s0.stack[0] == 0xb2e

    requires s0.stack[8] == 0xa6e

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x5dd

    requires s0.stack[20] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0xb2e;
      assert s1.Peek(8) == 0xa6e;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x5dd;
      assert s1.Peek(20) == 0x175;
      var s2 := Push4(s1, 0x4e487b71);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x32);
      var s8 := Push1(s7, 0x04);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x24);
      var s11 := Push1(s10, 0x00);
      assert s11.Peek(2) == 0xb2e;
      assert s11.Peek(10) == 0xa6e;
      assert s11.Peek(14) == 0x830;
      assert s11.Peek(16) == 0x5dd;
      assert s11.Peek(22) == 0x175;
      var s12 := Revert(s11);
      // Segment is terminal (Revert, Stop or Return)
      s12
  }

  /** Node 440
    * Segment Id for this node is: 158
    * Starting at 0xb2e
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 4
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s440(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xb2e as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 21

    requires s0.stack[7] == 0xa6e

    requires s0.stack[11] == 0x830

    requires s0.stack[13] == 0x5dd

    requires s0.stack[19] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(7) == 0xa6e;
      assert s1.Peek(11) == 0x830;
      assert s1.Peek(13) == 0x5dd;
      assert s1.Peek(19) == 0x175;
      var s2 := Push1(s1, 0x20);
      var s3 := Add(s2);
      var s4 := Add(s3);
      var s5 := Swap1(s4);
      var s6 := Push1(s5, 0x01);
      var s7 := Push1(s6, 0x01);
      var s8 := Push1(s7, 0xf8);
      var s9 := Shl(s8);
      var s10 := Sub(s9);
      var s11 := Not(s10);
      assert s11.Peek(7) == 0xa6e;
      assert s11.Peek(11) == 0x830;
      assert s11.Peek(13) == 0x5dd;
      assert s11.Peek(19) == 0x175;
      var s12 := And(s11);
      var s13 := Swap1(s12);
      var s14 := Dup2(s13);
      var s15 := Push1(s14, 0x00);
      var s16 := Byte(s15);
      var s17 := Swap1(s16);
      var s18 := MStore8(s17);
      var s19 := Pop(s18);
      var s20 := Push1(s19, 0x0f);
      var s21 := Push1(s20, 0xfb);
      assert s21.Peek(6) == 0xa6e;
      assert s21.Peek(10) == 0x830;
      assert s21.Peek(12) == 0x5dd;
      assert s21.Peek(18) == 0x175;
      var s22 := Shl(s21);
      var s23 := Dup2(s22);
      var s24 := Push1(s23, 0x01);
      var s25 := Dup2(s24);
      var s26 := MLoad(s25);
      var s27 := Dup2(s26);
      var s28 := Lt(s27);
      var s29 := Push2(s28, 0x0b5d);
      var s30 := JumpI(s29);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s29.stack[1] > 0 then
        ExecuteFromCFGNode_s443(s30, gas - 1)
      else
        ExecuteFromCFGNode_s441(s30, gas - 1)
  }

  /** Node 441
    * Segment Id for this node is: 159
    * Starting at 0xb56
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s441(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xb56 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 21

    requires s0.stack[7] == 0xa6e

    requires s0.stack[11] == 0x830

    requires s0.stack[13] == 0x5dd

    requires s0.stack[19] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0b5d);
      assert s1.Peek(0) == 0xb5d;
      assert s1.Peek(8) == 0xa6e;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x5dd;
      assert s1.Peek(20) == 0x175;
      var s2 := Push2(s1, 0x0ef8);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s442(s3, gas - 1)
  }

  /** Node 442
    * Segment Id for this node is: 225
    * Starting at 0xef8
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s442(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xef8 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 22

    requires s0.stack[0] == 0xb5d

    requires s0.stack[8] == 0xa6e

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x5dd

    requires s0.stack[20] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0xb5d;
      assert s1.Peek(8) == 0xa6e;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x5dd;
      assert s1.Peek(20) == 0x175;
      var s2 := Push4(s1, 0x4e487b71);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x32);
      var s8 := Push1(s7, 0x04);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x24);
      var s11 := Push1(s10, 0x00);
      assert s11.Peek(2) == 0xb5d;
      assert s11.Peek(10) == 0xa6e;
      assert s11.Peek(14) == 0x830;
      assert s11.Peek(16) == 0x5dd;
      assert s11.Peek(22) == 0x175;
      var s12 := Revert(s11);
      // Segment is terminal (Revert, Stop or Return)
      s12
  }

  /** Node 443
    * Segment Id for this node is: 160
    * Starting at 0xb5d
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 6
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s443(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xb5d as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 21

    requires s0.stack[7] == 0xa6e

    requires s0.stack[11] == 0x830

    requires s0.stack[13] == 0x5dd

    requires s0.stack[19] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(7) == 0xa6e;
      assert s1.Peek(11) == 0x830;
      assert s1.Peek(13) == 0x5dd;
      assert s1.Peek(19) == 0x175;
      var s2 := Push1(s1, 0x20);
      var s3 := Add(s2);
      var s4 := Add(s3);
      var s5 := Swap1(s4);
      var s6 := Push1(s5, 0x01);
      var s7 := Push1(s6, 0x01);
      var s8 := Push1(s7, 0xf8);
      var s9 := Shl(s8);
      var s10 := Sub(s9);
      var s11 := Not(s10);
      assert s11.Peek(7) == 0xa6e;
      assert s11.Peek(11) == 0x830;
      assert s11.Peek(13) == 0x5dd;
      assert s11.Peek(19) == 0x175;
      var s12 := And(s11);
      var s13 := Swap1(s12);
      var s14 := Dup2(s13);
      var s15 := Push1(s14, 0x00);
      var s16 := Byte(s15);
      var s17 := Swap1(s16);
      var s18 := MStore8(s17);
      var s19 := Pop(s18);
      var s20 := Push1(s19, 0x00);
      var s21 := Push2(s20, 0x0b81);
      assert s21.Peek(0) == 0xb81;
      assert s21.Peek(6) == 0xa6e;
      assert s21.Peek(10) == 0x830;
      assert s21.Peek(12) == 0x5dd;
      assert s21.Peek(18) == 0x175;
      var s22 := Dup5(s21);
      var s23 := Push1(s22, 0x02);
      var s24 := Push2(s23, 0x0eb8);
      var s25 := Jump(s24);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s444(s25, gas - 1)
  }

  /** Node 444
    * Segment Id for this node is: 220
    * Starting at 0xeb8
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s444(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xeb8 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 22

    requires s0.stack[2] == 0xb81

    requires s0.stack[8] == 0xa6e

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x5dd

    requires s0.stack[20] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0xb81;
      assert s1.Peek(8) == 0xa6e;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x5dd;
      assert s1.Peek(20) == 0x175;
      var s2 := Dup1(s1);
      var s3 := Dup3(s2);
      var s4 := Mul(s3);
      var s5 := Dup2(s4);
      var s6 := IsZero(s5);
      var s7 := Dup3(s6);
      var s8 := Dup3(s7);
      var s9 := Div(s8);
      var s10 := Dup5(s9);
      var s11 := Eq(s10);
      assert s11.Peek(5) == 0xb81;
      assert s11.Peek(11) == 0xa6e;
      assert s11.Peek(15) == 0x830;
      assert s11.Peek(17) == 0x5dd;
      assert s11.Peek(23) == 0x175;
      var s12 := Or(s11);
      var s13 := Push2(s12, 0x0321);
      var s14 := JumpI(s13);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s13.stack[1] > 0 then
        ExecuteFromCFGNode_s447(s14, gas - 1)
      else
        ExecuteFromCFGNode_s445(s14, gas - 1)
  }

  /** Node 445
    * Segment Id for this node is: 221
    * Starting at 0xec8
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s445(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xec8 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 23

    requires s0.stack[3] == 0xb81

    requires s0.stack[9] == 0xa6e

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x5dd

    requires s0.stack[21] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0321);
      assert s1.Peek(0) == 0x321;
      assert s1.Peek(4) == 0xb81;
      assert s1.Peek(10) == 0xa6e;
      assert s1.Peek(14) == 0x830;
      assert s1.Peek(16) == 0x5dd;
      assert s1.Peek(22) == 0x175;
      var s2 := Push2(s1, 0x0d85);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s446(s3, gas - 1)
  }

  /** Node 446
    * Segment Id for this node is: 202
    * Starting at 0xd85
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s446(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xd85 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 24

    requires s0.stack[0] == 0x321

    requires s0.stack[4] == 0xb81

    requires s0.stack[10] == 0xa6e

    requires s0.stack[14] == 0x830

    requires s0.stack[16] == 0x5dd

    requires s0.stack[22] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0x321;
      assert s1.Peek(4) == 0xb81;
      assert s1.Peek(10) == 0xa6e;
      assert s1.Peek(14) == 0x830;
      assert s1.Peek(16) == 0x5dd;
      assert s1.Peek(22) == 0x175;
      var s2 := Push4(s1, 0x4e487b71);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x11);
      var s8 := Push1(s7, 0x04);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x24);
      var s11 := Push1(s10, 0x00);
      assert s11.Peek(2) == 0x321;
      assert s11.Peek(6) == 0xb81;
      assert s11.Peek(12) == 0xa6e;
      assert s11.Peek(16) == 0x830;
      assert s11.Peek(18) == 0x5dd;
      assert s11.Peek(24) == 0x175;
      var s12 := Revert(s11);
      // Segment is terminal (Revert, Stop or Return)
      s12
  }

  /** Node 447
    * Segment Id for this node is: 79
    * Starting at 0x321
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 4
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -3
    * Net Capacity Effect: +3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s447(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x321 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 23

    requires s0.stack[3] == 0xb81

    requires s0.stack[9] == 0xa6e

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x5dd

    requires s0.stack[21] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0xb81;
      assert s1.Peek(9) == 0xa6e;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x5dd;
      assert s1.Peek(21) == 0x175;
      var s2 := Swap3(s1);
      var s3 := Swap2(s2);
      var s4 := Pop(s3);
      var s5 := Pop(s4);
      var s6 := Jump(s5);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s448(s6, gas - 1)
  }

  /** Node 448
    * Segment Id for this node is: 161
    * Starting at 0xb81
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +2
    * Net Capacity Effect: -2
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s448(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xb81 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 20

    requires s0.stack[6] == 0xa6e

    requires s0.stack[10] == 0x830

    requires s0.stack[12] == 0x5dd

    requires s0.stack[18] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(6) == 0xa6e;
      assert s1.Peek(10) == 0x830;
      assert s1.Peek(12) == 0x5dd;
      assert s1.Peek(18) == 0x175;
      var s2 := Push2(s1, 0x0b8c);
      var s3 := Swap1(s2);
      var s4 := Push1(s3, 0x01);
      var s5 := Push2(s4, 0x0ecf);
      var s6 := Jump(s5);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s449(s6, gas - 1)
  }

  /** Node 449
    * Segment Id for this node is: 222
    * Starting at 0xecf
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s449(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xecf as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 22

    requires s0.stack[2] == 0xb8c

    requires s0.stack[8] == 0xa6e

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x5dd

    requires s0.stack[20] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0xb8c;
      assert s1.Peek(8) == 0xa6e;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x5dd;
      assert s1.Peek(20) == 0x175;
      var s2 := Dup1(s1);
      var s3 := Dup3(s2);
      var s4 := Add(s3);
      var s5 := Dup1(s4);
      var s6 := Dup3(s5);
      var s7 := Gt(s6);
      var s8 := IsZero(s7);
      var s9 := Push2(s8, 0x0321);
      var s10 := JumpI(s9);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s9.stack[1] > 0 then
        ExecuteFromCFGNode_s452(s10, gas - 1)
      else
        ExecuteFromCFGNode_s450(s10, gas - 1)
  }

  /** Node 450
    * Segment Id for this node is: 223
    * Starting at 0xedb
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s450(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xedb as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 23

    requires s0.stack[3] == 0xb8c

    requires s0.stack[9] == 0xa6e

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x5dd

    requires s0.stack[21] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0321);
      assert s1.Peek(0) == 0x321;
      assert s1.Peek(4) == 0xb8c;
      assert s1.Peek(10) == 0xa6e;
      assert s1.Peek(14) == 0x830;
      assert s1.Peek(16) == 0x5dd;
      assert s1.Peek(22) == 0x175;
      var s2 := Push2(s1, 0x0d85);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s451(s3, gas - 1)
  }

  /** Node 451
    * Segment Id for this node is: 202
    * Starting at 0xd85
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s451(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xd85 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 24

    requires s0.stack[0] == 0x321

    requires s0.stack[4] == 0xb8c

    requires s0.stack[10] == 0xa6e

    requires s0.stack[14] == 0x830

    requires s0.stack[16] == 0x5dd

    requires s0.stack[22] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0x321;
      assert s1.Peek(4) == 0xb8c;
      assert s1.Peek(10) == 0xa6e;
      assert s1.Peek(14) == 0x830;
      assert s1.Peek(16) == 0x5dd;
      assert s1.Peek(22) == 0x175;
      var s2 := Push4(s1, 0x4e487b71);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x11);
      var s8 := Push1(s7, 0x04);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x24);
      var s11 := Push1(s10, 0x00);
      assert s11.Peek(2) == 0x321;
      assert s11.Peek(6) == 0xb8c;
      assert s11.Peek(12) == 0xa6e;
      assert s11.Peek(16) == 0x830;
      assert s11.Peek(18) == 0x5dd;
      assert s11.Peek(24) == 0x175;
      var s12 := Revert(s11);
      // Segment is terminal (Revert, Stop or Return)
      s12
  }

  /** Node 452
    * Segment Id for this node is: 79
    * Starting at 0x321
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 4
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -3
    * Net Capacity Effect: +3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s452(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x321 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 23

    requires s0.stack[3] == 0xb8c

    requires s0.stack[9] == 0xa6e

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x5dd

    requires s0.stack[21] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0xb8c;
      assert s1.Peek(9) == 0xa6e;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x5dd;
      assert s1.Peek(21) == 0x175;
      var s2 := Swap3(s1);
      var s3 := Swap2(s2);
      var s4 := Pop(s3);
      var s5 := Pop(s4);
      var s6 := Jump(s5);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s453(s6, gas - 1)
  }

  /** Node 453
    * Segment Id for this node is: 162
    * Starting at 0xb8c
    * Segment type is: CONT Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -1
    * Net Capacity Effect: +1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s453(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xb8c as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 20

    requires s0.stack[6] == 0xa6e

    requires s0.stack[10] == 0x830

    requires s0.stack[12] == 0x5dd

    requires s0.stack[18] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(6) == 0xa6e;
      assert s1.Peek(10) == 0x830;
      assert s1.Peek(12) == 0x5dd;
      assert s1.Peek(18) == 0x175;
      var s2 := Swap1(s1);
      var s3 := Pop(s2);
      //  Go to the next instruction at pc + 1
      ExecuteFromCFGNode_s454(s3, gas - 1)
  }

  /** Node 454
    * Segment Id for this node is: 163
    * Starting at 0xb8f
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s454(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xb8f as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 19

    requires s0.stack[5] == 0xa6e

    requires s0.stack[9] == 0x830

    requires s0.stack[11] == 0x5dd

    requires s0.stack[17] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(5) == 0xa6e;
      assert s1.Peek(9) == 0x830;
      assert s1.Peek(11) == 0x5dd;
      assert s1.Peek(17) == 0x175;
      var s2 := Push1(s1, 0x01);
      var s3 := Dup2(s2);
      var s4 := Gt(s3);
      var s5 := IsZero(s4);
      var s6 := Push2(s5, 0x0c04);
      var s7 := JumpI(s6);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s6.stack[1] > 0 then
        ExecuteFromCFGNode_s467(s7, gas - 1)
      else
        ExecuteFromCFGNode_s455(s7, gas - 1)
  }

  /** Node 455
    * Segment Id for this node is: 164
    * Starting at 0xb99
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 5
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +2
    * Net Capacity Effect: -2
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s455(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xb99 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 19

    requires s0.stack[5] == 0xa6e

    requires s0.stack[9] == 0x830

    requires s0.stack[11] == 0x5dd

    requires s0.stack[17] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := PushN(s0, 16, 0x181899199a1a9b1b9c1cb0b131b232b3);
      assert s1.Peek(6) == 0xa6e;
      assert s1.Peek(10) == 0x830;
      assert s1.Peek(12) == 0x5dd;
      assert s1.Peek(18) == 0x175;
      var s2 := Push1(s1, 0x81);
      var s3 := Shl(s2);
      var s4 := Dup6(s3);
      var s5 := Push1(s4, 0x0f);
      var s6 := And(s5);
      var s7 := Push1(s6, 0x10);
      var s8 := Dup2(s7);
      var s9 := Lt(s8);
      var s10 := Push2(s9, 0x0bc0);
      var s11 := JumpI(s10);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s10.stack[1] > 0 then
        ExecuteFromCFGNode_s458(s11, gas - 1)
      else
        ExecuteFromCFGNode_s456(s11, gas - 1)
  }

  /** Node 456
    * Segment Id for this node is: 165
    * Starting at 0xbb9
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s456(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xbb9 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 21

    requires s0.stack[7] == 0xa6e

    requires s0.stack[11] == 0x830

    requires s0.stack[13] == 0x5dd

    requires s0.stack[19] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0bc0);
      assert s1.Peek(0) == 0xbc0;
      assert s1.Peek(8) == 0xa6e;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x5dd;
      assert s1.Peek(20) == 0x175;
      var s2 := Push2(s1, 0x0ef8);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s457(s3, gas - 1)
  }

  /** Node 457
    * Segment Id for this node is: 225
    * Starting at 0xef8
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s457(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xef8 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 22

    requires s0.stack[0] == 0xbc0

    requires s0.stack[8] == 0xa6e

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x5dd

    requires s0.stack[20] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0xbc0;
      assert s1.Peek(8) == 0xa6e;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x5dd;
      assert s1.Peek(20) == 0x175;
      var s2 := Push4(s1, 0x4e487b71);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x32);
      var s8 := Push1(s7, 0x04);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x24);
      var s11 := Push1(s10, 0x00);
      assert s11.Peek(2) == 0xbc0;
      assert s11.Peek(10) == 0xa6e;
      assert s11.Peek(14) == 0x830;
      assert s11.Peek(16) == 0x5dd;
      assert s11.Peek(22) == 0x175;
      var s12 := Revert(s11);
      // Segment is terminal (Revert, Stop or Return)
      s12
  }

  /** Node 458
    * Segment Id for this node is: 166
    * Starting at 0xbc0
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 4
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s458(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xbc0 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 21

    requires s0.stack[7] == 0xa6e

    requires s0.stack[11] == 0x830

    requires s0.stack[13] == 0x5dd

    requires s0.stack[19] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(7) == 0xa6e;
      assert s1.Peek(11) == 0x830;
      assert s1.Peek(13) == 0x5dd;
      assert s1.Peek(19) == 0x175;
      var s2 := Byte(s1);
      var s3 := Push1(s2, 0xf8);
      var s4 := Shl(s3);
      var s5 := Dup3(s4);
      var s6 := Dup3(s5);
      var s7 := Dup2(s6);
      var s8 := MLoad(s7);
      var s9 := Dup2(s8);
      var s10 := Lt(s9);
      var s11 := Push2(s10, 0x0bd6);
      assert s11.Peek(0) == 0xbd6;
      assert s11.Peek(10) == 0xa6e;
      assert s11.Peek(14) == 0x830;
      assert s11.Peek(16) == 0x5dd;
      assert s11.Peek(22) == 0x175;
      var s12 := JumpI(s11);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s11.stack[1] > 0 then
        ExecuteFromCFGNode_s461(s12, gas - 1)
      else
        ExecuteFromCFGNode_s459(s12, gas - 1)
  }

  /** Node 459
    * Segment Id for this node is: 167
    * Starting at 0xbcf
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s459(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xbcf as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 22

    requires s0.stack[8] == 0xa6e

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x5dd

    requires s0.stack[20] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0bd6);
      assert s1.Peek(0) == 0xbd6;
      assert s1.Peek(9) == 0xa6e;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x5dd;
      assert s1.Peek(21) == 0x175;
      var s2 := Push2(s1, 0x0ef8);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s460(s3, gas - 1)
  }

  /** Node 460
    * Segment Id for this node is: 225
    * Starting at 0xef8
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s460(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xef8 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 23

    requires s0.stack[0] == 0xbd6

    requires s0.stack[9] == 0xa6e

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x5dd

    requires s0.stack[21] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0xbd6;
      assert s1.Peek(9) == 0xa6e;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x5dd;
      assert s1.Peek(21) == 0x175;
      var s2 := Push4(s1, 0x4e487b71);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x32);
      var s8 := Push1(s7, 0x04);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x24);
      var s11 := Push1(s10, 0x00);
      assert s11.Peek(2) == 0xbd6;
      assert s11.Peek(11) == 0xa6e;
      assert s11.Peek(15) == 0x830;
      assert s11.Peek(17) == 0x5dd;
      assert s11.Peek(23) == 0x175;
      var s12 := Revert(s11);
      // Segment is terminal (Revert, Stop or Return)
      s12
  }

  /** Node 461
    * Segment Id for this node is: 168
    * Starting at 0xbd6
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 8
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: -1
    * Net Capacity Effect: +1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s461(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xbd6 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 22

    requires s0.stack[8] == 0xa6e

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x5dd

    requires s0.stack[20] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(8) == 0xa6e;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x5dd;
      assert s1.Peek(20) == 0x175;
      var s2 := Push1(s1, 0x20);
      var s3 := Add(s2);
      var s4 := Add(s3);
      var s5 := Swap1(s4);
      var s6 := Push1(s5, 0x01);
      var s7 := Push1(s6, 0x01);
      var s8 := Push1(s7, 0xf8);
      var s9 := Shl(s8);
      var s10 := Sub(s9);
      var s11 := Not(s10);
      assert s11.Peek(8) == 0xa6e;
      assert s11.Peek(12) == 0x830;
      assert s11.Peek(14) == 0x5dd;
      assert s11.Peek(20) == 0x175;
      var s12 := And(s11);
      var s13 := Swap1(s12);
      var s14 := Dup2(s13);
      var s15 := Push1(s14, 0x00);
      var s16 := Byte(s15);
      var s17 := Swap1(s16);
      var s18 := MStore8(s17);
      var s19 := Pop(s18);
      var s20 := Push1(s19, 0x04);
      var s21 := Swap5(s20);
      assert s21.Peek(6) == 0xa6e;
      assert s21.Peek(10) == 0x830;
      assert s21.Peek(12) == 0x5dd;
      assert s21.Peek(18) == 0x175;
      var s22 := Swap1(s21);
      var s23 := Swap5(s22);
      var s24 := Shr(s23);
      var s25 := Swap4(s24);
      var s26 := Push2(s25, 0x0bfd);
      var s27 := Dup2(s26);
      var s28 := Push2(s27, 0x0f0e);
      var s29 := Jump(s28);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s462(s29, gas - 1)
  }

  /** Node 462
    * Segment Id for this node is: 226
    * Starting at 0xf0e
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s462(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xf0e as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 21

    requires s0.stack[1] == 0xbfd

    requires s0.stack[7] == 0xa6e

    requires s0.stack[11] == 0x830

    requires s0.stack[13] == 0x5dd

    requires s0.stack[19] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(1) == 0xbfd;
      assert s1.Peek(7) == 0xa6e;
      assert s1.Peek(11) == 0x830;
      assert s1.Peek(13) == 0x5dd;
      assert s1.Peek(19) == 0x175;
      var s2 := Push1(s1, 0x00);
      var s3 := Dup2(s2);
      var s4 := Push2(s3, 0x0f1d);
      var s5 := JumpI(s4);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s4.stack[1] > 0 then
        ExecuteFromCFGNode_s465(s5, gas - 1)
      else
        ExecuteFromCFGNode_s463(s5, gas - 1)
  }

  /** Node 463
    * Segment Id for this node is: 227
    * Starting at 0xf16
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s463(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xf16 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 22

    requires s0.stack[2] == 0xbfd

    requires s0.stack[8] == 0xa6e

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x5dd

    requires s0.stack[20] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0f1d);
      assert s1.Peek(0) == 0xf1d;
      assert s1.Peek(3) == 0xbfd;
      assert s1.Peek(9) == 0xa6e;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x5dd;
      assert s1.Peek(21) == 0x175;
      var s2 := Push2(s1, 0x0d85);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s464(s3, gas - 1)
  }

  /** Node 464
    * Segment Id for this node is: 202
    * Starting at 0xd85
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s464(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xd85 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 23

    requires s0.stack[0] == 0xf1d

    requires s0.stack[3] == 0xbfd

    requires s0.stack[9] == 0xa6e

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x5dd

    requires s0.stack[21] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0xf1d;
      assert s1.Peek(3) == 0xbfd;
      assert s1.Peek(9) == 0xa6e;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x5dd;
      assert s1.Peek(21) == 0x175;
      var s2 := Push4(s1, 0x4e487b71);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x11);
      var s8 := Push1(s7, 0x04);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x24);
      var s11 := Push1(s10, 0x00);
      assert s11.Peek(2) == 0xf1d;
      assert s11.Peek(5) == 0xbfd;
      assert s11.Peek(11) == 0xa6e;
      assert s11.Peek(15) == 0x830;
      assert s11.Peek(17) == 0x5dd;
      assert s11.Peek(23) == 0x175;
      var s12 := Revert(s11);
      // Segment is terminal (Revert, Stop or Return)
      s12
  }

  /** Node 465
    * Segment Id for this node is: 228
    * Starting at 0xf1d
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 3
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -2
    * Net Capacity Effect: +2
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s465(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xf1d as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 22

    requires s0.stack[2] == 0xbfd

    requires s0.stack[8] == 0xa6e

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x5dd

    requires s0.stack[20] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0xbfd;
      assert s1.Peek(8) == 0xa6e;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x5dd;
      assert s1.Peek(20) == 0x175;
      var s2 := Pop(s1);
      var s3 := Push1(s2, 0x00);
      var s4 := Not(s3);
      var s5 := Add(s4);
      var s6 := Swap1(s5);
      var s7 := Jump(s6);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s466(s7, gas - 1)
  }

  /** Node 466
    * Segment Id for this node is: 169
    * Starting at 0xbfd
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -1
    * Net Capacity Effect: +1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s466(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xbfd as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 20

    requires s0.stack[6] == 0xa6e

    requires s0.stack[10] == 0x830

    requires s0.stack[12] == 0x5dd

    requires s0.stack[18] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(6) == 0xa6e;
      assert s1.Peek(10) == 0x830;
      assert s1.Peek(12) == 0x5dd;
      assert s1.Peek(18) == 0x175;
      var s2 := Swap1(s1);
      var s3 := Pop(s2);
      var s4 := Push2(s3, 0x0b8f);
      var s5 := Jump(s4);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s454(s5, gas - 1)
  }

  /** Node 467
    * Segment Id for this node is: 170
    * Starting at 0xc04
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 5
    * Minimum capacity for this segment to prevent stack overflow: 1
    * Net Stack Effect: -1
    * Net Capacity Effect: +1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s467(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xc04 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 19

    requires s0.stack[5] == 0xa6e

    requires s0.stack[9] == 0x830

    requires s0.stack[11] == 0x5dd

    requires s0.stack[17] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(5) == 0xa6e;
      assert s1.Peek(9) == 0x830;
      assert s1.Peek(11) == 0x5dd;
      assert s1.Peek(17) == 0x175;
      var s2 := Pop(s1);
      var s3 := Dup4(s2);
      var s4 := IsZero(s3);
      var s5 := Push2(s4, 0x0c53);
      var s6 := JumpI(s5);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s5.stack[1] > 0 then
        ExecuteFromCFGNode_s470(s6, gas - 1)
      else
        ExecuteFromCFGNode_s468(s6, gas - 1)
  }

  /** Node 468
    * Segment Id for this node is: 171
    * Starting at 0xc0c
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s468(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xc0c as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 18

    requires s0.stack[4] == 0xa6e

    requires s0.stack[8] == 0x830

    requires s0.stack[10] == 0x5dd

    requires s0.stack[16] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push1(s0, 0x40);
      assert s1.Peek(5) == 0xa6e;
      assert s1.Peek(9) == 0x830;
      assert s1.Peek(11) == 0x5dd;
      assert s1.Peek(17) == 0x175;
      var s2 := MLoad(s1);
      var s3 := Push3(s2, 0x461bcd);
      var s4 := Push1(s3, 0xe5);
      var s5 := Shl(s4);
      var s6 := Dup2(s5);
      var s7 := MStore(s6);
      var s8 := Push1(s7, 0x20);
      var s9 := Push1(s8, 0x04);
      var s10 := Dup3(s9);
      var s11 := Add(s10);
      assert s11.Peek(7) == 0xa6e;
      assert s11.Peek(11) == 0x830;
      assert s11.Peek(13) == 0x5dd;
      assert s11.Peek(19) == 0x175;
      var s12 := Dup2(s11);
      var s13 := Swap1(s12);
      var s14 := MStore(s13);
      var s15 := Push1(s14, 0x24);
      var s16 := Dup3(s15);
      var s17 := Add(s16);
      var s18 := MStore(s17);
      var s19 := Push32(s18, 0x537472696e67733a20686578206c656e67746820696e73756666696369656e74);
      var s20 := Push1(s19, 0x44);
      var s21 := Dup3(s20);
      assert s21.Peek(8) == 0xa6e;
      assert s21.Peek(12) == 0x830;
      assert s21.Peek(14) == 0x5dd;
      assert s21.Peek(20) == 0x175;
      var s22 := Add(s21);
      var s23 := MStore(s22);
      var s24 := Push1(s23, 0x64);
      var s25 := Add(s24);
      var s26 := Push2(s25, 0x0391);
      var s27 := Jump(s26);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s469(s27, gas - 1)
  }

  /** Node 469
    * Segment Id for this node is: 85
    * Starting at 0x391
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: -1
    * Net Capacity Effect: +1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s469(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x391 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 19

    requires s0.stack[5] == 0xa6e

    requires s0.stack[9] == 0x830

    requires s0.stack[11] == 0x5dd

    requires s0.stack[17] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(5) == 0xa6e;
      assert s1.Peek(9) == 0x830;
      assert s1.Peek(11) == 0x5dd;
      assert s1.Peek(17) == 0x175;
      var s2 := Push1(s1, 0x40);
      var s3 := MLoad(s2);
      var s4 := Dup1(s3);
      var s5 := Swap2(s4);
      var s6 := Sub(s5);
      var s7 := Swap1(s6);
      var s8 := Revert(s7);
      // Segment is terminal (Revert, Stop or Return)
      s8
  }

  /** Node 470
    * Segment Id for this node is: 172
    * Starting at 0xc53
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 5
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -4
    * Net Capacity Effect: +4
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s470(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xc53 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 18

    requires s0.stack[4] == 0xa6e

    requires s0.stack[8] == 0x830

    requires s0.stack[10] == 0x5dd

    requires s0.stack[16] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(4) == 0xa6e;
      assert s1.Peek(8) == 0x830;
      assert s1.Peek(10) == 0x5dd;
      assert s1.Peek(16) == 0x175;
      var s2 := Swap4(s1);
      var s3 := Swap3(s2);
      var s4 := Pop(s3);
      var s5 := Pop(s4);
      var s6 := Pop(s5);
      var s7 := Jump(s6);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s471(s7, gas - 1)
  }

  /** Node 471
    * Segment Id for this node is: 147
    * Starting at 0xa6e
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +2
    * Net Capacity Effect: -2
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s471(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xa6e as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 14

    requires s0.stack[4] == 0x830

    requires s0.stack[6] == 0x5dd

    requires s0.stack[12] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(4) == 0x830;
      assert s1.Peek(6) == 0x5dd;
      assert s1.Peek(12) == 0x175;
      var s2 := Push1(s1, 0x40);
      var s3 := MLoad(s2);
      var s4 := Push1(s3, 0x20);
      var s5 := Add(s4);
      var s6 := Push2(s5, 0x0a7f);
      var s7 := Swap3(s6);
      var s8 := Swap2(s7);
      var s9 := Swap1(s8);
      var s10 := Push2(s9, 0x0e10);
      var s11 := Jump(s10);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s472(s11, gas - 1)
  }

  /** Node 472
    * Segment Id for this node is: 215
    * Starting at 0xe10
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 3
    * Minimum capacity for this segment to prevent stack overflow: 7
    * Net Stack Effect: +6
    * Net Capacity Effect: -6
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s472(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xe10 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 16

    requires s0.stack[3] == 0xa7f

    requires s0.stack[6] == 0x830

    requires s0.stack[8] == 0x5dd

    requires s0.stack[14] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0xa7f;
      assert s1.Peek(6) == 0x830;
      assert s1.Peek(8) == 0x5dd;
      assert s1.Peek(14) == 0x175;
      var s2 := Push32(s1, 0x416363657373436f6e74726f6c3a206163636f756e7420000000000000000000);
      var s3 := Dup2(s2);
      var s4 := MStore(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := Dup4(s5);
      var s7 := MLoad(s6);
      var s8 := Push2(s7, 0x0e48);
      var s9 := Dup2(s8);
      var s10 := Push1(s9, 0x17);
      var s11 := Dup6(s10);
      assert s11.Peek(3) == 0xe48;
      assert s11.Peek(9) == 0xa7f;
      assert s11.Peek(12) == 0x830;
      assert s11.Peek(14) == 0x5dd;
      assert s11.Peek(20) == 0x175;
      var s12 := Add(s11);
      var s13 := Push1(s12, 0x20);
      var s14 := Dup9(s13);
      var s15 := Add(s14);
      var s16 := Push2(s15, 0x0dae);
      var s17 := Jump(s16);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s473(s17, gas - 1)
  }

  /** Node 473
    * Segment Id for this node is: 205
    * Starting at 0xdae
    * Segment type is: CONT Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 1
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s473(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xdae as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 22

    requires s0.stack[3] == 0xe48

    requires s0.stack[9] == 0xa7f

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x5dd

    requires s0.stack[20] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0xe48;
      assert s1.Peek(9) == 0xa7f;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x5dd;
      assert s1.Peek(20) == 0x175;
      var s2 := Push1(s1, 0x00);
      //  Go to the next instruction at pc + 1
      ExecuteFromCFGNode_s474(s2, gas - 1)
  }

  /** Node 474
    * Segment Id for this node is: 206
    * Starting at 0xdb1
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 4
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s474(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xdb1 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 23

    requires s0.stack[4] == 0xe48

    requires s0.stack[10] == 0xa7f

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x5dd

    requires s0.stack[21] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(4) == 0xe48;
      assert s1.Peek(10) == 0xa7f;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x5dd;
      assert s1.Peek(21) == 0x175;
      var s2 := Dup4(s1);
      var s3 := Dup2(s2);
      var s4 := Lt(s3);
      var s5 := IsZero(s4);
      var s6 := Push2(s5, 0x0dc9);
      var s7 := JumpI(s6);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s6.stack[1] > 0 then
        ExecuteFromCFGNode_s476(s7, gas - 1)
      else
        ExecuteFromCFGNode_s475(s7, gas - 1)
  }

  /** Node 475
    * Segment Id for this node is: 207
    * Starting at 0xdba
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 3
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s475(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xdba as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 23

    requires s0.stack[4] == 0xe48

    requires s0.stack[10] == 0xa7f

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x5dd

    requires s0.stack[21] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Dup2(s0);
      assert s1.Peek(5) == 0xe48;
      assert s1.Peek(11) == 0xa7f;
      assert s1.Peek(14) == 0x830;
      assert s1.Peek(16) == 0x5dd;
      assert s1.Peek(22) == 0x175;
      var s2 := Dup2(s1);
      var s3 := Add(s2);
      var s4 := MLoad(s3);
      var s5 := Dup4(s4);
      var s6 := Dup3(s5);
      var s7 := Add(s6);
      var s8 := MStore(s7);
      var s9 := Push1(s8, 0x20);
      var s10 := Add(s9);
      var s11 := Push2(s10, 0x0db1);
      assert s11.Peek(0) == 0xdb1;
      assert s11.Peek(5) == 0xe48;
      assert s11.Peek(11) == 0xa7f;
      assert s11.Peek(14) == 0x830;
      assert s11.Peek(16) == 0x5dd;
      assert s11.Peek(22) == 0x175;
      var s12 := Jump(s11);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s474(s12, gas - 1)
  }

  /** Node 476
    * Segment Id for this node is: 208
    * Starting at 0xdc9
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 5
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -5
    * Net Capacity Effect: +5
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s476(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xdc9 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 23

    requires s0.stack[4] == 0xe48

    requires s0.stack[10] == 0xa7f

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x5dd

    requires s0.stack[21] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(4) == 0xe48;
      assert s1.Peek(10) == 0xa7f;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x5dd;
      assert s1.Peek(21) == 0x175;
      var s2 := Pop(s1);
      var s3 := Pop(s2);
      var s4 := Push1(s3, 0x00);
      var s5 := Swap2(s4);
      var s6 := Add(s5);
      var s7 := MStore(s6);
      var s8 := Jump(s7);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s477(s8, gas - 1)
  }

  /** Node 477
    * Segment Id for this node is: 216
    * Starting at 0xe48
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 4
    * Minimum capacity for this segment to prevent stack overflow: 6
    * Net Stack Effect: +5
    * Net Capacity Effect: -5
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s477(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xe48 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 18

    requires s0.stack[5] == 0xa7f

    requires s0.stack[8] == 0x830

    requires s0.stack[10] == 0x5dd

    requires s0.stack[16] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(5) == 0xa7f;
      assert s1.Peek(8) == 0x830;
      assert s1.Peek(10) == 0x5dd;
      assert s1.Peek(16) == 0x175;
      var s2 := PushN(s1, 17, 0x01034b99036b4b9b9b4b733903937b6329);
      var s3 := Push1(s2, 0x7d);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x17);
      var s6 := Swap2(s5);
      var s7 := Dup5(s6);
      var s8 := Add(s7);
      var s9 := Swap2(s8);
      var s10 := Dup3(s9);
      var s11 := Add(s10);
      assert s11.Peek(7) == 0xa7f;
      assert s11.Peek(10) == 0x830;
      assert s11.Peek(12) == 0x5dd;
      assert s11.Peek(18) == 0x175;
      var s12 := MStore(s11);
      var s13 := Dup4(s12);
      var s14 := MLoad(s13);
      var s15 := Push2(s14, 0x0e79);
      var s16 := Dup2(s15);
      var s17 := Push1(s16, 0x28);
      var s18 := Dup5(s17);
      var s19 := Add(s18);
      var s20 := Push1(s19, 0x20);
      var s21 := Dup9(s20);
      assert s21.Peek(4) == 0xe79;
      assert s21.Peek(11) == 0xa7f;
      assert s21.Peek(14) == 0x830;
      assert s21.Peek(16) == 0x5dd;
      assert s21.Peek(22) == 0x175;
      var s22 := Add(s21);
      var s23 := Push2(s22, 0x0dae);
      var s24 := Jump(s23);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s478(s24, gas - 1)
  }

  /** Node 478
    * Segment Id for this node is: 205
    * Starting at 0xdae
    * Segment type is: CONT Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 1
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s478(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xdae as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 23

    requires s0.stack[3] == 0xe79

    requires s0.stack[10] == 0xa7f

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x5dd

    requires s0.stack[21] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0xe79;
      assert s1.Peek(10) == 0xa7f;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x5dd;
      assert s1.Peek(21) == 0x175;
      var s2 := Push1(s1, 0x00);
      //  Go to the next instruction at pc + 1
      ExecuteFromCFGNode_s479(s2, gas - 1)
  }

  /** Node 479
    * Segment Id for this node is: 206
    * Starting at 0xdb1
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 4
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s479(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xdb1 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 24

    requires s0.stack[4] == 0xe79

    requires s0.stack[11] == 0xa7f

    requires s0.stack[14] == 0x830

    requires s0.stack[16] == 0x5dd

    requires s0.stack[22] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(4) == 0xe79;
      assert s1.Peek(11) == 0xa7f;
      assert s1.Peek(14) == 0x830;
      assert s1.Peek(16) == 0x5dd;
      assert s1.Peek(22) == 0x175;
      var s2 := Dup4(s1);
      var s3 := Dup2(s2);
      var s4 := Lt(s3);
      var s5 := IsZero(s4);
      var s6 := Push2(s5, 0x0dc9);
      var s7 := JumpI(s6);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s6.stack[1] > 0 then
        ExecuteFromCFGNode_s481(s7, gas - 1)
      else
        ExecuteFromCFGNode_s480(s7, gas - 1)
  }

  /** Node 480
    * Segment Id for this node is: 207
    * Starting at 0xdba
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 3
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s480(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xdba as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 24

    requires s0.stack[4] == 0xe79

    requires s0.stack[11] == 0xa7f

    requires s0.stack[14] == 0x830

    requires s0.stack[16] == 0x5dd

    requires s0.stack[22] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Dup2(s0);
      assert s1.Peek(5) == 0xe79;
      assert s1.Peek(12) == 0xa7f;
      assert s1.Peek(15) == 0x830;
      assert s1.Peek(17) == 0x5dd;
      assert s1.Peek(23) == 0x175;
      var s2 := Dup2(s1);
      var s3 := Add(s2);
      var s4 := MLoad(s3);
      var s5 := Dup4(s4);
      var s6 := Dup3(s5);
      var s7 := Add(s6);
      var s8 := MStore(s7);
      var s9 := Push1(s8, 0x20);
      var s10 := Add(s9);
      var s11 := Push2(s10, 0x0db1);
      assert s11.Peek(0) == 0xdb1;
      assert s11.Peek(5) == 0xe79;
      assert s11.Peek(12) == 0xa7f;
      assert s11.Peek(15) == 0x830;
      assert s11.Peek(17) == 0x5dd;
      assert s11.Peek(23) == 0x175;
      var s12 := Jump(s11);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s479(s12, gas - 1)
  }

  /** Node 481
    * Segment Id for this node is: 208
    * Starting at 0xdc9
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 5
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -5
    * Net Capacity Effect: +5
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s481(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xdc9 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 24

    requires s0.stack[4] == 0xe79

    requires s0.stack[11] == 0xa7f

    requires s0.stack[14] == 0x830

    requires s0.stack[16] == 0x5dd

    requires s0.stack[22] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(4) == 0xe79;
      assert s1.Peek(11) == 0xa7f;
      assert s1.Peek(14) == 0x830;
      assert s1.Peek(16) == 0x5dd;
      assert s1.Peek(22) == 0x175;
      var s2 := Pop(s1);
      var s3 := Pop(s2);
      var s4 := Push1(s3, 0x00);
      var s5 := Swap2(s4);
      var s6 := Add(s5);
      var s7 := MStore(s6);
      var s8 := Jump(s7);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s482(s8, gas - 1)
  }

  /** Node 482
    * Segment Id for this node is: 217
    * Starting at 0xe79
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 7
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -6
    * Net Capacity Effect: +6
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s482(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xe79 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 19

    requires s0.stack[6] == 0xa7f

    requires s0.stack[9] == 0x830

    requires s0.stack[11] == 0x5dd

    requires s0.stack[17] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(6) == 0xa7f;
      assert s1.Peek(9) == 0x830;
      assert s1.Peek(11) == 0x5dd;
      assert s1.Peek(17) == 0x175;
      var s2 := Add(s1);
      var s3 := Push1(s2, 0x28);
      var s4 := Add(s3);
      var s5 := Swap5(s4);
      var s6 := Swap4(s5);
      var s7 := Pop(s6);
      var s8 := Pop(s7);
      var s9 := Pop(s8);
      var s10 := Pop(s9);
      var s11 := Jump(s10);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s483(s11, gas - 1)
  }

  /** Node 483
    * Segment Id for this node is: 148
    * Starting at 0xa7f
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 5
    * Net Stack Effect: +2
    * Net Capacity Effect: -2
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s483(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xa7f as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 13

    requires s0.stack[3] == 0x830

    requires s0.stack[5] == 0x5dd

    requires s0.stack[11] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0x830;
      assert s1.Peek(5) == 0x5dd;
      assert s1.Peek(11) == 0x175;
      var s2 := Push1(s1, 0x40);
      var s3 := Dup1(s2);
      var s4 := MLoad(s3);
      var s5 := Push1(s4, 0x1f);
      var s6 := Not(s5);
      var s7 := Dup2(s6);
      var s8 := Dup5(s7);
      var s9 := Sub(s8);
      var s10 := Add(s9);
      var s11 := Dup2(s10);
      assert s11.Peek(7) == 0x830;
      assert s11.Peek(9) == 0x5dd;
      assert s11.Peek(15) == 0x175;
      var s12 := MStore(s11);
      var s13 := Swap1(s12);
      var s14 := Dup3(s13);
      var s15 := Swap1(s14);
      var s16 := MStore(s15);
      var s17 := Push3(s16, 0x461bcd);
      var s18 := Push1(s17, 0xe5);
      var s19 := Shl(s18);
      var s20 := Dup3(s19);
      var s21 := MStore(s20);
      assert s21.Peek(4) == 0x830;
      assert s21.Peek(6) == 0x5dd;
      assert s21.Peek(12) == 0x175;
      var s22 := Push2(s21, 0x0391);
      var s23 := Swap2(s22);
      var s24 := Push1(s23, 0x04);
      var s25 := Add(s24);
      var s26 := Push2(s25, 0x0e85);
      var s27 := Jump(s26);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s484(s27, gas - 1)
  }

  /** Node 484
    * Segment Id for this node is: 218
    * Starting at 0xe85
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 7
    * Net Stack Effect: +6
    * Net Capacity Effect: -6
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s484(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xe85 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 15

    requires s0.stack[2] == 0x391

    requires s0.stack[5] == 0x830

    requires s0.stack[7] == 0x5dd

    requires s0.stack[13] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0x391;
      assert s1.Peek(5) == 0x830;
      assert s1.Peek(7) == 0x5dd;
      assert s1.Peek(13) == 0x175;
      var s2 := Push1(s1, 0x20);
      var s3 := Dup2(s2);
      var s4 := MStore(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := Dup3(s5);
      var s7 := MLoad(s6);
      var s8 := Dup1(s7);
      var s9 := Push1(s8, 0x20);
      var s10 := Dup5(s9);
      var s11 := Add(s10);
      assert s11.Peek(6) == 0x391;
      assert s11.Peek(9) == 0x830;
      assert s11.Peek(11) == 0x5dd;
      assert s11.Peek(17) == 0x175;
      var s12 := MStore(s11);
      var s13 := Push2(s12, 0x0ea4);
      var s14 := Dup2(s13);
      var s15 := Push1(s14, 0x40);
      var s16 := Dup6(s15);
      var s17 := Add(s16);
      var s18 := Push1(s17, 0x20);
      var s19 := Dup8(s18);
      var s20 := Add(s19);
      var s21 := Push2(s20, 0x0dae);
      assert s21.Peek(0) == 0xdae;
      assert s21.Peek(4) == 0xea4;
      assert s21.Peek(9) == 0x391;
      assert s21.Peek(12) == 0x830;
      assert s21.Peek(14) == 0x5dd;
      assert s21.Peek(20) == 0x175;
      var s22 := Jump(s21);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s485(s22, gas - 1)
  }

  /** Node 485
    * Segment Id for this node is: 205
    * Starting at 0xdae
    * Segment type is: CONT Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 1
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s485(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xdae as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 21

    requires s0.stack[3] == 0xea4

    requires s0.stack[8] == 0x391

    requires s0.stack[11] == 0x830

    requires s0.stack[13] == 0x5dd

    requires s0.stack[19] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0xea4;
      assert s1.Peek(8) == 0x391;
      assert s1.Peek(11) == 0x830;
      assert s1.Peek(13) == 0x5dd;
      assert s1.Peek(19) == 0x175;
      var s2 := Push1(s1, 0x00);
      //  Go to the next instruction at pc + 1
      ExecuteFromCFGNode_s486(s2, gas - 1)
  }

  /** Node 486
    * Segment Id for this node is: 206
    * Starting at 0xdb1
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 4
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s486(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xdb1 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 22

    requires s0.stack[4] == 0xea4

    requires s0.stack[9] == 0x391

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x5dd

    requires s0.stack[20] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(4) == 0xea4;
      assert s1.Peek(9) == 0x391;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x5dd;
      assert s1.Peek(20) == 0x175;
      var s2 := Dup4(s1);
      var s3 := Dup2(s2);
      var s4 := Lt(s3);
      var s5 := IsZero(s4);
      var s6 := Push2(s5, 0x0dc9);
      var s7 := JumpI(s6);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s6.stack[1] > 0 then
        ExecuteFromCFGNode_s488(s7, gas - 1)
      else
        ExecuteFromCFGNode_s487(s7, gas - 1)
  }

  /** Node 487
    * Segment Id for this node is: 207
    * Starting at 0xdba
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 3
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s487(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xdba as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 22

    requires s0.stack[4] == 0xea4

    requires s0.stack[9] == 0x391

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x5dd

    requires s0.stack[20] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Dup2(s0);
      assert s1.Peek(5) == 0xea4;
      assert s1.Peek(10) == 0x391;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x5dd;
      assert s1.Peek(21) == 0x175;
      var s2 := Dup2(s1);
      var s3 := Add(s2);
      var s4 := MLoad(s3);
      var s5 := Dup4(s4);
      var s6 := Dup3(s5);
      var s7 := Add(s6);
      var s8 := MStore(s7);
      var s9 := Push1(s8, 0x20);
      var s10 := Add(s9);
      var s11 := Push2(s10, 0x0db1);
      assert s11.Peek(0) == 0xdb1;
      assert s11.Peek(5) == 0xea4;
      assert s11.Peek(10) == 0x391;
      assert s11.Peek(13) == 0x830;
      assert s11.Peek(15) == 0x5dd;
      assert s11.Peek(21) == 0x175;
      var s12 := Jump(s11);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s486(s12, gas - 1)
  }

  /** Node 488
    * Segment Id for this node is: 208
    * Starting at 0xdc9
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 5
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -5
    * Net Capacity Effect: +5
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s488(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xdc9 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 22

    requires s0.stack[4] == 0xea4

    requires s0.stack[9] == 0x391

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x5dd

    requires s0.stack[20] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(4) == 0xea4;
      assert s1.Peek(9) == 0x391;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x5dd;
      assert s1.Peek(20) == 0x175;
      var s2 := Pop(s1);
      var s3 := Pop(s2);
      var s4 := Push1(s3, 0x00);
      var s5 := Swap2(s4);
      var s6 := Add(s5);
      var s7 := MStore(s6);
      var s8 := Jump(s7);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s489(s8, gas - 1)
  }

  /** Node 489
    * Segment Id for this node is: 219
    * Starting at 0xea4
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 5
    * Minimum capacity for this segment to prevent stack overflow: 1
    * Net Stack Effect: -4
    * Net Capacity Effect: +4
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s489(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xea4 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 17

    requires s0.stack[4] == 0x391

    requires s0.stack[7] == 0x830

    requires s0.stack[9] == 0x5dd

    requires s0.stack[15] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(4) == 0x391;
      assert s1.Peek(7) == 0x830;
      assert s1.Peek(9) == 0x5dd;
      assert s1.Peek(15) == 0x175;
      var s2 := Push1(s1, 0x1f);
      var s3 := Add(s2);
      var s4 := Push1(s3, 0x1f);
      var s5 := Not(s4);
      var s6 := And(s5);
      var s7 := Swap2(s6);
      var s8 := Swap1(s7);
      var s9 := Swap2(s8);
      var s10 := Add(s9);
      var s11 := Push1(s10, 0x40);
      assert s11.Peek(4) == 0x391;
      assert s11.Peek(7) == 0x830;
      assert s11.Peek(9) == 0x5dd;
      assert s11.Peek(15) == 0x175;
      var s12 := Add(s11);
      var s13 := Swap3(s12);
      var s14 := Swap2(s13);
      var s15 := Pop(s14);
      var s16 := Pop(s15);
      var s17 := Jump(s16);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s490(s17, gas - 1)
  }

  /** Node 490
    * Segment Id for this node is: 85
    * Starting at 0x391
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: -1
    * Net Capacity Effect: +1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s490(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x391 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 13

    requires s0.stack[3] == 0x830

    requires s0.stack[5] == 0x5dd

    requires s0.stack[11] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0x830;
      assert s1.Peek(5) == 0x5dd;
      assert s1.Peek(11) == 0x175;
      var s2 := Push1(s1, 0x40);
      var s3 := MLoad(s2);
      var s4 := Dup1(s3);
      var s5 := Swap2(s4);
      var s6 := Sub(s5);
      var s7 := Swap1(s6);
      var s8 := Revert(s7);
      // Segment is terminal (Revert, Stop or Return)
      s8
  }

  /** Node 491
    * Segment Id for this node is: 103
    * Starting at 0x5af
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 3
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -3
    * Net Capacity Effect: +3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s491(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x5af as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 12

    requires s0.stack[2] == 0x830

    requires s0.stack[4] == 0x5dd

    requires s0.stack[10] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0x830;
      assert s1.Peek(4) == 0x5dd;
      assert s1.Peek(10) == 0x175;
      var s2 := Pop(s1);
      var s3 := Pop(s2);
      var s4 := Jump(s3);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s492(s4, gas - 1)
  }

  /** Node 492
    * Segment Id for this node is: 123
    * Starting at 0x830
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -2
    * Net Capacity Effect: +2
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s492(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x830 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 9

    requires s0.stack[1] == 0x5dd

    requires s0.stack[7] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(1) == 0x5dd;
      assert s1.Peek(7) == 0x175;
      var s2 := Pop(s1);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s493(s3, gas - 1)
  }

  /** Node 493
    * Segment Id for this node is: 105
    * Starting at 0x5dd
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s493(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x5dd as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 7

    requires s0.stack[5] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(5) == 0x175;
      var s2 := Push1(s1, 0x00);
      var s3 := Dup3(s2);
      var s4 := Dup2(s3);
      var s5 := MStore(s4);
      var s6 := Push1(s5, 0x02);
      var s7 := Push1(s6, 0x20);
      var s8 := MStore(s7);
      var s9 := Push1(s8, 0x40);
      var s10 := Swap1(s9);
      var s11 := Keccak256(s10);
      assert s11.Peek(6) == 0x175;
      var s12 := SLoad(s11);
      var s13 := Push1(s12, 0xff);
      var s14 := And(s13);
      var s15 := IsZero(s14);
      var s16 := Push2(s15, 0x062f);
      var s17 := JumpI(s16);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s16.stack[1] > 0 then
        ExecuteFromCFGNode_s496(s17, gas - 1)
      else
        ExecuteFromCFGNode_s494(s17, gas - 1)
  }

  /** Node 494
    * Segment Id for this node is: 106
    * Starting at 0x5f5
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s494(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x5f5 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 7

    requires s0.stack[5] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push1(s0, 0x40);
      assert s1.Peek(6) == 0x175;
      var s2 := MLoad(s1);
      var s3 := Push3(s2, 0x461bcd);
      var s4 := Push1(s3, 0xe5);
      var s5 := Shl(s4);
      var s6 := Dup2(s5);
      var s7 := MStore(s6);
      var s8 := Push1(s7, 0x20);
      var s9 := Push1(s8, 0x04);
      var s10 := Dup3(s9);
      var s11 := Add(s10);
      assert s11.Peek(8) == 0x175;
      var s12 := MStore(s11);
      var s13 := Push1(s12, 0x10);
      var s14 := Push1(s13, 0x24);
      var s15 := Dup3(s14);
      var s16 := Add(s15);
      var s17 := MStore(s16);
      var s18 := PushN(s17, 16, 0x1a59081a185cc81899595b881d5cd959);
      var s19 := Push1(s18, 0x82);
      var s20 := Shl(s19);
      var s21 := Push1(s20, 0x44);
      assert s21.Peek(8) == 0x175;
      var s22 := Dup3(s21);
      var s23 := Add(s22);
      var s24 := MStore(s23);
      var s25 := Push1(s24, 0x64);
      var s26 := Add(s25);
      var s27 := Push2(s26, 0x0391);
      var s28 := Jump(s27);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s495(s28, gas - 1)
  }

  /** Node 495
    * Segment Id for this node is: 85
    * Starting at 0x391
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: -1
    * Net Capacity Effect: +1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s495(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x391 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 8

    requires s0.stack[6] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(6) == 0x175;
      var s2 := Push1(s1, 0x40);
      var s3 := MLoad(s2);
      var s4 := Dup1(s3);
      var s5 := Swap2(s4);
      var s6 := Sub(s5);
      var s7 := Swap1(s6);
      var s8 := Revert(s7);
      // Segment is terminal (Revert, Stop or Return)
      s8
  }

  /** Node 496
    * Segment Id for this node is: 107
    * Starting at 0x62f
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 4
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s496(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x62f as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 7

    requires s0.stack[5] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(5) == 0x175;
      var s2 := Push1(s1, 0x01);
      var s3 := Push1(s2, 0x01);
      var s4 := Push1(s3, 0xa0);
      var s5 := Shl(s4);
      var s6 := Sub(s5);
      var s7 := Dup5(s6);
      var s8 := And(s7);
      var s9 := Push2(s8, 0x0679);
      var s10 := JumpI(s9);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s9.stack[1] > 0 then
        ExecuteFromCFGNode_s502(s10, gas - 1)
      else
        ExecuteFromCFGNode_s497(s10, gas - 1)
  }

  /** Node 497
    * Segment Id for this node is: 108
    * Starting at 0x63e
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 5
    * Minimum capacity for this segment to prevent stack overflow: 12
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s497(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x63e as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 7

    requires s0.stack[5] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push1(s0, 0x40);
      assert s1.Peek(6) == 0x175;
      var s2 := MLoad(s1);
      var s3 := Push1(s2, 0x01);
      var s4 := Push1(s3, 0x01);
      var s5 := Push1(s4, 0xa0);
      var s6 := Shl(s5);
      var s7 := Sub(s6);
      var s8 := Dup7(s7);
      var s9 := And(s8);
      var s10 := Swap1(s9);
      var s11 := Dup5(s10);
      assert s11.Peek(8) == 0x175;
      var s12 := IsZero(s11);
      var s13 := Push2(s12, 0x08fc);
      var s14 := Mul(s13);
      var s15 := Swap1(s14);
      var s16 := Dup6(s15);
      var s17 := Swap1(s16);
      var s18 := Push1(s17, 0x00);
      var s19 := Dup2(s18);
      var s20 := Dup2(s19);
      var s21 := Dup2(s20);
      assert s21.Peek(13) == 0x175;
      var s22 := Dup6(s21);
      var s23 := Dup9(s22);
      var s24 := Dup9(s23);
      var s25 := Call(s24);
      var s26 := Swap4(s25);
      var s27 := Pop(s26);
      var s28 := Pop(s27);
      var s29 := Pop(s28);
      var s30 := Pop(s29);
      var s31 := IsZero(s30);
      assert s31.Peek(6) == 0x175;
      var s32 := Dup1(s31);
      var s33 := IsZero(s32);
      var s34 := Push2(s33, 0x0673);
      var s35 := JumpI(s34);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s34.stack[1] > 0 then
        ExecuteFromCFGNode_s499(s35, gas - 1)
      else
        ExecuteFromCFGNode_s498(s35, gas - 1)
  }

  /** Node 498
    * Segment Id for this node is: 109
    * Starting at 0x66a
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s498(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x66a as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 8

    requires s0.stack[6] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := ReturnDataSize(s0);
      assert s1.Peek(7) == 0x175;
      var s2 := Push1(s1, 0x00);
      var s3 := Dup1(s2);
      var s4 := ReturnDataCopy(s3);
      var s5 := ReturnDataSize(s4);
      var s6 := Push1(s5, 0x00);
      var s7 := Revert(s6);
      // Segment is terminal (Revert, Stop or Return)
      s7
  }

  /** Node 499
    * Segment Id for this node is: 110
    * Starting at 0x673
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -1
    * Net Capacity Effect: +1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s499(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x673 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 8

    requires s0.stack[6] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(6) == 0x175;
      var s2 := Pop(s1);
      var s3 := Push2(s2, 0x0692);
      var s4 := Jump(s3);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s500(s4, gas - 1)
  }

  /** Node 500
    * Segment Id for this node is: 112
    * Starting at 0x692
    * Segment type is: CONT Segment
    * Minimum stack size for this segment to prevent stack underflow: 5
    * Minimum capacity for this segment to prevent stack overflow: 6
    * Net Stack Effect: +4
    * Net Capacity Effect: -4
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s500(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x692 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 7

    requires s0.stack[5] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(5) == 0x175;
      var s2 := Push1(s1, 0x00);
      var s3 := Dup3(s2);
      var s4 := Dup2(s3);
      var s5 := MStore(s4);
      var s6 := Push1(s5, 0x02);
      var s7 := Push1(s6, 0x20);
      var s8 := Swap1(s7);
      var s9 := Dup2(s8);
      var s10 := MStore(s9);
      var s11 := Push1(s10, 0x40);
      assert s11.Peek(8) == 0x175;
      var s12 := Swap2(s11);
      var s13 := Dup3(s12);
      var s14 := Swap1(s13);
      var s15 := Keccak256(s14);
      var s16 := Dup1(s15);
      var s17 := SLoad(s16);
      var s18 := Push1(s17, 0xff);
      var s19 := Not(s18);
      var s20 := And(s19);
      var s21 := Push1(s20, 0x01);
      assert s21.Peek(10) == 0x175;
      var s22 := Or(s21);
      var s23 := Swap1(s22);
      var s24 := SStore(s23);
      var s25 := Dup2(s24);
      var s26 := MLoad(s25);
      var s27 := Push1(s26, 0x01);
      var s28 := Push1(s27, 0x01);
      var s29 := Push1(s28, 0xa0);
      var s30 := Shl(s29);
      var s31 := Sub(s30);
      assert s31.Peek(9) == 0x175;
      var s32 := Dup9(s31);
      var s33 := Dup2(s32);
      var s34 := And(s33);
      var s35 := Dup3(s34);
      var s36 := MStore(s35);
      var s37 := Dup8(s36);
      var s38 := And(s37);
      var s39 := Swap2(s38);
      var s40 := Dup2(s39);
      var s41 := Add(s40);
      //  Go to the next instruction at pc + 1
      ExecuteFromCFGNode_s501(s41, gas - 1)
  }

  /** Node 501
    * Segment Id for this node is: 113
    * Starting at 0x6c4
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 10
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -10
    * Net Capacity Effect: +10
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s501(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x6c4 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 11

    requires s0.stack[9] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Swap2(s0);
      assert s1.Peek(9) == 0x175;
      var s2 := Swap1(s1);
      var s3 := Swap2(s2);
      var s4 := MStore(s3);
      var s5 := Swap1(s4);
      var s6 := Dup2(s5);
      var s7 := Add(s6);
      var s8 := Dup5(s7);
      var s9 := Swap1(s8);
      var s10 := MStore(s9);
      var s11 := Push1(s10, 0x60);
      assert s11.Peek(7) == 0x175;
      var s12 := Dup2(s11);
      var s13 := Add(s12);
      var s14 := Dup4(s13);
      var s15 := Swap1(s14);
      var s16 := MStore(s15);
      var s17 := Push32(s16, 0xa69fc39b702a6e8195370ae2252cc11b4445837cc4abe15ac39123f2f2d8770d);
      var s18 := Swap1(s17);
      var s19 := Push1(s18, 0x80);
      var s20 := Add(s19);
      var s21 := Push1(s20, 0x40);
      assert s21.Peek(8) == 0x175;
      var s22 := MLoad(s21);
      var s23 := Dup1(s22);
      var s24 := Swap2(s23);
      var s25 := Sub(s24);
      var s26 := Swap1(s25);
      var s27 := Log1(s26);
      var s28 := Pop(s27);
      var s29 := Pop(s28);
      var s30 := Pop(s29);
      var s31 := Pop(s30);
      assert s31.Peek(1) == 0x175;
      var s32 := Pop(s31);
      var s33 := Jump(s32);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s18(s33, gas - 1)
  }

  /** Node 502
    * Segment Id for this node is: 111
    * Starting at 0x679
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 5
    * Minimum capacity for this segment to prevent stack overflow: 6
    * Net Stack Effect: +5
    * Net Capacity Effect: -5
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s502(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x679 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 7

    requires s0.stack[5] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(5) == 0x175;
      var s2 := Push1(s1, 0x01);
      var s3 := SLoad(s2);
      var s4 := Push2(s3, 0x0692);
      var s5 := Swap1(s4);
      var s6 := Dup6(s5);
      var s7 := Swap1(s6);
      var s8 := Push1(s7, 0x01);
      var s9 := Push1(s8, 0x01);
      var s10 := Push1(s9, 0xa0);
      var s11 := Shl(s10);
      assert s11.Peek(4) == 0x692;
      assert s11.Peek(10) == 0x175;
      var s12 := Sub(s11);
      var s13 := And(s12);
      var s14 := Dup8(s13);
      var s15 := Dup7(s14);
      var s16 := Push2(s15, 0x08b7);
      var s17 := Jump(s16);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s503(s17, gas - 1)
  }

  /** Node 503
    * Segment Id for this node is: 128
    * Starting at 0x8b7
    * Segment type is: CONT Segment
    * Minimum stack size for this segment to prevent stack underflow: 3
    * Minimum capacity for this segment to prevent stack overflow: 7
    * Net Stack Effect: +5
    * Net Capacity Effect: -5
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s503(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x8b7 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 12

    requires s0.stack[4] == 0x692

    requires s0.stack[10] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(4) == 0x692;
      assert s1.Peek(10) == 0x175;
      var s2 := Push1(s1, 0x40);
      var s3 := Dup1(s2);
      var s4 := MLoad(s3);
      var s5 := Push1(s4, 0x01);
      var s6 := Push1(s5, 0x01);
      var s7 := Push1(s6, 0xa0);
      var s8 := Shl(s7);
      var s9 := Sub(s8);
      var s10 := Dup6(s9);
      var s11 := Dup2(s10);
      assert s11.Peek(9) == 0x692;
      assert s11.Peek(15) == 0x175;
      var s12 := And(s11);
      var s13 := Push1(s12, 0x24);
      var s14 := Dup4(s13);
      var s15 := Add(s14);
      var s16 := MStore(s15);
      var s17 := Dup5(s16);
      var s18 := Dup2(s17);
      var s19 := And(s18);
      var s20 := Push1(s19, 0x44);
      var s21 := Dup4(s20);
      assert s21.Peek(10) == 0x692;
      assert s21.Peek(16) == 0x175;
      var s22 := Add(s21);
      var s23 := MStore(s22);
      var s24 := Push1(s23, 0x64);
      var s25 := Dup1(s24);
      var s26 := Dup4(s25);
      var s27 := Add(s26);
      var s28 := Dup6(s27);
      var s29 := Swap1(s28);
      var s30 := MStore(s29);
      var s31 := Dup4(s30);
      assert s31.Peek(9) == 0x692;
      assert s31.Peek(15) == 0x175;
      var s32 := MLoad(s31);
      var s33 := Dup1(s32);
      var s34 := Dup5(s33);
      var s35 := Sub(s34);
      var s36 := Swap1(s35);
      var s37 := Swap2(s36);
      var s38 := Add(s37);
      var s39 := Dup2(s38);
      var s40 := MStore(s39);
      var s41 := Push1(s40, 0x84);
      //  Go to the next instruction at pc + 1
      ExecuteFromCFGNode_s504(s41, gas - 1)
  }

  /** Node 504
    * Segment Id for this node is: 129
    * Starting at 0x8e8
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 9
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s504(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x8e8 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 17

    requires s0.stack[9] == 0x692

    requires s0.stack[15] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Swap1(s0);
      assert s1.Peek(9) == 0x692;
      assert s1.Peek(15) == 0x175;
      var s2 := Swap3(s1);
      var s3 := Add(s2);
      var s4 := Dup4(s3);
      var s5 := MStore(s4);
      var s6 := Push1(s5, 0x20);
      var s7 := Dup3(s6);
      var s8 := Add(s7);
      var s9 := Dup1(s8);
      var s10 := MLoad(s9);
      var s11 := Push1(s10, 0x01);
      assert s11.Peek(10) == 0x692;
      assert s11.Peek(16) == 0x175;
      var s12 := Push1(s11, 0x01);
      var s13 := Push1(s12, 0xe0);
      var s14 := Shl(s13);
      var s15 := Sub(s14);
      var s16 := And(s15);
      var s17 := Push4(s16, 0x23b872dd);
      var s18 := Push1(s17, 0xe0);
      var s19 := Shl(s18);
      var s20 := Or(s19);
      var s21 := Swap1(s20);
      assert s21.Peek(9) == 0x692;
      assert s21.Peek(15) == 0x175;
      var s22 := MStore(s21);
      var s23 := Swap2(s22);
      var s24 := MLoad(s23);
      var s25 := Push1(s24, 0x00);
      var s26 := Swap3(s25);
      var s27 := Dup4(s26);
      var s28 := Swap3(s27);
      var s29 := Swap1(s28);
      var s30 := Dup9(s29);
      var s31 := And(s30);
      assert s31.Peek(9) == 0x692;
      assert s31.Peek(15) == 0x175;
      var s32 := Swap2(s31);
      var s33 := Push2(s32, 0x091b);
      var s34 := Swap2(s33);
      var s35 := Swap1(s34);
      var s36 := Push2(s35, 0x0dd2);
      var s37 := Jump(s36);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s505(s37, gas - 1)
  }

  /** Node 505
    * Segment Id for this node is: 209
    * Starting at 0xdd2
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 7
    * Net Stack Effect: +6
    * Net Capacity Effect: -6
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s505(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xdd2 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 18

    requires s0.stack[2] == 0x91b

    requires s0.stack[10] == 0x692

    requires s0.stack[16] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0x91b;
      assert s1.Peek(10) == 0x692;
      assert s1.Peek(16) == 0x175;
      var s2 := Push1(s1, 0x00);
      var s3 := Dup3(s2);
      var s4 := MLoad(s3);
      var s5 := Push2(s4, 0x0de4);
      var s6 := Dup2(s5);
      var s7 := Dup5(s6);
      var s8 := Push1(s7, 0x20);
      var s9 := Dup8(s8);
      var s10 := Add(s9);
      var s11 := Push2(s10, 0x0dae);
      assert s11.Peek(0) == 0xdae;
      assert s11.Peek(4) == 0xde4;
      assert s11.Peek(9) == 0x91b;
      assert s11.Peek(17) == 0x692;
      assert s11.Peek(23) == 0x175;
      var s12 := Jump(s11);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s506(s12, gas - 1)
  }

  /** Node 506
    * Segment Id for this node is: 205
    * Starting at 0xdae
    * Segment type is: CONT Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 1
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s506(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xdae as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 24

    requires s0.stack[3] == 0xde4

    requires s0.stack[8] == 0x91b

    requires s0.stack[16] == 0x692

    requires s0.stack[22] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0xde4;
      assert s1.Peek(8) == 0x91b;
      assert s1.Peek(16) == 0x692;
      assert s1.Peek(22) == 0x175;
      var s2 := Push1(s1, 0x00);
      //  Go to the next instruction at pc + 1
      ExecuteFromCFGNode_s507(s2, gas - 1)
  }

  /** Node 507
    * Segment Id for this node is: 206
    * Starting at 0xdb1
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 4
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s507(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xdb1 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 25

    requires s0.stack[4] == 0xde4

    requires s0.stack[9] == 0x91b

    requires s0.stack[17] == 0x692

    requires s0.stack[23] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(4) == 0xde4;
      assert s1.Peek(9) == 0x91b;
      assert s1.Peek(17) == 0x692;
      assert s1.Peek(23) == 0x175;
      var s2 := Dup4(s1);
      var s3 := Dup2(s2);
      var s4 := Lt(s3);
      var s5 := IsZero(s4);
      var s6 := Push2(s5, 0x0dc9);
      var s7 := JumpI(s6);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s6.stack[1] > 0 then
        ExecuteFromCFGNode_s509(s7, gas - 1)
      else
        ExecuteFromCFGNode_s508(s7, gas - 1)
  }

  /** Node 508
    * Segment Id for this node is: 207
    * Starting at 0xdba
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 3
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s508(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xdba as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 25

    requires s0.stack[4] == 0xde4

    requires s0.stack[9] == 0x91b

    requires s0.stack[17] == 0x692

    requires s0.stack[23] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Dup2(s0);
      assert s1.Peek(5) == 0xde4;
      assert s1.Peek(10) == 0x91b;
      assert s1.Peek(18) == 0x692;
      assert s1.Peek(24) == 0x175;
      var s2 := Dup2(s1);
      var s3 := Add(s2);
      var s4 := MLoad(s3);
      var s5 := Dup4(s4);
      var s6 := Dup3(s5);
      var s7 := Add(s6);
      var s8 := MStore(s7);
      var s9 := Push1(s8, 0x20);
      var s10 := Add(s9);
      var s11 := Push2(s10, 0x0db1);
      assert s11.Peek(0) == 0xdb1;
      assert s11.Peek(5) == 0xde4;
      assert s11.Peek(10) == 0x91b;
      assert s11.Peek(18) == 0x692;
      assert s11.Peek(24) == 0x175;
      var s12 := Jump(s11);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s507(s12, gas - 1)
  }

  /** Node 509
    * Segment Id for this node is: 208
    * Starting at 0xdc9
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 5
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -5
    * Net Capacity Effect: +5
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s509(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xdc9 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 25

    requires s0.stack[4] == 0xde4

    requires s0.stack[9] == 0x91b

    requires s0.stack[17] == 0x692

    requires s0.stack[23] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(4) == 0xde4;
      assert s1.Peek(9) == 0x91b;
      assert s1.Peek(17) == 0x692;
      assert s1.Peek(23) == 0x175;
      var s2 := Pop(s1);
      var s3 := Pop(s2);
      var s4 := Push1(s3, 0x00);
      var s5 := Swap2(s4);
      var s6 := Add(s5);
      var s7 := MStore(s6);
      var s8 := Jump(s7);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s510(s8, gas - 1)
  }

  /** Node 510
    * Segment Id for this node is: 210
    * Starting at 0xde4
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 5
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -4
    * Net Capacity Effect: +4
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s510(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xde4 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 20

    requires s0.stack[4] == 0x91b

    requires s0.stack[12] == 0x692

    requires s0.stack[18] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(4) == 0x91b;
      assert s1.Peek(12) == 0x692;
      assert s1.Peek(18) == 0x175;
      var s2 := Swap2(s1);
      var s3 := Swap1(s2);
      var s4 := Swap2(s3);
      var s5 := Add(s4);
      var s6 := Swap3(s5);
      var s7 := Swap2(s6);
      var s8 := Pop(s7);
      var s9 := Pop(s8);
      var s10 := Jump(s9);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s511(s10, gas - 1)
  }

  /** Node 511
    * Segment Id for this node is: 130
    * Starting at 0x91b
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 8
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s511(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x91b as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 16

    requires s0.stack[8] == 0x692

    requires s0.stack[14] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(8) == 0x692;
      assert s1.Peek(14) == 0x175;
      var s2 := Push1(s1, 0x00);
      var s3 := Push1(s2, 0x40);
      var s4 := MLoad(s3);
      var s5 := Dup1(s4);
      var s6 := Dup4(s5);
      var s7 := Sub(s6);
      var s8 := Dup2(s7);
      var s9 := Push1(s8, 0x00);
      var s10 := Dup7(s9);
      var s11 := Gas(s10);
      assert s11.Peek(15) == 0x692;
      assert s11.Peek(21) == 0x175;
      var s12 := Call(s11);
      var s13 := Swap2(s12);
      var s14 := Pop(s13);
      var s15 := Pop(s14);
      var s16 := ReturnDataSize(s15);
      var s17 := Dup1(s16);
      var s18 := Push1(s17, 0x00);
      var s19 := Dup2(s18);
      var s20 := Eq(s19);
      var s21 := Push2(s20, 0x0958);
      assert s21.Peek(0) == 0x958;
      assert s21.Peek(11) == 0x692;
      assert s21.Peek(17) == 0x175;
      var s22 := JumpI(s21);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s21.stack[1] > 0 then
        ExecuteFromCFGNode_s525(s22, gas - 1)
      else
        ExecuteFromCFGNode_s512(s22, gas - 1)
  }

  /** Node 512
    * Segment Id for this node is: 131
    * Starting at 0x937
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s512(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x937 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 17

    requires s0.stack[9] == 0x692

    requires s0.stack[15] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push1(s0, 0x40);
      assert s1.Peek(10) == 0x692;
      assert s1.Peek(16) == 0x175;
      var s2 := MLoad(s1);
      var s3 := Swap2(s2);
      var s4 := Pop(s3);
      var s5 := Push1(s4, 0x1f);
      var s6 := Not(s5);
      var s7 := Push1(s6, 0x3f);
      var s8 := ReturnDataSize(s7);
      var s9 := Add(s8);
      var s10 := And(s9);
      var s11 := Dup3(s10);
      assert s11.Peek(11) == 0x692;
      assert s11.Peek(17) == 0x175;
      var s12 := Add(s11);
      var s13 := Push1(s12, 0x40);
      var s14 := MStore(s13);
      var s15 := ReturnDataSize(s14);
      var s16 := Dup3(s15);
      var s17 := MStore(s16);
      var s18 := ReturnDataSize(s17);
      var s19 := Push1(s18, 0x00);
      var s20 := Push1(s19, 0x20);
      var s21 := Dup5(s20);
      assert s21.Peek(13) == 0x692;
      assert s21.Peek(19) == 0x175;
      var s22 := Add(s21);
      var s23 := ReturnDataCopy(s22);
      var s24 := Push2(s23, 0x095d);
      var s25 := Jump(s24);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s513(s25, gas - 1)
  }

  /** Node 513
    * Segment Id for this node is: 133
    * Starting at 0x95d
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 5
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -2
    * Net Capacity Effect: +2
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s513(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x95d as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 17

    requires s0.stack[9] == 0x692

    requires s0.stack[15] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(9) == 0x692;
      assert s1.Peek(15) == 0x175;
      var s2 := Pop(s1);
      var s3 := Swap2(s2);
      var s4 := Pop(s3);
      var s5 := Swap2(s4);
      var s6 := Pop(s5);
      var s7 := Dup2(s6);
      var s8 := Dup1(s7);
      var s9 := IsZero(s8);
      var s10 := Push2(s9, 0x0987);
      var s11 := JumpI(s10);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s10.stack[1] > 0 then
        ExecuteFromCFGNode_s521(s11, gas - 1)
      else
        ExecuteFromCFGNode_s514(s11, gas - 1)
  }

  /** Node 514
    * Segment Id for this node is: 134
    * Starting at 0x96a
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s514(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x96a as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 15

    requires s0.stack[7] == 0x692

    requires s0.stack[13] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Pop(s0);
      assert s1.Peek(6) == 0x692;
      assert s1.Peek(12) == 0x175;
      var s2 := Dup1(s1);
      var s3 := MLoad(s2);
      var s4 := IsZero(s3);
      var s5 := Dup1(s4);
      var s6 := Push2(s5, 0x0987);
      var s7 := JumpI(s6);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s6.stack[1] > 0 then
        ExecuteFromCFGNode_s521(s7, gas - 1)
      else
        ExecuteFromCFGNode_s515(s7, gas - 1)
  }

  /** Node 515
    * Segment Id for this node is: 135
    * Starting at 0x973
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +2
    * Net Capacity Effect: -2
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s515(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x973 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 15

    requires s0.stack[7] == 0x692

    requires s0.stack[13] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Pop(s0);
      assert s1.Peek(6) == 0x692;
      assert s1.Peek(12) == 0x175;
      var s2 := Dup1(s1);
      var s3 := Dup1(s2);
      var s4 := Push1(s3, 0x20);
      var s5 := Add(s4);
      var s6 := Swap1(s5);
      var s7 := MLoad(s6);
      var s8 := Dup2(s7);
      var s9 := Add(s8);
      var s10 := Swap1(s9);
      var s11 := Push2(s10, 0x0987);
      assert s11.Peek(0) == 0x987;
      assert s11.Peek(9) == 0x692;
      assert s11.Peek(15) == 0x175;
      var s12 := Swap2(s11);
      var s13 := Swap1(s12);
      var s14 := Push2(s13, 0x0dee);
      var s15 := Jump(s14);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s516(s15, gas - 1)
  }

  /** Node 516
    * Segment Id for this node is: 211
    * Starting at 0xdee
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s516(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xdee as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 17

    requires s0.stack[2] == 0x987

    requires s0.stack[9] == 0x692

    requires s0.stack[15] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0x987;
      assert s1.Peek(9) == 0x692;
      assert s1.Peek(15) == 0x175;
      var s2 := Push1(s1, 0x00);
      var s3 := Push1(s2, 0x20);
      var s4 := Dup3(s3);
      var s5 := Dup5(s4);
      var s6 := Sub(s5);
      var s7 := SLt(s6);
      var s8 := IsZero(s7);
      var s9 := Push2(s8, 0x0e00);
      var s10 := JumpI(s9);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s9.stack[1] > 0 then
        ExecuteFromCFGNode_s518(s10, gas - 1)
      else
        ExecuteFromCFGNode_s517(s10, gas - 1)
  }

  /** Node 517
    * Segment Id for this node is: 212
    * Starting at 0xdfc
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s517(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xdfc as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 18

    requires s0.stack[3] == 0x987

    requires s0.stack[10] == 0x692

    requires s0.stack[16] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push1(s0, 0x00);
      assert s1.Peek(4) == 0x987;
      assert s1.Peek(11) == 0x692;
      assert s1.Peek(17) == 0x175;
      var s2 := Dup1(s1);
      var s3 := Revert(s2);
      // Segment is terminal (Revert, Stop or Return)
      s3
  }

  /** Node 518
    * Segment Id for this node is: 213
    * Starting at 0xe00
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s518(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xe00 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 18

    requires s0.stack[3] == 0x987

    requires s0.stack[10] == 0x692

    requires s0.stack[16] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0x987;
      assert s1.Peek(10) == 0x692;
      assert s1.Peek(16) == 0x175;
      var s2 := Dup2(s1);
      var s3 := MLoad(s2);
      var s4 := Dup1(s3);
      var s5 := IsZero(s4);
      var s6 := IsZero(s5);
      var s7 := Dup2(s6);
      var s8 := Eq(s7);
      var s9 := Push2(s8, 0x0c53);
      var s10 := JumpI(s9);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s9.stack[1] > 0 then
        ExecuteFromCFGNode_s520(s10, gas - 1)
      else
        ExecuteFromCFGNode_s519(s10, gas - 1)
  }

  /** Node 519
    * Segment Id for this node is: 214
    * Starting at 0xe0c
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s519(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xe0c as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 19

    requires s0.stack[4] == 0x987

    requires s0.stack[11] == 0x692

    requires s0.stack[17] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push1(s0, 0x00);
      assert s1.Peek(5) == 0x987;
      assert s1.Peek(12) == 0x692;
      assert s1.Peek(18) == 0x175;
      var s2 := Dup1(s1);
      var s3 := Revert(s2);
      // Segment is terminal (Revert, Stop or Return)
      s3
  }

  /** Node 520
    * Segment Id for this node is: 172
    * Starting at 0xc53
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 5
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -4
    * Net Capacity Effect: +4
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s520(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xc53 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 19

    requires s0.stack[4] == 0x987

    requires s0.stack[11] == 0x692

    requires s0.stack[17] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(4) == 0x987;
      assert s1.Peek(11) == 0x692;
      assert s1.Peek(17) == 0x175;
      var s2 := Swap4(s1);
      var s3 := Swap3(s2);
      var s4 := Pop(s3);
      var s5 := Pop(s4);
      var s6 := Pop(s5);
      var s7 := Jump(s6);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s521(s7, gas - 1)
  }

  /** Node 521
    * Segment Id for this node is: 136
    * Starting at 0x987
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 1
    * Net Stack Effect: -1
    * Net Capacity Effect: +1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s521(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x987 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 15

    requires s0.stack[7] == 0x692

    requires s0.stack[13] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(7) == 0x692;
      assert s1.Peek(13) == 0x175;
      var s2 := Push2(s1, 0x09df);
      var s3 := JumpI(s2);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s2.stack[1] > 0 then
        ExecuteFromCFGNode_s524(s3, gas - 1)
      else
        ExecuteFromCFGNode_s522(s3, gas - 1)
  }

  /** Node 522
    * Segment Id for this node is: 137
    * Starting at 0x98c
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s522(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x98c as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 14

    requires s0.stack[6] == 0x692

    requires s0.stack[12] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push1(s0, 0x40);
      assert s1.Peek(7) == 0x692;
      assert s1.Peek(13) == 0x175;
      var s2 := MLoad(s1);
      var s3 := Push3(s2, 0x461bcd);
      var s4 := Push1(s3, 0xe5);
      var s5 := Shl(s4);
      var s6 := Dup2(s5);
      var s7 := MStore(s6);
      var s8 := Push1(s7, 0x20);
      var s9 := Push1(s8, 0x04);
      var s10 := Dup3(s9);
      var s11 := Add(s10);
      assert s11.Peek(9) == 0x692;
      assert s11.Peek(15) == 0x175;
      var s12 := MStore(s11);
      var s13 := Push1(s12, 0x24);
      var s14 := Dup1(s13);
      var s15 := Dup3(s14);
      var s16 := Add(s15);
      var s17 := MStore(s16);
      var s18 := Push32(s17, 0x5472616e7366657248656c7065723a205452414e534645525f46524f4d5f4641);
      var s19 := Push1(s18, 0x44);
      var s20 := Dup3(s19);
      var s21 := Add(s20);
      assert s21.Peek(9) == 0x692;
      assert s21.Peek(15) == 0x175;
      var s22 := MStore(s21);
      var s23 := Push4(s22, 0x12531151);
      var s24 := Push1(s23, 0xe2);
      var s25 := Shl(s24);
      var s26 := Push1(s25, 0x64);
      var s27 := Dup3(s26);
      var s28 := Add(s27);
      var s29 := MStore(s28);
      var s30 := Push1(s29, 0x84);
      var s31 := Add(s30);
      assert s31.Peek(7) == 0x692;
      assert s31.Peek(13) == 0x175;
      var s32 := Push2(s31, 0x0391);
      var s33 := Jump(s32);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s523(s33, gas - 1)
  }

  /** Node 523
    * Segment Id for this node is: 85
    * Starting at 0x391
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: -1
    * Net Capacity Effect: +1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s523(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x391 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 15

    requires s0.stack[7] == 0x692

    requires s0.stack[13] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(7) == 0x692;
      assert s1.Peek(13) == 0x175;
      var s2 := Push1(s1, 0x40);
      var s3 := MLoad(s2);
      var s4 := Dup1(s3);
      var s5 := Swap2(s4);
      var s6 := Sub(s5);
      var s7 := Swap1(s6);
      var s8 := Revert(s7);
      // Segment is terminal (Revert, Stop or Return)
      s8
  }

  /** Node 524
    * Segment Id for this node is: 138
    * Starting at 0x9df
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 7
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -7
    * Net Capacity Effect: +7
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s524(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x9df as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 14

    requires s0.stack[6] == 0x692

    requires s0.stack[12] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(6) == 0x692;
      assert s1.Peek(12) == 0x175;
      var s2 := Pop(s1);
      var s3 := Pop(s2);
      var s4 := Pop(s3);
      var s5 := Pop(s4);
      var s6 := Pop(s5);
      var s7 := Pop(s6);
      var s8 := Jump(s7);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s500(s8, gas - 1)
  }

  /** Node 525
    * Segment Id for this node is: 132
    * Starting at 0x958
    * Segment type is: CONT Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 1
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s525(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x958 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 17

    requires s0.stack[9] == 0x692

    requires s0.stack[15] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(9) == 0x692;
      assert s1.Peek(15) == 0x175;
      var s2 := Push1(s1, 0x60);
      var s3 := Swap2(s2);
      var s4 := Pop(s3);
      //  Go to the next instruction at pc + 1
      ExecuteFromCFGNode_s513(s4, gas - 1)
  }

  /** Node 526
    * Segment Id for this node is: 42
    * Starting at 0x197
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s526(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x197 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 1

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      var s2 := CallValue(s1);
      var s3 := Dup1(s2);
      var s4 := IsZero(s3);
      var s5 := Push2(s4, 0x01a3);
      var s6 := JumpI(s5);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s5.stack[1] > 0 then
        ExecuteFromCFGNode_s528(s6, gas - 1)
      else
        ExecuteFromCFGNode_s527(s6, gas - 1)
  }

  /** Node 527
    * Segment Id for this node is: 43
    * Starting at 0x19f
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s527(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x19f as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 2

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push1(s0, 0x00);
      var s2 := Dup1(s1);
      var s3 := Revert(s2);
      // Segment is terminal (Revert, Stop or Return)
      s3
  }

  /** Node 528
    * Segment Id for this node is: 44
    * Starting at 0x1a3
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +3
    * Net Capacity Effect: -3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s528(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x1a3 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 2

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      var s2 := Pop(s1);
      var s3 := Push2(s2, 0x0175);
      var s4 := Push2(s3, 0x01b2);
      var s5 := CallDataSize(s4);
      var s6 := Push1(s5, 0x04);
      var s7 := Push2(s6, 0x0cb9);
      var s8 := Jump(s7);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s529(s8, gas - 1)
  }

  /** Node 529
    * Segment Id for this node is: 183
    * Starting at 0xcb9
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 5
    * Net Stack Effect: +2
    * Net Capacity Effect: -2
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s529(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xcb9 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 5

    requires s0.stack[2] == 0x1b2

    requires s0.stack[3] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0x1b2;
      assert s1.Peek(3) == 0x175;
      var s2 := Push1(s1, 0x00);
      var s3 := Dup1(s2);
      var s4 := Push1(s3, 0x40);
      var s5 := Dup4(s4);
      var s6 := Dup6(s5);
      var s7 := Sub(s6);
      var s8 := SLt(s7);
      var s9 := IsZero(s8);
      var s10 := Push2(s9, 0x0ccc);
      var s11 := JumpI(s10);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s10.stack[1] > 0 then
        ExecuteFromCFGNode_s531(s11, gas - 1)
      else
        ExecuteFromCFGNode_s530(s11, gas - 1)
  }

  /** Node 530
    * Segment Id for this node is: 184
    * Starting at 0xcc8
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s530(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xcc8 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 7

    requires s0.stack[4] == 0x1b2

    requires s0.stack[5] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push1(s0, 0x00);
      assert s1.Peek(5) == 0x1b2;
      assert s1.Peek(6) == 0x175;
      var s2 := Dup1(s1);
      var s3 := Revert(s2);
      // Segment is terminal (Revert, Stop or Return)
      s3
  }

  /** Node 531
    * Segment Id for this node is: 185
    * Starting at 0xccc
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 3
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +2
    * Net Capacity Effect: -2
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s531(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xccc as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 7

    requires s0.stack[4] == 0x1b2

    requires s0.stack[5] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(4) == 0x1b2;
      assert s1.Peek(5) == 0x175;
      var s2 := Dup3(s1);
      var s3 := CallDataLoad(s2);
      var s4 := Swap2(s3);
      var s5 := Pop(s4);
      var s6 := Push2(s5, 0x0cdc);
      var s7 := Push1(s6, 0x20);
      var s8 := Dup5(s7);
      var s9 := Add(s8);
      var s10 := Push2(s9, 0x0c9d);
      var s11 := Jump(s10);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s532(s11, gas - 1)
  }

  /** Node 532
    * Segment Id for this node is: 180
    * Starting at 0xc9d
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s532(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xc9d as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 9

    requires s0.stack[1] == 0xcdc

    requires s0.stack[6] == 0x1b2

    requires s0.stack[7] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(1) == 0xcdc;
      assert s1.Peek(6) == 0x1b2;
      assert s1.Peek(7) == 0x175;
      var s2 := Dup1(s1);
      var s3 := CallDataLoad(s2);
      var s4 := Push1(s3, 0x01);
      var s5 := Push1(s4, 0x01);
      var s6 := Push1(s5, 0xa0);
      var s7 := Shl(s6);
      var s8 := Sub(s7);
      var s9 := Dup2(s8);
      var s10 := And(s9);
      var s11 := Dup2(s10);
      assert s11.Peek(4) == 0xcdc;
      assert s11.Peek(9) == 0x1b2;
      assert s11.Peek(10) == 0x175;
      var s12 := Eq(s11);
      var s13 := Push2(s12, 0x0cb4);
      var s14 := JumpI(s13);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s13.stack[1] > 0 then
        ExecuteFromCFGNode_s534(s14, gas - 1)
      else
        ExecuteFromCFGNode_s533(s14, gas - 1)
  }

  /** Node 533
    * Segment Id for this node is: 181
    * Starting at 0xcb0
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s533(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xcb0 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 10

    requires s0.stack[2] == 0xcdc

    requires s0.stack[7] == 0x1b2

    requires s0.stack[8] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push1(s0, 0x00);
      assert s1.Peek(3) == 0xcdc;
      assert s1.Peek(8) == 0x1b2;
      assert s1.Peek(9) == 0x175;
      var s2 := Dup1(s1);
      var s3 := Revert(s2);
      // Segment is terminal (Revert, Stop or Return)
      s3
  }

  /** Node 534
    * Segment Id for this node is: 182
    * Starting at 0xcb4
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 3
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -2
    * Net Capacity Effect: +2
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s534(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xcb4 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 10

    requires s0.stack[2] == 0xcdc

    requires s0.stack[7] == 0x1b2

    requires s0.stack[8] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0xcdc;
      assert s1.Peek(7) == 0x1b2;
      assert s1.Peek(8) == 0x175;
      var s2 := Swap2(s1);
      var s3 := Swap1(s2);
      var s4 := Pop(s3);
      var s5 := Jump(s4);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s535(s5, gas - 1)
  }

  /** Node 535
    * Segment Id for this node is: 186
    * Starting at 0xcdc
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 6
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -4
    * Net Capacity Effect: +4
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s535(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xcdc as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 8

    requires s0.stack[5] == 0x1b2

    requires s0.stack[6] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(5) == 0x1b2;
      assert s1.Peek(6) == 0x175;
      var s2 := Swap1(s1);
      var s3 := Pop(s2);
      var s4 := Swap3(s3);
      var s5 := Pop(s4);
      var s6 := Swap3(s5);
      var s7 := Swap1(s6);
      var s8 := Pop(s7);
      var s9 := Jump(s8);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s536(s9, gas - 1)
  }

  /** Node 536
    * Segment Id for this node is: 45
    * Starting at 0x1b2
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 1
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s536(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x1b2 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 4

    requires s0.stack[2] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0x175;
      var s2 := Push2(s1, 0x0535);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s537(s3, gas - 1)
  }

  /** Node 537
    * Segment Id for this node is: 100
    * Starting at 0x535
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s537(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x535 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 4

    requires s0.stack[2] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0x175;
      var s2 := Push1(s1, 0x01);
      var s3 := Push1(s2, 0x01);
      var s4 := Push1(s3, 0xa0);
      var s5 := Shl(s4);
      var s6 := Sub(s5);
      var s7 := Dup2(s6);
      var s8 := And(s7);
      var s9 := Caller(s8);
      var s10 := Eq(s9);
      var s11 := Push2(s10, 0x05a5);
      assert s11.Peek(0) == 0x5a5;
      assert s11.Peek(4) == 0x175;
      var s12 := JumpI(s11);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s11.stack[1] > 0 then
        ExecuteFromCFGNode_s540(s12, gas - 1)
      else
        ExecuteFromCFGNode_s538(s12, gas - 1)
  }

  /** Node 538
    * Segment Id for this node is: 101
    * Starting at 0x546
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s538(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x546 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 4

    requires s0.stack[2] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push1(s0, 0x40);
      assert s1.Peek(3) == 0x175;
      var s2 := MLoad(s1);
      var s3 := Push3(s2, 0x461bcd);
      var s4 := Push1(s3, 0xe5);
      var s5 := Shl(s4);
      var s6 := Dup2(s5);
      var s7 := MStore(s6);
      var s8 := Push1(s7, 0x20);
      var s9 := Push1(s8, 0x04);
      var s10 := Dup3(s9);
      var s11 := Add(s10);
      assert s11.Peek(5) == 0x175;
      var s12 := MStore(s11);
      var s13 := Push1(s12, 0x2f);
      var s14 := Push1(s13, 0x24);
      var s15 := Dup3(s14);
      var s16 := Add(s15);
      var s17 := MStore(s16);
      var s18 := Push32(s17, 0x416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e6365);
      var s19 := Push1(s18, 0x44);
      var s20 := Dup3(s19);
      var s21 := Add(s20);
      assert s21.Peek(5) == 0x175;
      var s22 := MStore(s21);
      var s23 := PushN(s22, 15, 0x103937b632b9903337b91039b2b633);
      var s24 := Push1(s23, 0x89);
      var s25 := Shl(s24);
      var s26 := Push1(s25, 0x64);
      var s27 := Dup3(s26);
      var s28 := Add(s27);
      var s29 := MStore(s28);
      var s30 := Push1(s29, 0x84);
      var s31 := Add(s30);
      assert s31.Peek(3) == 0x175;
      var s32 := Push2(s31, 0x0391);
      var s33 := Jump(s32);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s539(s33, gas - 1)
  }

  /** Node 539
    * Segment Id for this node is: 85
    * Starting at 0x391
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: -1
    * Net Capacity Effect: +1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s539(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x391 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 5

    requires s0.stack[3] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0x175;
      var s2 := Push1(s1, 0x40);
      var s3 := MLoad(s2);
      var s4 := Dup1(s3);
      var s5 := Swap2(s4);
      var s6 := Sub(s5);
      var s7 := Swap1(s6);
      var s8 := Revert(s7);
      // Segment is terminal (Revert, Stop or Return)
      s8
  }

  /** Node 540
    * Segment Id for this node is: 102
    * Starting at 0x5a5
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +3
    * Net Capacity Effect: -3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s540(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x5a5 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 4

    requires s0.stack[2] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0x175;
      var s2 := Push2(s1, 0x05af);
      var s3 := Dup3(s2);
      var s4 := Dup3(s3);
      var s5 := Push2(s4, 0x09e7);
      var s6 := Jump(s5);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s541(s6, gas - 1)
  }

  /** Node 541
    * Segment Id for this node is: 139
    * Starting at 0x9e7
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +3
    * Net Capacity Effect: -3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s541(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x9e7 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 7

    requires s0.stack[2] == 0x5af

    requires s0.stack[5] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0x5af;
      assert s1.Peek(5) == 0x175;
      var s2 := Push2(s1, 0x09f1);
      var s3 := Dup3(s2);
      var s4 := Dup3(s3);
      var s5 := Push2(s4, 0x0708);
      var s6 := Jump(s5);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s542(s6, gas - 1)
  }

  /** Node 542
    * Segment Id for this node is: 114
    * Starting at 0x708
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 3
    * Minimum capacity for this segment to prevent stack overflow: 6
    * Net Stack Effect: -2
    * Net Capacity Effect: +2
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s542(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x708 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 10

    requires s0.stack[2] == 0x9f1

    requires s0.stack[5] == 0x5af

    requires s0.stack[8] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0x9f1;
      assert s1.Peek(5) == 0x5af;
      assert s1.Peek(8) == 0x175;
      var s2 := Push1(s1, 0x00);
      var s3 := Swap2(s2);
      var s4 := Dup3(s3);
      var s5 := MStore(s4);
      var s6 := Push1(s5, 0x20);
      var s7 := Dup3(s6);
      var s8 := Dup2(s7);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x40);
      var s11 := Dup1(s10);
      assert s11.Peek(5) == 0x9f1;
      assert s11.Peek(8) == 0x5af;
      assert s11.Peek(11) == 0x175;
      var s12 := Dup5(s11);
      var s13 := Keccak256(s12);
      var s14 := Push1(s13, 0x01);
      var s15 := Push1(s14, 0x01);
      var s16 := Push1(s15, 0xa0);
      var s17 := Shl(s16);
      var s18 := Sub(s17);
      var s19 := Swap4(s18);
      var s20 := Swap1(s19);
      var s21 := Swap4(s20);
      assert s21.Peek(6) == 0x9f1;
      assert s21.Peek(9) == 0x5af;
      assert s21.Peek(12) == 0x175;
      var s22 := And(s21);
      var s23 := Dup5(s22);
      var s24 := MStore(s23);
      var s25 := Swap2(s24);
      var s26 := Swap1(s25);
      var s27 := MStore(s26);
      var s28 := Swap1(s27);
      var s29 := Keccak256(s28);
      var s30 := SLoad(s29);
      var s31 := Push1(s30, 0xff);
      assert s31.Peek(2) == 0x9f1;
      assert s31.Peek(5) == 0x5af;
      assert s31.Peek(8) == 0x175;
      var s32 := And(s31);
      var s33 := Swap1(s32);
      var s34 := Jump(s33);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s543(s34, gas - 1)
  }

  /** Node 543
    * Segment Id for this node is: 140
    * Starting at 0x9f1
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 1
    * Net Stack Effect: -1
    * Net Capacity Effect: +1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s543(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x9f1 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 8

    requires s0.stack[3] == 0x5af

    requires s0.stack[6] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0x5af;
      assert s1.Peek(6) == 0x175;
      var s2 := IsZero(s1);
      var s3 := Push2(s2, 0x05af);
      var s4 := JumpI(s3);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s3.stack[1] > 0 then
        ExecuteFromCFGNode_s547(s4, gas - 1)
      else
        ExecuteFromCFGNode_s544(s4, gas - 1)
  }

  /** Node 544
    * Segment Id for this node is: 141
    * Starting at 0x9f7
    * Segment type is: CONT Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 7
    * Net Stack Effect: +6
    * Net Capacity Effect: -6
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s544(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x9f7 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 7

    requires s0.stack[2] == 0x5af

    requires s0.stack[5] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push1(s0, 0x00);
      assert s1.Peek(3) == 0x5af;
      assert s1.Peek(6) == 0x175;
      var s2 := Dup3(s1);
      var s3 := Dup2(s2);
      var s4 := MStore(s3);
      var s5 := Push1(s4, 0x20);
      var s6 := Dup2(s5);
      var s7 := Dup2(s6);
      var s8 := MStore(s7);
      var s9 := Push1(s8, 0x40);
      var s10 := Dup1(s9);
      var s11 := Dup4(s10);
      assert s11.Peek(7) == 0x5af;
      assert s11.Peek(10) == 0x175;
      var s12 := Keccak256(s11);
      var s13 := Push1(s12, 0x01);
      var s14 := Push1(s13, 0x01);
      var s15 := Push1(s14, 0xa0);
      var s16 := Shl(s15);
      var s17 := Sub(s16);
      var s18 := Dup6(s17);
      var s19 := And(s18);
      var s20 := Dup1(s19);
      var s21 := Dup6(s20);
      assert s21.Peek(9) == 0x5af;
      assert s21.Peek(12) == 0x175;
      var s22 := MStore(s21);
      var s23 := Swap3(s22);
      var s24 := MStore(s23);
      var s25 := Dup1(s24);
      var s26 := Dup4(s25);
      var s27 := Keccak256(s26);
      var s28 := Dup1(s27);
      var s29 := SLoad(s28);
      var s30 := Push1(s29, 0xff);
      var s31 := Not(s30);
      assert s31.Peek(8) == 0x5af;
      assert s31.Peek(11) == 0x175;
      var s32 := And(s31);
      var s33 := Swap1(s32);
      var s34 := SStore(s33);
      var s35 := MLoad(s34);
      var s36 := Caller(s35);
      var s37 := Swap3(s36);
      var s38 := Dup6(s37);
      var s39 := Swap2(s38);
      var s40 := Push32(s39, 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b);
      var s41 := Swap2(s40);
      //  Go to the next instruction at pc + 1
      ExecuteFromCFGNode_s545(s41, gas - 1)
  }

  /** Node 545
    * Segment Id for this node is: 142
    * Starting at 0xa47
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 9
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -9
    * Net Capacity Effect: +9
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s545(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xa47 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 13

    requires s0.stack[8] == 0x5af

    requires s0.stack[11] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Swap1(s0);
      assert s1.Peek(8) == 0x5af;
      assert s1.Peek(11) == 0x175;
      var s2 := Log4(s1);
      var s3 := Pop(s2);
      var s4 := Pop(s3);
      var s5 := Jump(s4);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s546(s5, gas - 1)
  }

  /** Node 546
    * Segment Id for this node is: 103
    * Starting at 0x5af
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 3
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -3
    * Net Capacity Effect: +3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s546(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x5af as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 4

    requires s0.stack[2] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0x175;
      var s2 := Pop(s1);
      var s3 := Pop(s2);
      var s4 := Jump(s3);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s18(s4, gas - 1)
  }

  /** Node 547
    * Segment Id for this node is: 103
    * Starting at 0x5af
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 3
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -3
    * Net Capacity Effect: +3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s547(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x5af as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 7

    requires s0.stack[2] == 0x5af

    requires s0.stack[5] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0x5af;
      assert s1.Peek(5) == 0x175;
      var s2 := Pop(s1);
      var s3 := Pop(s2);
      var s4 := Jump(s3);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s546(s4, gas - 1)
  }

  /** Node 548
    * Segment Id for this node is: 38
    * Starting at 0x177
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s548(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x177 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 1

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      var s2 := CallValue(s1);
      var s3 := Dup1(s2);
      var s4 := IsZero(s3);
      var s5 := Push2(s4, 0x0183);
      var s6 := JumpI(s5);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s5.stack[1] > 0 then
        ExecuteFromCFGNode_s550(s6, gas - 1)
      else
        ExecuteFromCFGNode_s549(s6, gas - 1)
  }

  /** Node 549
    * Segment Id for this node is: 39
    * Starting at 0x17f
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s549(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x17f as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 2

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push1(s0, 0x00);
      var s2 := Dup1(s1);
      var s3 := Revert(s2);
      // Segment is terminal (Revert, Stop or Return)
      s3
  }

  /** Node 550
    * Segment Id for this node is: 40
    * Starting at 0x183
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +3
    * Net Capacity Effect: -3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s550(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x183 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 2

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      var s2 := Pop(s1);
      var s3 := Push2(s2, 0x0175);
      var s4 := Push2(s3, 0x0192);
      var s5 := CallDataSize(s4);
      var s6 := Push1(s5, 0x04);
      var s7 := Push2(s6, 0x0ce5);
      var s8 := Jump(s7);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s551(s8, gas - 1)
  }

  /** Node 551
    * Segment Id for this node is: 187
    * Starting at 0xce5
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 5
    * Net Stack Effect: +2
    * Net Capacity Effect: -2
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s551(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xce5 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 5

    requires s0.stack[2] == 0x192

    requires s0.stack[3] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0x192;
      assert s1.Peek(3) == 0x175;
      var s2 := Push1(s1, 0x00);
      var s3 := Dup1(s2);
      var s4 := Push1(s3, 0x40);
      var s5 := Dup4(s4);
      var s6 := Dup6(s5);
      var s7 := Sub(s6);
      var s8 := SLt(s7);
      var s9 := IsZero(s8);
      var s10 := Push2(s9, 0x0cf8);
      var s11 := JumpI(s10);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s10.stack[1] > 0 then
        ExecuteFromCFGNode_s553(s11, gas - 1)
      else
        ExecuteFromCFGNode_s552(s11, gas - 1)
  }

  /** Node 552
    * Segment Id for this node is: 188
    * Starting at 0xcf4
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s552(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xcf4 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 7

    requires s0.stack[4] == 0x192

    requires s0.stack[5] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push1(s0, 0x00);
      assert s1.Peek(5) == 0x192;
      assert s1.Peek(6) == 0x175;
      var s2 := Dup1(s1);
      var s3 := Revert(s2);
      // Segment is terminal (Revert, Stop or Return)
      s3
  }

  /** Node 553
    * Segment Id for this node is: 189
    * Starting at 0xcf8
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 3
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +2
    * Net Capacity Effect: -2
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s553(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xcf8 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 7

    requires s0.stack[4] == 0x192

    requires s0.stack[5] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(4) == 0x192;
      assert s1.Peek(5) == 0x175;
      var s2 := Push2(s1, 0x0d01);
      var s3 := Dup4(s2);
      var s4 := Push2(s3, 0x0c9d);
      var s5 := Jump(s4);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s554(s5, gas - 1)
  }

  /** Node 554
    * Segment Id for this node is: 180
    * Starting at 0xc9d
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s554(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xc9d as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 9

    requires s0.stack[1] == 0xd01

    requires s0.stack[6] == 0x192

    requires s0.stack[7] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(1) == 0xd01;
      assert s1.Peek(6) == 0x192;
      assert s1.Peek(7) == 0x175;
      var s2 := Dup1(s1);
      var s3 := CallDataLoad(s2);
      var s4 := Push1(s3, 0x01);
      var s5 := Push1(s4, 0x01);
      var s6 := Push1(s5, 0xa0);
      var s7 := Shl(s6);
      var s8 := Sub(s7);
      var s9 := Dup2(s8);
      var s10 := And(s9);
      var s11 := Dup2(s10);
      assert s11.Peek(4) == 0xd01;
      assert s11.Peek(9) == 0x192;
      assert s11.Peek(10) == 0x175;
      var s12 := Eq(s11);
      var s13 := Push2(s12, 0x0cb4);
      var s14 := JumpI(s13);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s13.stack[1] > 0 then
        ExecuteFromCFGNode_s556(s14, gas - 1)
      else
        ExecuteFromCFGNode_s555(s14, gas - 1)
  }

  /** Node 555
    * Segment Id for this node is: 181
    * Starting at 0xcb0
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s555(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xcb0 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 10

    requires s0.stack[2] == 0xd01

    requires s0.stack[7] == 0x192

    requires s0.stack[8] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push1(s0, 0x00);
      assert s1.Peek(3) == 0xd01;
      assert s1.Peek(8) == 0x192;
      assert s1.Peek(9) == 0x175;
      var s2 := Dup1(s1);
      var s3 := Revert(s2);
      // Segment is terminal (Revert, Stop or Return)
      s3
  }

  /** Node 556
    * Segment Id for this node is: 182
    * Starting at 0xcb4
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 3
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -2
    * Net Capacity Effect: +2
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s556(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xcb4 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 10

    requires s0.stack[2] == 0xd01

    requires s0.stack[7] == 0x192

    requires s0.stack[8] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0xd01;
      assert s1.Peek(7) == 0x192;
      assert s1.Peek(8) == 0x175;
      var s2 := Swap2(s1);
      var s3 := Swap1(s2);
      var s4 := Pop(s3);
      var s5 := Jump(s4);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s557(s5, gas - 1)
  }

  /** Node 557
    * Segment Id for this node is: 190
    * Starting at 0xd01
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 6
    * Minimum capacity for this segment to prevent stack overflow: 1
    * Net Stack Effect: -4
    * Net Capacity Effect: +4
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s557(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xd01 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 8

    requires s0.stack[5] == 0x192

    requires s0.stack[6] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(5) == 0x192;
      assert s1.Peek(6) == 0x175;
      var s2 := Swap5(s1);
      var s3 := Push1(s2, 0x20);
      var s4 := Swap4(s3);
      var s5 := Swap1(s4);
      var s6 := Swap4(s5);
      var s7 := Add(s6);
      var s8 := CallDataLoad(s7);
      var s9 := Swap4(s8);
      var s10 := Pop(s9);
      var s11 := Pop(s10);
      assert s11.Peek(1) == 0x192;
      assert s11.Peek(4) == 0x175;
      var s12 := Pop(s11);
      var s13 := Jump(s12);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s558(s13, gas - 1)
  }

  /** Node 558
    * Segment Id for this node is: 41
    * Starting at 0x192
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 1
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s558(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x192 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 4

    requires s0.stack[2] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0x175;
      var s2 := Push2(s1, 0x0351);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s559(s3, gas - 1)
  }

  /** Node 559
    * Segment Id for this node is: 83
    * Starting at 0x351
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s559(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x351 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 4

    requires s0.stack[2] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0x175;
      var s2 := Push1(s1, 0x01);
      var s3 := Push1(s2, 0x01);
      var s4 := Push1(s3, 0xa0);
      var s5 := Shl(s4);
      var s6 := Sub(s5);
      var s7 := Dup3(s6);
      var s8 := And(s7);
      var s9 := Push2(s8, 0x039a);
      var s10 := JumpI(s9);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s9.stack[1] > 0 then
        ExecuteFromCFGNode_s561(s10, gas - 1)
      else
        ExecuteFromCFGNode_s560(s10, gas - 1)
  }

  /** Node 560
    * Segment Id for this node is: 84
    * Starting at 0x360
    * Segment type is: CONT Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s560(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x360 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 4

    requires s0.stack[2] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push1(s0, 0x40);
      assert s1.Peek(3) == 0x175;
      var s2 := MLoad(s1);
      var s3 := Push3(s2, 0x461bcd);
      var s4 := Push1(s3, 0xe5);
      var s5 := Shl(s4);
      var s6 := Dup2(s5);
      var s7 := MStore(s6);
      var s8 := Push1(s7, 0x20);
      var s9 := Push1(s8, 0x04);
      var s10 := Dup3(s9);
      var s11 := Add(s10);
      assert s11.Peek(5) == 0x175;
      var s12 := MStore(s11);
      var s13 := Push1(s12, 0x0b);
      var s14 := Push1(s13, 0x24);
      var s15 := Dup3(s14);
      var s16 := Add(s15);
      var s17 := MStore(s16);
      var s18 := PushN(s17, 11, 0x746f6b656e20656d707479);
      var s19 := Push1(s18, 0xa8);
      var s20 := Shl(s19);
      var s21 := Push1(s20, 0x44);
      assert s21.Peek(5) == 0x175;
      var s22 := Dup3(s21);
      var s23 := Add(s22);
      var s24 := MStore(s23);
      var s25 := Push1(s24, 0x64);
      var s26 := Add(s25);
      //  Go to the next instruction at pc + 1
      ExecuteFromCFGNode_s539(s26, gas - 1)
  }

  /** Node 561
    * Segment Id for this node is: 86
    * Starting at 0x39a
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s561(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x39a as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 4

    requires s0.stack[2] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0x175;
      var s2 := Push1(s1, 0x00);
      var s3 := Dup2(s2);
      var s4 := Gt(s3);
      var s5 := Push2(s4, 0x03d9);
      var s6 := JumpI(s5);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s5.stack[1] > 0 then
        ExecuteFromCFGNode_s563(s6, gas - 1)
      else
        ExecuteFromCFGNode_s562(s6, gas - 1)
  }

  /** Node 562
    * Segment Id for this node is: 87
    * Starting at 0x3a3
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s562(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x3a3 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 4

    requires s0.stack[2] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push1(s0, 0x40);
      assert s1.Peek(3) == 0x175;
      var s2 := MLoad(s1);
      var s3 := Push3(s2, 0x461bcd);
      var s4 := Push1(s3, 0xe5);
      var s5 := Shl(s4);
      var s6 := Dup2(s5);
      var s7 := MStore(s6);
      var s8 := Push1(s7, 0x20);
      var s9 := Push1(s8, 0x04);
      var s10 := Dup3(s9);
      var s11 := Add(s10);
      assert s11.Peek(5) == 0x175;
      var s12 := MStore(s11);
      var s13 := Push1(s12, 0x0c);
      var s14 := Push1(s13, 0x24);
      var s15 := Dup3(s14);
      var s16 := Add(s15);
      var s17 := MStore(s16);
      var s18 := PushN(s17, 12, 0x185b5bdd5b9d081b1a5b5a5d);
      var s19 := Push1(s18, 0xa2);
      var s20 := Shl(s19);
      var s21 := Push1(s20, 0x44);
      assert s21.Peek(5) == 0x175;
      var s22 := Dup3(s21);
      var s23 := Add(s22);
      var s24 := MStore(s23);
      var s25 := Push1(s24, 0x64);
      var s26 := Add(s25);
      var s27 := Push2(s26, 0x0391);
      var s28 := Jump(s27);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s539(s28, gas - 1)
  }

  /** Node 563
    * Segment Id for this node is: 88
    * Starting at 0x3d9
    * Segment type is: CONT Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 11
    * Net Stack Effect: +5
    * Net Capacity Effect: -5
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s563(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x3d9 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 4

    requires s0.stack[2] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0x175;
      var s2 := Push1(s1, 0x01);
      var s3 := SLoad(s2);
      var s4 := Push1(s3, 0x40);
      var s5 := MLoad(s4);
      var s6 := Push4(s5, 0x70a08231);
      var s7 := Push1(s6, 0xe0);
      var s8 := Shl(s7);
      var s9 := Dup2(s8);
      var s10 := MStore(s9);
      var s11 := Push1(s10, 0x01);
      assert s11.Peek(5) == 0x175;
      var s12 := Push1(s11, 0x01);
      var s13 := Push1(s12, 0xa0);
      var s14 := Shl(s13);
      var s15 := Sub(s14);
      var s16 := Swap2(s15);
      var s17 := Dup3(s16);
      var s18 := And(s17);
      var s19 := Push1(s18, 0x04);
      var s20 := Dup3(s19);
      var s21 := Add(s20);
      assert s21.Peek(6) == 0x175;
      var s22 := MStore(s21);
      var s23 := Push1(s22, 0x00);
      var s24 := Swap2(s23);
      var s25 := Dup5(s24);
      var s26 := And(s25);
      var s27 := Swap1(s26);
      var s28 := Push4(s27, 0x70a08231);
      var s29 := Swap1(s28);
      var s30 := Push1(s29, 0x24);
      var s31 := Add(s30);
      assert s31.Peek(6) == 0x175;
      var s32 := Push1(s31, 0x20);
      var s33 := Push1(s32, 0x40);
      var s34 := MLoad(s33);
      var s35 := Dup1(s34);
      var s36 := Dup4(s35);
      var s37 := Sub(s36);
      var s38 := Dup2(s37);
      var s39 := Dup7(s38);
      var s40 := Gas(s39);
      var s41 := StaticCall(s40);
      //  Go to the next instruction at pc + 1
      ExecuteFromCFGNode_s564(s41, gas - 1)
  }

  /** Node 564
    * Segment Id for this node is: 89
    * Starting at 0x415
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s564(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x415 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 9

    requires s0.stack[7] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := IsZero(s0);
      assert s1.Peek(7) == 0x175;
      var s2 := Dup1(s1);
      var s3 := IsZero(s2);
      var s4 := Push2(s3, 0x0425);
      var s5 := JumpI(s4);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s4.stack[1] > 0 then
        ExecuteFromCFGNode_s566(s5, gas - 1)
      else
        ExecuteFromCFGNode_s565(s5, gas - 1)
  }

  /** Node 565
    * Segment Id for this node is: 90
    * Starting at 0x41c
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s565(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x41c as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 9

    requires s0.stack[7] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := ReturnDataSize(s0);
      assert s1.Peek(8) == 0x175;
      var s2 := Push1(s1, 0x00);
      var s3 := Dup1(s2);
      var s4 := ReturnDataCopy(s3);
      var s5 := ReturnDataSize(s4);
      var s6 := Push1(s5, 0x00);
      var s7 := Revert(s6);
      // Segment is terminal (Revert, Stop or Return)
      s7
  }

  /** Node 566
    * Segment Id for this node is: 91
    * Starting at 0x425
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 4
    * Minimum capacity for this segment to prevent stack overflow: 1
    * Net Stack Effect: -1
    * Net Capacity Effect: +1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s566(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x425 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 9

    requires s0.stack[7] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(7) == 0x175;
      var s2 := Pop(s1);
      var s3 := Pop(s2);
      var s4 := Pop(s3);
      var s5 := Pop(s4);
      var s6 := Push1(s5, 0x40);
      var s7 := MLoad(s6);
      var s8 := ReturnDataSize(s7);
      var s9 := Push1(s8, 0x1f);
      var s10 := Not(s9);
      var s11 := Push1(s10, 0x1f);
      assert s11.Peek(7) == 0x175;
      var s12 := Dup3(s11);
      var s13 := Add(s12);
      var s14 := And(s13);
      var s15 := Dup3(s14);
      var s16 := Add(s15);
      var s17 := Dup1(s16);
      var s18 := Push1(s17, 0x40);
      var s19 := MStore(s18);
      var s20 := Pop(s19);
      var s21 := Dup2(s20);
      assert s21.Peek(6) == 0x175;
      var s22 := Add(s21);
      var s23 := Swap1(s22);
      var s24 := Push2(s23, 0x0449);
      var s25 := Swap2(s24);
      var s26 := Swap1(s25);
      var s27 := Push2(s26, 0x0d6c);
      var s28 := Jump(s27);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s567(s28, gas - 1)
  }

  /** Node 567
    * Segment Id for this node is: 199
    * Starting at 0xd6c
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s567(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xd6c as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 8

    requires s0.stack[2] == 0x449

    requires s0.stack[6] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0x449;
      assert s1.Peek(6) == 0x175;
      var s2 := Push1(s1, 0x00);
      var s3 := Push1(s2, 0x20);
      var s4 := Dup3(s3);
      var s5 := Dup5(s4);
      var s6 := Sub(s5);
      var s7 := SLt(s6);
      var s8 := IsZero(s7);
      var s9 := Push2(s8, 0x0d7e);
      var s10 := JumpI(s9);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s9.stack[1] > 0 then
        ExecuteFromCFGNode_s569(s10, gas - 1)
      else
        ExecuteFromCFGNode_s568(s10, gas - 1)
  }

  /** Node 568
    * Segment Id for this node is: 200
    * Starting at 0xd7a
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s568(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xd7a as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 9

    requires s0.stack[3] == 0x449

    requires s0.stack[7] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push1(s0, 0x00);
      assert s1.Peek(4) == 0x449;
      assert s1.Peek(8) == 0x175;
      var s2 := Dup1(s1);
      var s3 := Revert(s2);
      // Segment is terminal (Revert, Stop or Return)
      s3
  }

  /** Node 569
    * Segment Id for this node is: 201
    * Starting at 0xd7e
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 4
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -3
    * Net Capacity Effect: +3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s569(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xd7e as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 9

    requires s0.stack[3] == 0x449

    requires s0.stack[7] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0x449;
      assert s1.Peek(7) == 0x175;
      var s2 := Pop(s1);
      var s3 := MLoad(s2);
      var s4 := Swap2(s3);
      var s5 := Swap1(s4);
      var s6 := Pop(s5);
      var s7 := Jump(s6);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s570(s7, gas - 1)
  }

  /** Node 570
    * Segment Id for this node is: 92
    * Starting at 0x449
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 4
    * Minimum capacity for this segment to prevent stack overflow: 6
    * Net Stack Effect: +4
    * Net Capacity Effect: -4
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s570(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x449 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 6

    requires s0.stack[4] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(4) == 0x175;
      var s2 := Push1(s1, 0x01);
      var s3 := SLoad(s2);
      var s4 := Swap1(s3);
      var s5 := Swap2(s4);
      var s6 := Pop(s5);
      var s7 := Push2(s6, 0x0466);
      var s8 := Swap1(s7);
      var s9 := Dup5(s8);
      var s10 := Swap1(s9);
      var s11 := Caller(s10);
      assert s11.Peek(3) == 0x466;
      assert s11.Peek(7) == 0x175;
      var s12 := Swap1(s11);
      var s13 := Push1(s12, 0x01);
      var s14 := Push1(s13, 0x01);
      var s15 := Push1(s14, 0xa0);
      var s16 := Shl(s15);
      var s17 := Sub(s16);
      var s18 := And(s17);
      var s19 := Dup6(s18);
      var s20 := Push2(s19, 0x08b7);
      var s21 := Jump(s20);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s571(s21, gas - 1)
  }

  /** Node 571
    * Segment Id for this node is: 128
    * Starting at 0x8b7
    * Segment type is: CONT Segment
    * Minimum stack size for this segment to prevent stack underflow: 3
    * Minimum capacity for this segment to prevent stack overflow: 7
    * Net Stack Effect: +5
    * Net Capacity Effect: -5
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s571(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x8b7 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 10

    requires s0.stack[4] == 0x466

    requires s0.stack[8] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(4) == 0x466;
      assert s1.Peek(8) == 0x175;
      var s2 := Push1(s1, 0x40);
      var s3 := Dup1(s2);
      var s4 := MLoad(s3);
      var s5 := Push1(s4, 0x01);
      var s6 := Push1(s5, 0x01);
      var s7 := Push1(s6, 0xa0);
      var s8 := Shl(s7);
      var s9 := Sub(s8);
      var s10 := Dup6(s9);
      var s11 := Dup2(s10);
      assert s11.Peek(9) == 0x466;
      assert s11.Peek(13) == 0x175;
      var s12 := And(s11);
      var s13 := Push1(s12, 0x24);
      var s14 := Dup4(s13);
      var s15 := Add(s14);
      var s16 := MStore(s15);
      var s17 := Dup5(s16);
      var s18 := Dup2(s17);
      var s19 := And(s18);
      var s20 := Push1(s19, 0x44);
      var s21 := Dup4(s20);
      assert s21.Peek(10) == 0x466;
      assert s21.Peek(14) == 0x175;
      var s22 := Add(s21);
      var s23 := MStore(s22);
      var s24 := Push1(s23, 0x64);
      var s25 := Dup1(s24);
      var s26 := Dup4(s25);
      var s27 := Add(s26);
      var s28 := Dup6(s27);
      var s29 := Swap1(s28);
      var s30 := MStore(s29);
      var s31 := Dup4(s30);
      assert s31.Peek(9) == 0x466;
      assert s31.Peek(13) == 0x175;
      var s32 := MLoad(s31);
      var s33 := Dup1(s32);
      var s34 := Dup5(s33);
      var s35 := Sub(s34);
      var s36 := Swap1(s35);
      var s37 := Swap2(s36);
      var s38 := Add(s37);
      var s39 := Dup2(s38);
      var s40 := MStore(s39);
      var s41 := Push1(s40, 0x84);
      //  Go to the next instruction at pc + 1
      ExecuteFromCFGNode_s572(s41, gas - 1)
  }

  /** Node 572
    * Segment Id for this node is: 129
    * Starting at 0x8e8
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 9
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s572(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x8e8 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 15

    requires s0.stack[9] == 0x466

    requires s0.stack[13] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Swap1(s0);
      assert s1.Peek(9) == 0x466;
      assert s1.Peek(13) == 0x175;
      var s2 := Swap3(s1);
      var s3 := Add(s2);
      var s4 := Dup4(s3);
      var s5 := MStore(s4);
      var s6 := Push1(s5, 0x20);
      var s7 := Dup3(s6);
      var s8 := Add(s7);
      var s9 := Dup1(s8);
      var s10 := MLoad(s9);
      var s11 := Push1(s10, 0x01);
      assert s11.Peek(10) == 0x466;
      assert s11.Peek(14) == 0x175;
      var s12 := Push1(s11, 0x01);
      var s13 := Push1(s12, 0xe0);
      var s14 := Shl(s13);
      var s15 := Sub(s14);
      var s16 := And(s15);
      var s17 := Push4(s16, 0x23b872dd);
      var s18 := Push1(s17, 0xe0);
      var s19 := Shl(s18);
      var s20 := Or(s19);
      var s21 := Swap1(s20);
      assert s21.Peek(9) == 0x466;
      assert s21.Peek(13) == 0x175;
      var s22 := MStore(s21);
      var s23 := Swap2(s22);
      var s24 := MLoad(s23);
      var s25 := Push1(s24, 0x00);
      var s26 := Swap3(s25);
      var s27 := Dup4(s26);
      var s28 := Swap3(s27);
      var s29 := Swap1(s28);
      var s30 := Dup9(s29);
      var s31 := And(s30);
      assert s31.Peek(9) == 0x466;
      assert s31.Peek(13) == 0x175;
      var s32 := Swap2(s31);
      var s33 := Push2(s32, 0x091b);
      var s34 := Swap2(s33);
      var s35 := Swap1(s34);
      var s36 := Push2(s35, 0x0dd2);
      var s37 := Jump(s36);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s573(s37, gas - 1)
  }

  /** Node 573
    * Segment Id for this node is: 209
    * Starting at 0xdd2
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 7
    * Net Stack Effect: +6
    * Net Capacity Effect: -6
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s573(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xdd2 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 16

    requires s0.stack[2] == 0x91b

    requires s0.stack[10] == 0x466

    requires s0.stack[14] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0x91b;
      assert s1.Peek(10) == 0x466;
      assert s1.Peek(14) == 0x175;
      var s2 := Push1(s1, 0x00);
      var s3 := Dup3(s2);
      var s4 := MLoad(s3);
      var s5 := Push2(s4, 0x0de4);
      var s6 := Dup2(s5);
      var s7 := Dup5(s6);
      var s8 := Push1(s7, 0x20);
      var s9 := Dup8(s8);
      var s10 := Add(s9);
      var s11 := Push2(s10, 0x0dae);
      assert s11.Peek(0) == 0xdae;
      assert s11.Peek(4) == 0xde4;
      assert s11.Peek(9) == 0x91b;
      assert s11.Peek(17) == 0x466;
      assert s11.Peek(21) == 0x175;
      var s12 := Jump(s11);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s574(s12, gas - 1)
  }

  /** Node 574
    * Segment Id for this node is: 205
    * Starting at 0xdae
    * Segment type is: CONT Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 1
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s574(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xdae as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 22

    requires s0.stack[3] == 0xde4

    requires s0.stack[8] == 0x91b

    requires s0.stack[16] == 0x466

    requires s0.stack[20] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0xde4;
      assert s1.Peek(8) == 0x91b;
      assert s1.Peek(16) == 0x466;
      assert s1.Peek(20) == 0x175;
      var s2 := Push1(s1, 0x00);
      //  Go to the next instruction at pc + 1
      ExecuteFromCFGNode_s575(s2, gas - 1)
  }

  /** Node 575
    * Segment Id for this node is: 206
    * Starting at 0xdb1
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 4
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s575(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xdb1 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 23

    requires s0.stack[4] == 0xde4

    requires s0.stack[9] == 0x91b

    requires s0.stack[17] == 0x466

    requires s0.stack[21] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(4) == 0xde4;
      assert s1.Peek(9) == 0x91b;
      assert s1.Peek(17) == 0x466;
      assert s1.Peek(21) == 0x175;
      var s2 := Dup4(s1);
      var s3 := Dup2(s2);
      var s4 := Lt(s3);
      var s5 := IsZero(s4);
      var s6 := Push2(s5, 0x0dc9);
      var s7 := JumpI(s6);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s6.stack[1] > 0 then
        ExecuteFromCFGNode_s577(s7, gas - 1)
      else
        ExecuteFromCFGNode_s576(s7, gas - 1)
  }

  /** Node 576
    * Segment Id for this node is: 207
    * Starting at 0xdba
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 3
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s576(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xdba as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 23

    requires s0.stack[4] == 0xde4

    requires s0.stack[9] == 0x91b

    requires s0.stack[17] == 0x466

    requires s0.stack[21] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Dup2(s0);
      assert s1.Peek(5) == 0xde4;
      assert s1.Peek(10) == 0x91b;
      assert s1.Peek(18) == 0x466;
      assert s1.Peek(22) == 0x175;
      var s2 := Dup2(s1);
      var s3 := Add(s2);
      var s4 := MLoad(s3);
      var s5 := Dup4(s4);
      var s6 := Dup3(s5);
      var s7 := Add(s6);
      var s8 := MStore(s7);
      var s9 := Push1(s8, 0x20);
      var s10 := Add(s9);
      var s11 := Push2(s10, 0x0db1);
      assert s11.Peek(0) == 0xdb1;
      assert s11.Peek(5) == 0xde4;
      assert s11.Peek(10) == 0x91b;
      assert s11.Peek(18) == 0x466;
      assert s11.Peek(22) == 0x175;
      var s12 := Jump(s11);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s575(s12, gas - 1)
  }

  /** Node 577
    * Segment Id for this node is: 208
    * Starting at 0xdc9
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 5
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -5
    * Net Capacity Effect: +5
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s577(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xdc9 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 23

    requires s0.stack[4] == 0xde4

    requires s0.stack[9] == 0x91b

    requires s0.stack[17] == 0x466

    requires s0.stack[21] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(4) == 0xde4;
      assert s1.Peek(9) == 0x91b;
      assert s1.Peek(17) == 0x466;
      assert s1.Peek(21) == 0x175;
      var s2 := Pop(s1);
      var s3 := Pop(s2);
      var s4 := Push1(s3, 0x00);
      var s5 := Swap2(s4);
      var s6 := Add(s5);
      var s7 := MStore(s6);
      var s8 := Jump(s7);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s578(s8, gas - 1)
  }

  /** Node 578
    * Segment Id for this node is: 210
    * Starting at 0xde4
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 5
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -4
    * Net Capacity Effect: +4
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s578(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xde4 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 18

    requires s0.stack[4] == 0x91b

    requires s0.stack[12] == 0x466

    requires s0.stack[16] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(4) == 0x91b;
      assert s1.Peek(12) == 0x466;
      assert s1.Peek(16) == 0x175;
      var s2 := Swap2(s1);
      var s3 := Swap1(s2);
      var s4 := Swap2(s3);
      var s5 := Add(s4);
      var s6 := Swap3(s5);
      var s7 := Swap2(s6);
      var s8 := Pop(s7);
      var s9 := Pop(s8);
      var s10 := Jump(s9);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s579(s10, gas - 1)
  }

  /** Node 579
    * Segment Id for this node is: 130
    * Starting at 0x91b
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 8
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s579(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x91b as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 14

    requires s0.stack[8] == 0x466

    requires s0.stack[12] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(8) == 0x466;
      assert s1.Peek(12) == 0x175;
      var s2 := Push1(s1, 0x00);
      var s3 := Push1(s2, 0x40);
      var s4 := MLoad(s3);
      var s5 := Dup1(s4);
      var s6 := Dup4(s5);
      var s7 := Sub(s6);
      var s8 := Dup2(s7);
      var s9 := Push1(s8, 0x00);
      var s10 := Dup7(s9);
      var s11 := Gas(s10);
      assert s11.Peek(15) == 0x466;
      assert s11.Peek(19) == 0x175;
      var s12 := Call(s11);
      var s13 := Swap2(s12);
      var s14 := Pop(s13);
      var s15 := Pop(s14);
      var s16 := ReturnDataSize(s15);
      var s17 := Dup1(s16);
      var s18 := Push1(s17, 0x00);
      var s19 := Dup2(s18);
      var s20 := Eq(s19);
      var s21 := Push2(s20, 0x0958);
      assert s21.Peek(0) == 0x958;
      assert s21.Peek(11) == 0x466;
      assert s21.Peek(15) == 0x175;
      var s22 := JumpI(s21);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s21.stack[1] > 0 then
        ExecuteFromCFGNode_s607(s22, gas - 1)
      else
        ExecuteFromCFGNode_s580(s22, gas - 1)
  }

  /** Node 580
    * Segment Id for this node is: 131
    * Starting at 0x937
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s580(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x937 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 15

    requires s0.stack[9] == 0x466

    requires s0.stack[13] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push1(s0, 0x40);
      assert s1.Peek(10) == 0x466;
      assert s1.Peek(14) == 0x175;
      var s2 := MLoad(s1);
      var s3 := Swap2(s2);
      var s4 := Pop(s3);
      var s5 := Push1(s4, 0x1f);
      var s6 := Not(s5);
      var s7 := Push1(s6, 0x3f);
      var s8 := ReturnDataSize(s7);
      var s9 := Add(s8);
      var s10 := And(s9);
      var s11 := Dup3(s10);
      assert s11.Peek(11) == 0x466;
      assert s11.Peek(15) == 0x175;
      var s12 := Add(s11);
      var s13 := Push1(s12, 0x40);
      var s14 := MStore(s13);
      var s15 := ReturnDataSize(s14);
      var s16 := Dup3(s15);
      var s17 := MStore(s16);
      var s18 := ReturnDataSize(s17);
      var s19 := Push1(s18, 0x00);
      var s20 := Push1(s19, 0x20);
      var s21 := Dup5(s20);
      assert s21.Peek(13) == 0x466;
      assert s21.Peek(17) == 0x175;
      var s22 := Add(s21);
      var s23 := ReturnDataCopy(s22);
      var s24 := Push2(s23, 0x095d);
      var s25 := Jump(s24);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s581(s25, gas - 1)
  }

  /** Node 581
    * Segment Id for this node is: 133
    * Starting at 0x95d
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 5
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -2
    * Net Capacity Effect: +2
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s581(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x95d as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 15

    requires s0.stack[9] == 0x466

    requires s0.stack[13] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(9) == 0x466;
      assert s1.Peek(13) == 0x175;
      var s2 := Pop(s1);
      var s3 := Swap2(s2);
      var s4 := Pop(s3);
      var s5 := Swap2(s4);
      var s6 := Pop(s5);
      var s7 := Dup2(s6);
      var s8 := Dup1(s7);
      var s9 := IsZero(s8);
      var s10 := Push2(s9, 0x0987);
      var s11 := JumpI(s10);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s10.stack[1] > 0 then
        ExecuteFromCFGNode_s589(s11, gas - 1)
      else
        ExecuteFromCFGNode_s582(s11, gas - 1)
  }

  /** Node 582
    * Segment Id for this node is: 134
    * Starting at 0x96a
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s582(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x96a as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 13

    requires s0.stack[7] == 0x466

    requires s0.stack[11] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Pop(s0);
      assert s1.Peek(6) == 0x466;
      assert s1.Peek(10) == 0x175;
      var s2 := Dup1(s1);
      var s3 := MLoad(s2);
      var s4 := IsZero(s3);
      var s5 := Dup1(s4);
      var s6 := Push2(s5, 0x0987);
      var s7 := JumpI(s6);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s6.stack[1] > 0 then
        ExecuteFromCFGNode_s589(s7, gas - 1)
      else
        ExecuteFromCFGNode_s583(s7, gas - 1)
  }

  /** Node 583
    * Segment Id for this node is: 135
    * Starting at 0x973
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +2
    * Net Capacity Effect: -2
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s583(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x973 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 13

    requires s0.stack[7] == 0x466

    requires s0.stack[11] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Pop(s0);
      assert s1.Peek(6) == 0x466;
      assert s1.Peek(10) == 0x175;
      var s2 := Dup1(s1);
      var s3 := Dup1(s2);
      var s4 := Push1(s3, 0x20);
      var s5 := Add(s4);
      var s6 := Swap1(s5);
      var s7 := MLoad(s6);
      var s8 := Dup2(s7);
      var s9 := Add(s8);
      var s10 := Swap1(s9);
      var s11 := Push2(s10, 0x0987);
      assert s11.Peek(0) == 0x987;
      assert s11.Peek(9) == 0x466;
      assert s11.Peek(13) == 0x175;
      var s12 := Swap2(s11);
      var s13 := Swap1(s12);
      var s14 := Push2(s13, 0x0dee);
      var s15 := Jump(s14);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s584(s15, gas - 1)
  }

  /** Node 584
    * Segment Id for this node is: 211
    * Starting at 0xdee
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s584(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xdee as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 15

    requires s0.stack[2] == 0x987

    requires s0.stack[9] == 0x466

    requires s0.stack[13] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0x987;
      assert s1.Peek(9) == 0x466;
      assert s1.Peek(13) == 0x175;
      var s2 := Push1(s1, 0x00);
      var s3 := Push1(s2, 0x20);
      var s4 := Dup3(s3);
      var s5 := Dup5(s4);
      var s6 := Sub(s5);
      var s7 := SLt(s6);
      var s8 := IsZero(s7);
      var s9 := Push2(s8, 0x0e00);
      var s10 := JumpI(s9);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s9.stack[1] > 0 then
        ExecuteFromCFGNode_s586(s10, gas - 1)
      else
        ExecuteFromCFGNode_s585(s10, gas - 1)
  }

  /** Node 585
    * Segment Id for this node is: 212
    * Starting at 0xdfc
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s585(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xdfc as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 16

    requires s0.stack[3] == 0x987

    requires s0.stack[10] == 0x466

    requires s0.stack[14] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push1(s0, 0x00);
      assert s1.Peek(4) == 0x987;
      assert s1.Peek(11) == 0x466;
      assert s1.Peek(15) == 0x175;
      var s2 := Dup1(s1);
      var s3 := Revert(s2);
      // Segment is terminal (Revert, Stop or Return)
      s3
  }

  /** Node 586
    * Segment Id for this node is: 213
    * Starting at 0xe00
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s586(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xe00 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 16

    requires s0.stack[3] == 0x987

    requires s0.stack[10] == 0x466

    requires s0.stack[14] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0x987;
      assert s1.Peek(10) == 0x466;
      assert s1.Peek(14) == 0x175;
      var s2 := Dup2(s1);
      var s3 := MLoad(s2);
      var s4 := Dup1(s3);
      var s5 := IsZero(s4);
      var s6 := IsZero(s5);
      var s7 := Dup2(s6);
      var s8 := Eq(s7);
      var s9 := Push2(s8, 0x0c53);
      var s10 := JumpI(s9);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s9.stack[1] > 0 then
        ExecuteFromCFGNode_s588(s10, gas - 1)
      else
        ExecuteFromCFGNode_s587(s10, gas - 1)
  }

  /** Node 587
    * Segment Id for this node is: 214
    * Starting at 0xe0c
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s587(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xe0c as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 17

    requires s0.stack[4] == 0x987

    requires s0.stack[11] == 0x466

    requires s0.stack[15] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push1(s0, 0x00);
      assert s1.Peek(5) == 0x987;
      assert s1.Peek(12) == 0x466;
      assert s1.Peek(16) == 0x175;
      var s2 := Dup1(s1);
      var s3 := Revert(s2);
      // Segment is terminal (Revert, Stop or Return)
      s3
  }

  /** Node 588
    * Segment Id for this node is: 172
    * Starting at 0xc53
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 5
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -4
    * Net Capacity Effect: +4
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s588(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xc53 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 17

    requires s0.stack[4] == 0x987

    requires s0.stack[11] == 0x466

    requires s0.stack[15] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(4) == 0x987;
      assert s1.Peek(11) == 0x466;
      assert s1.Peek(15) == 0x175;
      var s2 := Swap4(s1);
      var s3 := Swap3(s2);
      var s4 := Pop(s3);
      var s5 := Pop(s4);
      var s6 := Pop(s5);
      var s7 := Jump(s6);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s589(s7, gas - 1)
  }

  /** Node 589
    * Segment Id for this node is: 136
    * Starting at 0x987
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 1
    * Net Stack Effect: -1
    * Net Capacity Effect: +1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s589(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x987 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 13

    requires s0.stack[7] == 0x466

    requires s0.stack[11] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(7) == 0x466;
      assert s1.Peek(11) == 0x175;
      var s2 := Push2(s1, 0x09df);
      var s3 := JumpI(s2);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s2.stack[1] > 0 then
        ExecuteFromCFGNode_s592(s3, gas - 1)
      else
        ExecuteFromCFGNode_s590(s3, gas - 1)
  }

  /** Node 590
    * Segment Id for this node is: 137
    * Starting at 0x98c
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s590(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x98c as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 12

    requires s0.stack[6] == 0x466

    requires s0.stack[10] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push1(s0, 0x40);
      assert s1.Peek(7) == 0x466;
      assert s1.Peek(11) == 0x175;
      var s2 := MLoad(s1);
      var s3 := Push3(s2, 0x461bcd);
      var s4 := Push1(s3, 0xe5);
      var s5 := Shl(s4);
      var s6 := Dup2(s5);
      var s7 := MStore(s6);
      var s8 := Push1(s7, 0x20);
      var s9 := Push1(s8, 0x04);
      var s10 := Dup3(s9);
      var s11 := Add(s10);
      assert s11.Peek(9) == 0x466;
      assert s11.Peek(13) == 0x175;
      var s12 := MStore(s11);
      var s13 := Push1(s12, 0x24);
      var s14 := Dup1(s13);
      var s15 := Dup3(s14);
      var s16 := Add(s15);
      var s17 := MStore(s16);
      var s18 := Push32(s17, 0x5472616e7366657248656c7065723a205452414e534645525f46524f4d5f4641);
      var s19 := Push1(s18, 0x44);
      var s20 := Dup3(s19);
      var s21 := Add(s20);
      assert s21.Peek(9) == 0x466;
      assert s21.Peek(13) == 0x175;
      var s22 := MStore(s21);
      var s23 := Push4(s22, 0x12531151);
      var s24 := Push1(s23, 0xe2);
      var s25 := Shl(s24);
      var s26 := Push1(s25, 0x64);
      var s27 := Dup3(s26);
      var s28 := Add(s27);
      var s29 := MStore(s28);
      var s30 := Push1(s29, 0x84);
      var s31 := Add(s30);
      assert s31.Peek(7) == 0x466;
      assert s31.Peek(11) == 0x175;
      var s32 := Push2(s31, 0x0391);
      var s33 := Jump(s32);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s591(s33, gas - 1)
  }

  /** Node 591
    * Segment Id for this node is: 85
    * Starting at 0x391
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: -1
    * Net Capacity Effect: +1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s591(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x391 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 13

    requires s0.stack[7] == 0x466

    requires s0.stack[11] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(7) == 0x466;
      assert s1.Peek(11) == 0x175;
      var s2 := Push1(s1, 0x40);
      var s3 := MLoad(s2);
      var s4 := Dup1(s3);
      var s5 := Swap2(s4);
      var s6 := Sub(s5);
      var s7 := Swap1(s6);
      var s8 := Revert(s7);
      // Segment is terminal (Revert, Stop or Return)
      s8
  }

  /** Node 592
    * Segment Id for this node is: 138
    * Starting at 0x9df
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 7
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -7
    * Net Capacity Effect: +7
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s592(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x9df as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 12

    requires s0.stack[6] == 0x466

    requires s0.stack[10] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(6) == 0x466;
      assert s1.Peek(10) == 0x175;
      var s2 := Pop(s1);
      var s3 := Pop(s2);
      var s4 := Pop(s3);
      var s5 := Pop(s4);
      var s6 := Pop(s5);
      var s7 := Pop(s6);
      var s8 := Jump(s7);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s593(s8, gas - 1)
  }

  /** Node 593
    * Segment Id for this node is: 93
    * Starting at 0x466
    * Segment type is: CONT Segment
    * Minimum stack size for this segment to prevent stack underflow: 3
    * Minimum capacity for this segment to prevent stack overflow: 9
    * Net Stack Effect: +9
    * Net Capacity Effect: -9
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s593(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x466 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 5

    requires s0.stack[3] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0x175;
      var s2 := Push1(s1, 0x01);
      var s3 := SLoad(s2);
      var s4 := Push1(s3, 0x40);
      var s5 := MLoad(s4);
      var s6 := Push4(s5, 0x70a08231);
      var s7 := Push1(s6, 0xe0);
      var s8 := Shl(s7);
      var s9 := Dup2(s8);
      var s10 := MStore(s9);
      var s11 := Push1(s10, 0x01);
      assert s11.Peek(6) == 0x175;
      var s12 := Push1(s11, 0x01);
      var s13 := Push1(s12, 0xa0);
      var s14 := Shl(s13);
      var s15 := Sub(s14);
      var s16 := Swap2(s15);
      var s17 := Dup3(s16);
      var s18 := And(s17);
      var s19 := Push1(s18, 0x04);
      var s20 := Dup3(s19);
      var s21 := Add(s20);
      assert s21.Peek(7) == 0x175;
      var s22 := MStore(s21);
      var s23 := Push1(s22, 0x00);
      var s24 := Swap2(s23);
      var s25 := Dup4(s24);
      var s26 := Swap2(s25);
      var s27 := Swap1(s26);
      var s28 := Dup7(s27);
      var s29 := And(s28);
      var s30 := Swap1(s29);
      var s31 := Push4(s30, 0x70a08231);
      assert s31.Peek(8) == 0x175;
      var s32 := Swap1(s31);
      var s33 := Push1(s32, 0x24);
      var s34 := Add(s33);
      var s35 := Push1(s34, 0x20);
      var s36 := Push1(s35, 0x40);
      var s37 := MLoad(s36);
      var s38 := Dup1(s37);
      var s39 := Dup4(s38);
      var s40 := Sub(s39);
      var s41 := Dup2(s40);
      //  Go to the next instruction at pc + 1
      ExecuteFromCFGNode_s594(s41, gas - 1)
  }

  /** Node 594
    * Segment Id for this node is: 94
    * Starting at 0x4a2
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 7
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: -3
    * Net Capacity Effect: +3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s594(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x4a2 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 14

    requires s0.stack[12] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Dup7(s0);
      assert s1.Peek(13) == 0x175;
      var s2 := Gas(s1);
      var s3 := StaticCall(s2);
      var s4 := IsZero(s3);
      var s5 := Dup1(s4);
      var s6 := IsZero(s5);
      var s7 := Push2(s6, 0x04b5);
      var s8 := JumpI(s7);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s7.stack[1] > 0 then
        ExecuteFromCFGNode_s596(s8, gas - 1)
      else
        ExecuteFromCFGNode_s595(s8, gas - 1)
  }

  /** Node 595
    * Segment Id for this node is: 95
    * Starting at 0x4ac
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s595(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x4ac as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 11

    requires s0.stack[9] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := ReturnDataSize(s0);
      assert s1.Peek(10) == 0x175;
      var s2 := Push1(s1, 0x00);
      var s3 := Dup1(s2);
      var s4 := ReturnDataCopy(s3);
      var s5 := ReturnDataSize(s4);
      var s6 := Push1(s5, 0x00);
      var s7 := Revert(s6);
      // Segment is terminal (Revert, Stop or Return)
      s7
  }

  /** Node 596
    * Segment Id for this node is: 96
    * Starting at 0x4b5
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 4
    * Minimum capacity for this segment to prevent stack overflow: 1
    * Net Stack Effect: -1
    * Net Capacity Effect: +1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s596(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x4b5 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 11

    requires s0.stack[9] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(9) == 0x175;
      var s2 := Pop(s1);
      var s3 := Pop(s2);
      var s4 := Pop(s3);
      var s5 := Pop(s4);
      var s6 := Push1(s5, 0x40);
      var s7 := MLoad(s6);
      var s8 := ReturnDataSize(s7);
      var s9 := Push1(s8, 0x1f);
      var s10 := Not(s9);
      var s11 := Push1(s10, 0x1f);
      assert s11.Peek(9) == 0x175;
      var s12 := Dup3(s11);
      var s13 := Add(s12);
      var s14 := And(s13);
      var s15 := Dup3(s14);
      var s16 := Add(s15);
      var s17 := Dup1(s16);
      var s18 := Push1(s17, 0x40);
      var s19 := MStore(s18);
      var s20 := Pop(s19);
      var s21 := Dup2(s20);
      assert s21.Peek(8) == 0x175;
      var s22 := Add(s21);
      var s23 := Swap1(s22);
      var s24 := Push2(s23, 0x04d9);
      var s25 := Swap2(s24);
      var s26 := Swap1(s25);
      var s27 := Push2(s26, 0x0d6c);
      var s28 := Jump(s27);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s597(s28, gas - 1)
  }

  /** Node 597
    * Segment Id for this node is: 199
    * Starting at 0xd6c
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s597(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xd6c as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 10

    requires s0.stack[2] == 0x4d9

    requires s0.stack[8] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0x4d9;
      assert s1.Peek(8) == 0x175;
      var s2 := Push1(s1, 0x00);
      var s3 := Push1(s2, 0x20);
      var s4 := Dup3(s3);
      var s5 := Dup5(s4);
      var s6 := Sub(s5);
      var s7 := SLt(s6);
      var s8 := IsZero(s7);
      var s9 := Push2(s8, 0x0d7e);
      var s10 := JumpI(s9);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s9.stack[1] > 0 then
        ExecuteFromCFGNode_s599(s10, gas - 1)
      else
        ExecuteFromCFGNode_s598(s10, gas - 1)
  }

  /** Node 598
    * Segment Id for this node is: 200
    * Starting at 0xd7a
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s598(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xd7a as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 11

    requires s0.stack[3] == 0x4d9

    requires s0.stack[9] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push1(s0, 0x00);
      assert s1.Peek(4) == 0x4d9;
      assert s1.Peek(10) == 0x175;
      var s2 := Dup1(s1);
      var s3 := Revert(s2);
      // Segment is terminal (Revert, Stop or Return)
      s3
  }

  /** Node 599
    * Segment Id for this node is: 201
    * Starting at 0xd7e
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 4
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -3
    * Net Capacity Effect: +3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s599(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xd7e as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 11

    requires s0.stack[3] == 0x4d9

    requires s0.stack[9] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0x4d9;
      assert s1.Peek(9) == 0x175;
      var s2 := Pop(s1);
      var s3 := MLoad(s2);
      var s4 := Swap2(s3);
      var s5 := Swap1(s4);
      var s6 := Pop(s5);
      var s7 := Jump(s6);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s600(s7, gas - 1)
  }

  /** Node 600
    * Segment Id for this node is: 97
    * Starting at 0x4d9
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s600(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x4d9 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 8

    requires s0.stack[6] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(6) == 0x175;
      var s2 := Push2(s1, 0x04e3);
      var s3 := Swap2(s2);
      var s4 := Swap1(s3);
      var s5 := Push2(s4, 0x0d9b);
      var s6 := Jump(s5);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s601(s6, gas - 1)
  }

  /** Node 601
    * Segment Id for this node is: 203
    * Starting at 0xd9b
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s601(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xd9b as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 9

    requires s0.stack[2] == 0x4e3

    requires s0.stack[7] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0x4e3;
      assert s1.Peek(7) == 0x175;
      var s2 := Dup2(s1);
      var s3 := Dup2(s2);
      var s4 := Sub(s3);
      var s5 := Dup2(s4);
      var s6 := Dup2(s5);
      var s7 := Gt(s6);
      var s8 := IsZero(s7);
      var s9 := Push2(s8, 0x0321);
      var s10 := JumpI(s9);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s9.stack[1] > 0 then
        ExecuteFromCFGNode_s604(s10, gas - 1)
      else
        ExecuteFromCFGNode_s602(s10, gas - 1)
  }

  /** Node 602
    * Segment Id for this node is: 204
    * Starting at 0xda7
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s602(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xda7 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 10

    requires s0.stack[3] == 0x4e3

    requires s0.stack[8] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0321);
      assert s1.Peek(0) == 0x321;
      assert s1.Peek(4) == 0x4e3;
      assert s1.Peek(9) == 0x175;
      var s2 := Push2(s1, 0x0d85);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s603(s3, gas - 1)
  }

  /** Node 603
    * Segment Id for this node is: 202
    * Starting at 0xd85
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s603(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xd85 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 11

    requires s0.stack[0] == 0x321

    requires s0.stack[4] == 0x4e3

    requires s0.stack[9] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0x321;
      assert s1.Peek(4) == 0x4e3;
      assert s1.Peek(9) == 0x175;
      var s2 := Push4(s1, 0x4e487b71);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x11);
      var s8 := Push1(s7, 0x04);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x24);
      var s11 := Push1(s10, 0x00);
      assert s11.Peek(2) == 0x321;
      assert s11.Peek(6) == 0x4e3;
      assert s11.Peek(11) == 0x175;
      var s12 := Revert(s11);
      // Segment is terminal (Revert, Stop or Return)
      s12
  }

  /** Node 604
    * Segment Id for this node is: 79
    * Starting at 0x321
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 4
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -3
    * Net Capacity Effect: +3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s604(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x321 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 10

    requires s0.stack[3] == 0x4e3

    requires s0.stack[8] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0x4e3;
      assert s1.Peek(8) == 0x175;
      var s2 := Swap3(s1);
      var s3 := Swap2(s2);
      var s4 := Pop(s3);
      var s5 := Pop(s4);
      var s6 := Jump(s5);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s605(s6, gas - 1)
  }

  /** Node 605
    * Segment Id for this node is: 98
    * Starting at 0x4e3
    * Segment type is: CONT Segment
    * Minimum stack size for this segment to prevent stack underflow: 5
    * Minimum capacity for this segment to prevent stack overflow: 5
    * Net Stack Effect: -4
    * Net Capacity Effect: +4
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s605(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x4e3 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 7

    requires s0.stack[5] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(5) == 0x175;
      var s2 := Push1(s1, 0x40);
      var s3 := Dup1(s2);
      var s4 := MLoad(s3);
      var s5 := Caller(s4);
      var s6 := Dup2(s5);
      var s7 := MStore(s6);
      var s8 := Push1(s7, 0x01);
      var s9 := Push1(s8, 0x01);
      var s10 := Push1(s9, 0xa0);
      var s11 := Shl(s10);
      assert s11.Peek(9) == 0x175;
      var s12 := Sub(s11);
      var s13 := Dup8(s12);
      var s14 := And(s13);
      var s15 := Push1(s14, 0x20);
      var s16 := Dup3(s15);
      var s17 := Add(s16);
      var s18 := MStore(s17);
      var s19 := Swap1(s18);
      var s20 := Dup2(s19);
      var s21 := Add(s20);
      assert s21.Peek(7) == 0x175;
      var s22 := Dup3(s21);
      var s23 := Swap1(s22);
      var s24 := MStore(s23);
      var s25 := Swap1(s24);
      var s26 := Swap2(s25);
      var s27 := Pop(s26);
      var s28 := Push32(s27, 0x5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f62);
      var s29 := Swap1(s28);
      var s30 := Push1(s29, 0x60);
      var s31 := Add(s30);
      assert s31.Peek(6) == 0x175;
      var s32 := Push1(s31, 0x40);
      var s33 := MLoad(s32);
      var s34 := Dup1(s33);
      var s35 := Swap2(s34);
      var s36 := Sub(s35);
      var s37 := Swap1(s36);
      var s38 := Log1(s37);
      var s39 := Pop(s38);
      var s40 := Pop(s39);
      var s41 := Pop(s40);
      //  Go to the next instruction at pc + 1
      ExecuteFromCFGNode_s606(s41, gas - 1)
  }

  /** Node 606
    * Segment Id for this node is: 99
    * Starting at 0x533
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -2
    * Net Capacity Effect: +2
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s606(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x533 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 3

    requires s0.stack[1] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Pop(s0);
      assert s1.Peek(0) == 0x175;
      var s2 := Jump(s1);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s18(s2, gas - 1)
  }

  /** Node 607
    * Segment Id for this node is: 132
    * Starting at 0x958
    * Segment type is: CONT Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 1
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s607(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x958 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 15

    requires s0.stack[9] == 0x466

    requires s0.stack[13] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(9) == 0x466;
      assert s1.Peek(13) == 0x175;
      var s2 := Push1(s1, 0x60);
      var s3 := Swap2(s2);
      var s4 := Pop(s3);
      //  Go to the next instruction at pc + 1
      ExecuteFromCFGNode_s581(s4, gas - 1)
  }

  /** Node 608
    * Segment Id for this node is: 18
    * Starting at 0xbb
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s608(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xbb as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 1

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      var s2 := Dup1(s1);
      var s3 := Push4(s2, 0x01ffc9a7);
      var s4 := Eq(s3);
      var s5 := Push2(s4, 0x00e2);
      var s6 := JumpI(s5);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s5.stack[1] > 0 then
        ExecuteFromCFGNode_s766(s6, gas - 1)
      else
        ExecuteFromCFGNode_s609(s6, gas - 1)
  }

  /** Node 609
    * Segment Id for this node is: 19
    * Starting at 0xc7
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s609(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xc7 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 1

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Dup1(s0);
      var s2 := Push4(s1, 0x248a9ca3);
      var s3 := Eq(s2);
      var s4 := Push2(s3, 0x0117);
      var s5 := JumpI(s4);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s4.stack[1] > 0 then
        ExecuteFromCFGNode_s758(s5, gas - 1)
      else
        ExecuteFromCFGNode_s610(s5, gas - 1)
  }

  /** Node 610
    * Segment Id for this node is: 20
    * Starting at 0xd2
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s610(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xd2 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 1

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Dup1(s0);
      var s2 := Push4(s1, 0x2f2ff15d);
      var s3 := Eq(s2);
      var s4 := Push2(s3, 0x0155);
      var s5 := JumpI(s4);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s4.stack[1] > 0 then
        ExecuteFromCFGNode_s612(s5, gas - 1)
      else
        ExecuteFromCFGNode_s611(s5, gas - 1)
  }

  /** Node 611
    * Segment Id for this node is: 21
    * Starting at 0xdd
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s611(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xdd as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 1

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      var s2 := Push1(s1, 0x00);
      var s3 := Dup1(s2);
      var s4 := Revert(s3);
      // Segment is terminal (Revert, Stop or Return)
      s4
  }

  /** Node 612
    * Segment Id for this node is: 33
    * Starting at 0x155
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s612(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x155 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 1

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      var s2 := CallValue(s1);
      var s3 := Dup1(s2);
      var s4 := IsZero(s3);
      var s5 := Push2(s4, 0x0161);
      var s6 := JumpI(s5);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s5.stack[1] > 0 then
        ExecuteFromCFGNode_s614(s6, gas - 1)
      else
        ExecuteFromCFGNode_s613(s6, gas - 1)
  }

  /** Node 613
    * Segment Id for this node is: 34
    * Starting at 0x15d
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s613(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x15d as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 2

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push1(s0, 0x00);
      var s2 := Dup1(s1);
      var s3 := Revert(s2);
      // Segment is terminal (Revert, Stop or Return)
      s3
  }

  /** Node 614
    * Segment Id for this node is: 35
    * Starting at 0x161
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +3
    * Net Capacity Effect: -3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s614(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x161 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 2

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      var s2 := Pop(s1);
      var s3 := Push2(s2, 0x0175);
      var s4 := Push2(s3, 0x0170);
      var s5 := CallDataSize(s4);
      var s6 := Push1(s5, 0x04);
      var s7 := Push2(s6, 0x0cb9);
      var s8 := Jump(s7);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s615(s8, gas - 1)
  }

  /** Node 615
    * Segment Id for this node is: 183
    * Starting at 0xcb9
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 5
    * Net Stack Effect: +2
    * Net Capacity Effect: -2
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s615(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xcb9 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 5

    requires s0.stack[2] == 0x170

    requires s0.stack[3] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0x170;
      assert s1.Peek(3) == 0x175;
      var s2 := Push1(s1, 0x00);
      var s3 := Dup1(s2);
      var s4 := Push1(s3, 0x40);
      var s5 := Dup4(s4);
      var s6 := Dup6(s5);
      var s7 := Sub(s6);
      var s8 := SLt(s7);
      var s9 := IsZero(s8);
      var s10 := Push2(s9, 0x0ccc);
      var s11 := JumpI(s10);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s10.stack[1] > 0 then
        ExecuteFromCFGNode_s617(s11, gas - 1)
      else
        ExecuteFromCFGNode_s616(s11, gas - 1)
  }

  /** Node 616
    * Segment Id for this node is: 184
    * Starting at 0xcc8
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s616(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xcc8 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 7

    requires s0.stack[4] == 0x170

    requires s0.stack[5] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push1(s0, 0x00);
      assert s1.Peek(5) == 0x170;
      assert s1.Peek(6) == 0x175;
      var s2 := Dup1(s1);
      var s3 := Revert(s2);
      // Segment is terminal (Revert, Stop or Return)
      s3
  }

  /** Node 617
    * Segment Id for this node is: 185
    * Starting at 0xccc
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 3
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +2
    * Net Capacity Effect: -2
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s617(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xccc as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 7

    requires s0.stack[4] == 0x170

    requires s0.stack[5] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(4) == 0x170;
      assert s1.Peek(5) == 0x175;
      var s2 := Dup3(s1);
      var s3 := CallDataLoad(s2);
      var s4 := Swap2(s3);
      var s5 := Pop(s4);
      var s6 := Push2(s5, 0x0cdc);
      var s7 := Push1(s6, 0x20);
      var s8 := Dup5(s7);
      var s9 := Add(s8);
      var s10 := Push2(s9, 0x0c9d);
      var s11 := Jump(s10);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s618(s11, gas - 1)
  }

  /** Node 618
    * Segment Id for this node is: 180
    * Starting at 0xc9d
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s618(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xc9d as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 9

    requires s0.stack[1] == 0xcdc

    requires s0.stack[6] == 0x170

    requires s0.stack[7] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(1) == 0xcdc;
      assert s1.Peek(6) == 0x170;
      assert s1.Peek(7) == 0x175;
      var s2 := Dup1(s1);
      var s3 := CallDataLoad(s2);
      var s4 := Push1(s3, 0x01);
      var s5 := Push1(s4, 0x01);
      var s6 := Push1(s5, 0xa0);
      var s7 := Shl(s6);
      var s8 := Sub(s7);
      var s9 := Dup2(s8);
      var s10 := And(s9);
      var s11 := Dup2(s10);
      assert s11.Peek(4) == 0xcdc;
      assert s11.Peek(9) == 0x170;
      assert s11.Peek(10) == 0x175;
      var s12 := Eq(s11);
      var s13 := Push2(s12, 0x0cb4);
      var s14 := JumpI(s13);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s13.stack[1] > 0 then
        ExecuteFromCFGNode_s620(s14, gas - 1)
      else
        ExecuteFromCFGNode_s619(s14, gas - 1)
  }

  /** Node 619
    * Segment Id for this node is: 181
    * Starting at 0xcb0
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s619(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xcb0 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 10

    requires s0.stack[2] == 0xcdc

    requires s0.stack[7] == 0x170

    requires s0.stack[8] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push1(s0, 0x00);
      assert s1.Peek(3) == 0xcdc;
      assert s1.Peek(8) == 0x170;
      assert s1.Peek(9) == 0x175;
      var s2 := Dup1(s1);
      var s3 := Revert(s2);
      // Segment is terminal (Revert, Stop or Return)
      s3
  }

  /** Node 620
    * Segment Id for this node is: 182
    * Starting at 0xcb4
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 3
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -2
    * Net Capacity Effect: +2
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s620(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xcb4 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 10

    requires s0.stack[2] == 0xcdc

    requires s0.stack[7] == 0x170

    requires s0.stack[8] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0xcdc;
      assert s1.Peek(7) == 0x170;
      assert s1.Peek(8) == 0x175;
      var s2 := Swap2(s1);
      var s3 := Swap1(s2);
      var s4 := Pop(s3);
      var s5 := Jump(s4);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s621(s5, gas - 1)
  }

  /** Node 621
    * Segment Id for this node is: 186
    * Starting at 0xcdc
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 6
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -4
    * Net Capacity Effect: +4
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s621(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xcdc as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 8

    requires s0.stack[5] == 0x170

    requires s0.stack[6] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(5) == 0x170;
      assert s1.Peek(6) == 0x175;
      var s2 := Swap1(s1);
      var s3 := Pop(s2);
      var s4 := Swap3(s3);
      var s5 := Pop(s4);
      var s6 := Swap3(s5);
      var s7 := Swap1(s6);
      var s8 := Pop(s7);
      var s9 := Jump(s8);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s622(s9, gas - 1)
  }

  /** Node 622
    * Segment Id for this node is: 36
    * Starting at 0x170
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 1
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s622(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x170 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 4

    requires s0.stack[2] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0x175;
      var s2 := Push2(s1, 0x0327);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s623(s3, gas - 1)
  }

  /** Node 623
    * Segment Id for this node is: 80
    * Starting at 0x327
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +3
    * Net Capacity Effect: -3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s623(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x327 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 4

    requires s0.stack[2] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0x175;
      var s2 := Push1(s1, 0x00);
      var s3 := Dup3(s2);
      var s4 := Dup2(s3);
      var s5 := MStore(s4);
      var s6 := Push1(s5, 0x20);
      var s7 := Dup2(s6);
      var s8 := Swap1(s7);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x40);
      var s11 := Swap1(s10);
      assert s11.Peek(4) == 0x175;
      var s12 := Keccak256(s11);
      var s13 := Push1(s12, 0x01);
      var s14 := Add(s13);
      var s15 := SLoad(s14);
      var s16 := Push2(s15, 0x0342);
      var s17 := Dup2(s16);
      var s18 := Push2(s17, 0x0826);
      var s19 := Jump(s18);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s624(s19, gas - 1)
  }

  /** Node 624
    * Segment Id for this node is: 122
    * Starting at 0x826
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +3
    * Net Capacity Effect: -3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s624(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x826 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 7

    requires s0.stack[1] == 0x342

    requires s0.stack[5] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(1) == 0x342;
      assert s1.Peek(5) == 0x175;
      var s2 := Push2(s1, 0x0830);
      var s3 := Dup2(s2);
      var s4 := Caller(s3);
      var s5 := Push2(s4, 0x0a4c);
      var s6 := Jump(s5);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s625(s6, gas - 1)
  }

  /** Node 625
    * Segment Id for this node is: 143
    * Starting at 0xa4c
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +3
    * Net Capacity Effect: -3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s625(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xa4c as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 10

    requires s0.stack[2] == 0x830

    requires s0.stack[4] == 0x342

    requires s0.stack[8] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0x830;
      assert s1.Peek(4) == 0x342;
      assert s1.Peek(8) == 0x175;
      var s2 := Push2(s1, 0x0a56);
      var s3 := Dup3(s2);
      var s4 := Dup3(s3);
      var s5 := Push2(s4, 0x0708);
      var s6 := Jump(s5);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s626(s6, gas - 1)
  }

  /** Node 626
    * Segment Id for this node is: 114
    * Starting at 0x708
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 3
    * Minimum capacity for this segment to prevent stack overflow: 6
    * Net Stack Effect: -2
    * Net Capacity Effect: +2
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s626(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x708 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 13

    requires s0.stack[2] == 0xa56

    requires s0.stack[5] == 0x830

    requires s0.stack[7] == 0x342

    requires s0.stack[11] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0xa56;
      assert s1.Peek(5) == 0x830;
      assert s1.Peek(7) == 0x342;
      assert s1.Peek(11) == 0x175;
      var s2 := Push1(s1, 0x00);
      var s3 := Swap2(s2);
      var s4 := Dup3(s3);
      var s5 := MStore(s4);
      var s6 := Push1(s5, 0x20);
      var s7 := Dup3(s6);
      var s8 := Dup2(s7);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x40);
      var s11 := Dup1(s10);
      assert s11.Peek(5) == 0xa56;
      assert s11.Peek(8) == 0x830;
      assert s11.Peek(10) == 0x342;
      assert s11.Peek(14) == 0x175;
      var s12 := Dup5(s11);
      var s13 := Keccak256(s12);
      var s14 := Push1(s13, 0x01);
      var s15 := Push1(s14, 0x01);
      var s16 := Push1(s15, 0xa0);
      var s17 := Shl(s16);
      var s18 := Sub(s17);
      var s19 := Swap4(s18);
      var s20 := Swap1(s19);
      var s21 := Swap4(s20);
      assert s21.Peek(6) == 0xa56;
      assert s21.Peek(9) == 0x830;
      assert s21.Peek(11) == 0x342;
      assert s21.Peek(15) == 0x175;
      var s22 := And(s21);
      var s23 := Dup5(s22);
      var s24 := MStore(s23);
      var s25 := Swap2(s24);
      var s26 := Swap1(s25);
      var s27 := MStore(s26);
      var s28 := Swap1(s27);
      var s29 := Keccak256(s28);
      var s30 := SLoad(s29);
      var s31 := Push1(s30, 0xff);
      assert s31.Peek(2) == 0xa56;
      assert s31.Peek(5) == 0x830;
      assert s31.Peek(7) == 0x342;
      assert s31.Peek(11) == 0x175;
      var s32 := And(s31);
      var s33 := Swap1(s32);
      var s34 := Jump(s33);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s627(s34, gas - 1)
  }

  /** Node 627
    * Segment Id for this node is: 144
    * Starting at 0xa56
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 1
    * Net Stack Effect: -1
    * Net Capacity Effect: +1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s627(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xa56 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 11

    requires s0.stack[3] == 0x830

    requires s0.stack[5] == 0x342

    requires s0.stack[9] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0x830;
      assert s1.Peek(5) == 0x342;
      assert s1.Peek(9) == 0x175;
      var s2 := Push2(s1, 0x05af);
      var s3 := JumpI(s2);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s2.stack[1] > 0 then
        ExecuteFromCFGNode_s750(s3, gas - 1)
      else
        ExecuteFromCFGNode_s628(s3, gas - 1)
  }

  /** Node 628
    * Segment Id for this node is: 145
    * Starting at 0xa5b
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +2
    * Net Capacity Effect: -2
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s628(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xa5b as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 10

    requires s0.stack[2] == 0x830

    requires s0.stack[4] == 0x342

    requires s0.stack[8] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0a63);
      assert s1.Peek(0) == 0xa63;
      assert s1.Peek(3) == 0x830;
      assert s1.Peek(5) == 0x342;
      assert s1.Peek(9) == 0x175;
      var s2 := Dup2(s1);
      var s3 := Push2(s2, 0x0aa5);
      var s4 := Jump(s3);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s629(s4, gas - 1)
  }

  /** Node 629
    * Segment Id for this node is: 149
    * Starting at 0xaa5
    * Segment type is: CONT Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 5
    * Net Stack Effect: +4
    * Net Capacity Effect: -4
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s629(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xaa5 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 12

    requires s0.stack[1] == 0xa63

    requires s0.stack[4] == 0x830

    requires s0.stack[6] == 0x342

    requires s0.stack[10] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(1) == 0xa63;
      assert s1.Peek(4) == 0x830;
      assert s1.Peek(6) == 0x342;
      assert s1.Peek(10) == 0x175;
      var s2 := Push1(s1, 0x60);
      var s3 := Push2(s2, 0x0321);
      var s4 := Push1(s3, 0x01);
      var s5 := Push1(s4, 0x01);
      var s6 := Push1(s5, 0xa0);
      var s7 := Shl(s6);
      var s8 := Sub(s7);
      var s9 := Dup4(s8);
      var s10 := And(s9);
      var s11 := Push1(s10, 0x14);
      //  Go to the next instruction at pc + 1
      ExecuteFromCFGNode_s630(s11, gas - 1)
  }

  /** Node 630
    * Segment Id for this node is: 150
    * Starting at 0xab7
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 6
    * Net Stack Effect: +5
    * Net Capacity Effect: -5
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s630(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xab7 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 16

    requires s0.stack[2] == 0x321

    requires s0.stack[5] == 0xa63

    requires s0.stack[8] == 0x830

    requires s0.stack[10] == 0x342

    requires s0.stack[14] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0x321;
      assert s1.Peek(5) == 0xa63;
      assert s1.Peek(8) == 0x830;
      assert s1.Peek(10) == 0x342;
      assert s1.Peek(14) == 0x175;
      var s2 := Push1(s1, 0x60);
      var s3 := Push1(s2, 0x00);
      var s4 := Push2(s3, 0x0ac6);
      var s5 := Dup4(s4);
      var s6 := Push1(s5, 0x02);
      var s7 := Push2(s6, 0x0eb8);
      var s8 := Jump(s7);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s631(s8, gas - 1)
  }

  /** Node 631
    * Segment Id for this node is: 220
    * Starting at 0xeb8
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s631(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xeb8 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 21

    requires s0.stack[2] == 0xac6

    requires s0.stack[7] == 0x321

    requires s0.stack[10] == 0xa63

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x342

    requires s0.stack[19] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0xac6;
      assert s1.Peek(7) == 0x321;
      assert s1.Peek(10) == 0xa63;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x342;
      assert s1.Peek(19) == 0x175;
      var s2 := Dup1(s1);
      var s3 := Dup3(s2);
      var s4 := Mul(s3);
      var s5 := Dup2(s4);
      var s6 := IsZero(s5);
      var s7 := Dup3(s6);
      var s8 := Dup3(s7);
      var s9 := Div(s8);
      var s10 := Dup5(s9);
      var s11 := Eq(s10);
      assert s11.Peek(5) == 0xac6;
      assert s11.Peek(10) == 0x321;
      assert s11.Peek(13) == 0xa63;
      assert s11.Peek(16) == 0x830;
      assert s11.Peek(18) == 0x342;
      assert s11.Peek(22) == 0x175;
      var s12 := Or(s11);
      var s13 := Push2(s12, 0x0321);
      var s14 := JumpI(s13);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s13.stack[1] > 0 then
        ExecuteFromCFGNode_s634(s14, gas - 1)
      else
        ExecuteFromCFGNode_s632(s14, gas - 1)
  }

  /** Node 632
    * Segment Id for this node is: 221
    * Starting at 0xec8
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s632(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xec8 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 22

    requires s0.stack[3] == 0xac6

    requires s0.stack[8] == 0x321

    requires s0.stack[11] == 0xa63

    requires s0.stack[14] == 0x830

    requires s0.stack[16] == 0x342

    requires s0.stack[20] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0321);
      assert s1.Peek(0) == 0x321;
      assert s1.Peek(4) == 0xac6;
      assert s1.Peek(9) == 0x321;
      assert s1.Peek(12) == 0xa63;
      assert s1.Peek(15) == 0x830;
      assert s1.Peek(17) == 0x342;
      assert s1.Peek(21) == 0x175;
      var s2 := Push2(s1, 0x0d85);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s633(s3, gas - 1)
  }

  /** Node 633
    * Segment Id for this node is: 202
    * Starting at 0xd85
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s633(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xd85 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 23

    requires s0.stack[0] == 0x321

    requires s0.stack[4] == 0xac6

    requires s0.stack[9] == 0x321

    requires s0.stack[12] == 0xa63

    requires s0.stack[15] == 0x830

    requires s0.stack[17] == 0x342

    requires s0.stack[21] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0x321;
      assert s1.Peek(4) == 0xac6;
      assert s1.Peek(9) == 0x321;
      assert s1.Peek(12) == 0xa63;
      assert s1.Peek(15) == 0x830;
      assert s1.Peek(17) == 0x342;
      assert s1.Peek(21) == 0x175;
      var s2 := Push4(s1, 0x4e487b71);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x11);
      var s8 := Push1(s7, 0x04);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x24);
      var s11 := Push1(s10, 0x00);
      assert s11.Peek(2) == 0x321;
      assert s11.Peek(6) == 0xac6;
      assert s11.Peek(11) == 0x321;
      assert s11.Peek(14) == 0xa63;
      assert s11.Peek(17) == 0x830;
      assert s11.Peek(19) == 0x342;
      assert s11.Peek(23) == 0x175;
      var s12 := Revert(s11);
      // Segment is terminal (Revert, Stop or Return)
      s12
  }

  /** Node 634
    * Segment Id for this node is: 79
    * Starting at 0x321
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 4
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -3
    * Net Capacity Effect: +3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s634(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x321 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 22

    requires s0.stack[3] == 0xac6

    requires s0.stack[8] == 0x321

    requires s0.stack[11] == 0xa63

    requires s0.stack[14] == 0x830

    requires s0.stack[16] == 0x342

    requires s0.stack[20] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0xac6;
      assert s1.Peek(8) == 0x321;
      assert s1.Peek(11) == 0xa63;
      assert s1.Peek(14) == 0x830;
      assert s1.Peek(16) == 0x342;
      assert s1.Peek(20) == 0x175;
      var s2 := Swap3(s1);
      var s3 := Swap2(s2);
      var s4 := Pop(s3);
      var s5 := Pop(s4);
      var s6 := Jump(s5);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s635(s6, gas - 1)
  }

  /** Node 635
    * Segment Id for this node is: 151
    * Starting at 0xac6
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +2
    * Net Capacity Effect: -2
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s635(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xac6 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 19

    requires s0.stack[5] == 0x321

    requires s0.stack[8] == 0xa63

    requires s0.stack[11] == 0x830

    requires s0.stack[13] == 0x342

    requires s0.stack[17] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(5) == 0x321;
      assert s1.Peek(8) == 0xa63;
      assert s1.Peek(11) == 0x830;
      assert s1.Peek(13) == 0x342;
      assert s1.Peek(17) == 0x175;
      var s2 := Push2(s1, 0x0ad1);
      var s3 := Swap1(s2);
      var s4 := Push1(s3, 0x02);
      var s5 := Push2(s4, 0x0ecf);
      var s6 := Jump(s5);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s636(s6, gas - 1)
  }

  /** Node 636
    * Segment Id for this node is: 222
    * Starting at 0xecf
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s636(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xecf as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 21

    requires s0.stack[2] == 0xad1

    requires s0.stack[7] == 0x321

    requires s0.stack[10] == 0xa63

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x342

    requires s0.stack[19] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0xad1;
      assert s1.Peek(7) == 0x321;
      assert s1.Peek(10) == 0xa63;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x342;
      assert s1.Peek(19) == 0x175;
      var s2 := Dup1(s1);
      var s3 := Dup3(s2);
      var s4 := Add(s3);
      var s5 := Dup1(s4);
      var s6 := Dup3(s5);
      var s7 := Gt(s6);
      var s8 := IsZero(s7);
      var s9 := Push2(s8, 0x0321);
      var s10 := JumpI(s9);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s9.stack[1] > 0 then
        ExecuteFromCFGNode_s639(s10, gas - 1)
      else
        ExecuteFromCFGNode_s637(s10, gas - 1)
  }

  /** Node 637
    * Segment Id for this node is: 223
    * Starting at 0xedb
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s637(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xedb as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 22

    requires s0.stack[3] == 0xad1

    requires s0.stack[8] == 0x321

    requires s0.stack[11] == 0xa63

    requires s0.stack[14] == 0x830

    requires s0.stack[16] == 0x342

    requires s0.stack[20] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0321);
      assert s1.Peek(0) == 0x321;
      assert s1.Peek(4) == 0xad1;
      assert s1.Peek(9) == 0x321;
      assert s1.Peek(12) == 0xa63;
      assert s1.Peek(15) == 0x830;
      assert s1.Peek(17) == 0x342;
      assert s1.Peek(21) == 0x175;
      var s2 := Push2(s1, 0x0d85);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s638(s3, gas - 1)
  }

  /** Node 638
    * Segment Id for this node is: 202
    * Starting at 0xd85
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s638(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xd85 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 23

    requires s0.stack[0] == 0x321

    requires s0.stack[4] == 0xad1

    requires s0.stack[9] == 0x321

    requires s0.stack[12] == 0xa63

    requires s0.stack[15] == 0x830

    requires s0.stack[17] == 0x342

    requires s0.stack[21] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0x321;
      assert s1.Peek(4) == 0xad1;
      assert s1.Peek(9) == 0x321;
      assert s1.Peek(12) == 0xa63;
      assert s1.Peek(15) == 0x830;
      assert s1.Peek(17) == 0x342;
      assert s1.Peek(21) == 0x175;
      var s2 := Push4(s1, 0x4e487b71);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x11);
      var s8 := Push1(s7, 0x04);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x24);
      var s11 := Push1(s10, 0x00);
      assert s11.Peek(2) == 0x321;
      assert s11.Peek(6) == 0xad1;
      assert s11.Peek(11) == 0x321;
      assert s11.Peek(14) == 0xa63;
      assert s11.Peek(17) == 0x830;
      assert s11.Peek(19) == 0x342;
      assert s11.Peek(23) == 0x175;
      var s12 := Revert(s11);
      // Segment is terminal (Revert, Stop or Return)
      s12
  }

  /** Node 639
    * Segment Id for this node is: 79
    * Starting at 0x321
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 4
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -3
    * Net Capacity Effect: +3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s639(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x321 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 22

    requires s0.stack[3] == 0xad1

    requires s0.stack[8] == 0x321

    requires s0.stack[11] == 0xa63

    requires s0.stack[14] == 0x830

    requires s0.stack[16] == 0x342

    requires s0.stack[20] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0xad1;
      assert s1.Peek(8) == 0x321;
      assert s1.Peek(11) == 0xa63;
      assert s1.Peek(14) == 0x830;
      assert s1.Peek(16) == 0x342;
      assert s1.Peek(20) == 0x175;
      var s2 := Swap3(s1);
      var s3 := Swap2(s2);
      var s4 := Pop(s3);
      var s5 := Pop(s4);
      var s6 := Jump(s5);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s640(s6, gas - 1)
  }

  /** Node 640
    * Segment Id for this node is: 152
    * Starting at 0xad1
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s640(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xad1 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 19

    requires s0.stack[5] == 0x321

    requires s0.stack[8] == 0xa63

    requires s0.stack[11] == 0x830

    requires s0.stack[13] == 0x342

    requires s0.stack[17] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(5) == 0x321;
      assert s1.Peek(8) == 0xa63;
      assert s1.Peek(11) == 0x830;
      assert s1.Peek(13) == 0x342;
      assert s1.Peek(17) == 0x175;
      var s2 := Push8(s1, 0xffffffffffffffff);
      var s3 := Dup2(s2);
      var s4 := Gt(s3);
      var s5 := IsZero(s4);
      var s6 := Push2(s5, 0x0ae9);
      var s7 := JumpI(s6);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s6.stack[1] > 0 then
        ExecuteFromCFGNode_s643(s7, gas - 1)
      else
        ExecuteFromCFGNode_s641(s7, gas - 1)
  }

  /** Node 641
    * Segment Id for this node is: 153
    * Starting at 0xae2
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s641(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xae2 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 19

    requires s0.stack[5] == 0x321

    requires s0.stack[8] == 0xa63

    requires s0.stack[11] == 0x830

    requires s0.stack[13] == 0x342

    requires s0.stack[17] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0ae9);
      assert s1.Peek(0) == 0xae9;
      assert s1.Peek(6) == 0x321;
      assert s1.Peek(9) == 0xa63;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x342;
      assert s1.Peek(18) == 0x175;
      var s2 := Push2(s1, 0x0ee2);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s642(s3, gas - 1)
  }

  /** Node 642
    * Segment Id for this node is: 224
    * Starting at 0xee2
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s642(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xee2 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 20

    requires s0.stack[0] == 0xae9

    requires s0.stack[6] == 0x321

    requires s0.stack[9] == 0xa63

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x342

    requires s0.stack[18] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0xae9;
      assert s1.Peek(6) == 0x321;
      assert s1.Peek(9) == 0xa63;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x342;
      assert s1.Peek(18) == 0x175;
      var s2 := Push4(s1, 0x4e487b71);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x41);
      var s8 := Push1(s7, 0x04);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x24);
      var s11 := Push1(s10, 0x00);
      assert s11.Peek(2) == 0xae9;
      assert s11.Peek(8) == 0x321;
      assert s11.Peek(11) == 0xa63;
      assert s11.Peek(14) == 0x830;
      assert s11.Peek(16) == 0x342;
      assert s11.Peek(20) == 0x175;
      var s12 := Revert(s11);
      // Segment is terminal (Revert, Stop or Return)
      s12
  }

  /** Node 643
    * Segment Id for this node is: 154
    * Starting at 0xae9
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s643(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xae9 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 19

    requires s0.stack[5] == 0x321

    requires s0.stack[8] == 0xa63

    requires s0.stack[11] == 0x830

    requires s0.stack[13] == 0x342

    requires s0.stack[17] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(5) == 0x321;
      assert s1.Peek(8) == 0xa63;
      assert s1.Peek(11) == 0x830;
      assert s1.Peek(13) == 0x342;
      assert s1.Peek(17) == 0x175;
      var s2 := Push1(s1, 0x40);
      var s3 := MLoad(s2);
      var s4 := Swap1(s3);
      var s5 := Dup1(s4);
      var s6 := Dup3(s5);
      var s7 := MStore(s6);
      var s8 := Dup1(s7);
      var s9 := Push1(s8, 0x1f);
      var s10 := Add(s9);
      var s11 := Push1(s10, 0x1f);
      assert s11.Peek(8) == 0x321;
      assert s11.Peek(11) == 0xa63;
      assert s11.Peek(14) == 0x830;
      assert s11.Peek(16) == 0x342;
      assert s11.Peek(20) == 0x175;
      var s12 := Not(s11);
      var s13 := And(s12);
      var s14 := Push1(s13, 0x20);
      var s15 := Add(s14);
      var s16 := Dup3(s15);
      var s17 := Add(s16);
      var s18 := Push1(s17, 0x40);
      var s19 := MStore(s18);
      var s20 := Dup1(s19);
      var s21 := IsZero(s20);
      assert s21.Peek(7) == 0x321;
      assert s21.Peek(10) == 0xa63;
      assert s21.Peek(13) == 0x830;
      assert s21.Peek(15) == 0x342;
      assert s21.Peek(19) == 0x175;
      var s22 := Push2(s21, 0x0b13);
      var s23 := JumpI(s22);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s22.stack[1] > 0 then
        ExecuteFromCFGNode_s645(s23, gas - 1)
      else
        ExecuteFromCFGNode_s644(s23, gas - 1)
  }

  /** Node 644
    * Segment Id for this node is: 155
    * Starting at 0xb07
    * Segment type is: CONT Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 5
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s644(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xb07 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 20

    requires s0.stack[6] == 0x321

    requires s0.stack[9] == 0xa63

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x342

    requires s0.stack[18] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push1(s0, 0x20);
      assert s1.Peek(7) == 0x321;
      assert s1.Peek(10) == 0xa63;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x342;
      assert s1.Peek(19) == 0x175;
      var s2 := Dup3(s1);
      var s3 := Add(s2);
      var s4 := Dup2(s3);
      var s5 := Dup1(s4);
      var s6 := CallDataSize(s5);
      var s7 := Dup4(s6);
      var s8 := CallDataCopy(s7);
      var s9 := Add(s8);
      var s10 := Swap1(s9);
      var s11 := Pop(s10);
      //  Go to the next instruction at pc + 1
      ExecuteFromCFGNode_s645(s11, gas - 1)
  }

  /** Node 645
    * Segment Id for this node is: 156
    * Starting at 0xb13
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 3
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s645(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xb13 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 20

    requires s0.stack[6] == 0x321

    requires s0.stack[9] == 0xa63

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x342

    requires s0.stack[18] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(6) == 0x321;
      assert s1.Peek(9) == 0xa63;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x342;
      assert s1.Peek(18) == 0x175;
      var s2 := Pop(s1);
      var s3 := Swap1(s2);
      var s4 := Pop(s3);
      var s5 := Push1(s4, 0x03);
      var s6 := Push1(s5, 0xfc);
      var s7 := Shl(s6);
      var s8 := Dup2(s7);
      var s9 := Push1(s8, 0x00);
      var s10 := Dup2(s9);
      var s11 := MLoad(s10);
      assert s11.Peek(8) == 0x321;
      assert s11.Peek(11) == 0xa63;
      assert s11.Peek(14) == 0x830;
      assert s11.Peek(16) == 0x342;
      assert s11.Peek(20) == 0x175;
      var s12 := Dup2(s11);
      var s13 := Lt(s12);
      var s14 := Push2(s13, 0x0b2e);
      var s15 := JumpI(s14);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s14.stack[1] > 0 then
        ExecuteFromCFGNode_s648(s15, gas - 1)
      else
        ExecuteFromCFGNode_s646(s15, gas - 1)
  }

  /** Node 646
    * Segment Id for this node is: 157
    * Starting at 0xb27
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s646(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xb27 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 21

    requires s0.stack[7] == 0x321

    requires s0.stack[10] == 0xa63

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x342

    requires s0.stack[19] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0b2e);
      assert s1.Peek(0) == 0xb2e;
      assert s1.Peek(8) == 0x321;
      assert s1.Peek(11) == 0xa63;
      assert s1.Peek(14) == 0x830;
      assert s1.Peek(16) == 0x342;
      assert s1.Peek(20) == 0x175;
      var s2 := Push2(s1, 0x0ef8);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s647(s3, gas - 1)
  }

  /** Node 647
    * Segment Id for this node is: 225
    * Starting at 0xef8
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s647(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xef8 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 22

    requires s0.stack[0] == 0xb2e

    requires s0.stack[8] == 0x321

    requires s0.stack[11] == 0xa63

    requires s0.stack[14] == 0x830

    requires s0.stack[16] == 0x342

    requires s0.stack[20] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0xb2e;
      assert s1.Peek(8) == 0x321;
      assert s1.Peek(11) == 0xa63;
      assert s1.Peek(14) == 0x830;
      assert s1.Peek(16) == 0x342;
      assert s1.Peek(20) == 0x175;
      var s2 := Push4(s1, 0x4e487b71);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x32);
      var s8 := Push1(s7, 0x04);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x24);
      var s11 := Push1(s10, 0x00);
      assert s11.Peek(2) == 0xb2e;
      assert s11.Peek(10) == 0x321;
      assert s11.Peek(13) == 0xa63;
      assert s11.Peek(16) == 0x830;
      assert s11.Peek(18) == 0x342;
      assert s11.Peek(22) == 0x175;
      var s12 := Revert(s11);
      // Segment is terminal (Revert, Stop or Return)
      s12
  }

  /** Node 648
    * Segment Id for this node is: 158
    * Starting at 0xb2e
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 4
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s648(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xb2e as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 21

    requires s0.stack[7] == 0x321

    requires s0.stack[10] == 0xa63

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x342

    requires s0.stack[19] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(7) == 0x321;
      assert s1.Peek(10) == 0xa63;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x342;
      assert s1.Peek(19) == 0x175;
      var s2 := Push1(s1, 0x20);
      var s3 := Add(s2);
      var s4 := Add(s3);
      var s5 := Swap1(s4);
      var s6 := Push1(s5, 0x01);
      var s7 := Push1(s6, 0x01);
      var s8 := Push1(s7, 0xf8);
      var s9 := Shl(s8);
      var s10 := Sub(s9);
      var s11 := Not(s10);
      assert s11.Peek(7) == 0x321;
      assert s11.Peek(10) == 0xa63;
      assert s11.Peek(13) == 0x830;
      assert s11.Peek(15) == 0x342;
      assert s11.Peek(19) == 0x175;
      var s12 := And(s11);
      var s13 := Swap1(s12);
      var s14 := Dup2(s13);
      var s15 := Push1(s14, 0x00);
      var s16 := Byte(s15);
      var s17 := Swap1(s16);
      var s18 := MStore8(s17);
      var s19 := Pop(s18);
      var s20 := Push1(s19, 0x0f);
      var s21 := Push1(s20, 0xfb);
      assert s21.Peek(6) == 0x321;
      assert s21.Peek(9) == 0xa63;
      assert s21.Peek(12) == 0x830;
      assert s21.Peek(14) == 0x342;
      assert s21.Peek(18) == 0x175;
      var s22 := Shl(s21);
      var s23 := Dup2(s22);
      var s24 := Push1(s23, 0x01);
      var s25 := Dup2(s24);
      var s26 := MLoad(s25);
      var s27 := Dup2(s26);
      var s28 := Lt(s27);
      var s29 := Push2(s28, 0x0b5d);
      var s30 := JumpI(s29);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s29.stack[1] > 0 then
        ExecuteFromCFGNode_s651(s30, gas - 1)
      else
        ExecuteFromCFGNode_s649(s30, gas - 1)
  }

  /** Node 649
    * Segment Id for this node is: 159
    * Starting at 0xb56
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s649(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xb56 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 21

    requires s0.stack[7] == 0x321

    requires s0.stack[10] == 0xa63

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x342

    requires s0.stack[19] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0b5d);
      assert s1.Peek(0) == 0xb5d;
      assert s1.Peek(8) == 0x321;
      assert s1.Peek(11) == 0xa63;
      assert s1.Peek(14) == 0x830;
      assert s1.Peek(16) == 0x342;
      assert s1.Peek(20) == 0x175;
      var s2 := Push2(s1, 0x0ef8);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s650(s3, gas - 1)
  }

  /** Node 650
    * Segment Id for this node is: 225
    * Starting at 0xef8
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s650(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xef8 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 22

    requires s0.stack[0] == 0xb5d

    requires s0.stack[8] == 0x321

    requires s0.stack[11] == 0xa63

    requires s0.stack[14] == 0x830

    requires s0.stack[16] == 0x342

    requires s0.stack[20] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0xb5d;
      assert s1.Peek(8) == 0x321;
      assert s1.Peek(11) == 0xa63;
      assert s1.Peek(14) == 0x830;
      assert s1.Peek(16) == 0x342;
      assert s1.Peek(20) == 0x175;
      var s2 := Push4(s1, 0x4e487b71);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x32);
      var s8 := Push1(s7, 0x04);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x24);
      var s11 := Push1(s10, 0x00);
      assert s11.Peek(2) == 0xb5d;
      assert s11.Peek(10) == 0x321;
      assert s11.Peek(13) == 0xa63;
      assert s11.Peek(16) == 0x830;
      assert s11.Peek(18) == 0x342;
      assert s11.Peek(22) == 0x175;
      var s12 := Revert(s11);
      // Segment is terminal (Revert, Stop or Return)
      s12
  }

  /** Node 651
    * Segment Id for this node is: 160
    * Starting at 0xb5d
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 6
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s651(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xb5d as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 21

    requires s0.stack[7] == 0x321

    requires s0.stack[10] == 0xa63

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x342

    requires s0.stack[19] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(7) == 0x321;
      assert s1.Peek(10) == 0xa63;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x342;
      assert s1.Peek(19) == 0x175;
      var s2 := Push1(s1, 0x20);
      var s3 := Add(s2);
      var s4 := Add(s3);
      var s5 := Swap1(s4);
      var s6 := Push1(s5, 0x01);
      var s7 := Push1(s6, 0x01);
      var s8 := Push1(s7, 0xf8);
      var s9 := Shl(s8);
      var s10 := Sub(s9);
      var s11 := Not(s10);
      assert s11.Peek(7) == 0x321;
      assert s11.Peek(10) == 0xa63;
      assert s11.Peek(13) == 0x830;
      assert s11.Peek(15) == 0x342;
      assert s11.Peek(19) == 0x175;
      var s12 := And(s11);
      var s13 := Swap1(s12);
      var s14 := Dup2(s13);
      var s15 := Push1(s14, 0x00);
      var s16 := Byte(s15);
      var s17 := Swap1(s16);
      var s18 := MStore8(s17);
      var s19 := Pop(s18);
      var s20 := Push1(s19, 0x00);
      var s21 := Push2(s20, 0x0b81);
      assert s21.Peek(0) == 0xb81;
      assert s21.Peek(6) == 0x321;
      assert s21.Peek(9) == 0xa63;
      assert s21.Peek(12) == 0x830;
      assert s21.Peek(14) == 0x342;
      assert s21.Peek(18) == 0x175;
      var s22 := Dup5(s21);
      var s23 := Push1(s22, 0x02);
      var s24 := Push2(s23, 0x0eb8);
      var s25 := Jump(s24);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s652(s25, gas - 1)
  }

  /** Node 652
    * Segment Id for this node is: 220
    * Starting at 0xeb8
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s652(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xeb8 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 22

    requires s0.stack[2] == 0xb81

    requires s0.stack[8] == 0x321

    requires s0.stack[11] == 0xa63

    requires s0.stack[14] == 0x830

    requires s0.stack[16] == 0x342

    requires s0.stack[20] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0xb81;
      assert s1.Peek(8) == 0x321;
      assert s1.Peek(11) == 0xa63;
      assert s1.Peek(14) == 0x830;
      assert s1.Peek(16) == 0x342;
      assert s1.Peek(20) == 0x175;
      var s2 := Dup1(s1);
      var s3 := Dup3(s2);
      var s4 := Mul(s3);
      var s5 := Dup2(s4);
      var s6 := IsZero(s5);
      var s7 := Dup3(s6);
      var s8 := Dup3(s7);
      var s9 := Div(s8);
      var s10 := Dup5(s9);
      var s11 := Eq(s10);
      assert s11.Peek(5) == 0xb81;
      assert s11.Peek(11) == 0x321;
      assert s11.Peek(14) == 0xa63;
      assert s11.Peek(17) == 0x830;
      assert s11.Peek(19) == 0x342;
      assert s11.Peek(23) == 0x175;
      var s12 := Or(s11);
      var s13 := Push2(s12, 0x0321);
      var s14 := JumpI(s13);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s13.stack[1] > 0 then
        ExecuteFromCFGNode_s655(s14, gas - 1)
      else
        ExecuteFromCFGNode_s653(s14, gas - 1)
  }

  /** Node 653
    * Segment Id for this node is: 221
    * Starting at 0xec8
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s653(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xec8 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 23

    requires s0.stack[3] == 0xb81

    requires s0.stack[9] == 0x321

    requires s0.stack[12] == 0xa63

    requires s0.stack[15] == 0x830

    requires s0.stack[17] == 0x342

    requires s0.stack[21] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0321);
      assert s1.Peek(0) == 0x321;
      assert s1.Peek(4) == 0xb81;
      assert s1.Peek(10) == 0x321;
      assert s1.Peek(13) == 0xa63;
      assert s1.Peek(16) == 0x830;
      assert s1.Peek(18) == 0x342;
      assert s1.Peek(22) == 0x175;
      var s2 := Push2(s1, 0x0d85);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s654(s3, gas - 1)
  }

  /** Node 654
    * Segment Id for this node is: 202
    * Starting at 0xd85
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s654(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xd85 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 24

    requires s0.stack[0] == 0x321

    requires s0.stack[4] == 0xb81

    requires s0.stack[10] == 0x321

    requires s0.stack[13] == 0xa63

    requires s0.stack[16] == 0x830

    requires s0.stack[18] == 0x342

    requires s0.stack[22] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0x321;
      assert s1.Peek(4) == 0xb81;
      assert s1.Peek(10) == 0x321;
      assert s1.Peek(13) == 0xa63;
      assert s1.Peek(16) == 0x830;
      assert s1.Peek(18) == 0x342;
      assert s1.Peek(22) == 0x175;
      var s2 := Push4(s1, 0x4e487b71);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x11);
      var s8 := Push1(s7, 0x04);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x24);
      var s11 := Push1(s10, 0x00);
      assert s11.Peek(2) == 0x321;
      assert s11.Peek(6) == 0xb81;
      assert s11.Peek(12) == 0x321;
      assert s11.Peek(15) == 0xa63;
      assert s11.Peek(18) == 0x830;
      assert s11.Peek(20) == 0x342;
      assert s11.Peek(24) == 0x175;
      var s12 := Revert(s11);
      // Segment is terminal (Revert, Stop or Return)
      s12
  }

  /** Node 655
    * Segment Id for this node is: 79
    * Starting at 0x321
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 4
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -3
    * Net Capacity Effect: +3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s655(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x321 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 23

    requires s0.stack[3] == 0xb81

    requires s0.stack[9] == 0x321

    requires s0.stack[12] == 0xa63

    requires s0.stack[15] == 0x830

    requires s0.stack[17] == 0x342

    requires s0.stack[21] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0xb81;
      assert s1.Peek(9) == 0x321;
      assert s1.Peek(12) == 0xa63;
      assert s1.Peek(15) == 0x830;
      assert s1.Peek(17) == 0x342;
      assert s1.Peek(21) == 0x175;
      var s2 := Swap3(s1);
      var s3 := Swap2(s2);
      var s4 := Pop(s3);
      var s5 := Pop(s4);
      var s6 := Jump(s5);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s656(s6, gas - 1)
  }

  /** Node 656
    * Segment Id for this node is: 161
    * Starting at 0xb81
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +2
    * Net Capacity Effect: -2
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s656(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xb81 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 20

    requires s0.stack[6] == 0x321

    requires s0.stack[9] == 0xa63

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x342

    requires s0.stack[18] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(6) == 0x321;
      assert s1.Peek(9) == 0xa63;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x342;
      assert s1.Peek(18) == 0x175;
      var s2 := Push2(s1, 0x0b8c);
      var s3 := Swap1(s2);
      var s4 := Push1(s3, 0x01);
      var s5 := Push2(s4, 0x0ecf);
      var s6 := Jump(s5);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s657(s6, gas - 1)
  }

  /** Node 657
    * Segment Id for this node is: 222
    * Starting at 0xecf
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s657(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xecf as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 22

    requires s0.stack[2] == 0xb8c

    requires s0.stack[8] == 0x321

    requires s0.stack[11] == 0xa63

    requires s0.stack[14] == 0x830

    requires s0.stack[16] == 0x342

    requires s0.stack[20] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0xb8c;
      assert s1.Peek(8) == 0x321;
      assert s1.Peek(11) == 0xa63;
      assert s1.Peek(14) == 0x830;
      assert s1.Peek(16) == 0x342;
      assert s1.Peek(20) == 0x175;
      var s2 := Dup1(s1);
      var s3 := Dup3(s2);
      var s4 := Add(s3);
      var s5 := Dup1(s4);
      var s6 := Dup3(s5);
      var s7 := Gt(s6);
      var s8 := IsZero(s7);
      var s9 := Push2(s8, 0x0321);
      var s10 := JumpI(s9);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s9.stack[1] > 0 then
        ExecuteFromCFGNode_s660(s10, gas - 1)
      else
        ExecuteFromCFGNode_s658(s10, gas - 1)
  }

  /** Node 658
    * Segment Id for this node is: 223
    * Starting at 0xedb
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s658(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xedb as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 23

    requires s0.stack[3] == 0xb8c

    requires s0.stack[9] == 0x321

    requires s0.stack[12] == 0xa63

    requires s0.stack[15] == 0x830

    requires s0.stack[17] == 0x342

    requires s0.stack[21] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0321);
      assert s1.Peek(0) == 0x321;
      assert s1.Peek(4) == 0xb8c;
      assert s1.Peek(10) == 0x321;
      assert s1.Peek(13) == 0xa63;
      assert s1.Peek(16) == 0x830;
      assert s1.Peek(18) == 0x342;
      assert s1.Peek(22) == 0x175;
      var s2 := Push2(s1, 0x0d85);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s659(s3, gas - 1)
  }

  /** Node 659
    * Segment Id for this node is: 202
    * Starting at 0xd85
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s659(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xd85 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 24

    requires s0.stack[0] == 0x321

    requires s0.stack[4] == 0xb8c

    requires s0.stack[10] == 0x321

    requires s0.stack[13] == 0xa63

    requires s0.stack[16] == 0x830

    requires s0.stack[18] == 0x342

    requires s0.stack[22] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0x321;
      assert s1.Peek(4) == 0xb8c;
      assert s1.Peek(10) == 0x321;
      assert s1.Peek(13) == 0xa63;
      assert s1.Peek(16) == 0x830;
      assert s1.Peek(18) == 0x342;
      assert s1.Peek(22) == 0x175;
      var s2 := Push4(s1, 0x4e487b71);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x11);
      var s8 := Push1(s7, 0x04);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x24);
      var s11 := Push1(s10, 0x00);
      assert s11.Peek(2) == 0x321;
      assert s11.Peek(6) == 0xb8c;
      assert s11.Peek(12) == 0x321;
      assert s11.Peek(15) == 0xa63;
      assert s11.Peek(18) == 0x830;
      assert s11.Peek(20) == 0x342;
      assert s11.Peek(24) == 0x175;
      var s12 := Revert(s11);
      // Segment is terminal (Revert, Stop or Return)
      s12
  }

  /** Node 660
    * Segment Id for this node is: 79
    * Starting at 0x321
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 4
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -3
    * Net Capacity Effect: +3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s660(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x321 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 23

    requires s0.stack[3] == 0xb8c

    requires s0.stack[9] == 0x321

    requires s0.stack[12] == 0xa63

    requires s0.stack[15] == 0x830

    requires s0.stack[17] == 0x342

    requires s0.stack[21] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0xb8c;
      assert s1.Peek(9) == 0x321;
      assert s1.Peek(12) == 0xa63;
      assert s1.Peek(15) == 0x830;
      assert s1.Peek(17) == 0x342;
      assert s1.Peek(21) == 0x175;
      var s2 := Swap3(s1);
      var s3 := Swap2(s2);
      var s4 := Pop(s3);
      var s5 := Pop(s4);
      var s6 := Jump(s5);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s661(s6, gas - 1)
  }

  /** Node 661
    * Segment Id for this node is: 162
    * Starting at 0xb8c
    * Segment type is: CONT Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -1
    * Net Capacity Effect: +1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s661(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xb8c as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 20

    requires s0.stack[6] == 0x321

    requires s0.stack[9] == 0xa63

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x342

    requires s0.stack[18] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(6) == 0x321;
      assert s1.Peek(9) == 0xa63;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x342;
      assert s1.Peek(18) == 0x175;
      var s2 := Swap1(s1);
      var s3 := Pop(s2);
      //  Go to the next instruction at pc + 1
      ExecuteFromCFGNode_s662(s3, gas - 1)
  }

  /** Node 662
    * Segment Id for this node is: 163
    * Starting at 0xb8f
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s662(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xb8f as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 19

    requires s0.stack[5] == 0x321

    requires s0.stack[8] == 0xa63

    requires s0.stack[11] == 0x830

    requires s0.stack[13] == 0x342

    requires s0.stack[17] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(5) == 0x321;
      assert s1.Peek(8) == 0xa63;
      assert s1.Peek(11) == 0x830;
      assert s1.Peek(13) == 0x342;
      assert s1.Peek(17) == 0x175;
      var s2 := Push1(s1, 0x01);
      var s3 := Dup2(s2);
      var s4 := Gt(s3);
      var s5 := IsZero(s4);
      var s6 := Push2(s5, 0x0c04);
      var s7 := JumpI(s6);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s6.stack[1] > 0 then
        ExecuteFromCFGNode_s675(s7, gas - 1)
      else
        ExecuteFromCFGNode_s663(s7, gas - 1)
  }

  /** Node 663
    * Segment Id for this node is: 164
    * Starting at 0xb99
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 5
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +2
    * Net Capacity Effect: -2
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s663(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xb99 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 19

    requires s0.stack[5] == 0x321

    requires s0.stack[8] == 0xa63

    requires s0.stack[11] == 0x830

    requires s0.stack[13] == 0x342

    requires s0.stack[17] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := PushN(s0, 16, 0x181899199a1a9b1b9c1cb0b131b232b3);
      assert s1.Peek(6) == 0x321;
      assert s1.Peek(9) == 0xa63;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x342;
      assert s1.Peek(18) == 0x175;
      var s2 := Push1(s1, 0x81);
      var s3 := Shl(s2);
      var s4 := Dup6(s3);
      var s5 := Push1(s4, 0x0f);
      var s6 := And(s5);
      var s7 := Push1(s6, 0x10);
      var s8 := Dup2(s7);
      var s9 := Lt(s8);
      var s10 := Push2(s9, 0x0bc0);
      var s11 := JumpI(s10);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s10.stack[1] > 0 then
        ExecuteFromCFGNode_s666(s11, gas - 1)
      else
        ExecuteFromCFGNode_s664(s11, gas - 1)
  }

  /** Node 664
    * Segment Id for this node is: 165
    * Starting at 0xbb9
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s664(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xbb9 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 21

    requires s0.stack[7] == 0x321

    requires s0.stack[10] == 0xa63

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x342

    requires s0.stack[19] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0bc0);
      assert s1.Peek(0) == 0xbc0;
      assert s1.Peek(8) == 0x321;
      assert s1.Peek(11) == 0xa63;
      assert s1.Peek(14) == 0x830;
      assert s1.Peek(16) == 0x342;
      assert s1.Peek(20) == 0x175;
      var s2 := Push2(s1, 0x0ef8);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s665(s3, gas - 1)
  }

  /** Node 665
    * Segment Id for this node is: 225
    * Starting at 0xef8
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s665(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xef8 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 22

    requires s0.stack[0] == 0xbc0

    requires s0.stack[8] == 0x321

    requires s0.stack[11] == 0xa63

    requires s0.stack[14] == 0x830

    requires s0.stack[16] == 0x342

    requires s0.stack[20] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0xbc0;
      assert s1.Peek(8) == 0x321;
      assert s1.Peek(11) == 0xa63;
      assert s1.Peek(14) == 0x830;
      assert s1.Peek(16) == 0x342;
      assert s1.Peek(20) == 0x175;
      var s2 := Push4(s1, 0x4e487b71);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x32);
      var s8 := Push1(s7, 0x04);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x24);
      var s11 := Push1(s10, 0x00);
      assert s11.Peek(2) == 0xbc0;
      assert s11.Peek(10) == 0x321;
      assert s11.Peek(13) == 0xa63;
      assert s11.Peek(16) == 0x830;
      assert s11.Peek(18) == 0x342;
      assert s11.Peek(22) == 0x175;
      var s12 := Revert(s11);
      // Segment is terminal (Revert, Stop or Return)
      s12
  }

  /** Node 666
    * Segment Id for this node is: 166
    * Starting at 0xbc0
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 4
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s666(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xbc0 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 21

    requires s0.stack[7] == 0x321

    requires s0.stack[10] == 0xa63

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x342

    requires s0.stack[19] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(7) == 0x321;
      assert s1.Peek(10) == 0xa63;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x342;
      assert s1.Peek(19) == 0x175;
      var s2 := Byte(s1);
      var s3 := Push1(s2, 0xf8);
      var s4 := Shl(s3);
      var s5 := Dup3(s4);
      var s6 := Dup3(s5);
      var s7 := Dup2(s6);
      var s8 := MLoad(s7);
      var s9 := Dup2(s8);
      var s10 := Lt(s9);
      var s11 := Push2(s10, 0x0bd6);
      assert s11.Peek(0) == 0xbd6;
      assert s11.Peek(10) == 0x321;
      assert s11.Peek(13) == 0xa63;
      assert s11.Peek(16) == 0x830;
      assert s11.Peek(18) == 0x342;
      assert s11.Peek(22) == 0x175;
      var s12 := JumpI(s11);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s11.stack[1] > 0 then
        ExecuteFromCFGNode_s669(s12, gas - 1)
      else
        ExecuteFromCFGNode_s667(s12, gas - 1)
  }

  /** Node 667
    * Segment Id for this node is: 167
    * Starting at 0xbcf
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s667(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xbcf as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 22

    requires s0.stack[8] == 0x321

    requires s0.stack[11] == 0xa63

    requires s0.stack[14] == 0x830

    requires s0.stack[16] == 0x342

    requires s0.stack[20] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0bd6);
      assert s1.Peek(0) == 0xbd6;
      assert s1.Peek(9) == 0x321;
      assert s1.Peek(12) == 0xa63;
      assert s1.Peek(15) == 0x830;
      assert s1.Peek(17) == 0x342;
      assert s1.Peek(21) == 0x175;
      var s2 := Push2(s1, 0x0ef8);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s668(s3, gas - 1)
  }

  /** Node 668
    * Segment Id for this node is: 225
    * Starting at 0xef8
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s668(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xef8 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 23

    requires s0.stack[0] == 0xbd6

    requires s0.stack[9] == 0x321

    requires s0.stack[12] == 0xa63

    requires s0.stack[15] == 0x830

    requires s0.stack[17] == 0x342

    requires s0.stack[21] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0xbd6;
      assert s1.Peek(9) == 0x321;
      assert s1.Peek(12) == 0xa63;
      assert s1.Peek(15) == 0x830;
      assert s1.Peek(17) == 0x342;
      assert s1.Peek(21) == 0x175;
      var s2 := Push4(s1, 0x4e487b71);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x32);
      var s8 := Push1(s7, 0x04);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x24);
      var s11 := Push1(s10, 0x00);
      assert s11.Peek(2) == 0xbd6;
      assert s11.Peek(11) == 0x321;
      assert s11.Peek(14) == 0xa63;
      assert s11.Peek(17) == 0x830;
      assert s11.Peek(19) == 0x342;
      assert s11.Peek(23) == 0x175;
      var s12 := Revert(s11);
      // Segment is terminal (Revert, Stop or Return)
      s12
  }

  /** Node 669
    * Segment Id for this node is: 168
    * Starting at 0xbd6
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 8
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: -1
    * Net Capacity Effect: +1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s669(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xbd6 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 22

    requires s0.stack[8] == 0x321

    requires s0.stack[11] == 0xa63

    requires s0.stack[14] == 0x830

    requires s0.stack[16] == 0x342

    requires s0.stack[20] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(8) == 0x321;
      assert s1.Peek(11) == 0xa63;
      assert s1.Peek(14) == 0x830;
      assert s1.Peek(16) == 0x342;
      assert s1.Peek(20) == 0x175;
      var s2 := Push1(s1, 0x20);
      var s3 := Add(s2);
      var s4 := Add(s3);
      var s5 := Swap1(s4);
      var s6 := Push1(s5, 0x01);
      var s7 := Push1(s6, 0x01);
      var s8 := Push1(s7, 0xf8);
      var s9 := Shl(s8);
      var s10 := Sub(s9);
      var s11 := Not(s10);
      assert s11.Peek(8) == 0x321;
      assert s11.Peek(11) == 0xa63;
      assert s11.Peek(14) == 0x830;
      assert s11.Peek(16) == 0x342;
      assert s11.Peek(20) == 0x175;
      var s12 := And(s11);
      var s13 := Swap1(s12);
      var s14 := Dup2(s13);
      var s15 := Push1(s14, 0x00);
      var s16 := Byte(s15);
      var s17 := Swap1(s16);
      var s18 := MStore8(s17);
      var s19 := Pop(s18);
      var s20 := Push1(s19, 0x04);
      var s21 := Swap5(s20);
      assert s21.Peek(6) == 0x321;
      assert s21.Peek(9) == 0xa63;
      assert s21.Peek(12) == 0x830;
      assert s21.Peek(14) == 0x342;
      assert s21.Peek(18) == 0x175;
      var s22 := Swap1(s21);
      var s23 := Swap5(s22);
      var s24 := Shr(s23);
      var s25 := Swap4(s24);
      var s26 := Push2(s25, 0x0bfd);
      var s27 := Dup2(s26);
      var s28 := Push2(s27, 0x0f0e);
      var s29 := Jump(s28);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s670(s29, gas - 1)
  }

  /** Node 670
    * Segment Id for this node is: 226
    * Starting at 0xf0e
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s670(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xf0e as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 21

    requires s0.stack[1] == 0xbfd

    requires s0.stack[7] == 0x321

    requires s0.stack[10] == 0xa63

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x342

    requires s0.stack[19] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(1) == 0xbfd;
      assert s1.Peek(7) == 0x321;
      assert s1.Peek(10) == 0xa63;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x342;
      assert s1.Peek(19) == 0x175;
      var s2 := Push1(s1, 0x00);
      var s3 := Dup2(s2);
      var s4 := Push2(s3, 0x0f1d);
      var s5 := JumpI(s4);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s4.stack[1] > 0 then
        ExecuteFromCFGNode_s673(s5, gas - 1)
      else
        ExecuteFromCFGNode_s671(s5, gas - 1)
  }

  /** Node 671
    * Segment Id for this node is: 227
    * Starting at 0xf16
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s671(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xf16 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 22

    requires s0.stack[2] == 0xbfd

    requires s0.stack[8] == 0x321

    requires s0.stack[11] == 0xa63

    requires s0.stack[14] == 0x830

    requires s0.stack[16] == 0x342

    requires s0.stack[20] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0f1d);
      assert s1.Peek(0) == 0xf1d;
      assert s1.Peek(3) == 0xbfd;
      assert s1.Peek(9) == 0x321;
      assert s1.Peek(12) == 0xa63;
      assert s1.Peek(15) == 0x830;
      assert s1.Peek(17) == 0x342;
      assert s1.Peek(21) == 0x175;
      var s2 := Push2(s1, 0x0d85);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s672(s3, gas - 1)
  }

  /** Node 672
    * Segment Id for this node is: 202
    * Starting at 0xd85
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s672(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xd85 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 23

    requires s0.stack[0] == 0xf1d

    requires s0.stack[3] == 0xbfd

    requires s0.stack[9] == 0x321

    requires s0.stack[12] == 0xa63

    requires s0.stack[15] == 0x830

    requires s0.stack[17] == 0x342

    requires s0.stack[21] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0xf1d;
      assert s1.Peek(3) == 0xbfd;
      assert s1.Peek(9) == 0x321;
      assert s1.Peek(12) == 0xa63;
      assert s1.Peek(15) == 0x830;
      assert s1.Peek(17) == 0x342;
      assert s1.Peek(21) == 0x175;
      var s2 := Push4(s1, 0x4e487b71);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x11);
      var s8 := Push1(s7, 0x04);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x24);
      var s11 := Push1(s10, 0x00);
      assert s11.Peek(2) == 0xf1d;
      assert s11.Peek(5) == 0xbfd;
      assert s11.Peek(11) == 0x321;
      assert s11.Peek(14) == 0xa63;
      assert s11.Peek(17) == 0x830;
      assert s11.Peek(19) == 0x342;
      assert s11.Peek(23) == 0x175;
      var s12 := Revert(s11);
      // Segment is terminal (Revert, Stop or Return)
      s12
  }

  /** Node 673
    * Segment Id for this node is: 228
    * Starting at 0xf1d
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 3
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -2
    * Net Capacity Effect: +2
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s673(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xf1d as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 22

    requires s0.stack[2] == 0xbfd

    requires s0.stack[8] == 0x321

    requires s0.stack[11] == 0xa63

    requires s0.stack[14] == 0x830

    requires s0.stack[16] == 0x342

    requires s0.stack[20] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0xbfd;
      assert s1.Peek(8) == 0x321;
      assert s1.Peek(11) == 0xa63;
      assert s1.Peek(14) == 0x830;
      assert s1.Peek(16) == 0x342;
      assert s1.Peek(20) == 0x175;
      var s2 := Pop(s1);
      var s3 := Push1(s2, 0x00);
      var s4 := Not(s3);
      var s5 := Add(s4);
      var s6 := Swap1(s5);
      var s7 := Jump(s6);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s674(s7, gas - 1)
  }

  /** Node 674
    * Segment Id for this node is: 169
    * Starting at 0xbfd
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -1
    * Net Capacity Effect: +1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s674(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xbfd as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 20

    requires s0.stack[6] == 0x321

    requires s0.stack[9] == 0xa63

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x342

    requires s0.stack[18] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(6) == 0x321;
      assert s1.Peek(9) == 0xa63;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x342;
      assert s1.Peek(18) == 0x175;
      var s2 := Swap1(s1);
      var s3 := Pop(s2);
      var s4 := Push2(s3, 0x0b8f);
      var s5 := Jump(s4);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s662(s5, gas - 1)
  }

  /** Node 675
    * Segment Id for this node is: 170
    * Starting at 0xc04
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 5
    * Minimum capacity for this segment to prevent stack overflow: 1
    * Net Stack Effect: -1
    * Net Capacity Effect: +1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s675(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xc04 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 19

    requires s0.stack[5] == 0x321

    requires s0.stack[8] == 0xa63

    requires s0.stack[11] == 0x830

    requires s0.stack[13] == 0x342

    requires s0.stack[17] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(5) == 0x321;
      assert s1.Peek(8) == 0xa63;
      assert s1.Peek(11) == 0x830;
      assert s1.Peek(13) == 0x342;
      assert s1.Peek(17) == 0x175;
      var s2 := Pop(s1);
      var s3 := Dup4(s2);
      var s4 := IsZero(s3);
      var s5 := Push2(s4, 0x0c53);
      var s6 := JumpI(s5);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s5.stack[1] > 0 then
        ExecuteFromCFGNode_s678(s6, gas - 1)
      else
        ExecuteFromCFGNode_s676(s6, gas - 1)
  }

  /** Node 676
    * Segment Id for this node is: 171
    * Starting at 0xc0c
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s676(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xc0c as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 18

    requires s0.stack[4] == 0x321

    requires s0.stack[7] == 0xa63

    requires s0.stack[10] == 0x830

    requires s0.stack[12] == 0x342

    requires s0.stack[16] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push1(s0, 0x40);
      assert s1.Peek(5) == 0x321;
      assert s1.Peek(8) == 0xa63;
      assert s1.Peek(11) == 0x830;
      assert s1.Peek(13) == 0x342;
      assert s1.Peek(17) == 0x175;
      var s2 := MLoad(s1);
      var s3 := Push3(s2, 0x461bcd);
      var s4 := Push1(s3, 0xe5);
      var s5 := Shl(s4);
      var s6 := Dup2(s5);
      var s7 := MStore(s6);
      var s8 := Push1(s7, 0x20);
      var s9 := Push1(s8, 0x04);
      var s10 := Dup3(s9);
      var s11 := Add(s10);
      assert s11.Peek(7) == 0x321;
      assert s11.Peek(10) == 0xa63;
      assert s11.Peek(13) == 0x830;
      assert s11.Peek(15) == 0x342;
      assert s11.Peek(19) == 0x175;
      var s12 := Dup2(s11);
      var s13 := Swap1(s12);
      var s14 := MStore(s13);
      var s15 := Push1(s14, 0x24);
      var s16 := Dup3(s15);
      var s17 := Add(s16);
      var s18 := MStore(s17);
      var s19 := Push32(s18, 0x537472696e67733a20686578206c656e67746820696e73756666696369656e74);
      var s20 := Push1(s19, 0x44);
      var s21 := Dup3(s20);
      assert s21.Peek(8) == 0x321;
      assert s21.Peek(11) == 0xa63;
      assert s21.Peek(14) == 0x830;
      assert s21.Peek(16) == 0x342;
      assert s21.Peek(20) == 0x175;
      var s22 := Add(s21);
      var s23 := MStore(s22);
      var s24 := Push1(s23, 0x64);
      var s25 := Add(s24);
      var s26 := Push2(s25, 0x0391);
      var s27 := Jump(s26);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s677(s27, gas - 1)
  }

  /** Node 677
    * Segment Id for this node is: 85
    * Starting at 0x391
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: -1
    * Net Capacity Effect: +1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s677(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x391 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 19

    requires s0.stack[5] == 0x321

    requires s0.stack[8] == 0xa63

    requires s0.stack[11] == 0x830

    requires s0.stack[13] == 0x342

    requires s0.stack[17] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(5) == 0x321;
      assert s1.Peek(8) == 0xa63;
      assert s1.Peek(11) == 0x830;
      assert s1.Peek(13) == 0x342;
      assert s1.Peek(17) == 0x175;
      var s2 := Push1(s1, 0x40);
      var s3 := MLoad(s2);
      var s4 := Dup1(s3);
      var s5 := Swap2(s4);
      var s6 := Sub(s5);
      var s7 := Swap1(s6);
      var s8 := Revert(s7);
      // Segment is terminal (Revert, Stop or Return)
      s8
  }

  /** Node 678
    * Segment Id for this node is: 172
    * Starting at 0xc53
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 5
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -4
    * Net Capacity Effect: +4
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s678(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xc53 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 18

    requires s0.stack[4] == 0x321

    requires s0.stack[7] == 0xa63

    requires s0.stack[10] == 0x830

    requires s0.stack[12] == 0x342

    requires s0.stack[16] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(4) == 0x321;
      assert s1.Peek(7) == 0xa63;
      assert s1.Peek(10) == 0x830;
      assert s1.Peek(12) == 0x342;
      assert s1.Peek(16) == 0x175;
      var s2 := Swap4(s1);
      var s3 := Swap3(s2);
      var s4 := Pop(s3);
      var s5 := Pop(s4);
      var s6 := Pop(s5);
      var s7 := Jump(s6);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s679(s7, gas - 1)
  }

  /** Node 679
    * Segment Id for this node is: 79
    * Starting at 0x321
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 4
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -3
    * Net Capacity Effect: +3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s679(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x321 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 14

    requires s0.stack[3] == 0xa63

    requires s0.stack[6] == 0x830

    requires s0.stack[8] == 0x342

    requires s0.stack[12] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0xa63;
      assert s1.Peek(6) == 0x830;
      assert s1.Peek(8) == 0x342;
      assert s1.Peek(12) == 0x175;
      var s2 := Swap3(s1);
      var s3 := Swap2(s2);
      var s4 := Pop(s3);
      var s5 := Pop(s4);
      var s6 := Jump(s5);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s680(s6, gas - 1)
  }

  /** Node 680
    * Segment Id for this node is: 146
    * Starting at 0xa63
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 3
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +3
    * Net Capacity Effect: -3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s680(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xa63 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 11

    requires s0.stack[3] == 0x830

    requires s0.stack[5] == 0x342

    requires s0.stack[9] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0x830;
      assert s1.Peek(5) == 0x342;
      assert s1.Peek(9) == 0x175;
      var s2 := Push2(s1, 0x0a6e);
      var s3 := Dup4(s2);
      var s4 := Push1(s3, 0x20);
      var s5 := Push2(s4, 0x0ab7);
      var s6 := Jump(s5);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s681(s6, gas - 1)
  }

  /** Node 681
    * Segment Id for this node is: 150
    * Starting at 0xab7
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 6
    * Net Stack Effect: +5
    * Net Capacity Effect: -5
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s681(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xab7 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 14

    requires s0.stack[2] == 0xa6e

    requires s0.stack[6] == 0x830

    requires s0.stack[8] == 0x342

    requires s0.stack[12] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0xa6e;
      assert s1.Peek(6) == 0x830;
      assert s1.Peek(8) == 0x342;
      assert s1.Peek(12) == 0x175;
      var s2 := Push1(s1, 0x60);
      var s3 := Push1(s2, 0x00);
      var s4 := Push2(s3, 0x0ac6);
      var s5 := Dup4(s4);
      var s6 := Push1(s5, 0x02);
      var s7 := Push2(s6, 0x0eb8);
      var s8 := Jump(s7);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s682(s8, gas - 1)
  }

  /** Node 682
    * Segment Id for this node is: 220
    * Starting at 0xeb8
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s682(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xeb8 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 19

    requires s0.stack[2] == 0xac6

    requires s0.stack[7] == 0xa6e

    requires s0.stack[11] == 0x830

    requires s0.stack[13] == 0x342

    requires s0.stack[17] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0xac6;
      assert s1.Peek(7) == 0xa6e;
      assert s1.Peek(11) == 0x830;
      assert s1.Peek(13) == 0x342;
      assert s1.Peek(17) == 0x175;
      var s2 := Dup1(s1);
      var s3 := Dup3(s2);
      var s4 := Mul(s3);
      var s5 := Dup2(s4);
      var s6 := IsZero(s5);
      var s7 := Dup3(s6);
      var s8 := Dup3(s7);
      var s9 := Div(s8);
      var s10 := Dup5(s9);
      var s11 := Eq(s10);
      assert s11.Peek(5) == 0xac6;
      assert s11.Peek(10) == 0xa6e;
      assert s11.Peek(14) == 0x830;
      assert s11.Peek(16) == 0x342;
      assert s11.Peek(20) == 0x175;
      var s12 := Or(s11);
      var s13 := Push2(s12, 0x0321);
      var s14 := JumpI(s13);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s13.stack[1] > 0 then
        ExecuteFromCFGNode_s685(s14, gas - 1)
      else
        ExecuteFromCFGNode_s683(s14, gas - 1)
  }

  /** Node 683
    * Segment Id for this node is: 221
    * Starting at 0xec8
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s683(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xec8 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 20

    requires s0.stack[3] == 0xac6

    requires s0.stack[8] == 0xa6e

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x342

    requires s0.stack[18] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0321);
      assert s1.Peek(0) == 0x321;
      assert s1.Peek(4) == 0xac6;
      assert s1.Peek(9) == 0xa6e;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x342;
      assert s1.Peek(19) == 0x175;
      var s2 := Push2(s1, 0x0d85);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s684(s3, gas - 1)
  }

  /** Node 684
    * Segment Id for this node is: 202
    * Starting at 0xd85
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s684(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xd85 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 21

    requires s0.stack[0] == 0x321

    requires s0.stack[4] == 0xac6

    requires s0.stack[9] == 0xa6e

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x342

    requires s0.stack[19] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0x321;
      assert s1.Peek(4) == 0xac6;
      assert s1.Peek(9) == 0xa6e;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x342;
      assert s1.Peek(19) == 0x175;
      var s2 := Push4(s1, 0x4e487b71);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x11);
      var s8 := Push1(s7, 0x04);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x24);
      var s11 := Push1(s10, 0x00);
      assert s11.Peek(2) == 0x321;
      assert s11.Peek(6) == 0xac6;
      assert s11.Peek(11) == 0xa6e;
      assert s11.Peek(15) == 0x830;
      assert s11.Peek(17) == 0x342;
      assert s11.Peek(21) == 0x175;
      var s12 := Revert(s11);
      // Segment is terminal (Revert, Stop or Return)
      s12
  }

  /** Node 685
    * Segment Id for this node is: 79
    * Starting at 0x321
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 4
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -3
    * Net Capacity Effect: +3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s685(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x321 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 20

    requires s0.stack[3] == 0xac6

    requires s0.stack[8] == 0xa6e

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x342

    requires s0.stack[18] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0xac6;
      assert s1.Peek(8) == 0xa6e;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x342;
      assert s1.Peek(18) == 0x175;
      var s2 := Swap3(s1);
      var s3 := Swap2(s2);
      var s4 := Pop(s3);
      var s5 := Pop(s4);
      var s6 := Jump(s5);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s686(s6, gas - 1)
  }

  /** Node 686
    * Segment Id for this node is: 151
    * Starting at 0xac6
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +2
    * Net Capacity Effect: -2
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s686(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xac6 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 17

    requires s0.stack[5] == 0xa6e

    requires s0.stack[9] == 0x830

    requires s0.stack[11] == 0x342

    requires s0.stack[15] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(5) == 0xa6e;
      assert s1.Peek(9) == 0x830;
      assert s1.Peek(11) == 0x342;
      assert s1.Peek(15) == 0x175;
      var s2 := Push2(s1, 0x0ad1);
      var s3 := Swap1(s2);
      var s4 := Push1(s3, 0x02);
      var s5 := Push2(s4, 0x0ecf);
      var s6 := Jump(s5);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s687(s6, gas - 1)
  }

  /** Node 687
    * Segment Id for this node is: 222
    * Starting at 0xecf
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s687(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xecf as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 19

    requires s0.stack[2] == 0xad1

    requires s0.stack[7] == 0xa6e

    requires s0.stack[11] == 0x830

    requires s0.stack[13] == 0x342

    requires s0.stack[17] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0xad1;
      assert s1.Peek(7) == 0xa6e;
      assert s1.Peek(11) == 0x830;
      assert s1.Peek(13) == 0x342;
      assert s1.Peek(17) == 0x175;
      var s2 := Dup1(s1);
      var s3 := Dup3(s2);
      var s4 := Add(s3);
      var s5 := Dup1(s4);
      var s6 := Dup3(s5);
      var s7 := Gt(s6);
      var s8 := IsZero(s7);
      var s9 := Push2(s8, 0x0321);
      var s10 := JumpI(s9);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s9.stack[1] > 0 then
        ExecuteFromCFGNode_s690(s10, gas - 1)
      else
        ExecuteFromCFGNode_s688(s10, gas - 1)
  }

  /** Node 688
    * Segment Id for this node is: 223
    * Starting at 0xedb
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s688(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xedb as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 20

    requires s0.stack[3] == 0xad1

    requires s0.stack[8] == 0xa6e

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x342

    requires s0.stack[18] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0321);
      assert s1.Peek(0) == 0x321;
      assert s1.Peek(4) == 0xad1;
      assert s1.Peek(9) == 0xa6e;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x342;
      assert s1.Peek(19) == 0x175;
      var s2 := Push2(s1, 0x0d85);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s689(s3, gas - 1)
  }

  /** Node 689
    * Segment Id for this node is: 202
    * Starting at 0xd85
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s689(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xd85 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 21

    requires s0.stack[0] == 0x321

    requires s0.stack[4] == 0xad1

    requires s0.stack[9] == 0xa6e

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x342

    requires s0.stack[19] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0x321;
      assert s1.Peek(4) == 0xad1;
      assert s1.Peek(9) == 0xa6e;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x342;
      assert s1.Peek(19) == 0x175;
      var s2 := Push4(s1, 0x4e487b71);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x11);
      var s8 := Push1(s7, 0x04);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x24);
      var s11 := Push1(s10, 0x00);
      assert s11.Peek(2) == 0x321;
      assert s11.Peek(6) == 0xad1;
      assert s11.Peek(11) == 0xa6e;
      assert s11.Peek(15) == 0x830;
      assert s11.Peek(17) == 0x342;
      assert s11.Peek(21) == 0x175;
      var s12 := Revert(s11);
      // Segment is terminal (Revert, Stop or Return)
      s12
  }

  /** Node 690
    * Segment Id for this node is: 79
    * Starting at 0x321
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 4
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -3
    * Net Capacity Effect: +3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s690(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x321 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 20

    requires s0.stack[3] == 0xad1

    requires s0.stack[8] == 0xa6e

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x342

    requires s0.stack[18] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0xad1;
      assert s1.Peek(8) == 0xa6e;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x342;
      assert s1.Peek(18) == 0x175;
      var s2 := Swap3(s1);
      var s3 := Swap2(s2);
      var s4 := Pop(s3);
      var s5 := Pop(s4);
      var s6 := Jump(s5);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s691(s6, gas - 1)
  }

  /** Node 691
    * Segment Id for this node is: 152
    * Starting at 0xad1
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s691(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xad1 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 17

    requires s0.stack[5] == 0xa6e

    requires s0.stack[9] == 0x830

    requires s0.stack[11] == 0x342

    requires s0.stack[15] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(5) == 0xa6e;
      assert s1.Peek(9) == 0x830;
      assert s1.Peek(11) == 0x342;
      assert s1.Peek(15) == 0x175;
      var s2 := Push8(s1, 0xffffffffffffffff);
      var s3 := Dup2(s2);
      var s4 := Gt(s3);
      var s5 := IsZero(s4);
      var s6 := Push2(s5, 0x0ae9);
      var s7 := JumpI(s6);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s6.stack[1] > 0 then
        ExecuteFromCFGNode_s694(s7, gas - 1)
      else
        ExecuteFromCFGNode_s692(s7, gas - 1)
  }

  /** Node 692
    * Segment Id for this node is: 153
    * Starting at 0xae2
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s692(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xae2 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 17

    requires s0.stack[5] == 0xa6e

    requires s0.stack[9] == 0x830

    requires s0.stack[11] == 0x342

    requires s0.stack[15] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0ae9);
      assert s1.Peek(0) == 0xae9;
      assert s1.Peek(6) == 0xa6e;
      assert s1.Peek(10) == 0x830;
      assert s1.Peek(12) == 0x342;
      assert s1.Peek(16) == 0x175;
      var s2 := Push2(s1, 0x0ee2);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s693(s3, gas - 1)
  }

  /** Node 693
    * Segment Id for this node is: 224
    * Starting at 0xee2
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s693(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xee2 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 18

    requires s0.stack[0] == 0xae9

    requires s0.stack[6] == 0xa6e

    requires s0.stack[10] == 0x830

    requires s0.stack[12] == 0x342

    requires s0.stack[16] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0xae9;
      assert s1.Peek(6) == 0xa6e;
      assert s1.Peek(10) == 0x830;
      assert s1.Peek(12) == 0x342;
      assert s1.Peek(16) == 0x175;
      var s2 := Push4(s1, 0x4e487b71);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x41);
      var s8 := Push1(s7, 0x04);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x24);
      var s11 := Push1(s10, 0x00);
      assert s11.Peek(2) == 0xae9;
      assert s11.Peek(8) == 0xa6e;
      assert s11.Peek(12) == 0x830;
      assert s11.Peek(14) == 0x342;
      assert s11.Peek(18) == 0x175;
      var s12 := Revert(s11);
      // Segment is terminal (Revert, Stop or Return)
      s12
  }

  /** Node 694
    * Segment Id for this node is: 154
    * Starting at 0xae9
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s694(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xae9 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 17

    requires s0.stack[5] == 0xa6e

    requires s0.stack[9] == 0x830

    requires s0.stack[11] == 0x342

    requires s0.stack[15] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(5) == 0xa6e;
      assert s1.Peek(9) == 0x830;
      assert s1.Peek(11) == 0x342;
      assert s1.Peek(15) == 0x175;
      var s2 := Push1(s1, 0x40);
      var s3 := MLoad(s2);
      var s4 := Swap1(s3);
      var s5 := Dup1(s4);
      var s6 := Dup3(s5);
      var s7 := MStore(s6);
      var s8 := Dup1(s7);
      var s9 := Push1(s8, 0x1f);
      var s10 := Add(s9);
      var s11 := Push1(s10, 0x1f);
      assert s11.Peek(8) == 0xa6e;
      assert s11.Peek(12) == 0x830;
      assert s11.Peek(14) == 0x342;
      assert s11.Peek(18) == 0x175;
      var s12 := Not(s11);
      var s13 := And(s12);
      var s14 := Push1(s13, 0x20);
      var s15 := Add(s14);
      var s16 := Dup3(s15);
      var s17 := Add(s16);
      var s18 := Push1(s17, 0x40);
      var s19 := MStore(s18);
      var s20 := Dup1(s19);
      var s21 := IsZero(s20);
      assert s21.Peek(7) == 0xa6e;
      assert s21.Peek(11) == 0x830;
      assert s21.Peek(13) == 0x342;
      assert s21.Peek(17) == 0x175;
      var s22 := Push2(s21, 0x0b13);
      var s23 := JumpI(s22);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s22.stack[1] > 0 then
        ExecuteFromCFGNode_s696(s23, gas - 1)
      else
        ExecuteFromCFGNode_s695(s23, gas - 1)
  }

  /** Node 695
    * Segment Id for this node is: 155
    * Starting at 0xb07
    * Segment type is: CONT Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 5
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s695(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xb07 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 18

    requires s0.stack[6] == 0xa6e

    requires s0.stack[10] == 0x830

    requires s0.stack[12] == 0x342

    requires s0.stack[16] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push1(s0, 0x20);
      assert s1.Peek(7) == 0xa6e;
      assert s1.Peek(11) == 0x830;
      assert s1.Peek(13) == 0x342;
      assert s1.Peek(17) == 0x175;
      var s2 := Dup3(s1);
      var s3 := Add(s2);
      var s4 := Dup2(s3);
      var s5 := Dup1(s4);
      var s6 := CallDataSize(s5);
      var s7 := Dup4(s6);
      var s8 := CallDataCopy(s7);
      var s9 := Add(s8);
      var s10 := Swap1(s9);
      var s11 := Pop(s10);
      //  Go to the next instruction at pc + 1
      ExecuteFromCFGNode_s696(s11, gas - 1)
  }

  /** Node 696
    * Segment Id for this node is: 156
    * Starting at 0xb13
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 3
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s696(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xb13 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 18

    requires s0.stack[6] == 0xa6e

    requires s0.stack[10] == 0x830

    requires s0.stack[12] == 0x342

    requires s0.stack[16] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(6) == 0xa6e;
      assert s1.Peek(10) == 0x830;
      assert s1.Peek(12) == 0x342;
      assert s1.Peek(16) == 0x175;
      var s2 := Pop(s1);
      var s3 := Swap1(s2);
      var s4 := Pop(s3);
      var s5 := Push1(s4, 0x03);
      var s6 := Push1(s5, 0xfc);
      var s7 := Shl(s6);
      var s8 := Dup2(s7);
      var s9 := Push1(s8, 0x00);
      var s10 := Dup2(s9);
      var s11 := MLoad(s10);
      assert s11.Peek(8) == 0xa6e;
      assert s11.Peek(12) == 0x830;
      assert s11.Peek(14) == 0x342;
      assert s11.Peek(18) == 0x175;
      var s12 := Dup2(s11);
      var s13 := Lt(s12);
      var s14 := Push2(s13, 0x0b2e);
      var s15 := JumpI(s14);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s14.stack[1] > 0 then
        ExecuteFromCFGNode_s699(s15, gas - 1)
      else
        ExecuteFromCFGNode_s697(s15, gas - 1)
  }

  /** Node 697
    * Segment Id for this node is: 157
    * Starting at 0xb27
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s697(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xb27 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 19

    requires s0.stack[7] == 0xa6e

    requires s0.stack[11] == 0x830

    requires s0.stack[13] == 0x342

    requires s0.stack[17] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0b2e);
      assert s1.Peek(0) == 0xb2e;
      assert s1.Peek(8) == 0xa6e;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x342;
      assert s1.Peek(18) == 0x175;
      var s2 := Push2(s1, 0x0ef8);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s698(s3, gas - 1)
  }

  /** Node 698
    * Segment Id for this node is: 225
    * Starting at 0xef8
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s698(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xef8 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 20

    requires s0.stack[0] == 0xb2e

    requires s0.stack[8] == 0xa6e

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x342

    requires s0.stack[18] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0xb2e;
      assert s1.Peek(8) == 0xa6e;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x342;
      assert s1.Peek(18) == 0x175;
      var s2 := Push4(s1, 0x4e487b71);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x32);
      var s8 := Push1(s7, 0x04);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x24);
      var s11 := Push1(s10, 0x00);
      assert s11.Peek(2) == 0xb2e;
      assert s11.Peek(10) == 0xa6e;
      assert s11.Peek(14) == 0x830;
      assert s11.Peek(16) == 0x342;
      assert s11.Peek(20) == 0x175;
      var s12 := Revert(s11);
      // Segment is terminal (Revert, Stop or Return)
      s12
  }

  /** Node 699
    * Segment Id for this node is: 158
    * Starting at 0xb2e
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 4
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s699(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xb2e as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 19

    requires s0.stack[7] == 0xa6e

    requires s0.stack[11] == 0x830

    requires s0.stack[13] == 0x342

    requires s0.stack[17] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(7) == 0xa6e;
      assert s1.Peek(11) == 0x830;
      assert s1.Peek(13) == 0x342;
      assert s1.Peek(17) == 0x175;
      var s2 := Push1(s1, 0x20);
      var s3 := Add(s2);
      var s4 := Add(s3);
      var s5 := Swap1(s4);
      var s6 := Push1(s5, 0x01);
      var s7 := Push1(s6, 0x01);
      var s8 := Push1(s7, 0xf8);
      var s9 := Shl(s8);
      var s10 := Sub(s9);
      var s11 := Not(s10);
      assert s11.Peek(7) == 0xa6e;
      assert s11.Peek(11) == 0x830;
      assert s11.Peek(13) == 0x342;
      assert s11.Peek(17) == 0x175;
      var s12 := And(s11);
      var s13 := Swap1(s12);
      var s14 := Dup2(s13);
      var s15 := Push1(s14, 0x00);
      var s16 := Byte(s15);
      var s17 := Swap1(s16);
      var s18 := MStore8(s17);
      var s19 := Pop(s18);
      var s20 := Push1(s19, 0x0f);
      var s21 := Push1(s20, 0xfb);
      assert s21.Peek(6) == 0xa6e;
      assert s21.Peek(10) == 0x830;
      assert s21.Peek(12) == 0x342;
      assert s21.Peek(16) == 0x175;
      var s22 := Shl(s21);
      var s23 := Dup2(s22);
      var s24 := Push1(s23, 0x01);
      var s25 := Dup2(s24);
      var s26 := MLoad(s25);
      var s27 := Dup2(s26);
      var s28 := Lt(s27);
      var s29 := Push2(s28, 0x0b5d);
      var s30 := JumpI(s29);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s29.stack[1] > 0 then
        ExecuteFromCFGNode_s702(s30, gas - 1)
      else
        ExecuteFromCFGNode_s700(s30, gas - 1)
  }

  /** Node 700
    * Segment Id for this node is: 159
    * Starting at 0xb56
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s700(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xb56 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 19

    requires s0.stack[7] == 0xa6e

    requires s0.stack[11] == 0x830

    requires s0.stack[13] == 0x342

    requires s0.stack[17] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0b5d);
      assert s1.Peek(0) == 0xb5d;
      assert s1.Peek(8) == 0xa6e;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x342;
      assert s1.Peek(18) == 0x175;
      var s2 := Push2(s1, 0x0ef8);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s701(s3, gas - 1)
  }

  /** Node 701
    * Segment Id for this node is: 225
    * Starting at 0xef8
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s701(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xef8 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 20

    requires s0.stack[0] == 0xb5d

    requires s0.stack[8] == 0xa6e

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x342

    requires s0.stack[18] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0xb5d;
      assert s1.Peek(8) == 0xa6e;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x342;
      assert s1.Peek(18) == 0x175;
      var s2 := Push4(s1, 0x4e487b71);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x32);
      var s8 := Push1(s7, 0x04);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x24);
      var s11 := Push1(s10, 0x00);
      assert s11.Peek(2) == 0xb5d;
      assert s11.Peek(10) == 0xa6e;
      assert s11.Peek(14) == 0x830;
      assert s11.Peek(16) == 0x342;
      assert s11.Peek(20) == 0x175;
      var s12 := Revert(s11);
      // Segment is terminal (Revert, Stop or Return)
      s12
  }

  /** Node 702
    * Segment Id for this node is: 160
    * Starting at 0xb5d
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 6
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s702(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xb5d as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 19

    requires s0.stack[7] == 0xa6e

    requires s0.stack[11] == 0x830

    requires s0.stack[13] == 0x342

    requires s0.stack[17] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(7) == 0xa6e;
      assert s1.Peek(11) == 0x830;
      assert s1.Peek(13) == 0x342;
      assert s1.Peek(17) == 0x175;
      var s2 := Push1(s1, 0x20);
      var s3 := Add(s2);
      var s4 := Add(s3);
      var s5 := Swap1(s4);
      var s6 := Push1(s5, 0x01);
      var s7 := Push1(s6, 0x01);
      var s8 := Push1(s7, 0xf8);
      var s9 := Shl(s8);
      var s10 := Sub(s9);
      var s11 := Not(s10);
      assert s11.Peek(7) == 0xa6e;
      assert s11.Peek(11) == 0x830;
      assert s11.Peek(13) == 0x342;
      assert s11.Peek(17) == 0x175;
      var s12 := And(s11);
      var s13 := Swap1(s12);
      var s14 := Dup2(s13);
      var s15 := Push1(s14, 0x00);
      var s16 := Byte(s15);
      var s17 := Swap1(s16);
      var s18 := MStore8(s17);
      var s19 := Pop(s18);
      var s20 := Push1(s19, 0x00);
      var s21 := Push2(s20, 0x0b81);
      assert s21.Peek(0) == 0xb81;
      assert s21.Peek(6) == 0xa6e;
      assert s21.Peek(10) == 0x830;
      assert s21.Peek(12) == 0x342;
      assert s21.Peek(16) == 0x175;
      var s22 := Dup5(s21);
      var s23 := Push1(s22, 0x02);
      var s24 := Push2(s23, 0x0eb8);
      var s25 := Jump(s24);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s703(s25, gas - 1)
  }

  /** Node 703
    * Segment Id for this node is: 220
    * Starting at 0xeb8
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s703(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xeb8 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 20

    requires s0.stack[2] == 0xb81

    requires s0.stack[8] == 0xa6e

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x342

    requires s0.stack[18] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0xb81;
      assert s1.Peek(8) == 0xa6e;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x342;
      assert s1.Peek(18) == 0x175;
      var s2 := Dup1(s1);
      var s3 := Dup3(s2);
      var s4 := Mul(s3);
      var s5 := Dup2(s4);
      var s6 := IsZero(s5);
      var s7 := Dup3(s6);
      var s8 := Dup3(s7);
      var s9 := Div(s8);
      var s10 := Dup5(s9);
      var s11 := Eq(s10);
      assert s11.Peek(5) == 0xb81;
      assert s11.Peek(11) == 0xa6e;
      assert s11.Peek(15) == 0x830;
      assert s11.Peek(17) == 0x342;
      assert s11.Peek(21) == 0x175;
      var s12 := Or(s11);
      var s13 := Push2(s12, 0x0321);
      var s14 := JumpI(s13);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s13.stack[1] > 0 then
        ExecuteFromCFGNode_s706(s14, gas - 1)
      else
        ExecuteFromCFGNode_s704(s14, gas - 1)
  }

  /** Node 704
    * Segment Id for this node is: 221
    * Starting at 0xec8
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s704(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xec8 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 21

    requires s0.stack[3] == 0xb81

    requires s0.stack[9] == 0xa6e

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x342

    requires s0.stack[19] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0321);
      assert s1.Peek(0) == 0x321;
      assert s1.Peek(4) == 0xb81;
      assert s1.Peek(10) == 0xa6e;
      assert s1.Peek(14) == 0x830;
      assert s1.Peek(16) == 0x342;
      assert s1.Peek(20) == 0x175;
      var s2 := Push2(s1, 0x0d85);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s705(s3, gas - 1)
  }

  /** Node 705
    * Segment Id for this node is: 202
    * Starting at 0xd85
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s705(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xd85 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 22

    requires s0.stack[0] == 0x321

    requires s0.stack[4] == 0xb81

    requires s0.stack[10] == 0xa6e

    requires s0.stack[14] == 0x830

    requires s0.stack[16] == 0x342

    requires s0.stack[20] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0x321;
      assert s1.Peek(4) == 0xb81;
      assert s1.Peek(10) == 0xa6e;
      assert s1.Peek(14) == 0x830;
      assert s1.Peek(16) == 0x342;
      assert s1.Peek(20) == 0x175;
      var s2 := Push4(s1, 0x4e487b71);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x11);
      var s8 := Push1(s7, 0x04);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x24);
      var s11 := Push1(s10, 0x00);
      assert s11.Peek(2) == 0x321;
      assert s11.Peek(6) == 0xb81;
      assert s11.Peek(12) == 0xa6e;
      assert s11.Peek(16) == 0x830;
      assert s11.Peek(18) == 0x342;
      assert s11.Peek(22) == 0x175;
      var s12 := Revert(s11);
      // Segment is terminal (Revert, Stop or Return)
      s12
  }

  /** Node 706
    * Segment Id for this node is: 79
    * Starting at 0x321
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 4
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -3
    * Net Capacity Effect: +3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s706(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x321 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 21

    requires s0.stack[3] == 0xb81

    requires s0.stack[9] == 0xa6e

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x342

    requires s0.stack[19] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0xb81;
      assert s1.Peek(9) == 0xa6e;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x342;
      assert s1.Peek(19) == 0x175;
      var s2 := Swap3(s1);
      var s3 := Swap2(s2);
      var s4 := Pop(s3);
      var s5 := Pop(s4);
      var s6 := Jump(s5);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s707(s6, gas - 1)
  }

  /** Node 707
    * Segment Id for this node is: 161
    * Starting at 0xb81
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +2
    * Net Capacity Effect: -2
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s707(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xb81 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 18

    requires s0.stack[6] == 0xa6e

    requires s0.stack[10] == 0x830

    requires s0.stack[12] == 0x342

    requires s0.stack[16] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(6) == 0xa6e;
      assert s1.Peek(10) == 0x830;
      assert s1.Peek(12) == 0x342;
      assert s1.Peek(16) == 0x175;
      var s2 := Push2(s1, 0x0b8c);
      var s3 := Swap1(s2);
      var s4 := Push1(s3, 0x01);
      var s5 := Push2(s4, 0x0ecf);
      var s6 := Jump(s5);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s708(s6, gas - 1)
  }

  /** Node 708
    * Segment Id for this node is: 222
    * Starting at 0xecf
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s708(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xecf as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 20

    requires s0.stack[2] == 0xb8c

    requires s0.stack[8] == 0xa6e

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x342

    requires s0.stack[18] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0xb8c;
      assert s1.Peek(8) == 0xa6e;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x342;
      assert s1.Peek(18) == 0x175;
      var s2 := Dup1(s1);
      var s3 := Dup3(s2);
      var s4 := Add(s3);
      var s5 := Dup1(s4);
      var s6 := Dup3(s5);
      var s7 := Gt(s6);
      var s8 := IsZero(s7);
      var s9 := Push2(s8, 0x0321);
      var s10 := JumpI(s9);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s9.stack[1] > 0 then
        ExecuteFromCFGNode_s711(s10, gas - 1)
      else
        ExecuteFromCFGNode_s709(s10, gas - 1)
  }

  /** Node 709
    * Segment Id for this node is: 223
    * Starting at 0xedb
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s709(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xedb as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 21

    requires s0.stack[3] == 0xb8c

    requires s0.stack[9] == 0xa6e

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x342

    requires s0.stack[19] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0321);
      assert s1.Peek(0) == 0x321;
      assert s1.Peek(4) == 0xb8c;
      assert s1.Peek(10) == 0xa6e;
      assert s1.Peek(14) == 0x830;
      assert s1.Peek(16) == 0x342;
      assert s1.Peek(20) == 0x175;
      var s2 := Push2(s1, 0x0d85);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s710(s3, gas - 1)
  }

  /** Node 710
    * Segment Id for this node is: 202
    * Starting at 0xd85
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s710(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xd85 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 22

    requires s0.stack[0] == 0x321

    requires s0.stack[4] == 0xb8c

    requires s0.stack[10] == 0xa6e

    requires s0.stack[14] == 0x830

    requires s0.stack[16] == 0x342

    requires s0.stack[20] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0x321;
      assert s1.Peek(4) == 0xb8c;
      assert s1.Peek(10) == 0xa6e;
      assert s1.Peek(14) == 0x830;
      assert s1.Peek(16) == 0x342;
      assert s1.Peek(20) == 0x175;
      var s2 := Push4(s1, 0x4e487b71);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x11);
      var s8 := Push1(s7, 0x04);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x24);
      var s11 := Push1(s10, 0x00);
      assert s11.Peek(2) == 0x321;
      assert s11.Peek(6) == 0xb8c;
      assert s11.Peek(12) == 0xa6e;
      assert s11.Peek(16) == 0x830;
      assert s11.Peek(18) == 0x342;
      assert s11.Peek(22) == 0x175;
      var s12 := Revert(s11);
      // Segment is terminal (Revert, Stop or Return)
      s12
  }

  /** Node 711
    * Segment Id for this node is: 79
    * Starting at 0x321
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 4
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -3
    * Net Capacity Effect: +3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s711(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x321 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 21

    requires s0.stack[3] == 0xb8c

    requires s0.stack[9] == 0xa6e

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x342

    requires s0.stack[19] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0xb8c;
      assert s1.Peek(9) == 0xa6e;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x342;
      assert s1.Peek(19) == 0x175;
      var s2 := Swap3(s1);
      var s3 := Swap2(s2);
      var s4 := Pop(s3);
      var s5 := Pop(s4);
      var s6 := Jump(s5);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s712(s6, gas - 1)
  }

  /** Node 712
    * Segment Id for this node is: 162
    * Starting at 0xb8c
    * Segment type is: CONT Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -1
    * Net Capacity Effect: +1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s712(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xb8c as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 18

    requires s0.stack[6] == 0xa6e

    requires s0.stack[10] == 0x830

    requires s0.stack[12] == 0x342

    requires s0.stack[16] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(6) == 0xa6e;
      assert s1.Peek(10) == 0x830;
      assert s1.Peek(12) == 0x342;
      assert s1.Peek(16) == 0x175;
      var s2 := Swap1(s1);
      var s3 := Pop(s2);
      //  Go to the next instruction at pc + 1
      ExecuteFromCFGNode_s713(s3, gas - 1)
  }

  /** Node 713
    * Segment Id for this node is: 163
    * Starting at 0xb8f
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s713(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xb8f as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 17

    requires s0.stack[5] == 0xa6e

    requires s0.stack[9] == 0x830

    requires s0.stack[11] == 0x342

    requires s0.stack[15] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(5) == 0xa6e;
      assert s1.Peek(9) == 0x830;
      assert s1.Peek(11) == 0x342;
      assert s1.Peek(15) == 0x175;
      var s2 := Push1(s1, 0x01);
      var s3 := Dup2(s2);
      var s4 := Gt(s3);
      var s5 := IsZero(s4);
      var s6 := Push2(s5, 0x0c04);
      var s7 := JumpI(s6);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s6.stack[1] > 0 then
        ExecuteFromCFGNode_s726(s7, gas - 1)
      else
        ExecuteFromCFGNode_s714(s7, gas - 1)
  }

  /** Node 714
    * Segment Id for this node is: 164
    * Starting at 0xb99
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 5
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +2
    * Net Capacity Effect: -2
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s714(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xb99 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 17

    requires s0.stack[5] == 0xa6e

    requires s0.stack[9] == 0x830

    requires s0.stack[11] == 0x342

    requires s0.stack[15] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := PushN(s0, 16, 0x181899199a1a9b1b9c1cb0b131b232b3);
      assert s1.Peek(6) == 0xa6e;
      assert s1.Peek(10) == 0x830;
      assert s1.Peek(12) == 0x342;
      assert s1.Peek(16) == 0x175;
      var s2 := Push1(s1, 0x81);
      var s3 := Shl(s2);
      var s4 := Dup6(s3);
      var s5 := Push1(s4, 0x0f);
      var s6 := And(s5);
      var s7 := Push1(s6, 0x10);
      var s8 := Dup2(s7);
      var s9 := Lt(s8);
      var s10 := Push2(s9, 0x0bc0);
      var s11 := JumpI(s10);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s10.stack[1] > 0 then
        ExecuteFromCFGNode_s717(s11, gas - 1)
      else
        ExecuteFromCFGNode_s715(s11, gas - 1)
  }

  /** Node 715
    * Segment Id for this node is: 165
    * Starting at 0xbb9
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s715(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xbb9 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 19

    requires s0.stack[7] == 0xa6e

    requires s0.stack[11] == 0x830

    requires s0.stack[13] == 0x342

    requires s0.stack[17] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0bc0);
      assert s1.Peek(0) == 0xbc0;
      assert s1.Peek(8) == 0xa6e;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x342;
      assert s1.Peek(18) == 0x175;
      var s2 := Push2(s1, 0x0ef8);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s716(s3, gas - 1)
  }

  /** Node 716
    * Segment Id for this node is: 225
    * Starting at 0xef8
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s716(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xef8 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 20

    requires s0.stack[0] == 0xbc0

    requires s0.stack[8] == 0xa6e

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x342

    requires s0.stack[18] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0xbc0;
      assert s1.Peek(8) == 0xa6e;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x342;
      assert s1.Peek(18) == 0x175;
      var s2 := Push4(s1, 0x4e487b71);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x32);
      var s8 := Push1(s7, 0x04);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x24);
      var s11 := Push1(s10, 0x00);
      assert s11.Peek(2) == 0xbc0;
      assert s11.Peek(10) == 0xa6e;
      assert s11.Peek(14) == 0x830;
      assert s11.Peek(16) == 0x342;
      assert s11.Peek(20) == 0x175;
      var s12 := Revert(s11);
      // Segment is terminal (Revert, Stop or Return)
      s12
  }

  /** Node 717
    * Segment Id for this node is: 166
    * Starting at 0xbc0
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 4
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s717(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xbc0 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 19

    requires s0.stack[7] == 0xa6e

    requires s0.stack[11] == 0x830

    requires s0.stack[13] == 0x342

    requires s0.stack[17] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(7) == 0xa6e;
      assert s1.Peek(11) == 0x830;
      assert s1.Peek(13) == 0x342;
      assert s1.Peek(17) == 0x175;
      var s2 := Byte(s1);
      var s3 := Push1(s2, 0xf8);
      var s4 := Shl(s3);
      var s5 := Dup3(s4);
      var s6 := Dup3(s5);
      var s7 := Dup2(s6);
      var s8 := MLoad(s7);
      var s9 := Dup2(s8);
      var s10 := Lt(s9);
      var s11 := Push2(s10, 0x0bd6);
      assert s11.Peek(0) == 0xbd6;
      assert s11.Peek(10) == 0xa6e;
      assert s11.Peek(14) == 0x830;
      assert s11.Peek(16) == 0x342;
      assert s11.Peek(20) == 0x175;
      var s12 := JumpI(s11);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s11.stack[1] > 0 then
        ExecuteFromCFGNode_s720(s12, gas - 1)
      else
        ExecuteFromCFGNode_s718(s12, gas - 1)
  }

  /** Node 718
    * Segment Id for this node is: 167
    * Starting at 0xbcf
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s718(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xbcf as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 20

    requires s0.stack[8] == 0xa6e

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x342

    requires s0.stack[18] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0bd6);
      assert s1.Peek(0) == 0xbd6;
      assert s1.Peek(9) == 0xa6e;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x342;
      assert s1.Peek(19) == 0x175;
      var s2 := Push2(s1, 0x0ef8);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s719(s3, gas - 1)
  }

  /** Node 719
    * Segment Id for this node is: 225
    * Starting at 0xef8
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s719(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xef8 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 21

    requires s0.stack[0] == 0xbd6

    requires s0.stack[9] == 0xa6e

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x342

    requires s0.stack[19] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0xbd6;
      assert s1.Peek(9) == 0xa6e;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x342;
      assert s1.Peek(19) == 0x175;
      var s2 := Push4(s1, 0x4e487b71);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x32);
      var s8 := Push1(s7, 0x04);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x24);
      var s11 := Push1(s10, 0x00);
      assert s11.Peek(2) == 0xbd6;
      assert s11.Peek(11) == 0xa6e;
      assert s11.Peek(15) == 0x830;
      assert s11.Peek(17) == 0x342;
      assert s11.Peek(21) == 0x175;
      var s12 := Revert(s11);
      // Segment is terminal (Revert, Stop or Return)
      s12
  }

  /** Node 720
    * Segment Id for this node is: 168
    * Starting at 0xbd6
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 8
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: -1
    * Net Capacity Effect: +1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s720(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xbd6 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 20

    requires s0.stack[8] == 0xa6e

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x342

    requires s0.stack[18] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(8) == 0xa6e;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x342;
      assert s1.Peek(18) == 0x175;
      var s2 := Push1(s1, 0x20);
      var s3 := Add(s2);
      var s4 := Add(s3);
      var s5 := Swap1(s4);
      var s6 := Push1(s5, 0x01);
      var s7 := Push1(s6, 0x01);
      var s8 := Push1(s7, 0xf8);
      var s9 := Shl(s8);
      var s10 := Sub(s9);
      var s11 := Not(s10);
      assert s11.Peek(8) == 0xa6e;
      assert s11.Peek(12) == 0x830;
      assert s11.Peek(14) == 0x342;
      assert s11.Peek(18) == 0x175;
      var s12 := And(s11);
      var s13 := Swap1(s12);
      var s14 := Dup2(s13);
      var s15 := Push1(s14, 0x00);
      var s16 := Byte(s15);
      var s17 := Swap1(s16);
      var s18 := MStore8(s17);
      var s19 := Pop(s18);
      var s20 := Push1(s19, 0x04);
      var s21 := Swap5(s20);
      assert s21.Peek(6) == 0xa6e;
      assert s21.Peek(10) == 0x830;
      assert s21.Peek(12) == 0x342;
      assert s21.Peek(16) == 0x175;
      var s22 := Swap1(s21);
      var s23 := Swap5(s22);
      var s24 := Shr(s23);
      var s25 := Swap4(s24);
      var s26 := Push2(s25, 0x0bfd);
      var s27 := Dup2(s26);
      var s28 := Push2(s27, 0x0f0e);
      var s29 := Jump(s28);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s721(s29, gas - 1)
  }

  /** Node 721
    * Segment Id for this node is: 226
    * Starting at 0xf0e
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s721(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xf0e as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 19

    requires s0.stack[1] == 0xbfd

    requires s0.stack[7] == 0xa6e

    requires s0.stack[11] == 0x830

    requires s0.stack[13] == 0x342

    requires s0.stack[17] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(1) == 0xbfd;
      assert s1.Peek(7) == 0xa6e;
      assert s1.Peek(11) == 0x830;
      assert s1.Peek(13) == 0x342;
      assert s1.Peek(17) == 0x175;
      var s2 := Push1(s1, 0x00);
      var s3 := Dup2(s2);
      var s4 := Push2(s3, 0x0f1d);
      var s5 := JumpI(s4);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s4.stack[1] > 0 then
        ExecuteFromCFGNode_s724(s5, gas - 1)
      else
        ExecuteFromCFGNode_s722(s5, gas - 1)
  }

  /** Node 722
    * Segment Id for this node is: 227
    * Starting at 0xf16
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s722(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xf16 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 20

    requires s0.stack[2] == 0xbfd

    requires s0.stack[8] == 0xa6e

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x342

    requires s0.stack[18] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push2(s0, 0x0f1d);
      assert s1.Peek(0) == 0xf1d;
      assert s1.Peek(3) == 0xbfd;
      assert s1.Peek(9) == 0xa6e;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x342;
      assert s1.Peek(19) == 0x175;
      var s2 := Push2(s1, 0x0d85);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s723(s3, gas - 1)
  }

  /** Node 723
    * Segment Id for this node is: 202
    * Starting at 0xd85
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s723(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xd85 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 21

    requires s0.stack[0] == 0xf1d

    requires s0.stack[3] == 0xbfd

    requires s0.stack[9] == 0xa6e

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x342

    requires s0.stack[19] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(0) == 0xf1d;
      assert s1.Peek(3) == 0xbfd;
      assert s1.Peek(9) == 0xa6e;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x342;
      assert s1.Peek(19) == 0x175;
      var s2 := Push4(s1, 0x4e487b71);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x11);
      var s8 := Push1(s7, 0x04);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x24);
      var s11 := Push1(s10, 0x00);
      assert s11.Peek(2) == 0xf1d;
      assert s11.Peek(5) == 0xbfd;
      assert s11.Peek(11) == 0xa6e;
      assert s11.Peek(15) == 0x830;
      assert s11.Peek(17) == 0x342;
      assert s11.Peek(21) == 0x175;
      var s12 := Revert(s11);
      // Segment is terminal (Revert, Stop or Return)
      s12
  }

  /** Node 724
    * Segment Id for this node is: 228
    * Starting at 0xf1d
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 3
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -2
    * Net Capacity Effect: +2
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s724(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xf1d as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 20

    requires s0.stack[2] == 0xbfd

    requires s0.stack[8] == 0xa6e

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x342

    requires s0.stack[18] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0xbfd;
      assert s1.Peek(8) == 0xa6e;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x342;
      assert s1.Peek(18) == 0x175;
      var s2 := Pop(s1);
      var s3 := Push1(s2, 0x00);
      var s4 := Not(s3);
      var s5 := Add(s4);
      var s6 := Swap1(s5);
      var s7 := Jump(s6);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s725(s7, gas - 1)
  }

  /** Node 725
    * Segment Id for this node is: 169
    * Starting at 0xbfd
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -1
    * Net Capacity Effect: +1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s725(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xbfd as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 18

    requires s0.stack[6] == 0xa6e

    requires s0.stack[10] == 0x830

    requires s0.stack[12] == 0x342

    requires s0.stack[16] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(6) == 0xa6e;
      assert s1.Peek(10) == 0x830;
      assert s1.Peek(12) == 0x342;
      assert s1.Peek(16) == 0x175;
      var s2 := Swap1(s1);
      var s3 := Pop(s2);
      var s4 := Push2(s3, 0x0b8f);
      var s5 := Jump(s4);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s713(s5, gas - 1)
  }

  /** Node 726
    * Segment Id for this node is: 170
    * Starting at 0xc04
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 5
    * Minimum capacity for this segment to prevent stack overflow: 1
    * Net Stack Effect: -1
    * Net Capacity Effect: +1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s726(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xc04 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 17

    requires s0.stack[5] == 0xa6e

    requires s0.stack[9] == 0x830

    requires s0.stack[11] == 0x342

    requires s0.stack[15] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(5) == 0xa6e;
      assert s1.Peek(9) == 0x830;
      assert s1.Peek(11) == 0x342;
      assert s1.Peek(15) == 0x175;
      var s2 := Pop(s1);
      var s3 := Dup4(s2);
      var s4 := IsZero(s3);
      var s5 := Push2(s4, 0x0c53);
      var s6 := JumpI(s5);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s5.stack[1] > 0 then
        ExecuteFromCFGNode_s729(s6, gas - 1)
      else
        ExecuteFromCFGNode_s727(s6, gas - 1)
  }

  /** Node 727
    * Segment Id for this node is: 171
    * Starting at 0xc0c
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s727(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xc0c as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 16

    requires s0.stack[4] == 0xa6e

    requires s0.stack[8] == 0x830

    requires s0.stack[10] == 0x342

    requires s0.stack[14] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push1(s0, 0x40);
      assert s1.Peek(5) == 0xa6e;
      assert s1.Peek(9) == 0x830;
      assert s1.Peek(11) == 0x342;
      assert s1.Peek(15) == 0x175;
      var s2 := MLoad(s1);
      var s3 := Push3(s2, 0x461bcd);
      var s4 := Push1(s3, 0xe5);
      var s5 := Shl(s4);
      var s6 := Dup2(s5);
      var s7 := MStore(s6);
      var s8 := Push1(s7, 0x20);
      var s9 := Push1(s8, 0x04);
      var s10 := Dup3(s9);
      var s11 := Add(s10);
      assert s11.Peek(7) == 0xa6e;
      assert s11.Peek(11) == 0x830;
      assert s11.Peek(13) == 0x342;
      assert s11.Peek(17) == 0x175;
      var s12 := Dup2(s11);
      var s13 := Swap1(s12);
      var s14 := MStore(s13);
      var s15 := Push1(s14, 0x24);
      var s16 := Dup3(s15);
      var s17 := Add(s16);
      var s18 := MStore(s17);
      var s19 := Push32(s18, 0x537472696e67733a20686578206c656e67746820696e73756666696369656e74);
      var s20 := Push1(s19, 0x44);
      var s21 := Dup3(s20);
      assert s21.Peek(8) == 0xa6e;
      assert s21.Peek(12) == 0x830;
      assert s21.Peek(14) == 0x342;
      assert s21.Peek(18) == 0x175;
      var s22 := Add(s21);
      var s23 := MStore(s22);
      var s24 := Push1(s23, 0x64);
      var s25 := Add(s24);
      var s26 := Push2(s25, 0x0391);
      var s27 := Jump(s26);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s728(s27, gas - 1)
  }

  /** Node 728
    * Segment Id for this node is: 85
    * Starting at 0x391
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: -1
    * Net Capacity Effect: +1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s728(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x391 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 17

    requires s0.stack[5] == 0xa6e

    requires s0.stack[9] == 0x830

    requires s0.stack[11] == 0x342

    requires s0.stack[15] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(5) == 0xa6e;
      assert s1.Peek(9) == 0x830;
      assert s1.Peek(11) == 0x342;
      assert s1.Peek(15) == 0x175;
      var s2 := Push1(s1, 0x40);
      var s3 := MLoad(s2);
      var s4 := Dup1(s3);
      var s5 := Swap2(s4);
      var s6 := Sub(s5);
      var s7 := Swap1(s6);
      var s8 := Revert(s7);
      // Segment is terminal (Revert, Stop or Return)
      s8
  }

  /** Node 729
    * Segment Id for this node is: 172
    * Starting at 0xc53
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 5
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -4
    * Net Capacity Effect: +4
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s729(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xc53 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 16

    requires s0.stack[4] == 0xa6e

    requires s0.stack[8] == 0x830

    requires s0.stack[10] == 0x342

    requires s0.stack[14] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(4) == 0xa6e;
      assert s1.Peek(8) == 0x830;
      assert s1.Peek(10) == 0x342;
      assert s1.Peek(14) == 0x175;
      var s2 := Swap4(s1);
      var s3 := Swap3(s2);
      var s4 := Pop(s3);
      var s5 := Pop(s4);
      var s6 := Pop(s5);
      var s7 := Jump(s6);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s730(s7, gas - 1)
  }

  /** Node 730
    * Segment Id for this node is: 147
    * Starting at 0xa6e
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +2
    * Net Capacity Effect: -2
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s730(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xa6e as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 12

    requires s0.stack[4] == 0x830

    requires s0.stack[6] == 0x342

    requires s0.stack[10] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(4) == 0x830;
      assert s1.Peek(6) == 0x342;
      assert s1.Peek(10) == 0x175;
      var s2 := Push1(s1, 0x40);
      var s3 := MLoad(s2);
      var s4 := Push1(s3, 0x20);
      var s5 := Add(s4);
      var s6 := Push2(s5, 0x0a7f);
      var s7 := Swap3(s6);
      var s8 := Swap2(s7);
      var s9 := Swap1(s8);
      var s10 := Push2(s9, 0x0e10);
      var s11 := Jump(s10);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s731(s11, gas - 1)
  }

  /** Node 731
    * Segment Id for this node is: 215
    * Starting at 0xe10
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 3
    * Minimum capacity for this segment to prevent stack overflow: 7
    * Net Stack Effect: +6
    * Net Capacity Effect: -6
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s731(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xe10 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 14

    requires s0.stack[3] == 0xa7f

    requires s0.stack[6] == 0x830

    requires s0.stack[8] == 0x342

    requires s0.stack[12] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0xa7f;
      assert s1.Peek(6) == 0x830;
      assert s1.Peek(8) == 0x342;
      assert s1.Peek(12) == 0x175;
      var s2 := Push32(s1, 0x416363657373436f6e74726f6c3a206163636f756e7420000000000000000000);
      var s3 := Dup2(s2);
      var s4 := MStore(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := Dup4(s5);
      var s7 := MLoad(s6);
      var s8 := Push2(s7, 0x0e48);
      var s9 := Dup2(s8);
      var s10 := Push1(s9, 0x17);
      var s11 := Dup6(s10);
      assert s11.Peek(3) == 0xe48;
      assert s11.Peek(9) == 0xa7f;
      assert s11.Peek(12) == 0x830;
      assert s11.Peek(14) == 0x342;
      assert s11.Peek(18) == 0x175;
      var s12 := Add(s11);
      var s13 := Push1(s12, 0x20);
      var s14 := Dup9(s13);
      var s15 := Add(s14);
      var s16 := Push2(s15, 0x0dae);
      var s17 := Jump(s16);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s732(s17, gas - 1)
  }

  /** Node 732
    * Segment Id for this node is: 205
    * Starting at 0xdae
    * Segment type is: CONT Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 1
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s732(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xdae as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 20

    requires s0.stack[3] == 0xe48

    requires s0.stack[9] == 0xa7f

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x342

    requires s0.stack[18] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0xe48;
      assert s1.Peek(9) == 0xa7f;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x342;
      assert s1.Peek(18) == 0x175;
      var s2 := Push1(s1, 0x00);
      //  Go to the next instruction at pc + 1
      ExecuteFromCFGNode_s733(s2, gas - 1)
  }

  /** Node 733
    * Segment Id for this node is: 206
    * Starting at 0xdb1
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 4
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s733(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xdb1 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 21

    requires s0.stack[4] == 0xe48

    requires s0.stack[10] == 0xa7f

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x342

    requires s0.stack[19] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(4) == 0xe48;
      assert s1.Peek(10) == 0xa7f;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x342;
      assert s1.Peek(19) == 0x175;
      var s2 := Dup4(s1);
      var s3 := Dup2(s2);
      var s4 := Lt(s3);
      var s5 := IsZero(s4);
      var s6 := Push2(s5, 0x0dc9);
      var s7 := JumpI(s6);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s6.stack[1] > 0 then
        ExecuteFromCFGNode_s735(s7, gas - 1)
      else
        ExecuteFromCFGNode_s734(s7, gas - 1)
  }

  /** Node 734
    * Segment Id for this node is: 207
    * Starting at 0xdba
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 3
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s734(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xdba as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 21

    requires s0.stack[4] == 0xe48

    requires s0.stack[10] == 0xa7f

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x342

    requires s0.stack[19] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Dup2(s0);
      assert s1.Peek(5) == 0xe48;
      assert s1.Peek(11) == 0xa7f;
      assert s1.Peek(14) == 0x830;
      assert s1.Peek(16) == 0x342;
      assert s1.Peek(20) == 0x175;
      var s2 := Dup2(s1);
      var s3 := Add(s2);
      var s4 := MLoad(s3);
      var s5 := Dup4(s4);
      var s6 := Dup3(s5);
      var s7 := Add(s6);
      var s8 := MStore(s7);
      var s9 := Push1(s8, 0x20);
      var s10 := Add(s9);
      var s11 := Push2(s10, 0x0db1);
      assert s11.Peek(0) == 0xdb1;
      assert s11.Peek(5) == 0xe48;
      assert s11.Peek(11) == 0xa7f;
      assert s11.Peek(14) == 0x830;
      assert s11.Peek(16) == 0x342;
      assert s11.Peek(20) == 0x175;
      var s12 := Jump(s11);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s733(s12, gas - 1)
  }

  /** Node 735
    * Segment Id for this node is: 208
    * Starting at 0xdc9
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 5
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -5
    * Net Capacity Effect: +5
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s735(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xdc9 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 21

    requires s0.stack[4] == 0xe48

    requires s0.stack[10] == 0xa7f

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x342

    requires s0.stack[19] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(4) == 0xe48;
      assert s1.Peek(10) == 0xa7f;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x342;
      assert s1.Peek(19) == 0x175;
      var s2 := Pop(s1);
      var s3 := Pop(s2);
      var s4 := Push1(s3, 0x00);
      var s5 := Swap2(s4);
      var s6 := Add(s5);
      var s7 := MStore(s6);
      var s8 := Jump(s7);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s736(s8, gas - 1)
  }

  /** Node 736
    * Segment Id for this node is: 216
    * Starting at 0xe48
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 4
    * Minimum capacity for this segment to prevent stack overflow: 6
    * Net Stack Effect: +5
    * Net Capacity Effect: -5
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s736(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xe48 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 16

    requires s0.stack[5] == 0xa7f

    requires s0.stack[8] == 0x830

    requires s0.stack[10] == 0x342

    requires s0.stack[14] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(5) == 0xa7f;
      assert s1.Peek(8) == 0x830;
      assert s1.Peek(10) == 0x342;
      assert s1.Peek(14) == 0x175;
      var s2 := PushN(s1, 17, 0x01034b99036b4b9b9b4b733903937b6329);
      var s3 := Push1(s2, 0x7d);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x17);
      var s6 := Swap2(s5);
      var s7 := Dup5(s6);
      var s8 := Add(s7);
      var s9 := Swap2(s8);
      var s10 := Dup3(s9);
      var s11 := Add(s10);
      assert s11.Peek(7) == 0xa7f;
      assert s11.Peek(10) == 0x830;
      assert s11.Peek(12) == 0x342;
      assert s11.Peek(16) == 0x175;
      var s12 := MStore(s11);
      var s13 := Dup4(s12);
      var s14 := MLoad(s13);
      var s15 := Push2(s14, 0x0e79);
      var s16 := Dup2(s15);
      var s17 := Push1(s16, 0x28);
      var s18 := Dup5(s17);
      var s19 := Add(s18);
      var s20 := Push1(s19, 0x20);
      var s21 := Dup9(s20);
      assert s21.Peek(4) == 0xe79;
      assert s21.Peek(11) == 0xa7f;
      assert s21.Peek(14) == 0x830;
      assert s21.Peek(16) == 0x342;
      assert s21.Peek(20) == 0x175;
      var s22 := Add(s21);
      var s23 := Push2(s22, 0x0dae);
      var s24 := Jump(s23);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s737(s24, gas - 1)
  }

  /** Node 737
    * Segment Id for this node is: 205
    * Starting at 0xdae
    * Segment type is: CONT Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 1
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s737(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xdae as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 21

    requires s0.stack[3] == 0xe79

    requires s0.stack[10] == 0xa7f

    requires s0.stack[13] == 0x830

    requires s0.stack[15] == 0x342

    requires s0.stack[19] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0xe79;
      assert s1.Peek(10) == 0xa7f;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x342;
      assert s1.Peek(19) == 0x175;
      var s2 := Push1(s1, 0x00);
      //  Go to the next instruction at pc + 1
      ExecuteFromCFGNode_s738(s2, gas - 1)
  }

  /** Node 738
    * Segment Id for this node is: 206
    * Starting at 0xdb1
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 4
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s738(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xdb1 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 22

    requires s0.stack[4] == 0xe79

    requires s0.stack[11] == 0xa7f

    requires s0.stack[14] == 0x830

    requires s0.stack[16] == 0x342

    requires s0.stack[20] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(4) == 0xe79;
      assert s1.Peek(11) == 0xa7f;
      assert s1.Peek(14) == 0x830;
      assert s1.Peek(16) == 0x342;
      assert s1.Peek(20) == 0x175;
      var s2 := Dup4(s1);
      var s3 := Dup2(s2);
      var s4 := Lt(s3);
      var s5 := IsZero(s4);
      var s6 := Push2(s5, 0x0dc9);
      var s7 := JumpI(s6);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s6.stack[1] > 0 then
        ExecuteFromCFGNode_s740(s7, gas - 1)
      else
        ExecuteFromCFGNode_s739(s7, gas - 1)
  }

  /** Node 739
    * Segment Id for this node is: 207
    * Starting at 0xdba
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 3
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s739(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xdba as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 22

    requires s0.stack[4] == 0xe79

    requires s0.stack[11] == 0xa7f

    requires s0.stack[14] == 0x830

    requires s0.stack[16] == 0x342

    requires s0.stack[20] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Dup2(s0);
      assert s1.Peek(5) == 0xe79;
      assert s1.Peek(12) == 0xa7f;
      assert s1.Peek(15) == 0x830;
      assert s1.Peek(17) == 0x342;
      assert s1.Peek(21) == 0x175;
      var s2 := Dup2(s1);
      var s3 := Add(s2);
      var s4 := MLoad(s3);
      var s5 := Dup4(s4);
      var s6 := Dup3(s5);
      var s7 := Add(s6);
      var s8 := MStore(s7);
      var s9 := Push1(s8, 0x20);
      var s10 := Add(s9);
      var s11 := Push2(s10, 0x0db1);
      assert s11.Peek(0) == 0xdb1;
      assert s11.Peek(5) == 0xe79;
      assert s11.Peek(12) == 0xa7f;
      assert s11.Peek(15) == 0x830;
      assert s11.Peek(17) == 0x342;
      assert s11.Peek(21) == 0x175;
      var s12 := Jump(s11);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s738(s12, gas - 1)
  }

  /** Node 740
    * Segment Id for this node is: 208
    * Starting at 0xdc9
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 5
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -5
    * Net Capacity Effect: +5
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s740(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xdc9 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 22

    requires s0.stack[4] == 0xe79

    requires s0.stack[11] == 0xa7f

    requires s0.stack[14] == 0x830

    requires s0.stack[16] == 0x342

    requires s0.stack[20] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(4) == 0xe79;
      assert s1.Peek(11) == 0xa7f;
      assert s1.Peek(14) == 0x830;
      assert s1.Peek(16) == 0x342;
      assert s1.Peek(20) == 0x175;
      var s2 := Pop(s1);
      var s3 := Pop(s2);
      var s4 := Push1(s3, 0x00);
      var s5 := Swap2(s4);
      var s6 := Add(s5);
      var s7 := MStore(s6);
      var s8 := Jump(s7);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s741(s8, gas - 1)
  }

  /** Node 741
    * Segment Id for this node is: 217
    * Starting at 0xe79
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 7
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -6
    * Net Capacity Effect: +6
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s741(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xe79 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 17

    requires s0.stack[6] == 0xa7f

    requires s0.stack[9] == 0x830

    requires s0.stack[11] == 0x342

    requires s0.stack[15] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(6) == 0xa7f;
      assert s1.Peek(9) == 0x830;
      assert s1.Peek(11) == 0x342;
      assert s1.Peek(15) == 0x175;
      var s2 := Add(s1);
      var s3 := Push1(s2, 0x28);
      var s4 := Add(s3);
      var s5 := Swap5(s4);
      var s6 := Swap4(s5);
      var s7 := Pop(s6);
      var s8 := Pop(s7);
      var s9 := Pop(s8);
      var s10 := Pop(s9);
      var s11 := Jump(s10);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s742(s11, gas - 1)
  }

  /** Node 742
    * Segment Id for this node is: 148
    * Starting at 0xa7f
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 5
    * Net Stack Effect: +2
    * Net Capacity Effect: -2
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s742(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xa7f as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 11

    requires s0.stack[3] == 0x830

    requires s0.stack[5] == 0x342

    requires s0.stack[9] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0x830;
      assert s1.Peek(5) == 0x342;
      assert s1.Peek(9) == 0x175;
      var s2 := Push1(s1, 0x40);
      var s3 := Dup1(s2);
      var s4 := MLoad(s3);
      var s5 := Push1(s4, 0x1f);
      var s6 := Not(s5);
      var s7 := Dup2(s6);
      var s8 := Dup5(s7);
      var s9 := Sub(s8);
      var s10 := Add(s9);
      var s11 := Dup2(s10);
      assert s11.Peek(7) == 0x830;
      assert s11.Peek(9) == 0x342;
      assert s11.Peek(13) == 0x175;
      var s12 := MStore(s11);
      var s13 := Swap1(s12);
      var s14 := Dup3(s13);
      var s15 := Swap1(s14);
      var s16 := MStore(s15);
      var s17 := Push3(s16, 0x461bcd);
      var s18 := Push1(s17, 0xe5);
      var s19 := Shl(s18);
      var s20 := Dup3(s19);
      var s21 := MStore(s20);
      assert s21.Peek(4) == 0x830;
      assert s21.Peek(6) == 0x342;
      assert s21.Peek(10) == 0x175;
      var s22 := Push2(s21, 0x0391);
      var s23 := Swap2(s22);
      var s24 := Push1(s23, 0x04);
      var s25 := Add(s24);
      var s26 := Push2(s25, 0x0e85);
      var s27 := Jump(s26);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s743(s27, gas - 1)
  }

  /** Node 743
    * Segment Id for this node is: 218
    * Starting at 0xe85
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 7
    * Net Stack Effect: +6
    * Net Capacity Effect: -6
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s743(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xe85 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 13

    requires s0.stack[2] == 0x391

    requires s0.stack[5] == 0x830

    requires s0.stack[7] == 0x342

    requires s0.stack[11] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0x391;
      assert s1.Peek(5) == 0x830;
      assert s1.Peek(7) == 0x342;
      assert s1.Peek(11) == 0x175;
      var s2 := Push1(s1, 0x20);
      var s3 := Dup2(s2);
      var s4 := MStore(s3);
      var s5 := Push1(s4, 0x00);
      var s6 := Dup3(s5);
      var s7 := MLoad(s6);
      var s8 := Dup1(s7);
      var s9 := Push1(s8, 0x20);
      var s10 := Dup5(s9);
      var s11 := Add(s10);
      assert s11.Peek(6) == 0x391;
      assert s11.Peek(9) == 0x830;
      assert s11.Peek(11) == 0x342;
      assert s11.Peek(15) == 0x175;
      var s12 := MStore(s11);
      var s13 := Push2(s12, 0x0ea4);
      var s14 := Dup2(s13);
      var s15 := Push1(s14, 0x40);
      var s16 := Dup6(s15);
      var s17 := Add(s16);
      var s18 := Push1(s17, 0x20);
      var s19 := Dup8(s18);
      var s20 := Add(s19);
      var s21 := Push2(s20, 0x0dae);
      assert s21.Peek(0) == 0xdae;
      assert s21.Peek(4) == 0xea4;
      assert s21.Peek(9) == 0x391;
      assert s21.Peek(12) == 0x830;
      assert s21.Peek(14) == 0x342;
      assert s21.Peek(18) == 0x175;
      var s22 := Jump(s21);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s744(s22, gas - 1)
  }

  /** Node 744
    * Segment Id for this node is: 205
    * Starting at 0xdae
    * Segment type is: CONT Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 1
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s744(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xdae as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 19

    requires s0.stack[3] == 0xea4

    requires s0.stack[8] == 0x391

    requires s0.stack[11] == 0x830

    requires s0.stack[13] == 0x342

    requires s0.stack[17] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0xea4;
      assert s1.Peek(8) == 0x391;
      assert s1.Peek(11) == 0x830;
      assert s1.Peek(13) == 0x342;
      assert s1.Peek(17) == 0x175;
      var s2 := Push1(s1, 0x00);
      //  Go to the next instruction at pc + 1
      ExecuteFromCFGNode_s745(s2, gas - 1)
  }

  /** Node 745
    * Segment Id for this node is: 206
    * Starting at 0xdb1
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 4
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s745(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xdb1 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 20

    requires s0.stack[4] == 0xea4

    requires s0.stack[9] == 0x391

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x342

    requires s0.stack[18] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(4) == 0xea4;
      assert s1.Peek(9) == 0x391;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x342;
      assert s1.Peek(18) == 0x175;
      var s2 := Dup4(s1);
      var s3 := Dup2(s2);
      var s4 := Lt(s3);
      var s5 := IsZero(s4);
      var s6 := Push2(s5, 0x0dc9);
      var s7 := JumpI(s6);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s6.stack[1] > 0 then
        ExecuteFromCFGNode_s747(s7, gas - 1)
      else
        ExecuteFromCFGNode_s746(s7, gas - 1)
  }

  /** Node 746
    * Segment Id for this node is: 207
    * Starting at 0xdba
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 3
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s746(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xdba as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 20

    requires s0.stack[4] == 0xea4

    requires s0.stack[9] == 0x391

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x342

    requires s0.stack[18] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Dup2(s0);
      assert s1.Peek(5) == 0xea4;
      assert s1.Peek(10) == 0x391;
      assert s1.Peek(13) == 0x830;
      assert s1.Peek(15) == 0x342;
      assert s1.Peek(19) == 0x175;
      var s2 := Dup2(s1);
      var s3 := Add(s2);
      var s4 := MLoad(s3);
      var s5 := Dup4(s4);
      var s6 := Dup3(s5);
      var s7 := Add(s6);
      var s8 := MStore(s7);
      var s9 := Push1(s8, 0x20);
      var s10 := Add(s9);
      var s11 := Push2(s10, 0x0db1);
      assert s11.Peek(0) == 0xdb1;
      assert s11.Peek(5) == 0xea4;
      assert s11.Peek(10) == 0x391;
      assert s11.Peek(13) == 0x830;
      assert s11.Peek(15) == 0x342;
      assert s11.Peek(19) == 0x175;
      var s12 := Jump(s11);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s745(s12, gas - 1)
  }

  /** Node 747
    * Segment Id for this node is: 208
    * Starting at 0xdc9
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 5
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -5
    * Net Capacity Effect: +5
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s747(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xdc9 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 20

    requires s0.stack[4] == 0xea4

    requires s0.stack[9] == 0x391

    requires s0.stack[12] == 0x830

    requires s0.stack[14] == 0x342

    requires s0.stack[18] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(4) == 0xea4;
      assert s1.Peek(9) == 0x391;
      assert s1.Peek(12) == 0x830;
      assert s1.Peek(14) == 0x342;
      assert s1.Peek(18) == 0x175;
      var s2 := Pop(s1);
      var s3 := Pop(s2);
      var s4 := Push1(s3, 0x00);
      var s5 := Swap2(s4);
      var s6 := Add(s5);
      var s7 := MStore(s6);
      var s8 := Jump(s7);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s748(s8, gas - 1)
  }

  /** Node 748
    * Segment Id for this node is: 219
    * Starting at 0xea4
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 5
    * Minimum capacity for this segment to prevent stack overflow: 1
    * Net Stack Effect: -4
    * Net Capacity Effect: +4
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s748(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xea4 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 15

    requires s0.stack[4] == 0x391

    requires s0.stack[7] == 0x830

    requires s0.stack[9] == 0x342

    requires s0.stack[13] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(4) == 0x391;
      assert s1.Peek(7) == 0x830;
      assert s1.Peek(9) == 0x342;
      assert s1.Peek(13) == 0x175;
      var s2 := Push1(s1, 0x1f);
      var s3 := Add(s2);
      var s4 := Push1(s3, 0x1f);
      var s5 := Not(s4);
      var s6 := And(s5);
      var s7 := Swap2(s6);
      var s8 := Swap1(s7);
      var s9 := Swap2(s8);
      var s10 := Add(s9);
      var s11 := Push1(s10, 0x40);
      assert s11.Peek(4) == 0x391;
      assert s11.Peek(7) == 0x830;
      assert s11.Peek(9) == 0x342;
      assert s11.Peek(13) == 0x175;
      var s12 := Add(s11);
      var s13 := Swap3(s12);
      var s14 := Swap2(s13);
      var s15 := Pop(s14);
      var s16 := Pop(s15);
      var s17 := Jump(s16);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s749(s17, gas - 1)
  }

  /** Node 749
    * Segment Id for this node is: 85
    * Starting at 0x391
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: -1
    * Net Capacity Effect: +1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s749(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x391 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 11

    requires s0.stack[3] == 0x830

    requires s0.stack[5] == 0x342

    requires s0.stack[9] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0x830;
      assert s1.Peek(5) == 0x342;
      assert s1.Peek(9) == 0x175;
      var s2 := Push1(s1, 0x40);
      var s3 := MLoad(s2);
      var s4 := Dup1(s3);
      var s5 := Swap2(s4);
      var s6 := Sub(s5);
      var s7 := Swap1(s6);
      var s8 := Revert(s7);
      // Segment is terminal (Revert, Stop or Return)
      s8
  }

  /** Node 750
    * Segment Id for this node is: 103
    * Starting at 0x5af
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 3
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -3
    * Net Capacity Effect: +3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s750(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x5af as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 10

    requires s0.stack[2] == 0x830

    requires s0.stack[4] == 0x342

    requires s0.stack[8] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0x830;
      assert s1.Peek(4) == 0x342;
      assert s1.Peek(8) == 0x175;
      var s2 := Pop(s1);
      var s3 := Pop(s2);
      var s4 := Jump(s3);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s751(s4, gas - 1)
  }

  /** Node 751
    * Segment Id for this node is: 123
    * Starting at 0x830
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -2
    * Net Capacity Effect: +2
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s751(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x830 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 7

    requires s0.stack[1] == 0x342

    requires s0.stack[5] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(1) == 0x342;
      assert s1.Peek(5) == 0x175;
      var s2 := Pop(s1);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s752(s3, gas - 1)
  }

  /** Node 752
    * Segment Id for this node is: 81
    * Starting at 0x342
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 3
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +3
    * Net Capacity Effect: -3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s752(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x342 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 5

    requires s0.stack[3] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0x175;
      var s2 := Push2(s1, 0x034c);
      var s3 := Dup4(s2);
      var s4 := Dup4(s3);
      var s5 := Push2(s4, 0x0833);
      var s6 := Jump(s5);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s753(s6, gas - 1)
  }

  /** Node 753
    * Segment Id for this node is: 124
    * Starting at 0x833
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +3
    * Net Capacity Effect: -3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s753(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x833 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 8

    requires s0.stack[2] == 0x34c

    requires s0.stack[6] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0x34c;
      assert s1.Peek(6) == 0x175;
      var s2 := Push2(s1, 0x083d);
      var s3 := Dup3(s2);
      var s4 := Dup3(s3);
      var s5 := Push2(s4, 0x0708);
      var s6 := Jump(s5);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s754(s6, gas - 1)
  }

  /** Node 754
    * Segment Id for this node is: 114
    * Starting at 0x708
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 3
    * Minimum capacity for this segment to prevent stack overflow: 6
    * Net Stack Effect: -2
    * Net Capacity Effect: +2
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s754(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x708 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 11

    requires s0.stack[2] == 0x83d

    requires s0.stack[5] == 0x34c

    requires s0.stack[9] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0x83d;
      assert s1.Peek(5) == 0x34c;
      assert s1.Peek(9) == 0x175;
      var s2 := Push1(s1, 0x00);
      var s3 := Swap2(s2);
      var s4 := Dup3(s3);
      var s5 := MStore(s4);
      var s6 := Push1(s5, 0x20);
      var s7 := Dup3(s6);
      var s8 := Dup2(s7);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x40);
      var s11 := Dup1(s10);
      assert s11.Peek(5) == 0x83d;
      assert s11.Peek(8) == 0x34c;
      assert s11.Peek(12) == 0x175;
      var s12 := Dup5(s11);
      var s13 := Keccak256(s12);
      var s14 := Push1(s13, 0x01);
      var s15 := Push1(s14, 0x01);
      var s16 := Push1(s15, 0xa0);
      var s17 := Shl(s16);
      var s18 := Sub(s17);
      var s19 := Swap4(s18);
      var s20 := Swap1(s19);
      var s21 := Swap4(s20);
      assert s21.Peek(6) == 0x83d;
      assert s21.Peek(9) == 0x34c;
      assert s21.Peek(13) == 0x175;
      var s22 := And(s21);
      var s23 := Dup5(s22);
      var s24 := MStore(s23);
      var s25 := Swap2(s24);
      var s26 := Swap1(s25);
      var s27 := MStore(s26);
      var s28 := Swap1(s27);
      var s29 := Keccak256(s28);
      var s30 := SLoad(s29);
      var s31 := Push1(s30, 0xff);
      assert s31.Peek(2) == 0x83d;
      assert s31.Peek(5) == 0x34c;
      assert s31.Peek(9) == 0x175;
      var s32 := And(s31);
      var s33 := Swap1(s32);
      var s34 := Jump(s33);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s755(s34, gas - 1)
  }

  /** Node 755
    * Segment Id for this node is: 125
    * Starting at 0x83d
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 1
    * Net Stack Effect: -1
    * Net Capacity Effect: +1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s755(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x83d as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 9

    requires s0.stack[3] == 0x34c

    requires s0.stack[7] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0x34c;
      assert s1.Peek(7) == 0x175;
      var s2 := Push2(s1, 0x05af);
      var s3 := JumpI(s2);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s2.stack[1] > 0 then
        ExecuteFromCFGNode_s325(s3, gas - 1)
      else
        ExecuteFromCFGNode_s756(s3, gas - 1)
  }

  /** Node 756
    * Segment Id for this node is: 126
    * Starting at 0x842
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 7
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s756(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x842 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 8

    requires s0.stack[2] == 0x34c

    requires s0.stack[6] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push1(s0, 0x00);
      assert s1.Peek(3) == 0x34c;
      assert s1.Peek(7) == 0x175;
      var s2 := Dup3(s1);
      var s3 := Dup2(s2);
      var s4 := MStore(s3);
      var s5 := Push1(s4, 0x20);
      var s6 := Dup2(s5);
      var s7 := Dup2(s6);
      var s8 := MStore(s7);
      var s9 := Push1(s8, 0x40);
      var s10 := Dup1(s9);
      var s11 := Dup4(s10);
      assert s11.Peek(7) == 0x34c;
      assert s11.Peek(11) == 0x175;
      var s12 := Keccak256(s11);
      var s13 := Push1(s12, 0x01);
      var s14 := Push1(s13, 0x01);
      var s15 := Push1(s14, 0xa0);
      var s16 := Shl(s15);
      var s17 := Sub(s16);
      var s18 := Dup6(s17);
      var s19 := And(s18);
      var s20 := Dup5(s19);
      var s21 := MStore(s20);
      assert s21.Peek(6) == 0x34c;
      assert s21.Peek(10) == 0x175;
      var s22 := Swap1(s21);
      var s23 := Swap2(s22);
      var s24 := MStore(s23);
      var s25 := Swap1(s24);
      var s26 := Keccak256(s25);
      var s27 := Dup1(s26);
      var s28 := SLoad(s27);
      var s29 := Push1(s28, 0xff);
      var s30 := Not(s29);
      var s31 := And(s30);
      assert s31.Peek(4) == 0x34c;
      assert s31.Peek(8) == 0x175;
      var s32 := Push1(s31, 0x01);
      var s33 := Or(s32);
      var s34 := Swap1(s33);
      var s35 := SStore(s34);
      var s36 := Push2(s35, 0x0873);
      var s37 := Caller(s36);
      var s38 := Swap1(s37);
      var s39 := Jump(s38);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s757(s39, gas - 1)
  }

  /** Node 757
    * Segment Id for this node is: 127
    * Starting at 0x873
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 4
    * Minimum capacity for this segment to prevent stack overflow: 6
    * Net Stack Effect: -4
    * Net Capacity Effect: +4
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s757(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x873 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 9

    requires s0.stack[3] == 0x34c

    requires s0.stack[7] == 0x175

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0x34c;
      assert s1.Peek(7) == 0x175;
      var s2 := Push1(s1, 0x01);
      var s3 := Push1(s2, 0x01);
      var s4 := Push1(s3, 0xa0);
      var s5 := Shl(s4);
      var s6 := Sub(s5);
      var s7 := And(s6);
      var s8 := Dup2(s7);
      var s9 := Push1(s8, 0x01);
      var s10 := Push1(s9, 0x01);
      var s11 := Push1(s10, 0xa0);
      assert s11.Peek(7) == 0x34c;
      assert s11.Peek(11) == 0x175;
      var s12 := Shl(s11);
      var s13 := Sub(s12);
      var s14 := And(s13);
      var s15 := Dup4(s14);
      var s16 := Push32(s15, 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d);
      var s17 := Push1(s16, 0x40);
      var s18 := MLoad(s17);
      var s19 := Push1(s18, 0x40);
      var s20 := MLoad(s19);
      var s21 := Dup1(s20);
      assert s21.Peek(9) == 0x34c;
      assert s21.Peek(13) == 0x175;
      var s22 := Swap2(s21);
      var s23 := Sub(s22);
      var s24 := Swap1(s23);
      var s25 := Log4(s24);
      var s26 := Pop(s25);
      var s27 := Pop(s26);
      var s28 := Jump(s27);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s324(s28, gas - 1)
  }

  /** Node 758
    * Segment Id for this node is: 28
    * Starting at 0x117
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s758(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x117 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 1

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      var s2 := CallValue(s1);
      var s3 := Dup1(s2);
      var s4 := IsZero(s3);
      var s5 := Push2(s4, 0x0123);
      var s6 := JumpI(s5);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s5.stack[1] > 0 then
        ExecuteFromCFGNode_s760(s6, gas - 1)
      else
        ExecuteFromCFGNode_s759(s6, gas - 1)
  }

  /** Node 759
    * Segment Id for this node is: 29
    * Starting at 0x11f
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s759(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x11f as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 2

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push1(s0, 0x00);
      var s2 := Dup1(s1);
      var s3 := Revert(s2);
      // Segment is terminal (Revert, Stop or Return)
      s3
  }

  /** Node 760
    * Segment Id for this node is: 30
    * Starting at 0x123
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +3
    * Net Capacity Effect: -3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s760(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x123 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 2

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      var s2 := Pop(s1);
      var s3 := Push2(s2, 0x0147);
      var s4 := Push2(s3, 0x0132);
      var s5 := CallDataSize(s4);
      var s6 := Push1(s5, 0x04);
      var s7 := Push2(s6, 0x0c84);
      var s8 := Jump(s7);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s761(s8, gas - 1)
  }

  /** Node 761
    * Segment Id for this node is: 177
    * Starting at 0xc84
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s761(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xc84 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 5

    requires s0.stack[2] == 0x132

    requires s0.stack[3] == 0x147

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0x132;
      assert s1.Peek(3) == 0x147;
      var s2 := Push1(s1, 0x00);
      var s3 := Push1(s2, 0x20);
      var s4 := Dup3(s3);
      var s5 := Dup5(s4);
      var s6 := Sub(s5);
      var s7 := SLt(s6);
      var s8 := IsZero(s7);
      var s9 := Push2(s8, 0x0c96);
      var s10 := JumpI(s9);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s9.stack[1] > 0 then
        ExecuteFromCFGNode_s763(s10, gas - 1)
      else
        ExecuteFromCFGNode_s762(s10, gas - 1)
  }

  /** Node 762
    * Segment Id for this node is: 178
    * Starting at 0xc92
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s762(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xc92 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 6

    requires s0.stack[3] == 0x132

    requires s0.stack[4] == 0x147

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push1(s0, 0x00);
      assert s1.Peek(4) == 0x132;
      assert s1.Peek(5) == 0x147;
      var s2 := Dup1(s1);
      var s3 := Revert(s2);
      // Segment is terminal (Revert, Stop or Return)
      s3
  }

  /** Node 763
    * Segment Id for this node is: 179
    * Starting at 0xc96
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 4
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -3
    * Net Capacity Effect: +3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s763(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xc96 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 6

    requires s0.stack[3] == 0x132

    requires s0.stack[4] == 0x147

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0x132;
      assert s1.Peek(4) == 0x147;
      var s2 := Pop(s1);
      var s3 := CallDataLoad(s2);
      var s4 := Swap2(s3);
      var s5 := Swap1(s4);
      var s6 := Pop(s5);
      var s7 := Jump(s6);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s764(s7, gas - 1)
  }

  /** Node 764
    * Segment Id for this node is: 31
    * Starting at 0x132
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: -1
    * Net Capacity Effect: +1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s764(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x132 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 3

    requires s0.stack[1] == 0x147

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(1) == 0x147;
      var s2 := Push1(s1, 0x00);
      var s3 := Swap1(s2);
      var s4 := Dup2(s3);
      var s5 := MStore(s4);
      var s6 := Push1(s5, 0x20);
      var s7 := Dup2(s6);
      var s8 := Swap1(s7);
      var s9 := MStore(s8);
      var s10 := Push1(s9, 0x40);
      var s11 := Swap1(s10);
      assert s11.Peek(2) == 0x147;
      var s12 := Keccak256(s11);
      var s13 := Push1(s12, 0x01);
      var s14 := Add(s13);
      var s15 := SLoad(s14);
      var s16 := Swap1(s15);
      var s17 := Jump(s16);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s765(s17, gas - 1)
  }

  /** Node 765
    * Segment Id for this node is: 32
    * Starting at 0x147
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s765(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x147 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 2

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      var s2 := Push1(s1, 0x40);
      var s3 := MLoad(s2);
      var s4 := Swap1(s3);
      var s5 := Dup2(s4);
      var s6 := MStore(s5);
      var s7 := Push1(s6, 0x20);
      var s8 := Add(s7);
      var s9 := Push2(s8, 0x010e);
      var s10 := Jump(s9);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s348(s10, gas - 1)
  }

  /** Node 766
    * Segment Id for this node is: 22
    * Starting at 0xe2
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s766(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xe2 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 1

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      var s2 := CallValue(s1);
      var s3 := Dup1(s2);
      var s4 := IsZero(s3);
      var s5 := Push2(s4, 0x00ee);
      var s6 := JumpI(s5);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s5.stack[1] > 0 then
        ExecuteFromCFGNode_s768(s6, gas - 1)
      else
        ExecuteFromCFGNode_s767(s6, gas - 1)
  }

  /** Node 767
    * Segment Id for this node is: 23
    * Starting at 0xea
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s767(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xea as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 2

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push1(s0, 0x00);
      var s2 := Dup1(s1);
      var s3 := Revert(s2);
      // Segment is terminal (Revert, Stop or Return)
      s3
  }

  /** Node 768
    * Segment Id for this node is: 24
    * Starting at 0xee
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +3
    * Net Capacity Effect: -3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s768(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xee as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 2

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      var s2 := Pop(s1);
      var s3 := Push2(s2, 0x0102);
      var s4 := Push2(s3, 0x00fd);
      var s5 := CallDataSize(s4);
      var s6 := Push1(s5, 0x04);
      var s7 := Push2(s6, 0x0c5a);
      var s8 := Jump(s7);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s769(s8, gas - 1)
  }

  /** Node 769
    * Segment Id for this node is: 173
    * Starting at 0xc5a
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s769(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xc5a as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 5

    requires s0.stack[2] == 0xfd

    requires s0.stack[3] == 0x102

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(2) == 0xfd;
      assert s1.Peek(3) == 0x102;
      var s2 := Push1(s1, 0x00);
      var s3 := Push1(s2, 0x20);
      var s4 := Dup3(s3);
      var s5 := Dup5(s4);
      var s6 := Sub(s5);
      var s7 := SLt(s6);
      var s8 := IsZero(s7);
      var s9 := Push2(s8, 0x0c6c);
      var s10 := JumpI(s9);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s9.stack[1] > 0 then
        ExecuteFromCFGNode_s771(s10, gas - 1)
      else
        ExecuteFromCFGNode_s770(s10, gas - 1)
  }

  /** Node 770
    * Segment Id for this node is: 174
    * Starting at 0xc68
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s770(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xc68 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 6

    requires s0.stack[3] == 0xfd

    requires s0.stack[4] == 0x102

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push1(s0, 0x00);
      assert s1.Peek(4) == 0xfd;
      assert s1.Peek(5) == 0x102;
      var s2 := Dup1(s1);
      var s3 := Revert(s2);
      // Segment is terminal (Revert, Stop or Return)
      s3
  }

  /** Node 771
    * Segment Id for this node is: 175
    * Starting at 0xc6c
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 2
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +1
    * Net Capacity Effect: -1
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s771(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xc6c as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 6

    requires s0.stack[3] == 0xfd

    requires s0.stack[4] == 0x102

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0xfd;
      assert s1.Peek(4) == 0x102;
      var s2 := Dup2(s1);
      var s3 := CallDataLoad(s2);
      var s4 := Push1(s3, 0x01);
      var s5 := Push1(s4, 0x01);
      var s6 := Push1(s5, 0xe0);
      var s7 := Shl(s6);
      var s8 := Sub(s7);
      var s9 := Not(s8);
      var s10 := Dup2(s9);
      var s11 := And(s10);
      assert s11.Peek(5) == 0xfd;
      assert s11.Peek(6) == 0x102;
      var s12 := Dup2(s11);
      var s13 := Eq(s12);
      var s14 := Push2(s13, 0x0c53);
      var s15 := JumpI(s14);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s14.stack[1] > 0 then
        ExecuteFromCFGNode_s773(s15, gas - 1)
      else
        ExecuteFromCFGNode_s772(s15, gas - 1)
  }

  /** Node 772
    * Segment Id for this node is: 176
    * Starting at 0xc80
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s772(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xc80 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 7

    requires s0.stack[4] == 0xfd

    requires s0.stack[5] == 0x102

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Push1(s0, 0x00);
      assert s1.Peek(5) == 0xfd;
      assert s1.Peek(6) == 0x102;
      var s2 := Dup1(s1);
      var s3 := Revert(s2);
      // Segment is terminal (Revert, Stop or Return)
      s3
  }

  /** Node 773
    * Segment Id for this node is: 172
    * Starting at 0xc53
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 5
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -4
    * Net Capacity Effect: +4
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s773(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xc53 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 7

    requires s0.stack[4] == 0xfd

    requires s0.stack[5] == 0x102

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(4) == 0xfd;
      assert s1.Peek(5) == 0x102;
      var s2 := Swap4(s1);
      var s3 := Swap3(s2);
      var s4 := Pop(s3);
      var s5 := Pop(s4);
      var s6 := Pop(s5);
      var s7 := Jump(s6);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s774(s7, gas - 1)
  }

  /** Node 774
    * Segment Id for this node is: 25
    * Starting at 0xfd
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 1
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s774(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xfd as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 3

    requires s0.stack[1] == 0x102

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(1) == 0x102;
      var s2 := Push2(s1, 0x02f0);
      var s3 := Jump(s2);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s775(s3, gas - 1)
  }

  /** Node 775
    * Segment Id for this node is: 77
    * Starting at 0x2f0
    * Segment type is: JUMPI Segment
    * Minimum stack size for this segment to prevent stack underflow: 1
    * Minimum capacity for this segment to prevent stack overflow: 4
    * Net Stack Effect: +2
    * Net Capacity Effect: -2
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s775(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x2f0 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 3

    requires s0.stack[1] == 0x102

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(1) == 0x102;
      var s2 := Push1(s1, 0x00);
      var s3 := Push1(s2, 0x01);
      var s4 := Push1(s3, 0x01);
      var s5 := Push1(s4, 0xe0);
      var s6 := Shl(s5);
      var s7 := Sub(s6);
      var s8 := Not(s7);
      var s9 := Dup3(s8);
      var s10 := And(s9);
      var s11 := Push4(s10, 0x7965db0b);
      assert s11.Peek(4) == 0x102;
      var s12 := Push1(s11, 0xe0);
      var s13 := Shl(s12);
      var s14 := Eq(s13);
      var s15 := Dup1(s14);
      var s16 := Push2(s15, 0x0321);
      var s17 := JumpI(s16);
      // This is a JUMPI segment, determine next pc using second top-most element of stack
      if s16.stack[1] > 0 then
        ExecuteFromCFGNode_s777(s17, gas - 1)
      else
        ExecuteFromCFGNode_s776(s17, gas - 1)
  }

  /** Node 776
    * Segment Id for this node is: 78
    * Starting at 0x30c
    * Segment type is: CONT Segment
    * Minimum stack size for this segment to prevent stack underflow: 3
    * Minimum capacity for this segment to prevent stack overflow: 3
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s776(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x30c as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 5

    requires s0.stack[3] == 0x102

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := Pop(s0);
      assert s1.Peek(2) == 0x102;
      var s2 := Push4(s1, 0x01ffc9a7);
      var s3 := Push1(s2, 0xe0);
      var s4 := Shl(s3);
      var s5 := Push1(s4, 0x01);
      var s6 := Push1(s5, 0x01);
      var s7 := Push1(s6, 0xe0);
      var s8 := Shl(s7);
      var s9 := Sub(s8);
      var s10 := Not(s9);
      var s11 := Dup4(s10);
      assert s11.Peek(5) == 0x102;
      var s12 := And(s11);
      var s13 := Eq(s12);
      //  Go to the next instruction at pc + 1
      ExecuteFromCFGNode_s777(s13, gas - 1)
  }

  /** Node 777
    * Segment Id for this node is: 79
    * Starting at 0x321
    * Segment type is: JUMP Segment
    * Minimum stack size for this segment to prevent stack underflow: 4
    * Minimum capacity for this segment to prevent stack overflow: 0
    * Net Stack Effect: -3
    * Net Capacity Effect: +3
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s777(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0x321 as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 5

    requires s0.stack[3] == 0x102

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      assert s1.Peek(3) == 0x102;
      var s2 := Swap3(s1);
      var s3 := Swap2(s2);
      var s4 := Pop(s3);
      var s5 := Pop(s4);
      var s6 := Jump(s5);
      //  JUMP to the target at Peek(0)
      ExecuteFromCFGNode_s347(s6, gas - 1)
  }

  /** Node 778
    * Segment Id for this node is: 21
    * Starting at 0xdd
    * Segment type is: STOP Segment
    * Minimum stack size for this segment to prevent stack underflow: 0
    * Minimum capacity for this segment to prevent stack overflow: 2
    * Net Stack Effect: +0
    * Net Capacity Effect: +0
    */
  function {:opaque} {:verify true} ExecuteFromCFGNode_s778(s0: EState, gas: nat): (s': EState)
    // PC requirement for this node.
    requires s0.pc == 0xdd as nat
    // Stack requirements for this node.
    requires s0.Operands() >= 0

    decreases gas
  {
    if gas == 0 then s0
    else
      var s1 := JumpDest(s0);
      var s2 := Push1(s1, 0x00);
      var s3 := Dup1(s2);
      var s4 := Revert(s3);
      // Segment is terminal (Revert, Stop or Return)
      s4
  }
}
